#include <hxcpp.h>

#ifndef INCLUDED_hxMath
#include <hxMath.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_nape_Config
#include <nape/Config.h>
#endif
#ifndef INCLUDED_nape_callbacks_BodyCallback
#include <nape/callbacks/BodyCallback.h>
#endif
#ifndef INCLUDED_nape_callbacks_Callback
#include <nape/callbacks/Callback.h>
#endif
#ifndef INCLUDED_nape_callbacks_ConstraintCallback
#include <nape/callbacks/ConstraintCallback.h>
#endif
#ifndef INCLUDED_nape_callbacks_InteractionCallback
#include <nape/callbacks/InteractionCallback.h>
#endif
#ifndef INCLUDED_nape_callbacks_Listener
#include <nape/callbacks/Listener.h>
#endif
#ifndef INCLUDED_nape_callbacks_ListenerList
#include <nape/callbacks/ListenerList.h>
#endif
#ifndef INCLUDED_nape_callbacks_PreCallback
#include <nape/callbacks/PreCallback.h>
#endif
#ifndef INCLUDED_nape_callbacks_PreFlag
#include <nape/callbacks/PreFlag.h>
#endif
#ifndef INCLUDED_nape_constraint_Constraint
#include <nape/constraint/Constraint.h>
#endif
#ifndef INCLUDED_nape_constraint_ConstraintList
#include <nape/constraint/ConstraintList.h>
#endif
#ifndef INCLUDED_nape_dynamics_ArbiterList
#include <nape/dynamics/ArbiterList.h>
#endif
#ifndef INCLUDED_nape_dynamics_ContactList
#include <nape/dynamics/ContactList.h>
#endif
#ifndef INCLUDED_nape_dynamics_InteractionFilter
#include <nape/dynamics/InteractionFilter.h>
#endif
#ifndef INCLUDED_nape_geom_AABB
#include <nape/geom/AABB.h>
#endif
#ifndef INCLUDED_nape_geom_ConvexResult
#include <nape/geom/ConvexResult.h>
#endif
#ifndef INCLUDED_nape_geom_ConvexResultList
#include <nape/geom/ConvexResultList.h>
#endif
#ifndef INCLUDED_nape_geom_Ray
#include <nape/geom/Ray.h>
#endif
#ifndef INCLUDED_nape_geom_RayResult
#include <nape/geom/RayResult.h>
#endif
#ifndef INCLUDED_nape_geom_RayResultList
#include <nape/geom/RayResultList.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_phys_Body
#include <nape/phys/Body.h>
#endif
#ifndef INCLUDED_nape_phys_BodyList
#include <nape/phys/BodyList.h>
#endif
#ifndef INCLUDED_nape_phys_Compound
#include <nape/phys/Compound.h>
#endif
#ifndef INCLUDED_nape_phys_CompoundList
#include <nape/phys/CompoundList.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_nape_shape_Shape
#include <nape/shape/Shape.h>
#endif
#ifndef INCLUDED_nape_shape_ShapeIterator
#include <nape/shape/ShapeIterator.h>
#endif
#ifndef INCLUDED_nape_shape_ShapeList
#include <nape/shape/ShapeList.h>
#endif
#ifndef INCLUDED_nape_shape_ValidationResult
#include <nape/shape/ValidationResult.h>
#endif
#ifndef INCLUDED_nape_space_Broadphase
#include <nape/space/Broadphase.h>
#endif
#ifndef INCLUDED_nape_space_Space
#include <nape/space/Space.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_BodyListener
#include <zpp_nape/callbacks/ZPP_BodyListener.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_Callback
#include <zpp_nape/callbacks/ZPP_Callback.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_CbSet
#include <zpp_nape/callbacks/ZPP_CbSet.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_CbSetPair
#include <zpp_nape/callbacks/ZPP_CbSetPair.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_ConstraintListener
#include <zpp_nape/callbacks/ZPP_ConstraintListener.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_InteractionListener
#include <zpp_nape/callbacks/ZPP_InteractionListener.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_Listener
#include <zpp_nape/callbacks/ZPP_Listener.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_OptionType
#include <zpp_nape/callbacks/ZPP_OptionType.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_Constraint
#include <zpp_nape/constraint/ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_Arbiter
#include <zpp_nape/dynamics/ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_ColArbiter
#include <zpp_nape/dynamics/ZPP_ColArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_Contact
#include <zpp_nape/dynamics/ZPP_Contact.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_FluidArbiter
#include <zpp_nape/dynamics/ZPP_FluidArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_IContact
#include <zpp_nape/dynamics/ZPP_IContact.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_InteractionFilter
#include <zpp_nape/dynamics/ZPP_InteractionFilter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_InteractionGroup
#include <zpp_nape/dynamics/ZPP_InteractionGroup.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_SensorArbiter
#include <zpp_nape/dynamics/ZPP_SensorArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_AABB
#include <zpp_nape/geom/ZPP_AABB.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Collide
#include <zpp_nape/geom/ZPP_Collide.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_ConvexRayResult
#include <zpp_nape/geom/ZPP_ConvexRayResult.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Ray
#include <zpp_nape/geom/ZPP_Ray.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_SweepDistance
#include <zpp_nape/geom/ZPP_SweepDistance.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_ToiEvent
#include <zpp_nape/geom/ZPP_ToiEvent.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Compound
#include <zpp_nape/phys/ZPP_Compound.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_FluidProperties
#include <zpp_nape/phys/ZPP_FluidProperties.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Material
#include <zpp_nape/phys/ZPP_Material.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Circle
#include <zpp_nape/shape/ZPP_Circle.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Edge
#include <zpp_nape/shape/ZPP_Edge.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Polygon
#include <zpp_nape/shape/ZPP_Polygon.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Shape
#include <zpp_nape/shape/ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_AABBNode
#include <zpp_nape/space/ZPP_AABBNode.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_AABBPair
#include <zpp_nape/space/ZPP_AABBPair.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Broadphase
#include <zpp_nape/space/ZPP_Broadphase.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_CallbackSet
#include <zpp_nape/space/ZPP_CallbackSet.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_CbSetManager
#include <zpp_nape/space/ZPP_CbSetManager.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Component
#include <zpp_nape/space/ZPP_Component.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_DynAABBPhase
#include <zpp_nape/space/ZPP_DynAABBPhase.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Island
#include <zpp_nape/space/ZPP_Island.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Space
#include <zpp_nape/space/ZPP_Space.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_SweepPhase
#include <zpp_nape/space/ZPP_SweepPhase.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ConvexResult
#include <zpp_nape/util/ZNPList_ConvexResult.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Arbiter
#include <zpp_nape/util/ZNPList_ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Body
#include <zpp_nape/util/ZNPList_ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_BodyListener
#include <zpp_nape/util/ZNPList_ZPP_BodyListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_CallbackSet
#include <zpp_nape/util/ZNPList_ZPP_CallbackSet.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_CbSetPair
#include <zpp_nape/util/ZNPList_ZPP_CbSetPair.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_CbType
#include <zpp_nape/util/ZNPList_ZPP_CbType.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_ColArbiter
#include <zpp_nape/util/ZNPList_ZPP_ColArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Component
#include <zpp_nape/util/ZNPList_ZPP_Component.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Compound
#include <zpp_nape/util/ZNPList_ZPP_Compound.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Constraint
#include <zpp_nape/util/ZNPList_ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_ConstraintListener
#include <zpp_nape/util/ZNPList_ZPP_ConstraintListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Edge
#include <zpp_nape/util/ZNPList_ZPP_Edge.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_FluidArbiter
#include <zpp_nape/util/ZNPList_ZPP_FluidArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_InteractionListener
#include <zpp_nape/util/ZNPList_ZPP_InteractionListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Interactor
#include <zpp_nape/util/ZNPList_ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Listener
#include <zpp_nape/util/ZNPList_ZPP_Listener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_SensorArbiter
#include <zpp_nape/util/ZNPList_ZPP_SensorArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Shape
#include <zpp_nape/util/ZNPList_ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_ToiEvent
#include <zpp_nape/util/ZNPList_ZPP_ToiEvent.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ConvexResult
#include <zpp_nape/util/ZNPNode_ConvexResult.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Arbiter
#include <zpp_nape/util/ZNPNode_ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Body
#include <zpp_nape/util/ZNPNode_ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_BodyListener
#include <zpp_nape/util/ZNPNode_ZPP_BodyListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_CallbackSet
#include <zpp_nape/util/ZNPNode_ZPP_CallbackSet.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_CbSetPair
#include <zpp_nape/util/ZNPNode_ZPP_CbSetPair.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_ColArbiter
#include <zpp_nape/util/ZNPNode_ZPP_ColArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Component
#include <zpp_nape/util/ZNPNode_ZPP_Component.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Compound
#include <zpp_nape/util/ZNPNode_ZPP_Compound.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Constraint
#include <zpp_nape/util/ZNPNode_ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_ConstraintListener
#include <zpp_nape/util/ZNPNode_ZPP_ConstraintListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Edge
#include <zpp_nape/util/ZNPNode_ZPP_Edge.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_FluidArbiter
#include <zpp_nape/util/ZNPNode_ZPP_FluidArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_InteractionListener
#include <zpp_nape/util/ZNPNode_ZPP_InteractionListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Interactor
#include <zpp_nape/util/ZNPNode_ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Listener
#include <zpp_nape/util/ZNPNode_ZPP_Listener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_SensorArbiter
#include <zpp_nape/util/ZNPNode_ZPP_SensorArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Shape
#include <zpp_nape/util/ZNPNode_ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_ToiEvent
#include <zpp_nape/util/ZNPNode_ZPP_ToiEvent.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_ArbiterList
#include <zpp_nape/util/ZPP_ArbiterList.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_BodyList
#include <zpp_nape/util/ZPP_BodyList.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_CompoundList
#include <zpp_nape/util/ZPP_CompoundList.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_ConstraintList
#include <zpp_nape/util/ZPP_ConstraintList.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_ContactList
#include <zpp_nape/util/ZPP_ContactList.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_ConvexResultList
#include <zpp_nape/util/ZPP_ConvexResultList.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Flags
#include <zpp_nape/util/ZPP_Flags.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_ListenerList
#include <zpp_nape/util/ZPP_ListenerList.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <zpp_nape/util/ZPP_PubPool.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Set_ZPP_CbSet
#include <zpp_nape/util/ZPP_Set_ZPP_CbSet.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_ShapeList
#include <zpp_nape/util/ZPP_ShapeList.h>
#endif
namespace zpp_nape{
namespace space{

Void ZPP_Space_obj::__construct(::zpp_nape::geom::ZPP_Vec2 gravity,::nape::space::Broadphase broadphase)
{
HX_STACK_PUSH("ZPP_Space::new","zpp_nape/space/Space.hx",1304);
{
	HX_STACK_LINE(5762)
	this->prelisteners = null();
	HX_STACK_LINE(5761)
	this->precb = null();
	HX_STACK_LINE(5250)
	this->continuous = false;
	HX_STACK_LINE(3261)
	this->toiEvents = null();
	HX_STACK_LINE(2927)
	this->pre_dt = 0.0;
	HX_STACK_LINE(2525)
	this->convexShapeList = null();
	HX_STACK_LINE(1478)
	this->cbsets = null();
	HX_STACK_LINE(1477)
	this->callbackset_list = null();
	HX_STACK_LINE(1476)
	this->callbacks = null();
	HX_STACK_LINE(1475)
	this->wrap_listeners = null();
	HX_STACK_LINE(1474)
	this->listeners = null();
	HX_STACK_LINE(1473)
	this->islands = null();
	HX_STACK_LINE(1472)
	this->staticsleep = null();
	HX_STACK_LINE(1471)
	this->wrap_livecon = null();
	HX_STACK_LINE(1470)
	this->live_constraints = null();
	HX_STACK_LINE(1469)
	this->wrap_live = null();
	HX_STACK_LINE(1468)
	this->live = null();
	HX_STACK_LINE(1467)
	this->wrap_arbiters = null();
	HX_STACK_LINE(1466)
	this->s_arbiters = null();
	HX_STACK_LINE(1465)
	this->f_arbiters = null();
	HX_STACK_LINE(1464)
	this->c_arbiters_false = null();
	HX_STACK_LINE(1463)
	this->c_arbiters_true = null();
	HX_STACK_LINE(1461)
	this->sortcontacts = false;
	HX_STACK_LINE(1460)
	this->time = 0.0;
	HX_STACK_LINE(1459)
	this->midstep = false;
	HX_STACK_LINE(1458)
	this->stamp = (int)0;
	HX_STACK_LINE(1457)
	this->global_ang_drag = 0.0;
	HX_STACK_LINE(1456)
	this->global_lin_drag = 0.0;
	HX_STACK_LINE(1455)
	this->__static = null();
	HX_STACK_LINE(1454)
	this->bphase = null();
	HX_STACK_LINE(1453)
	this->kinematics = null();
	HX_STACK_LINE(1452)
	this->wrap_constraints = null();
	HX_STACK_LINE(1451)
	this->constraints = null();
	HX_STACK_LINE(1450)
	this->wrap_compounds = null();
	HX_STACK_LINE(1449)
	this->compounds = null();
	HX_STACK_LINE(1448)
	this->wrap_bodies = null();
	HX_STACK_LINE(1447)
	this->bodies = null();
	HX_STACK_LINE(1309)
	this->wrap_gravity = null();
	HX_STACK_LINE(1308)
	this->gravityy = 0.0;
	HX_STACK_LINE(1307)
	this->gravityx = 0.0;
	HX_STACK_LINE(1306)
	this->userData = null();
	HX_STACK_LINE(1305)
	this->outer = null();
	HX_STACK_LINE(1812)
	this->toiEvents = ::zpp_nape::util::ZNPList_ZPP_ToiEvent_obj::__new();
	HX_STACK_LINE(1813)
	this->global_lin_drag = 0.015;
	HX_STACK_LINE(1814)
	this->global_ang_drag = 0.015;
	HX_STACK_LINE(1816)
	::zpp_nape::callbacks::ZPP_Callback_obj::internal = true;
	HX_STACK_LINE(1818)
	this->precb = ::nape::callbacks::PreCallback_obj::__new();
	HX_STACK_LINE(1819)
	this->precb->zpp_inner = ::zpp_nape::callbacks::ZPP_Callback_obj::__new();
	HX_STACK_LINE(1821)
	::zpp_nape::callbacks::ZPP_Callback_obj::internal = false;
	HX_STACK_LINE(1823)
	this->sortcontacts = true;
	HX_STACK_LINE(1824)
	this->pre_dt = 0.0;
	struct _Function_1_1{
		inline static ::nape::space::Broadphase Block( ){
			HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",1825);
			{
				HX_STACK_LINE(1825)
				if (((::zpp_nape::util::ZPP_Flags_obj::Broadphase_DYNAMIC_AABB_TREE == null()))){
					HX_STACK_LINE(1825)
					::zpp_nape::util::ZPP_Flags_obj::internal = true;
					HX_STACK_LINE(1825)
					::zpp_nape::util::ZPP_Flags_obj::Broadphase_DYNAMIC_AABB_TREE = ::nape::space::Broadphase_obj::__new();
					HX_STACK_LINE(1825)
					::zpp_nape::util::ZPP_Flags_obj::internal = false;
				}
				HX_STACK_LINE(1825)
				return ::zpp_nape::util::ZPP_Flags_obj::Broadphase_DYNAMIC_AABB_TREE;
			}
			return null();
		}
	};
	HX_STACK_LINE(1825)
	if (((bool((broadphase == null())) || bool((broadphase == _Function_1_1::Block()))))){
		HX_STACK_LINE(1825)
		this->bphase = ::zpp_nape::space::ZPP_DynAABBPhase_obj::__new(hx::ObjectPtr<OBJ_>(this));
	}
	else{
		struct _Function_2_1{
			inline static ::nape::space::Broadphase Block( ){
				HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",1826);
				{
					HX_STACK_LINE(1826)
					if (((::zpp_nape::util::ZPP_Flags_obj::Broadphase_SWEEP_AND_PRUNE == null()))){
						HX_STACK_LINE(1826)
						::zpp_nape::util::ZPP_Flags_obj::internal = true;
						HX_STACK_LINE(1826)
						::zpp_nape::util::ZPP_Flags_obj::Broadphase_SWEEP_AND_PRUNE = ::nape::space::Broadphase_obj::__new();
						HX_STACK_LINE(1826)
						::zpp_nape::util::ZPP_Flags_obj::internal = false;
					}
					HX_STACK_LINE(1826)
					return ::zpp_nape::util::ZPP_Flags_obj::Broadphase_SWEEP_AND_PRUNE;
				}
				return null();
			}
		};
		HX_STACK_LINE(1826)
		if (((broadphase == _Function_2_1::Block()))){
			HX_STACK_LINE(1826)
			this->bphase = ::zpp_nape::space::ZPP_SweepPhase_obj::__new(hx::ObjectPtr<OBJ_>(this));
		}
	}
	HX_STACK_LINE(1827)
	this->time = 0.0;
	HX_STACK_LINE(1828)
	::zpp_nape::space::ZPP_Space me = hx::ObjectPtr<OBJ_>(this);		HX_STACK_VAR(me,"me");
	HX_STACK_LINE(1829)
	if (((gravity != null()))){
		HX_STACK_LINE(1830)
		this->gravityx = gravity->x;
		HX_STACK_LINE(1831)
		this->gravityy = gravity->y;
		HX_STACK_LINE(1832)
		{
		}
		HX_STACK_LINE(1840)
		{
		}
	}
	else{
		HX_STACK_LINE(1850)
		this->gravityx = (int)0;
		HX_STACK_LINE(1851)
		this->gravityy = (int)0;
		HX_STACK_LINE(1852)
		{
		}
		HX_STACK_LINE(1860)
		{
		}
	}
	HX_STACK_LINE(1869)
	this->bodies = ::zpp_nape::util::ZNPList_ZPP_Body_obj::__new();
	HX_STACK_LINE(1870)
	this->wrap_bodies = ::zpp_nape::util::ZPP_BodyList_obj::get(this->bodies,null());
	HX_STACK_LINE(1871)
	this->wrap_bodies->zpp_inner->adder = this->bodies_adder_dyn();
	HX_STACK_LINE(1872)
	this->wrap_bodies->zpp_inner->subber = this->bodies_subber_dyn();
	HX_STACK_LINE(1874)
	this->wrap_bodies->zpp_inner->_modifiable = this->bodies_modifiable_dyn();
	HX_STACK_LINE(1876)
	this->compounds = ::zpp_nape::util::ZNPList_ZPP_Compound_obj::__new();
	HX_STACK_LINE(1877)
	this->wrap_compounds = ::zpp_nape::util::ZPP_CompoundList_obj::get(this->compounds,null());
	HX_STACK_LINE(1878)
	this->wrap_compounds->zpp_inner->adder = this->compounds_adder_dyn();
	HX_STACK_LINE(1879)
	this->wrap_compounds->zpp_inner->subber = this->compounds_subber_dyn();
	HX_STACK_LINE(1881)
	this->wrap_compounds->zpp_inner->_modifiable = this->compounds_modifiable_dyn();
	HX_STACK_LINE(1883)
	this->kinematics = ::zpp_nape::util::ZNPList_ZPP_Body_obj::__new();
	HX_STACK_LINE(1884)
	this->c_arbiters_true = ::zpp_nape::util::ZNPList_ZPP_ColArbiter_obj::__new();
	HX_STACK_LINE(1885)
	this->c_arbiters_false = ::zpp_nape::util::ZNPList_ZPP_ColArbiter_obj::__new();
	HX_STACK_LINE(1886)
	this->f_arbiters = ::zpp_nape::util::ZNPList_ZPP_FluidArbiter_obj::__new();
	HX_STACK_LINE(1887)
	this->s_arbiters = ::zpp_nape::util::ZNPList_ZPP_SensorArbiter_obj::__new();
	HX_STACK_LINE(1888)
	this->islands = ::zpp_nape::space::ZPP_Island_obj::__new();
	HX_STACK_LINE(1889)
	this->live = ::zpp_nape::util::ZNPList_ZPP_Body_obj::__new();
	HX_STACK_LINE(1890)
	this->wrap_live = ::zpp_nape::util::ZPP_BodyList_obj::get(this->live,true);
	HX_STACK_LINE(1891)
	this->staticsleep = ::zpp_nape::util::ZNPList_ZPP_Body_obj::__new();
	HX_STACK_LINE(1892)
	this->constraints = ::zpp_nape::util::ZNPList_ZPP_Constraint_obj::__new();
	HX_STACK_LINE(1893)
	this->wrap_constraints = ::zpp_nape::util::ZPP_ConstraintList_obj::get(this->constraints,null());
	HX_STACK_LINE(1894)
	this->wrap_constraints->zpp_inner->adder = this->constraints_adder_dyn();
	HX_STACK_LINE(1895)
	this->wrap_constraints->zpp_inner->subber = this->constraints_subber_dyn();
	HX_STACK_LINE(1897)
	this->wrap_constraints->zpp_inner->_modifiable = this->constraints_modifiable_dyn();
	HX_STACK_LINE(1899)
	this->live_constraints = ::zpp_nape::util::ZNPList_ZPP_Constraint_obj::__new();
	HX_STACK_LINE(1900)
	this->wrap_livecon = ::zpp_nape::util::ZPP_ConstraintList_obj::get(this->live_constraints,true);
	HX_STACK_LINE(1901)
	this->__static = ::zpp_nape::phys::ZPP_Body_obj::__static();
	HX_STACK_LINE(1902)
	this->__static->zpp_inner->space = hx::ObjectPtr<OBJ_>(this);
	HX_STACK_LINE(1903)
	this->callbacks = ::zpp_nape::callbacks::ZPP_Callback_obj::__new();
	HX_STACK_LINE(1904)
	this->midstep = false;
	HX_STACK_LINE(1905)
	this->listeners = ::zpp_nape::util::ZNPList_ZPP_Listener_obj::__new();
	HX_STACK_LINE(1906)
	this->wrap_listeners = ::zpp_nape::util::ZPP_ListenerList_obj::get(this->listeners,null());
	HX_STACK_LINE(1907)
	this->wrap_listeners->zpp_inner->adder = this->listeners_adder_dyn();
	HX_STACK_LINE(1908)
	this->wrap_listeners->zpp_inner->subber = this->listeners_subber_dyn();
	HX_STACK_LINE(1910)
	this->wrap_listeners->zpp_inner->_modifiable = this->listeners_modifiable_dyn();
	HX_STACK_LINE(1912)
	this->callbackset_list = ::zpp_nape::space::ZPP_CallbackSet_obj::__new();
	HX_STACK_LINE(1913)
	this->mrca1 = ::zpp_nape::util::ZNPList_ZPP_Interactor_obj::__new();
	HX_STACK_LINE(1914)
	this->mrca2 = ::zpp_nape::util::ZNPList_ZPP_Interactor_obj::__new();
	HX_STACK_LINE(1915)
	this->prelisteners = ::zpp_nape::util::ZNPList_ZPP_InteractionListener_obj::__new();
	HX_STACK_LINE(1916)
	this->cbsets = ::zpp_nape::space::ZPP_CbSetManager_obj::__new(hx::ObjectPtr<OBJ_>(this));
}
;
	return null();
}

ZPP_Space_obj::~ZPP_Space_obj() { }

Dynamic ZPP_Space_obj::__CreateEmpty() { return  new ZPP_Space_obj; }
hx::ObjectPtr< ZPP_Space_obj > ZPP_Space_obj::__new(::zpp_nape::geom::ZPP_Vec2 gravity,::nape::space::Broadphase broadphase)
{  hx::ObjectPtr< ZPP_Space_obj > result = new ZPP_Space_obj();
	result->__construct(gravity,broadphase);
	return result;}

Dynamic ZPP_Space_obj::__Create(hx::DynamicArray inArgs)
{  hx::ObjectPtr< ZPP_Space_obj > result = new ZPP_Space_obj();
	result->__construct(inArgs[0],inArgs[1]);
	return result;}

Void ZPP_Space_obj::inlined_MRCA_chains( ::zpp_nape::shape::ZPP_Shape s1,::zpp_nape::shape::ZPP_Shape s2){
{
		HX_STACK_PUSH("ZPP_Space::inlined_MRCA_chains","zpp_nape/space/Space.hx",7102);
		HX_STACK_THIS(this);
		HX_STACK_ARG(s1,"s1");
		HX_STACK_ARG(s2,"s2");
		HX_STACK_LINE(7103)
		{
		}
		HX_STACK_LINE(7111)
		{
			HX_STACK_LINE(7111)
			::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca1;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(7111)
			{
				HX_STACK_LINE(7111)
				while((!(((_this->head == null()))))){
					HX_STACK_LINE(7111)
					{
					}
					HX_STACK_LINE(7111)
					::zpp_nape::util::ZNPNode_ZPP_Interactor ret = _this->head;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(7111)
					_this->head = ret->next;
					HX_STACK_LINE(7111)
					{
					}
					HX_STACK_LINE(7111)
					{
						HX_STACK_LINE(7111)
						::zpp_nape::util::ZNPNode_ZPP_Interactor o = ret;		HX_STACK_VAR(o,"o");
						HX_STACK_LINE(7111)
						{
						}
						HX_STACK_LINE(7111)
						o->elt = null();
						HX_STACK_LINE(7111)
						o->next = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
						HX_STACK_LINE(7111)
						::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o;
					}
					HX_STACK_LINE(7111)
					if (((_this->head == null()))){
						HX_STACK_LINE(7111)
						_this->pushmod = true;
					}
					HX_STACK_LINE(7111)
					_this->modified = true;
					HX_STACK_LINE(7111)
					(_this->length)--;
				}
				HX_STACK_LINE(7111)
				_this->pushmod = true;
			}
		}
		HX_STACK_LINE(7112)
		{
			HX_STACK_LINE(7112)
			::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca2;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(7112)
			{
				HX_STACK_LINE(7112)
				while((!(((_this->head == null()))))){
					HX_STACK_LINE(7112)
					{
					}
					HX_STACK_LINE(7112)
					::zpp_nape::util::ZNPNode_ZPP_Interactor ret = _this->head;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(7112)
					_this->head = ret->next;
					HX_STACK_LINE(7112)
					{
					}
					HX_STACK_LINE(7112)
					{
						HX_STACK_LINE(7112)
						::zpp_nape::util::ZNPNode_ZPP_Interactor o = ret;		HX_STACK_VAR(o,"o");
						HX_STACK_LINE(7112)
						{
						}
						HX_STACK_LINE(7112)
						o->elt = null();
						HX_STACK_LINE(7112)
						o->next = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
						HX_STACK_LINE(7112)
						::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o;
					}
					HX_STACK_LINE(7112)
					if (((_this->head == null()))){
						HX_STACK_LINE(7112)
						_this->pushmod = true;
					}
					HX_STACK_LINE(7112)
					_this->modified = true;
					HX_STACK_LINE(7112)
					(_this->length)--;
				}
				HX_STACK_LINE(7112)
				_this->pushmod = true;
			}
		}
		HX_STACK_LINE(7113)
		if (((s1->cbSet != null()))){
			HX_STACK_LINE(7113)
			::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca1;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(7113)
			{
			}
			struct _Function_2_1{
				inline static ::zpp_nape::util::ZNPNode_ZPP_Interactor Block( ::zpp_nape::shape::ZPP_Shape &s1){
					HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",7113);
					{
						HX_STACK_LINE(7113)
						::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
						HX_STACK_LINE(7113)
						{
							HX_STACK_LINE(7113)
							if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
								HX_STACK_LINE(7113)
								ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();
							}
							else{
								HX_STACK_LINE(7113)
								ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
								HX_STACK_LINE(7113)
								::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
								HX_STACK_LINE(7113)
								ret->next = null();
							}
							HX_STACK_LINE(7113)
							Dynamic();
						}
						HX_STACK_LINE(7113)
						ret->elt = s1;
						HX_STACK_LINE(7113)
						return ret;
					}
					return null();
				}
			};
			HX_STACK_LINE(7113)
			::zpp_nape::util::ZNPNode_ZPP_Interactor temp = _Function_2_1::Block(s1);		HX_STACK_VAR(temp,"temp");
			HX_STACK_LINE(7113)
			temp->next = _this->head;
			HX_STACK_LINE(7113)
			_this->head = temp;
			HX_STACK_LINE(7113)
			_this->modified = true;
			HX_STACK_LINE(7113)
			(_this->length)++;
			HX_STACK_LINE(7113)
			s1;
		}
		HX_STACK_LINE(7114)
		if (((s1->body->cbSet != null()))){
			HX_STACK_LINE(7114)
			::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca1;		HX_STACK_VAR(_this,"_this");
			::zpp_nape::phys::ZPP_Interactor o = s1->body;		HX_STACK_VAR(o,"o");
			HX_STACK_LINE(7114)
			{
			}
			struct _Function_2_1{
				inline static ::zpp_nape::util::ZNPNode_ZPP_Interactor Block( ::zpp_nape::phys::ZPP_Interactor &o){
					HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",7114);
					{
						HX_STACK_LINE(7114)
						::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
						HX_STACK_LINE(7114)
						{
							HX_STACK_LINE(7114)
							if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
								HX_STACK_LINE(7114)
								ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();
							}
							else{
								HX_STACK_LINE(7114)
								ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
								HX_STACK_LINE(7114)
								::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
								HX_STACK_LINE(7114)
								ret->next = null();
							}
							HX_STACK_LINE(7114)
							Dynamic();
						}
						HX_STACK_LINE(7114)
						ret->elt = o;
						HX_STACK_LINE(7114)
						return ret;
					}
					return null();
				}
			};
			HX_STACK_LINE(7114)
			::zpp_nape::util::ZNPNode_ZPP_Interactor temp = _Function_2_1::Block(o);		HX_STACK_VAR(temp,"temp");
			HX_STACK_LINE(7114)
			temp->next = _this->head;
			HX_STACK_LINE(7114)
			_this->head = temp;
			HX_STACK_LINE(7114)
			_this->modified = true;
			HX_STACK_LINE(7114)
			(_this->length)++;
			HX_STACK_LINE(7114)
			o;
		}
		HX_STACK_LINE(7115)
		if (((s2->cbSet != null()))){
			HX_STACK_LINE(7115)
			::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca2;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(7115)
			{
			}
			struct _Function_2_1{
				inline static ::zpp_nape::util::ZNPNode_ZPP_Interactor Block( ::zpp_nape::shape::ZPP_Shape &s2){
					HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",7115);
					{
						HX_STACK_LINE(7115)
						::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
						HX_STACK_LINE(7115)
						{
							HX_STACK_LINE(7115)
							if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
								HX_STACK_LINE(7115)
								ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();
							}
							else{
								HX_STACK_LINE(7115)
								ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
								HX_STACK_LINE(7115)
								::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
								HX_STACK_LINE(7115)
								ret->next = null();
							}
							HX_STACK_LINE(7115)
							Dynamic();
						}
						HX_STACK_LINE(7115)
						ret->elt = s2;
						HX_STACK_LINE(7115)
						return ret;
					}
					return null();
				}
			};
			HX_STACK_LINE(7115)
			::zpp_nape::util::ZNPNode_ZPP_Interactor temp = _Function_2_1::Block(s2);		HX_STACK_VAR(temp,"temp");
			HX_STACK_LINE(7115)
			temp->next = _this->head;
			HX_STACK_LINE(7115)
			_this->head = temp;
			HX_STACK_LINE(7115)
			_this->modified = true;
			HX_STACK_LINE(7115)
			(_this->length)++;
			HX_STACK_LINE(7115)
			s2;
		}
		HX_STACK_LINE(7116)
		if (((s2->body->cbSet != null()))){
			HX_STACK_LINE(7116)
			::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca2;		HX_STACK_VAR(_this,"_this");
			::zpp_nape::phys::ZPP_Interactor o = s2->body;		HX_STACK_VAR(o,"o");
			HX_STACK_LINE(7116)
			{
			}
			struct _Function_2_1{
				inline static ::zpp_nape::util::ZNPNode_ZPP_Interactor Block( ::zpp_nape::phys::ZPP_Interactor &o){
					HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",7116);
					{
						HX_STACK_LINE(7116)
						::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
						HX_STACK_LINE(7116)
						{
							HX_STACK_LINE(7116)
							if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
								HX_STACK_LINE(7116)
								ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();
							}
							else{
								HX_STACK_LINE(7116)
								ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
								HX_STACK_LINE(7116)
								::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
								HX_STACK_LINE(7116)
								ret->next = null();
							}
							HX_STACK_LINE(7116)
							Dynamic();
						}
						HX_STACK_LINE(7116)
						ret->elt = o;
						HX_STACK_LINE(7116)
						return ret;
					}
					return null();
				}
			};
			HX_STACK_LINE(7116)
			::zpp_nape::util::ZNPNode_ZPP_Interactor temp = _Function_2_1::Block(o);		HX_STACK_VAR(temp,"temp");
			HX_STACK_LINE(7116)
			temp->next = _this->head;
			HX_STACK_LINE(7116)
			_this->head = temp;
			HX_STACK_LINE(7116)
			_this->modified = true;
			HX_STACK_LINE(7116)
			(_this->length)++;
			HX_STACK_LINE(7116)
			o;
		}
		HX_STACK_LINE(7117)
		::zpp_nape::phys::ZPP_Compound c1 = s1->body->compound;		HX_STACK_VAR(c1,"c1");
		HX_STACK_LINE(7118)
		::zpp_nape::phys::ZPP_Compound c2 = s2->body->compound;		HX_STACK_VAR(c2,"c2");
		HX_STACK_LINE(7119)
		while(((c1 != c2))){
			HX_STACK_LINE(7120)
			int d1 = (  (((c1 == null()))) ? int((int)0) : int(c1->depth) );		HX_STACK_VAR(d1,"d1");
			HX_STACK_LINE(7121)
			int d2 = (  (((c2 == null()))) ? int((int)0) : int(c2->depth) );		HX_STACK_VAR(d2,"d2");
			HX_STACK_LINE(7122)
			if (((d1 < d2))){
				HX_STACK_LINE(7123)
				if (((c2->cbSet != null()))){
					HX_STACK_LINE(7123)
					::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca2;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(7123)
					{
					}
					struct _Function_4_1{
						inline static ::zpp_nape::util::ZNPNode_ZPP_Interactor Block( ::zpp_nape::phys::ZPP_Compound &c2){
							HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",7123);
							{
								HX_STACK_LINE(7123)
								::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(7123)
								{
									HX_STACK_LINE(7123)
									if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
										HX_STACK_LINE(7123)
										ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();
									}
									else{
										HX_STACK_LINE(7123)
										ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
										HX_STACK_LINE(7123)
										::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
										HX_STACK_LINE(7123)
										ret->next = null();
									}
									HX_STACK_LINE(7123)
									Dynamic();
								}
								HX_STACK_LINE(7123)
								ret->elt = c2;
								HX_STACK_LINE(7123)
								return ret;
							}
							return null();
						}
					};
					HX_STACK_LINE(7123)
					::zpp_nape::util::ZNPNode_ZPP_Interactor temp = _Function_4_1::Block(c2);		HX_STACK_VAR(temp,"temp");
					HX_STACK_LINE(7123)
					temp->next = _this->head;
					HX_STACK_LINE(7123)
					_this->head = temp;
					HX_STACK_LINE(7123)
					_this->modified = true;
					HX_STACK_LINE(7123)
					(_this->length)++;
					HX_STACK_LINE(7123)
					c2;
				}
				HX_STACK_LINE(7124)
				c2 = c2->compound;
			}
			else{
				HX_STACK_LINE(7127)
				if (((c1->cbSet != null()))){
					HX_STACK_LINE(7127)
					::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca1;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(7127)
					{
					}
					struct _Function_4_1{
						inline static ::zpp_nape::util::ZNPNode_ZPP_Interactor Block( ::zpp_nape::phys::ZPP_Compound &c1){
							HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",7127);
							{
								HX_STACK_LINE(7127)
								::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(7127)
								{
									HX_STACK_LINE(7127)
									if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
										HX_STACK_LINE(7127)
										ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();
									}
									else{
										HX_STACK_LINE(7127)
										ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
										HX_STACK_LINE(7127)
										::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
										HX_STACK_LINE(7127)
										ret->next = null();
									}
									HX_STACK_LINE(7127)
									Dynamic();
								}
								HX_STACK_LINE(7127)
								ret->elt = c1;
								HX_STACK_LINE(7127)
								return ret;
							}
							return null();
						}
					};
					HX_STACK_LINE(7127)
					::zpp_nape::util::ZNPNode_ZPP_Interactor temp = _Function_4_1::Block(c1);		HX_STACK_VAR(temp,"temp");
					HX_STACK_LINE(7127)
					temp->next = _this->head;
					HX_STACK_LINE(7127)
					_this->head = temp;
					HX_STACK_LINE(7127)
					_this->modified = true;
					HX_STACK_LINE(7127)
					(_this->length)++;
					HX_STACK_LINE(7127)
					c1;
				}
				HX_STACK_LINE(7128)
				c1 = c1->compound;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,inlined_MRCA_chains,(void))

Void ZPP_Space_obj::MRCA_chains( ::zpp_nape::shape::ZPP_Shape s1,::zpp_nape::shape::ZPP_Shape s2){
{
		HX_STACK_PUSH("ZPP_Space::MRCA_chains","zpp_nape/space/Space.hx",7100);
		HX_STACK_THIS(this);
		HX_STACK_ARG(s1,"s1");
		HX_STACK_ARG(s2,"s2");
		HX_STACK_LINE(7100)
		{
		}
		HX_STACK_LINE(7100)
		{
			HX_STACK_LINE(7100)
			::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca1;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(7100)
			{
				HX_STACK_LINE(7100)
				while((!(((_this->head == null()))))){
					HX_STACK_LINE(7100)
					{
					}
					HX_STACK_LINE(7100)
					::zpp_nape::util::ZNPNode_ZPP_Interactor ret = _this->head;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(7100)
					_this->head = ret->next;
					HX_STACK_LINE(7100)
					{
					}
					HX_STACK_LINE(7100)
					{
						HX_STACK_LINE(7100)
						::zpp_nape::util::ZNPNode_ZPP_Interactor o = ret;		HX_STACK_VAR(o,"o");
						HX_STACK_LINE(7100)
						{
						}
						HX_STACK_LINE(7100)
						o->elt = null();
						HX_STACK_LINE(7100)
						o->next = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
						HX_STACK_LINE(7100)
						::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o;
					}
					HX_STACK_LINE(7100)
					if (((_this->head == null()))){
						HX_STACK_LINE(7100)
						_this->pushmod = true;
					}
					HX_STACK_LINE(7100)
					_this->modified = true;
					HX_STACK_LINE(7100)
					(_this->length)--;
				}
				HX_STACK_LINE(7100)
				_this->pushmod = true;
			}
		}
		HX_STACK_LINE(7100)
		{
			HX_STACK_LINE(7100)
			::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca2;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(7100)
			{
				HX_STACK_LINE(7100)
				while((!(((_this->head == null()))))){
					HX_STACK_LINE(7100)
					{
					}
					HX_STACK_LINE(7100)
					::zpp_nape::util::ZNPNode_ZPP_Interactor ret = _this->head;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(7100)
					_this->head = ret->next;
					HX_STACK_LINE(7100)
					{
					}
					HX_STACK_LINE(7100)
					{
						HX_STACK_LINE(7100)
						::zpp_nape::util::ZNPNode_ZPP_Interactor o = ret;		HX_STACK_VAR(o,"o");
						HX_STACK_LINE(7100)
						{
						}
						HX_STACK_LINE(7100)
						o->elt = null();
						HX_STACK_LINE(7100)
						o->next = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
						HX_STACK_LINE(7100)
						::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o;
					}
					HX_STACK_LINE(7100)
					if (((_this->head == null()))){
						HX_STACK_LINE(7100)
						_this->pushmod = true;
					}
					HX_STACK_LINE(7100)
					_this->modified = true;
					HX_STACK_LINE(7100)
					(_this->length)--;
				}
				HX_STACK_LINE(7100)
				_this->pushmod = true;
			}
		}
		HX_STACK_LINE(7100)
		if (((s1->cbSet != null()))){
			HX_STACK_LINE(7100)
			::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca1;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(7100)
			{
			}
			struct _Function_2_1{
				inline static ::zpp_nape::util::ZNPNode_ZPP_Interactor Block( ::zpp_nape::shape::ZPP_Shape &s1){
					HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",7100);
					{
						HX_STACK_LINE(7100)
						::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
						HX_STACK_LINE(7100)
						{
							HX_STACK_LINE(7100)
							if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
								HX_STACK_LINE(7100)
								ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();
							}
							else{
								HX_STACK_LINE(7100)
								ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
								HX_STACK_LINE(7100)
								::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
								HX_STACK_LINE(7100)
								ret->next = null();
							}
							HX_STACK_LINE(7100)
							Dynamic();
						}
						HX_STACK_LINE(7100)
						ret->elt = s1;
						HX_STACK_LINE(7100)
						return ret;
					}
					return null();
				}
			};
			HX_STACK_LINE(7100)
			::zpp_nape::util::ZNPNode_ZPP_Interactor temp = _Function_2_1::Block(s1);		HX_STACK_VAR(temp,"temp");
			HX_STACK_LINE(7100)
			temp->next = _this->head;
			HX_STACK_LINE(7100)
			_this->head = temp;
			HX_STACK_LINE(7100)
			_this->modified = true;
			HX_STACK_LINE(7100)
			(_this->length)++;
			HX_STACK_LINE(7100)
			s1;
		}
		HX_STACK_LINE(7100)
		if (((s1->body->cbSet != null()))){
			HX_STACK_LINE(7100)
			::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca1;		HX_STACK_VAR(_this,"_this");
			::zpp_nape::phys::ZPP_Interactor o = s1->body;		HX_STACK_VAR(o,"o");
			HX_STACK_LINE(7100)
			{
			}
			struct _Function_2_1{
				inline static ::zpp_nape::util::ZNPNode_ZPP_Interactor Block( ::zpp_nape::phys::ZPP_Interactor &o){
					HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",7100);
					{
						HX_STACK_LINE(7100)
						::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
						HX_STACK_LINE(7100)
						{
							HX_STACK_LINE(7100)
							if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
								HX_STACK_LINE(7100)
								ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();
							}
							else{
								HX_STACK_LINE(7100)
								ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
								HX_STACK_LINE(7100)
								::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
								HX_STACK_LINE(7100)
								ret->next = null();
							}
							HX_STACK_LINE(7100)
							Dynamic();
						}
						HX_STACK_LINE(7100)
						ret->elt = o;
						HX_STACK_LINE(7100)
						return ret;
					}
					return null();
				}
			};
			HX_STACK_LINE(7100)
			::zpp_nape::util::ZNPNode_ZPP_Interactor temp = _Function_2_1::Block(o);		HX_STACK_VAR(temp,"temp");
			HX_STACK_LINE(7100)
			temp->next = _this->head;
			HX_STACK_LINE(7100)
			_this->head = temp;
			HX_STACK_LINE(7100)
			_this->modified = true;
			HX_STACK_LINE(7100)
			(_this->length)++;
			HX_STACK_LINE(7100)
			o;
		}
		HX_STACK_LINE(7100)
		if (((s2->cbSet != null()))){
			HX_STACK_LINE(7100)
			::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca2;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(7100)
			{
			}
			struct _Function_2_1{
				inline static ::zpp_nape::util::ZNPNode_ZPP_Interactor Block( ::zpp_nape::shape::ZPP_Shape &s2){
					HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",7100);
					{
						HX_STACK_LINE(7100)
						::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
						HX_STACK_LINE(7100)
						{
							HX_STACK_LINE(7100)
							if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
								HX_STACK_LINE(7100)
								ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();
							}
							else{
								HX_STACK_LINE(7100)
								ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
								HX_STACK_LINE(7100)
								::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
								HX_STACK_LINE(7100)
								ret->next = null();
							}
							HX_STACK_LINE(7100)
							Dynamic();
						}
						HX_STACK_LINE(7100)
						ret->elt = s2;
						HX_STACK_LINE(7100)
						return ret;
					}
					return null();
				}
			};
			HX_STACK_LINE(7100)
			::zpp_nape::util::ZNPNode_ZPP_Interactor temp = _Function_2_1::Block(s2);		HX_STACK_VAR(temp,"temp");
			HX_STACK_LINE(7100)
			temp->next = _this->head;
			HX_STACK_LINE(7100)
			_this->head = temp;
			HX_STACK_LINE(7100)
			_this->modified = true;
			HX_STACK_LINE(7100)
			(_this->length)++;
			HX_STACK_LINE(7100)
			s2;
		}
		HX_STACK_LINE(7100)
		if (((s2->body->cbSet != null()))){
			HX_STACK_LINE(7100)
			::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca2;		HX_STACK_VAR(_this,"_this");
			::zpp_nape::phys::ZPP_Interactor o = s2->body;		HX_STACK_VAR(o,"o");
			HX_STACK_LINE(7100)
			{
			}
			struct _Function_2_1{
				inline static ::zpp_nape::util::ZNPNode_ZPP_Interactor Block( ::zpp_nape::phys::ZPP_Interactor &o){
					HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",7100);
					{
						HX_STACK_LINE(7100)
						::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
						HX_STACK_LINE(7100)
						{
							HX_STACK_LINE(7100)
							if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
								HX_STACK_LINE(7100)
								ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();
							}
							else{
								HX_STACK_LINE(7100)
								ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
								HX_STACK_LINE(7100)
								::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
								HX_STACK_LINE(7100)
								ret->next = null();
							}
							HX_STACK_LINE(7100)
							Dynamic();
						}
						HX_STACK_LINE(7100)
						ret->elt = o;
						HX_STACK_LINE(7100)
						return ret;
					}
					return null();
				}
			};
			HX_STACK_LINE(7100)
			::zpp_nape::util::ZNPNode_ZPP_Interactor temp = _Function_2_1::Block(o);		HX_STACK_VAR(temp,"temp");
			HX_STACK_LINE(7100)
			temp->next = _this->head;
			HX_STACK_LINE(7100)
			_this->head = temp;
			HX_STACK_LINE(7100)
			_this->modified = true;
			HX_STACK_LINE(7100)
			(_this->length)++;
			HX_STACK_LINE(7100)
			o;
		}
		HX_STACK_LINE(7100)
		::zpp_nape::phys::ZPP_Compound c1 = s1->body->compound;		HX_STACK_VAR(c1,"c1");
		HX_STACK_LINE(7100)
		::zpp_nape::phys::ZPP_Compound c2 = s2->body->compound;		HX_STACK_VAR(c2,"c2");
		HX_STACK_LINE(7100)
		while(((c1 != c2))){
			HX_STACK_LINE(7100)
			int d1 = (  (((c1 == null()))) ? int((int)0) : int(c1->depth) );		HX_STACK_VAR(d1,"d1");
			HX_STACK_LINE(7100)
			int d2 = (  (((c2 == null()))) ? int((int)0) : int(c2->depth) );		HX_STACK_VAR(d2,"d2");
			HX_STACK_LINE(7100)
			if (((d1 < d2))){
				HX_STACK_LINE(7100)
				if (((c2->cbSet != null()))){
					HX_STACK_LINE(7100)
					::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca2;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(7100)
					{
					}
					struct _Function_4_1{
						inline static ::zpp_nape::util::ZNPNode_ZPP_Interactor Block( ::zpp_nape::phys::ZPP_Compound &c2){
							HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",7100);
							{
								HX_STACK_LINE(7100)
								::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(7100)
								{
									HX_STACK_LINE(7100)
									if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
										HX_STACK_LINE(7100)
										ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();
									}
									else{
										HX_STACK_LINE(7100)
										ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
										HX_STACK_LINE(7100)
										::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
										HX_STACK_LINE(7100)
										ret->next = null();
									}
									HX_STACK_LINE(7100)
									Dynamic();
								}
								HX_STACK_LINE(7100)
								ret->elt = c2;
								HX_STACK_LINE(7100)
								return ret;
							}
							return null();
						}
					};
					HX_STACK_LINE(7100)
					::zpp_nape::util::ZNPNode_ZPP_Interactor temp = _Function_4_1::Block(c2);		HX_STACK_VAR(temp,"temp");
					HX_STACK_LINE(7100)
					temp->next = _this->head;
					HX_STACK_LINE(7100)
					_this->head = temp;
					HX_STACK_LINE(7100)
					_this->modified = true;
					HX_STACK_LINE(7100)
					(_this->length)++;
					HX_STACK_LINE(7100)
					c2;
				}
				HX_STACK_LINE(7100)
				c2 = c2->compound;
			}
			else{
				HX_STACK_LINE(7100)
				if (((c1->cbSet != null()))){
					HX_STACK_LINE(7100)
					::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca1;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(7100)
					{
					}
					struct _Function_4_1{
						inline static ::zpp_nape::util::ZNPNode_ZPP_Interactor Block( ::zpp_nape::phys::ZPP_Compound &c1){
							HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",7100);
							{
								HX_STACK_LINE(7100)
								::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(7100)
								{
									HX_STACK_LINE(7100)
									if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
										HX_STACK_LINE(7100)
										ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();
									}
									else{
										HX_STACK_LINE(7100)
										ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
										HX_STACK_LINE(7100)
										::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
										HX_STACK_LINE(7100)
										ret->next = null();
									}
									HX_STACK_LINE(7100)
									Dynamic();
								}
								HX_STACK_LINE(7100)
								ret->elt = c1;
								HX_STACK_LINE(7100)
								return ret;
							}
							return null();
						}
					};
					HX_STACK_LINE(7100)
					::zpp_nape::util::ZNPNode_ZPP_Interactor temp = _Function_4_1::Block(c1);		HX_STACK_VAR(temp,"temp");
					HX_STACK_LINE(7100)
					temp->next = _this->head;
					HX_STACK_LINE(7100)
					_this->head = temp;
					HX_STACK_LINE(7100)
					_this->modified = true;
					HX_STACK_LINE(7100)
					(_this->length)++;
					HX_STACK_LINE(7100)
					c1;
				}
				HX_STACK_LINE(7100)
				c1 = c1->compound;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,MRCA_chains,(void))

::zpp_nape::dynamics::ZPP_Arbiter ZPP_Space_obj::narrowPhase( ::zpp_nape::shape::ZPP_Shape s1,::zpp_nape::shape::ZPP_Shape s2,bool stat,::zpp_nape::dynamics::ZPP_Arbiter in_arb,bool continuous){
	HX_STACK_PUSH("ZPP_Space::narrowPhase","zpp_nape/space/Space.hx",5763);
	HX_STACK_THIS(this);
	HX_STACK_ARG(s1,"s1");
	HX_STACK_ARG(s2,"s2");
	HX_STACK_ARG(stat,"stat");
	HX_STACK_ARG(in_arb,"in_arb");
	HX_STACK_ARG(continuous,"continuous");
	HX_STACK_LINE(5763)
	::zpp_nape::space::ZPP_Space _g = hx::ObjectPtr<OBJ_>(this);		HX_STACK_VAR(_g,"_g");
	HX_STACK_LINE(5766)
	::zpp_nape::dynamics::ZPP_Arbiter ret = null();		HX_STACK_VAR(ret,"ret");
	HX_STACK_LINE(5767)
	::zpp_nape::phys::ZPP_Body b1 = s1->body;		HX_STACK_VAR(b1,"b1");
	HX_STACK_LINE(5768)
	::zpp_nape::phys::ZPP_Body b2 = s2->body;		HX_STACK_VAR(b2,"b2");
	struct _Function_1_1{
		inline static int Block( ::zpp_nape::shape::ZPP_Shape &s1,::zpp_nape::phys::ZPP_Body &b2,::zpp_nape::phys::ZPP_Body &b1,::zpp_nape::shape::ZPP_Shape &s2){
			HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5769);
			{
				HX_STACK_LINE(5769)
				{
				}
				HX_STACK_LINE(5769)
				{
				}
				HX_STACK_LINE(5769)
				bool con_ignore;		HX_STACK_VAR(con_ignore,"con_ignore");
				HX_STACK_LINE(5769)
				{
					HX_STACK_LINE(5769)
					con_ignore = false;
					HX_STACK_LINE(5769)
					{
						HX_STACK_LINE(5769)
						::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = b1->constraints->head;		HX_STACK_VAR(cx_ite,"cx_ite");
						HX_STACK_LINE(5769)
						while(((cx_ite != null()))){
							HX_STACK_LINE(5769)
							::zpp_nape::constraint::ZPP_Constraint con = cx_ite->elt;		HX_STACK_VAR(con,"con");
							HX_STACK_LINE(5769)
							if (((bool(con->ignore) && bool(con->pair_exists(b1->id,b2->id))))){
								HX_STACK_LINE(5769)
								con_ignore = true;
								HX_STACK_LINE(5769)
								break;
							}
							HX_STACK_LINE(5769)
							cx_ite = cx_ite->next;
						}
					}
				}
				struct _Function_2_1{
					inline static bool Block( ::zpp_nape::shape::ZPP_Shape &s1,::zpp_nape::shape::ZPP_Shape &s2){
						HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5769);
						{
							struct _Function_3_1{
								inline static ::zpp_nape::dynamics::ZPP_InteractionGroup Block( ::zpp_nape::shape::ZPP_Shape &s1){
									HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5769);
									{
										HX_STACK_LINE(5769)
										::zpp_nape::phys::ZPP_Interactor cur = s1;		HX_STACK_VAR(cur,"cur");
										HX_STACK_LINE(5769)
										while(((bool((cur != null())) && bool((cur->group == null()))))){
											HX_STACK_LINE(5769)
											if (((cur->ishape != null()))){
												HX_STACK_LINE(5769)
												cur = cur->ishape->body;
											}
											else{
												HX_STACK_LINE(5769)
												if (((cur->icompound != null()))){
													HX_STACK_LINE(5769)
													cur = cur->icompound->compound;
												}
												else{
													HX_STACK_LINE(5769)
													cur = cur->ibody->compound;
												}
											}
										}
										HX_STACK_LINE(5769)
										return (  (((cur == null()))) ? ::zpp_nape::dynamics::ZPP_InteractionGroup(null()) : ::zpp_nape::dynamics::ZPP_InteractionGroup(cur->group) );
									}
									return null();
								}
							};
							HX_STACK_LINE(5769)
							::zpp_nape::dynamics::ZPP_InteractionGroup g1 = _Function_3_1::Block(s1);		HX_STACK_VAR(g1,"g1");
							struct _Function_3_2{
								inline static bool Block( ::zpp_nape::shape::ZPP_Shape &s2,::zpp_nape::dynamics::ZPP_InteractionGroup &g1){
									HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5769);
									{
										struct _Function_4_1{
											inline static ::zpp_nape::dynamics::ZPP_InteractionGroup Block( ::zpp_nape::shape::ZPP_Shape &s2){
												HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5769);
												{
													HX_STACK_LINE(5769)
													::zpp_nape::phys::ZPP_Interactor cur = s2;		HX_STACK_VAR(cur,"cur");
													HX_STACK_LINE(5769)
													while(((bool((cur != null())) && bool((cur->group == null()))))){
														HX_STACK_LINE(5769)
														if (((cur->ishape != null()))){
															HX_STACK_LINE(5769)
															cur = cur->ishape->body;
														}
														else{
															HX_STACK_LINE(5769)
															if (((cur->icompound != null()))){
																HX_STACK_LINE(5769)
																cur = cur->icompound->compound;
															}
															else{
																HX_STACK_LINE(5769)
																cur = cur->ibody->compound;
															}
														}
													}
													HX_STACK_LINE(5769)
													return (  (((cur == null()))) ? ::zpp_nape::dynamics::ZPP_InteractionGroup(null()) : ::zpp_nape::dynamics::ZPP_InteractionGroup(cur->group) );
												}
												return null();
											}
										};
										HX_STACK_LINE(5769)
										::zpp_nape::dynamics::ZPP_InteractionGroup g2 = _Function_4_1::Block(s2);		HX_STACK_VAR(g2,"g2");
										struct _Function_4_2{
											inline static bool Block( ::zpp_nape::dynamics::ZPP_InteractionGroup &g1,::zpp_nape::dynamics::ZPP_InteractionGroup &g2){
												HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5769);
												{
													HX_STACK_LINE(5769)
													bool ret1 = false;		HX_STACK_VAR(ret1,"ret1");
													HX_STACK_LINE(5769)
													while(((bool((g1 != null())) && bool((g2 != null()))))){
														HX_STACK_LINE(5769)
														if (((g1 == g2))){
															HX_STACK_LINE(5769)
															ret1 = g1->ignore;
															HX_STACK_LINE(5769)
															break;
														}
														HX_STACK_LINE(5769)
														if (((g1->depth < g2->depth))){
															HX_STACK_LINE(5769)
															g2 = g2->group;
														}
														else{
															HX_STACK_LINE(5769)
															g1 = g1->group;
														}
													}
													HX_STACK_LINE(5769)
													return ret1;
												}
												return null();
											}
										};
										HX_STACK_LINE(5769)
										return (  (((g2 == null()))) ? bool(false) : bool(_Function_4_2::Block(g1,g2)) );
									}
									return null();
								}
							};
							HX_STACK_LINE(5769)
							return (  (((g1 == null()))) ? bool(false) : bool(_Function_3_2::Block(s2,g1)) );
						}
						return null();
					}
				};
				struct _Function_2_2{
					inline static int Block( ::zpp_nape::shape::ZPP_Shape &s1,::zpp_nape::phys::ZPP_Body &b2,::zpp_nape::shape::ZPP_Shape &s2,::zpp_nape::phys::ZPP_Body &b1){
						HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5769);
						{
							struct _Function_3_1{
								inline static bool Block( ::zpp_nape::shape::ZPP_Shape &s1,::zpp_nape::shape::ZPP_Shape &s2){
									HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5769);
									{
										HX_STACK_LINE(5769)
										::zpp_nape::dynamics::ZPP_InteractionFilter _this = s1->filter;		HX_STACK_VAR(_this,"_this");
										::zpp_nape::dynamics::ZPP_InteractionFilter x = s2->filter;		HX_STACK_VAR(x,"x");
										HX_STACK_LINE(5769)
										return (bool((((int(_this->sensorMask) & int(x->sensorGroup))) != (int)0)) && bool((((int(x->sensorMask) & int(_this->sensorGroup))) != (int)0)));
									}
									return null();
								}
							};
							struct _Function_3_2{
								inline static bool Block( ::zpp_nape::shape::ZPP_Shape &s1,::zpp_nape::shape::ZPP_Shape &s2){
									HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5769);
									{
										HX_STACK_LINE(5769)
										::zpp_nape::dynamics::ZPP_InteractionFilter _this = s1->filter;		HX_STACK_VAR(_this,"_this");
										::zpp_nape::dynamics::ZPP_InteractionFilter x = s2->filter;		HX_STACK_VAR(x,"x");
										HX_STACK_LINE(5769)
										return (bool((((int(_this->fluidMask) & int(x->fluidGroup))) != (int)0)) && bool((((int(x->fluidMask) & int(_this->fluidGroup))) != (int)0)));
									}
									return null();
								}
							};
							struct _Function_3_3{
								inline static bool Block( ::zpp_nape::shape::ZPP_Shape &s1,::zpp_nape::shape::ZPP_Shape &s2){
									HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5769);
									{
										HX_STACK_LINE(5769)
										::zpp_nape::dynamics::ZPP_InteractionFilter _this = s1->filter;		HX_STACK_VAR(_this,"_this");
										::zpp_nape::dynamics::ZPP_InteractionFilter x = s2->filter;		HX_STACK_VAR(x,"x");
										HX_STACK_LINE(5769)
										return (bool((((int(_this->collisionMask) & int(x->collisionGroup))) != (int)0)) && bool((((int(x->collisionMask) & int(_this->collisionGroup))) != (int)0)));
									}
									return null();
								}
							};
							HX_STACK_LINE(5769)
							return (  (((bool(((bool(s1->sensorEnabled) || bool(s2->sensorEnabled)))) && bool(_Function_3_1::Block(s1,s2))))) ? int((int)2) : int((  (((bool((bool(((bool(s1->fluidEnabled) || bool(s2->fluidEnabled)))) && bool(_Function_3_2::Block(s1,s2)))) && bool(!(((bool((bool((bool((b1->imass == (int)0)) && bool((b2->imass == (int)0)))) && bool((b1->iinertia == (int)0)))) && bool((b2->iinertia == (int)0))))))))) ? int((int)0) : int((  (((bool(_Function_3_3::Block(s1,s2)) && bool(!(((bool((bool((bool((b1->imass == (int)0)) && bool((b2->imass == (int)0)))) && bool((b1->iinertia == (int)0)))) && bool((b2->iinertia == (int)0))))))))) ? int((int)1) : int((int)-1) )) )) );
						}
						return null();
					}
				};
				HX_STACK_LINE(5769)
				return (  (((bool(!(con_ignore)) && bool(!(_Function_2_1::Block(s1,s2)))))) ? int(_Function_2_2::Block(s1,b2,s2,b1)) : int((int)-1) );
			}
			return null();
		}
	};
	HX_STACK_LINE(5769)
	int itype = _Function_1_1::Block(s1,b2,b1,s2);		HX_STACK_VAR(itype,"itype");
	HX_STACK_LINE(5770)
	if (((itype != (int)-1))){
		HX_STACK_LINE(5771)
		::zpp_nape::shape::ZPP_Shape sa;		HX_STACK_VAR(sa,"sa");
		::zpp_nape::shape::ZPP_Shape sb;		HX_STACK_VAR(sb,"sb");
		HX_STACK_LINE(5772)
		if (((s1->type > s2->type))){
			HX_STACK_LINE(5773)
			sa = s2;
			HX_STACK_LINE(5774)
			sb = s1;
		}
		else{
			HX_STACK_LINE(5776)
			if (((s1->type == s2->type))){
				HX_STACK_LINE(5776)
				if (((s1->id < s2->id))){
					HX_STACK_LINE(5778)
					sa = s1;
					HX_STACK_LINE(5779)
					sb = s2;
				}
				else{
					HX_STACK_LINE(5782)
					sb = s1;
					HX_STACK_LINE(5783)
					sa = s2;
				}
			}
			else{
				HX_STACK_LINE(5787)
				sa = s1;
				HX_STACK_LINE(5788)
				sb = s2;
			}
		}
		HX_STACK_LINE(5790)
		bool reverse = (sa == s2);		HX_STACK_VAR(reverse,"reverse");
		HX_STACK_LINE(5791)
		if (((itype == (int)0))){
			struct _Function_3_1{
				inline static ::zpp_nape::dynamics::ZPP_Arbiter Block( ::zpp_nape::shape::ZPP_Shape &sa,::zpp_nape::phys::ZPP_Body &b2,::zpp_nape::phys::ZPP_Body &b1,::zpp_nape::shape::ZPP_Shape &sb){
					HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5792);
					{
						HX_STACK_LINE(5793)
						::zpp_nape::dynamics::ZPP_Arbiter ret1 = null();		HX_STACK_VAR(ret1,"ret1");
						HX_STACK_LINE(5794)
						::zpp_nape::phys::ZPP_Body b = (  (((b1->arbiters->length < b2->arbiters->length))) ? ::zpp_nape::phys::ZPP_Body(b1) : ::zpp_nape::phys::ZPP_Body(b2) );		HX_STACK_VAR(b,"b");
						HX_STACK_LINE(5795)
						{
							HX_STACK_LINE(5796)
							::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite = b->arbiters->head;		HX_STACK_VAR(cx_ite,"cx_ite");
							HX_STACK_LINE(5797)
							while(((cx_ite != null()))){
								HX_STACK_LINE(5798)
								::zpp_nape::dynamics::ZPP_Arbiter arb = cx_ite->elt;		HX_STACK_VAR(arb,"arb");
								HX_STACK_LINE(5799)
								{
									HX_STACK_LINE(5800)
									{
									}
									HX_STACK_LINE(5808)
									if (((bool((arb->id == sa->id)) && bool((arb->di == sb->id))))){
										HX_STACK_LINE(5809)
										ret1 = arb;
										HX_STACK_LINE(5810)
										break;
									}
								}
								HX_STACK_LINE(5813)
								cx_ite = cx_ite->next;
							}
						}
						HX_STACK_LINE(5816)
						return ret1;
					}
					return null();
				}
			};
			HX_STACK_LINE(5792)
			::zpp_nape::dynamics::ZPP_Arbiter xarb = (  (((in_arb == null()))) ? ::zpp_nape::dynamics::ZPP_Arbiter(_Function_3_1::Block(sa,b2,b1,sb)) : ::zpp_nape::dynamics::ZPP_Arbiter(in_arb) );		HX_STACK_VAR(xarb,"xarb");
			HX_STACK_LINE(5818)
			bool first = (xarb == null());		HX_STACK_VAR(first,"first");
			HX_STACK_LINE(5819)
			::zpp_nape::dynamics::ZPP_FluidArbiter arb;		HX_STACK_VAR(arb,"arb");
			HX_STACK_LINE(5820)
			bool swapped = false;		HX_STACK_VAR(swapped,"swapped");
			HX_STACK_LINE(5821)
			if ((first)){
				HX_STACK_LINE(5822)
				if (((::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool == null()))){
					HX_STACK_LINE(5822)
					arb = ::zpp_nape::dynamics::ZPP_FluidArbiter_obj::__new();
				}
				else{
					HX_STACK_LINE(5829)
					arb = ::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool;
					HX_STACK_LINE(5830)
					::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool = arb->next;
					HX_STACK_LINE(5831)
					arb->next = null();
				}
				HX_STACK_LINE(5836)
				Dynamic();
			}
			else{
				HX_STACK_LINE(5838)
				if (((xarb->fluidarb == null()))){
					HX_STACK_LINE(5840)
					{
						HX_STACK_LINE(5840)
						{
						}
						HX_STACK_LINE(5840)
						xarb->cleared = true;
						HX_STACK_LINE(5840)
						{
							HX_STACK_LINE(5840)
							::zpp_nape::util::ZNPList_ZPP_Arbiter _this = xarb->b1->arbiters;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(5840)
							{
							}
							HX_STACK_LINE(5840)
							{
								HX_STACK_LINE(5840)
								{
								}
								HX_STACK_LINE(5840)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
								HX_STACK_LINE(5840)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;		HX_STACK_VAR(cur,"cur");
								HX_STACK_LINE(5840)
								bool ret1 = false;		HX_STACK_VAR(ret1,"ret1");
								HX_STACK_LINE(5840)
								while(((cur != null()))){
									HX_STACK_LINE(5840)
									if (((cur->elt == xarb))){
										HX_STACK_LINE(5840)
										{
											HX_STACK_LINE(5840)
											{
											}
											HX_STACK_LINE(5840)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
											HX_STACK_LINE(5840)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter ret2;		HX_STACK_VAR(ret2,"ret2");
											HX_STACK_LINE(5840)
											if (((pre == null()))){
												HX_STACK_LINE(5840)
												old = _this->head;
												HX_STACK_LINE(5840)
												ret2 = old->next;
												HX_STACK_LINE(5840)
												_this->head = ret2;
												HX_STACK_LINE(5840)
												if (((_this->head == null()))){
													HX_STACK_LINE(5840)
													_this->pushmod = true;
												}
											}
											else{
												HX_STACK_LINE(5840)
												old = pre->next;
												HX_STACK_LINE(5840)
												ret2 = old->next;
												HX_STACK_LINE(5840)
												pre->next = ret2;
												HX_STACK_LINE(5840)
												if (((ret2 == null()))){
													HX_STACK_LINE(5840)
													_this->pushmod = true;
												}
											}
											HX_STACK_LINE(5840)
											{
											}
											HX_STACK_LINE(5840)
											{
												HX_STACK_LINE(5840)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
												HX_STACK_LINE(5840)
												{
												}
												HX_STACK_LINE(5840)
												o->elt = null();
												HX_STACK_LINE(5840)
												o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
												HX_STACK_LINE(5840)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
											}
											HX_STACK_LINE(5840)
											_this->modified = true;
											HX_STACK_LINE(5840)
											(_this->length)--;
											HX_STACK_LINE(5840)
											_this->pushmod = true;
											HX_STACK_LINE(5840)
											ret2;
										}
										HX_STACK_LINE(5840)
										ret1 = true;
										HX_STACK_LINE(5840)
										break;
									}
									HX_STACK_LINE(5840)
									pre = cur;
									HX_STACK_LINE(5840)
									cur = cur->next;
								}
								HX_STACK_LINE(5840)
								ret1;
							}
						}
						HX_STACK_LINE(5840)
						{
							HX_STACK_LINE(5840)
							::zpp_nape::util::ZNPList_ZPP_Arbiter _this = xarb->b2->arbiters;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(5840)
							{
							}
							HX_STACK_LINE(5840)
							{
								HX_STACK_LINE(5840)
								{
								}
								HX_STACK_LINE(5840)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
								HX_STACK_LINE(5840)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;		HX_STACK_VAR(cur,"cur");
								HX_STACK_LINE(5840)
								bool ret1 = false;		HX_STACK_VAR(ret1,"ret1");
								HX_STACK_LINE(5840)
								while(((cur != null()))){
									HX_STACK_LINE(5840)
									if (((cur->elt == xarb))){
										HX_STACK_LINE(5840)
										{
											HX_STACK_LINE(5840)
											{
											}
											HX_STACK_LINE(5840)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
											HX_STACK_LINE(5840)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter ret2;		HX_STACK_VAR(ret2,"ret2");
											HX_STACK_LINE(5840)
											if (((pre == null()))){
												HX_STACK_LINE(5840)
												old = _this->head;
												HX_STACK_LINE(5840)
												ret2 = old->next;
												HX_STACK_LINE(5840)
												_this->head = ret2;
												HX_STACK_LINE(5840)
												if (((_this->head == null()))){
													HX_STACK_LINE(5840)
													_this->pushmod = true;
												}
											}
											else{
												HX_STACK_LINE(5840)
												old = pre->next;
												HX_STACK_LINE(5840)
												ret2 = old->next;
												HX_STACK_LINE(5840)
												pre->next = ret2;
												HX_STACK_LINE(5840)
												if (((ret2 == null()))){
													HX_STACK_LINE(5840)
													_this->pushmod = true;
												}
											}
											HX_STACK_LINE(5840)
											{
											}
											HX_STACK_LINE(5840)
											{
												HX_STACK_LINE(5840)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
												HX_STACK_LINE(5840)
												{
												}
												HX_STACK_LINE(5840)
												o->elt = null();
												HX_STACK_LINE(5840)
												o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
												HX_STACK_LINE(5840)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
											}
											HX_STACK_LINE(5840)
											_this->modified = true;
											HX_STACK_LINE(5840)
											(_this->length)--;
											HX_STACK_LINE(5840)
											_this->pushmod = true;
											HX_STACK_LINE(5840)
											ret2;
										}
										HX_STACK_LINE(5840)
										ret1 = true;
										HX_STACK_LINE(5840)
										break;
									}
									HX_STACK_LINE(5840)
									pre = cur;
									HX_STACK_LINE(5840)
									cur = cur->next;
								}
								HX_STACK_LINE(5840)
								ret1;
							}
						}
						HX_STACK_LINE(5840)
						if (((xarb->pair != null()))){
							HX_STACK_LINE(5840)
							xarb->pair->arb = null();
							HX_STACK_LINE(5840)
							xarb->pair = null();
						}
						HX_STACK_LINE(5840)
						xarb->active = false;
						HX_STACK_LINE(5840)
						this->f_arbiters->modified = true;
					}
					HX_STACK_LINE(5841)
					{
						HX_STACK_LINE(5842)
						if (((::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool == null()))){
							HX_STACK_LINE(5842)
							arb = ::zpp_nape::dynamics::ZPP_FluidArbiter_obj::__new();
						}
						else{
							HX_STACK_LINE(5849)
							arb = ::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool;
							HX_STACK_LINE(5850)
							::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool = arb->next;
							HX_STACK_LINE(5851)
							arb->next = null();
						}
						HX_STACK_LINE(5856)
						Dynamic();
					}
					HX_STACK_LINE(5858)
					arb->intchange = true;
					HX_STACK_LINE(5859)
					first = true;
					HX_STACK_LINE(5860)
					swapped = true;
				}
				else{
					HX_STACK_LINE(5862)
					arb = xarb->fluidarb;
				}
			}
			struct _Function_3_2{
				inline static ::zpp_nape::dynamics::ZPP_FluidArbiter Block( ::zpp_nape::dynamics::ZPP_FluidArbiter &arb,bool &swapped,bool &continuous,::zpp_nape::space::ZPP_Space &_g,::zpp_nape::space::ZPP_Space_obj *__this,::zpp_nape::shape::ZPP_Shape &s2,::zpp_nape::shape::ZPP_Shape &sb,::zpp_nape::shape::ZPP_Shape &s1,bool &first,::zpp_nape::shape::ZPP_Shape &sa){
					HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5864);
					{
						HX_STACK_LINE(5865)
						int inttype = ::zpp_nape::util::ZPP_Flags_obj::id_InteractionType_FLUID;		HX_STACK_VAR(inttype,"inttype");
						struct _Function_4_1{
							inline static ::zpp_nape::dynamics::ZPP_FluidArbiter Block( ::zpp_nape::dynamics::ZPP_FluidArbiter &arb,bool &swapped,bool &continuous,int &inttype,::zpp_nape::space::ZPP_Space &_g,::zpp_nape::shape::ZPP_Shape &s2,::zpp_nape::space::ZPP_Space_obj *__this,::zpp_nape::shape::ZPP_Shape &sb,::zpp_nape::shape::ZPP_Shape &s1,bool &first,::zpp_nape::shape::ZPP_Shape &sa){
								HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5866);
								{
									HX_STACK_LINE(5867)
									arb->stamp = __this->stamp;
									struct _Function_5_1{
										inline static ::zpp_nape::dynamics::ZPP_FluidArbiter Block( ::zpp_nape::dynamics::ZPP_FluidArbiter &arb,bool &swapped,bool &continuous,int &inttype,::zpp_nape::space::ZPP_Space &_g,::zpp_nape::shape::ZPP_Shape &s2,::zpp_nape::space::ZPP_Space_obj *__this,::zpp_nape::shape::ZPP_Shape &sb,::zpp_nape::shape::ZPP_Shape &s1,bool &first,::zpp_nape::shape::ZPP_Shape &sa){
											HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5868);
											{
												HX_STACK_LINE(5869)
												if ((first)){
													HX_STACK_LINE(5870)
													{
														HX_STACK_LINE(5870)
														{
															HX_STACK_LINE(5870)
															arb->b1 = s1->body;
															HX_STACK_LINE(5870)
															arb->ws1 = s1;
															HX_STACK_LINE(5870)
															arb->b2 = s2->body;
															HX_STACK_LINE(5870)
															arb->ws2 = s2;
															HX_STACK_LINE(5870)
															arb->id = sa->id;
															HX_STACK_LINE(5870)
															arb->di = sb->id;
															HX_STACK_LINE(5870)
															{
																HX_STACK_LINE(5870)
																::zpp_nape::util::ZNPList_ZPP_Arbiter _this = arb->b1->arbiters;		HX_STACK_VAR(_this,"_this");
																HX_STACK_LINE(5870)
																{
																}
																struct _Function_10_1{
																	inline static ::zpp_nape::util::ZNPNode_ZPP_Arbiter Block( ::zpp_nape::dynamics::ZPP_FluidArbiter &arb){
																		HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5870);
																		{
																			HX_STACK_LINE(5870)
																			::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
																			HX_STACK_LINE(5870)
																			{
																				HX_STACK_LINE(5870)
																				if (((::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool == null()))){
																					HX_STACK_LINE(5870)
																					ret1 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__new();
																				}
																				else{
																					HX_STACK_LINE(5870)
																					ret1 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
																					HX_STACK_LINE(5870)
																					::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret1->next;
																					HX_STACK_LINE(5870)
																					ret1->next = null();
																				}
																				HX_STACK_LINE(5870)
																				Dynamic();
																			}
																			HX_STACK_LINE(5870)
																			ret1->elt = arb;
																			HX_STACK_LINE(5870)
																			return ret1;
																		}
																		return null();
																	}
																};
																HX_STACK_LINE(5870)
																::zpp_nape::util::ZNPNode_ZPP_Arbiter temp = _Function_10_1::Block(arb);		HX_STACK_VAR(temp,"temp");
																HX_STACK_LINE(5870)
																temp->next = _this->head;
																HX_STACK_LINE(5870)
																_this->head = temp;
																HX_STACK_LINE(5870)
																_this->modified = true;
																HX_STACK_LINE(5870)
																(_this->length)++;
																HX_STACK_LINE(5870)
																arb;
															}
															HX_STACK_LINE(5870)
															{
																HX_STACK_LINE(5870)
																::zpp_nape::util::ZNPList_ZPP_Arbiter _this = arb->b2->arbiters;		HX_STACK_VAR(_this,"_this");
																HX_STACK_LINE(5870)
																{
																}
																struct _Function_10_1{
																	inline static ::zpp_nape::util::ZNPNode_ZPP_Arbiter Block( ::zpp_nape::dynamics::ZPP_FluidArbiter &arb){
																		HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5870);
																		{
																			HX_STACK_LINE(5870)
																			::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
																			HX_STACK_LINE(5870)
																			{
																				HX_STACK_LINE(5870)
																				if (((::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool == null()))){
																					HX_STACK_LINE(5870)
																					ret1 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__new();
																				}
																				else{
																					HX_STACK_LINE(5870)
																					ret1 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
																					HX_STACK_LINE(5870)
																					::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret1->next;
																					HX_STACK_LINE(5870)
																					ret1->next = null();
																				}
																				HX_STACK_LINE(5870)
																				Dynamic();
																			}
																			HX_STACK_LINE(5870)
																			ret1->elt = arb;
																			HX_STACK_LINE(5870)
																			return ret1;
																		}
																		return null();
																	}
																};
																HX_STACK_LINE(5870)
																::zpp_nape::util::ZNPNode_ZPP_Arbiter temp = _Function_10_1::Block(arb);		HX_STACK_VAR(temp,"temp");
																HX_STACK_LINE(5870)
																temp->next = _this->head;
																HX_STACK_LINE(5870)
																_this->head = temp;
																HX_STACK_LINE(5870)
																_this->modified = true;
																HX_STACK_LINE(5870)
																(_this->length)++;
																HX_STACK_LINE(5870)
																arb;
															}
															HX_STACK_LINE(5870)
															arb->active = true;
															HX_STACK_LINE(5870)
															arb->present = (int)0;
															HX_STACK_LINE(5870)
															arb->cleared = false;
															HX_STACK_LINE(5870)
															arb->sleeping = false;
															HX_STACK_LINE(5870)
															arb->fresh = false;
															HX_STACK_LINE(5870)
															arb->presentable = false;
														}
														HX_STACK_LINE(5870)
														{
															HX_STACK_LINE(5870)
															arb->nx = (int)0;
															HX_STACK_LINE(5870)
															arb->ny = (int)1;
															HX_STACK_LINE(5870)
															{
															}
															HX_STACK_LINE(5870)
															{
															}
														}
														HX_STACK_LINE(5870)
														{
															HX_STACK_LINE(5870)
															arb->dampx = (int)0;
															HX_STACK_LINE(5870)
															arb->dampy = (int)0;
															HX_STACK_LINE(5870)
															{
															}
															HX_STACK_LINE(5870)
															{
															}
														}
														HX_STACK_LINE(5870)
														arb->adamp = 0.0;
													}
													HX_STACK_LINE(5871)
													{
														HX_STACK_LINE(5871)
														::zpp_nape::util::ZNPList_ZPP_FluidArbiter _this = __this->f_arbiters;		HX_STACK_VAR(_this,"_this");
														HX_STACK_LINE(5871)
														{
														}
														struct _Function_8_1{
															inline static ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter Block( ::zpp_nape::dynamics::ZPP_FluidArbiter &arb){
																HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5871);
																{
																	HX_STACK_LINE(5871)
																	::zpp_nape::util::ZNPNode_ZPP_FluidArbiter ret1;		HX_STACK_VAR(ret1,"ret1");
																	HX_STACK_LINE(5871)
																	{
																		HX_STACK_LINE(5871)
																		if (((::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool == null()))){
																			HX_STACK_LINE(5871)
																			ret1 = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::__new();
																		}
																		else{
																			HX_STACK_LINE(5871)
																			ret1 = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool;
																			HX_STACK_LINE(5871)
																			::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool = ret1->next;
																			HX_STACK_LINE(5871)
																			ret1->next = null();
																		}
																		HX_STACK_LINE(5871)
																		Dynamic();
																	}
																	HX_STACK_LINE(5871)
																	ret1->elt = arb;
																	HX_STACK_LINE(5871)
																	return ret1;
																}
																return null();
															}
														};
														HX_STACK_LINE(5871)
														::zpp_nape::util::ZNPNode_ZPP_FluidArbiter temp = _Function_8_1::Block(arb);		HX_STACK_VAR(temp,"temp");
														HX_STACK_LINE(5871)
														temp->next = _this->head;
														HX_STACK_LINE(5871)
														_this->head = temp;
														HX_STACK_LINE(5871)
														_this->modified = true;
														HX_STACK_LINE(5871)
														(_this->length)++;
														HX_STACK_LINE(5871)
														arb;
													}
													HX_STACK_LINE(5872)
													arb->fresh = !(swapped);
												}
												else{
													HX_STACK_LINE(5874)
													arb->fresh = (bool((arb->up_stamp < (__this->stamp - (int)1))) || bool((bool((arb->endGenerated == __this->stamp)) && bool(continuous))));
												}
												HX_STACK_LINE(5877)
												arb->up_stamp = arb->stamp;
												HX_STACK_LINE(5878)
												if (((bool(arb->fresh) || bool((((int(arb->immState) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS))) == (int)0))))){
													HX_STACK_LINE(5879)
													arb->immState = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT;
													HX_STACK_LINE(5880)
													bool anyimpure = false;		HX_STACK_VAR(anyimpure,"anyimpure");
													HX_STACK_LINE(5881)
													{
														HX_STACK_LINE(5881)
														{
														}
														HX_STACK_LINE(5881)
														{
															HX_STACK_LINE(5881)
															::zpp_nape::util::ZNPList_ZPP_Interactor _this = __this->mrca1;		HX_STACK_VAR(_this,"_this");
															HX_STACK_LINE(5881)
															{
																HX_STACK_LINE(5881)
																while((!(((_this->head == null()))))){
																	HX_STACK_LINE(5881)
																	{
																	}
																	HX_STACK_LINE(5881)
																	::zpp_nape::util::ZNPNode_ZPP_Interactor ret1 = _this->head;		HX_STACK_VAR(ret1,"ret1");
																	HX_STACK_LINE(5881)
																	_this->head = ret1->next;
																	HX_STACK_LINE(5881)
																	{
																	}
																	HX_STACK_LINE(5881)
																	{
																		HX_STACK_LINE(5881)
																		::zpp_nape::util::ZNPNode_ZPP_Interactor o = ret1;		HX_STACK_VAR(o,"o");
																		HX_STACK_LINE(5881)
																		{
																		}
																		HX_STACK_LINE(5881)
																		o->elt = null();
																		HX_STACK_LINE(5881)
																		o->next = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
																		HX_STACK_LINE(5881)
																		::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o;
																	}
																	HX_STACK_LINE(5881)
																	if (((_this->head == null()))){
																		HX_STACK_LINE(5881)
																		_this->pushmod = true;
																	}
																	HX_STACK_LINE(5881)
																	_this->modified = true;
																	HX_STACK_LINE(5881)
																	(_this->length)--;
																}
																HX_STACK_LINE(5881)
																_this->pushmod = true;
															}
														}
														HX_STACK_LINE(5881)
														{
															HX_STACK_LINE(5881)
															::zpp_nape::util::ZNPList_ZPP_Interactor _this = __this->mrca2;		HX_STACK_VAR(_this,"_this");
															HX_STACK_LINE(5881)
															{
																HX_STACK_LINE(5881)
																while((!(((_this->head == null()))))){
																	HX_STACK_LINE(5881)
																	{
																	}
																	HX_STACK_LINE(5881)
																	::zpp_nape::util::ZNPNode_ZPP_Interactor ret1 = _this->head;		HX_STACK_VAR(ret1,"ret1");
																	HX_STACK_LINE(5881)
																	_this->head = ret1->next;
																	HX_STACK_LINE(5881)
																	{
																	}
																	HX_STACK_LINE(5881)
																	{
																		HX_STACK_LINE(5881)
																		::zpp_nape::util::ZNPNode_ZPP_Interactor o = ret1;		HX_STACK_VAR(o,"o");
																		HX_STACK_LINE(5881)
																		{
																		}
																		HX_STACK_LINE(5881)
																		o->elt = null();
																		HX_STACK_LINE(5881)
																		o->next = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
																		HX_STACK_LINE(5881)
																		::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o;
																	}
																	HX_STACK_LINE(5881)
																	if (((_this->head == null()))){
																		HX_STACK_LINE(5881)
																		_this->pushmod = true;
																	}
																	HX_STACK_LINE(5881)
																	_this->modified = true;
																	HX_STACK_LINE(5881)
																	(_this->length)--;
																}
																HX_STACK_LINE(5881)
																_this->pushmod = true;
															}
														}
														HX_STACK_LINE(5881)
														if (((s1->cbSet != null()))){
															HX_STACK_LINE(5881)
															::zpp_nape::util::ZNPList_ZPP_Interactor _this = __this->mrca1;		HX_STACK_VAR(_this,"_this");
															HX_STACK_LINE(5881)
															{
															}
															struct _Function_9_1{
																inline static ::zpp_nape::util::ZNPNode_ZPP_Interactor Block( ::zpp_nape::shape::ZPP_Shape &s1){
																	HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5881);
																	{
																		HX_STACK_LINE(5881)
																		::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
																		HX_STACK_LINE(5881)
																		{
																			HX_STACK_LINE(5881)
																			if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
																				HX_STACK_LINE(5881)
																				ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();
																			}
																			else{
																				HX_STACK_LINE(5881)
																				ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
																				HX_STACK_LINE(5881)
																				::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
																				HX_STACK_LINE(5881)
																				ret1->next = null();
																			}
																			HX_STACK_LINE(5881)
																			Dynamic();
																		}
																		HX_STACK_LINE(5881)
																		ret1->elt = s1;
																		HX_STACK_LINE(5881)
																		return ret1;
																	}
																	return null();
																}
															};
															HX_STACK_LINE(5881)
															::zpp_nape::util::ZNPNode_ZPP_Interactor temp = _Function_9_1::Block(s1);		HX_STACK_VAR(temp,"temp");
															HX_STACK_LINE(5881)
															temp->next = _this->head;
															HX_STACK_LINE(5881)
															_this->head = temp;
															HX_STACK_LINE(5881)
															_this->modified = true;
															HX_STACK_LINE(5881)
															(_this->length)++;
															HX_STACK_LINE(5881)
															s1;
														}
														HX_STACK_LINE(5881)
														if (((s1->body->cbSet != null()))){
															HX_STACK_LINE(5881)
															::zpp_nape::util::ZNPList_ZPP_Interactor _this = __this->mrca1;		HX_STACK_VAR(_this,"_this");
															::zpp_nape::phys::ZPP_Interactor o = s1->body;		HX_STACK_VAR(o,"o");
															HX_STACK_LINE(5881)
															{
															}
															struct _Function_9_1{
																inline static ::zpp_nape::util::ZNPNode_ZPP_Interactor Block( ::zpp_nape::phys::ZPP_Interactor &o){
																	HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5881);
																	{
																		HX_STACK_LINE(5881)
																		::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
																		HX_STACK_LINE(5881)
																		{
																			HX_STACK_LINE(5881)
																			if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
																				HX_STACK_LINE(5881)
																				ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();
																			}
																			else{
																				HX_STACK_LINE(5881)
																				ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
																				HX_STACK_LINE(5881)
																				::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
																				HX_STACK_LINE(5881)
																				ret1->next = null();
																			}
																			HX_STACK_LINE(5881)
																			Dynamic();
																		}
																		HX_STACK_LINE(5881)
																		ret1->elt = o;
																		HX_STACK_LINE(5881)
																		return ret1;
																	}
																	return null();
																}
															};
															HX_STACK_LINE(5881)
															::zpp_nape::util::ZNPNode_ZPP_Interactor temp = _Function_9_1::Block(o);		HX_STACK_VAR(temp,"temp");
															HX_STACK_LINE(5881)
															temp->next = _this->head;
															HX_STACK_LINE(5881)
															_this->head = temp;
															HX_STACK_LINE(5881)
															_this->modified = true;
															HX_STACK_LINE(5881)
															(_this->length)++;
															HX_STACK_LINE(5881)
															o;
														}
														HX_STACK_LINE(5881)
														if (((s2->cbSet != null()))){
															HX_STACK_LINE(5881)
															::zpp_nape::util::ZNPList_ZPP_Interactor _this = __this->mrca2;		HX_STACK_VAR(_this,"_this");
															HX_STACK_LINE(5881)
															{
															}
															struct _Function_9_1{
																inline static ::zpp_nape::util::ZNPNode_ZPP_Interactor Block( ::zpp_nape::shape::ZPP_Shape &s2){
																	HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5881);
																	{
																		HX_STACK_LINE(5881)
																		::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
																		HX_STACK_LINE(5881)
																		{
																			HX_STACK_LINE(5881)
																			if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
																				HX_STACK_LINE(5881)
																				ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();
																			}
																			else{
																				HX_STACK_LINE(5881)
																				ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
																				HX_STACK_LINE(5881)
																				::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
																				HX_STACK_LINE(5881)
																				ret1->next = null();
																			}
																			HX_STACK_LINE(5881)
																			Dynamic();
																		}
																		HX_STACK_LINE(5881)
																		ret1->elt = s2;
																		HX_STACK_LINE(5881)
																		return ret1;
																	}
																	return null();
																}
															};
															HX_STACK_LINE(5881)
															::zpp_nape::util::ZNPNode_ZPP_Interactor temp = _Function_9_1::Block(s2);		HX_STACK_VAR(temp,"temp");
															HX_STACK_LINE(5881)
															temp->next = _this->head;
															HX_STACK_LINE(5881)
															_this->head = temp;
															HX_STACK_LINE(5881)
															_this->modified = true;
															HX_STACK_LINE(5881)
															(_this->length)++;
															HX_STACK_LINE(5881)
															s2;
														}
														HX_STACK_LINE(5881)
														if (((s2->body->cbSet != null()))){
															HX_STACK_LINE(5881)
															::zpp_nape::util::ZNPList_ZPP_Interactor _this = __this->mrca2;		HX_STACK_VAR(_this,"_this");
															::zpp_nape::phys::ZPP_Interactor o = s2->body;		HX_STACK_VAR(o,"o");
															HX_STACK_LINE(5881)
															{
															}
															struct _Function_9_1{
																inline static ::zpp_nape::util::ZNPNode_ZPP_Interactor Block( ::zpp_nape::phys::ZPP_Interactor &o){
																	HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5881);
																	{
																		HX_STACK_LINE(5881)
																		::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
																		HX_STACK_LINE(5881)
																		{
																			HX_STACK_LINE(5881)
																			if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
																				HX_STACK_LINE(5881)
																				ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();
																			}
																			else{
																				HX_STACK_LINE(5881)
																				ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
																				HX_STACK_LINE(5881)
																				::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
																				HX_STACK_LINE(5881)
																				ret1->next = null();
																			}
																			HX_STACK_LINE(5881)
																			Dynamic();
																		}
																		HX_STACK_LINE(5881)
																		ret1->elt = o;
																		HX_STACK_LINE(5881)
																		return ret1;
																	}
																	return null();
																}
															};
															HX_STACK_LINE(5881)
															::zpp_nape::util::ZNPNode_ZPP_Interactor temp = _Function_9_1::Block(o);		HX_STACK_VAR(temp,"temp");
															HX_STACK_LINE(5881)
															temp->next = _this->head;
															HX_STACK_LINE(5881)
															_this->head = temp;
															HX_STACK_LINE(5881)
															_this->modified = true;
															HX_STACK_LINE(5881)
															(_this->length)++;
															HX_STACK_LINE(5881)
															o;
														}
														HX_STACK_LINE(5881)
														::zpp_nape::phys::ZPP_Compound c1 = s1->body->compound;		HX_STACK_VAR(c1,"c1");
														HX_STACK_LINE(5881)
														::zpp_nape::phys::ZPP_Compound c2 = s2->body->compound;		HX_STACK_VAR(c2,"c2");
														HX_STACK_LINE(5881)
														while(((c1 != c2))){
															HX_STACK_LINE(5881)
															int d1 = (  (((c1 == null()))) ? int((int)0) : int(c1->depth) );		HX_STACK_VAR(d1,"d1");
															HX_STACK_LINE(5881)
															int d2 = (  (((c2 == null()))) ? int((int)0) : int(c2->depth) );		HX_STACK_VAR(d2,"d2");
															HX_STACK_LINE(5881)
															if (((d1 < d2))){
																HX_STACK_LINE(5881)
																if (((c2->cbSet != null()))){
																	HX_STACK_LINE(5881)
																	::zpp_nape::util::ZNPList_ZPP_Interactor _this = __this->mrca2;		HX_STACK_VAR(_this,"_this");
																	HX_STACK_LINE(5881)
																	{
																	}
																	struct _Function_11_1{
																		inline static ::zpp_nape::util::ZNPNode_ZPP_Interactor Block( ::zpp_nape::phys::ZPP_Compound &c2){
																			HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5881);
																			{
																				HX_STACK_LINE(5881)
																				::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
																				HX_STACK_LINE(5881)
																				{
																					HX_STACK_LINE(5881)
																					if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
																						HX_STACK_LINE(5881)
																						ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();
																					}
																					else{
																						HX_STACK_LINE(5881)
																						ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
																						HX_STACK_LINE(5881)
																						::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
																						HX_STACK_LINE(5881)
																						ret1->next = null();
																					}
																					HX_STACK_LINE(5881)
																					Dynamic();
																				}
																				HX_STACK_LINE(5881)
																				ret1->elt = c2;
																				HX_STACK_LINE(5881)
																				return ret1;
																			}
																			return null();
																		}
																	};
																	HX_STACK_LINE(5881)
																	::zpp_nape::util::ZNPNode_ZPP_Interactor temp = _Function_11_1::Block(c2);		HX_STACK_VAR(temp,"temp");
																	HX_STACK_LINE(5881)
																	temp->next = _this->head;
																	HX_STACK_LINE(5881)
																	_this->head = temp;
																	HX_STACK_LINE(5881)
																	_this->modified = true;
																	HX_STACK_LINE(5881)
																	(_this->length)++;
																	HX_STACK_LINE(5881)
																	c2;
																}
																HX_STACK_LINE(5881)
																c2 = c2->compound;
															}
															else{
																HX_STACK_LINE(5881)
																if (((c1->cbSet != null()))){
																	HX_STACK_LINE(5881)
																	::zpp_nape::util::ZNPList_ZPP_Interactor _this = __this->mrca1;		HX_STACK_VAR(_this,"_this");
																	HX_STACK_LINE(5881)
																	{
																	}
																	struct _Function_11_1{
																		inline static ::zpp_nape::util::ZNPNode_ZPP_Interactor Block( ::zpp_nape::phys::ZPP_Compound &c1){
																			HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5881);
																			{
																				HX_STACK_LINE(5881)
																				::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
																				HX_STACK_LINE(5881)
																				{
																					HX_STACK_LINE(5881)
																					if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
																						HX_STACK_LINE(5881)
																						ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();
																					}
																					else{
																						HX_STACK_LINE(5881)
																						ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
																						HX_STACK_LINE(5881)
																						::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
																						HX_STACK_LINE(5881)
																						ret1->next = null();
																					}
																					HX_STACK_LINE(5881)
																					Dynamic();
																				}
																				HX_STACK_LINE(5881)
																				ret1->elt = c1;
																				HX_STACK_LINE(5881)
																				return ret1;
																			}
																			return null();
																		}
																	};
																	HX_STACK_LINE(5881)
																	::zpp_nape::util::ZNPNode_ZPP_Interactor temp = _Function_11_1::Block(c1);		HX_STACK_VAR(temp,"temp");
																	HX_STACK_LINE(5881)
																	temp->next = _this->head;
																	HX_STACK_LINE(5881)
																	_this->head = temp;
																	HX_STACK_LINE(5881)
																	_this->modified = true;
																	HX_STACK_LINE(5881)
																	(_this->length)++;
																	HX_STACK_LINE(5881)
																	c1;
																}
																HX_STACK_LINE(5881)
																c1 = c1->compound;
															}
														}
													}
													HX_STACK_LINE(5882)
													{
														HX_STACK_LINE(5883)
														::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite = __this->mrca1->head;		HX_STACK_VAR(cx_ite,"cx_ite");
														HX_STACK_LINE(5884)
														while(((cx_ite != null()))){
															HX_STACK_LINE(5885)
															::zpp_nape::phys::ZPP_Interactor i1 = cx_ite->elt;		HX_STACK_VAR(i1,"i1");
															HX_STACK_LINE(5886)
															{
																HX_STACK_LINE(5888)
																::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite1 = __this->mrca2->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
																HX_STACK_LINE(5889)
																while(((cx_ite1 != null()))){
																	HX_STACK_LINE(5890)
																	::zpp_nape::phys::ZPP_Interactor i2 = cx_ite1->elt;		HX_STACK_VAR(i2,"i2");
																	HX_STACK_LINE(5891)
																	{
																		HX_STACK_LINE(5892)
																		::zpp_nape::callbacks::ZPP_CbSet cb1 = i1->cbSet;		HX_STACK_VAR(cb1,"cb1");
																		HX_STACK_LINE(5893)
																		::zpp_nape::callbacks::ZPP_CbSet cb2 = i2->cbSet;		HX_STACK_VAR(cb2,"cb2");
																		HX_STACK_LINE(5894)
																		{
																		}
																		struct _Function_12_1{
																			inline static bool Block( ::zpp_nape::callbacks::ZPP_CbSet &cb1,::zpp_nape::callbacks::ZPP_CbSet &cb2){
																				HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5902);
																				{
																					HX_STACK_LINE(5902)
																					{
																					}
																					struct _Function_13_1{
																						inline static ::zpp_nape::callbacks::ZPP_CbSetPair Block( ::zpp_nape::callbacks::ZPP_CbSet &cb1,::zpp_nape::callbacks::ZPP_CbSet &cb2){
																							HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5902);
																							{
																								HX_STACK_LINE(5902)
																								::zpp_nape::callbacks::ZPP_CbSetPair ret1 = null();		HX_STACK_VAR(ret1,"ret1");
																								HX_STACK_LINE(5902)
																								::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs = (  (((cb1->cbpairs->length < cb2->cbpairs->length))) ? ::zpp_nape::util::ZNPList_ZPP_CbSetPair(cb1->cbpairs) : ::zpp_nape::util::ZNPList_ZPP_CbSetPair(cb2->cbpairs) );		HX_STACK_VAR(pairs,"pairs");
																								HX_STACK_LINE(5902)
																								{
																									HX_STACK_LINE(5902)
																									::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite2 = pairs->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																									HX_STACK_LINE(5902)
																									while(((cx_ite2 != null()))){
																										HX_STACK_LINE(5902)
																										::zpp_nape::callbacks::ZPP_CbSetPair p = cx_ite2->elt;		HX_STACK_VAR(p,"p");
																										HX_STACK_LINE(5902)
																										if (((bool((bool((p->a == cb1)) && bool((p->b == cb2)))) || bool((bool((p->a == cb2)) && bool((p->b == cb1))))))){
																											HX_STACK_LINE(5902)
																											ret1 = p;
																											HX_STACK_LINE(5902)
																											break;
																										}
																										HX_STACK_LINE(5902)
																										cx_ite2 = cx_ite2->next;
																									}
																								}
																								HX_STACK_LINE(5902)
																								if (((ret1 == null()))){
																									struct _Function_15_1{
																										inline static ::zpp_nape::callbacks::ZPP_CbSetPair Block( ::zpp_nape::callbacks::ZPP_CbSet &cb1,::zpp_nape::callbacks::ZPP_CbSet &cb2){
																											HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5902);
																											{
																												HX_STACK_LINE(5902)
																												::zpp_nape::callbacks::ZPP_CbSetPair ret2;		HX_STACK_VAR(ret2,"ret2");
																												HX_STACK_LINE(5902)
																												{
																													HX_STACK_LINE(5902)
																													if (((::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool == null()))){
																														HX_STACK_LINE(5902)
																														ret2 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__new();
																													}
																													else{
																														HX_STACK_LINE(5902)
																														ret2 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
																														HX_STACK_LINE(5902)
																														::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret2->next;
																														HX_STACK_LINE(5902)
																														ret2->next = null();
																													}
																													HX_STACK_LINE(5902)
																													ret2->zip_listeners = true;
																												}
																												HX_STACK_LINE(5902)
																												if ((::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(cb1,cb2))){
																													HX_STACK_LINE(5902)
																													ret2->a = cb1;
																													HX_STACK_LINE(5902)
																													ret2->b = cb2;
																												}
																												else{
																													HX_STACK_LINE(5902)
																													ret2->a = cb2;
																													HX_STACK_LINE(5902)
																													ret2->b = cb1;
																												}
																												HX_STACK_LINE(5902)
																												return ret2;
																											}
																											return null();
																										}
																									};
																									HX_STACK_LINE(5902)
																									ret1 = _Function_15_1::Block(cb1,cb2);
																									HX_STACK_LINE(5902)
																									cb1->cbpairs->add(ret1);
																									HX_STACK_LINE(5902)
																									if (((cb2 != cb1))){
																										HX_STACK_LINE(5902)
																										cb2->cbpairs->add(ret1);
																									}
																								}
																								HX_STACK_LINE(5902)
																								if ((ret1->zip_listeners)){
																									HX_STACK_LINE(5902)
																									ret1->zip_listeners = false;
																									HX_STACK_LINE(5902)
																									ret1->__validate();
																								}
																								HX_STACK_LINE(5902)
																								return ret1;
																							}
																							return null();
																						}
																					};
																					HX_STACK_LINE(5902)
																					return ((_Function_13_1::Block(cb1,cb2))->listeners->head == null());
																				}
																				return null();
																			}
																		};
																		HX_STACK_LINE(5902)
																		if ((_Function_12_1::Block(cb1,cb2))){
																			HX_STACK_LINE(5903)
																			cx_ite1 = cx_ite1->next;
																			HX_STACK_LINE(5904)
																			continue;
																		}
																		HX_STACK_LINE(5906)
																		::zpp_nape::space::ZPP_CallbackSet callbackset = null();		HX_STACK_VAR(callbackset,"callbackset");
																		HX_STACK_LINE(5907)
																		::zpp_nape::space::ZPP_CallbackSet ncallbackset = null();		HX_STACK_VAR(ncallbackset,"ncallbackset");
																		HX_STACK_LINE(5908)
																		{
																			HX_STACK_LINE(5908)
																			::zpp_nape::util::ZNPList_ZPP_InteractionListener _this = __this->prelisteners;		HX_STACK_VAR(_this,"_this");
																			HX_STACK_LINE(5908)
																			{
																				HX_STACK_LINE(5908)
																				while((!(((_this->head == null()))))){
																					HX_STACK_LINE(5908)
																					{
																					}
																					HX_STACK_LINE(5908)
																					::zpp_nape::util::ZNPNode_ZPP_InteractionListener ret1 = _this->head;		HX_STACK_VAR(ret1,"ret1");
																					HX_STACK_LINE(5908)
																					_this->head = ret1->next;
																					HX_STACK_LINE(5908)
																					{
																					}
																					HX_STACK_LINE(5908)
																					{
																						HX_STACK_LINE(5908)
																						::zpp_nape::util::ZNPNode_ZPP_InteractionListener o = ret1;		HX_STACK_VAR(o,"o");
																						HX_STACK_LINE(5908)
																						{
																						}
																						HX_STACK_LINE(5908)
																						o->elt = null();
																						HX_STACK_LINE(5908)
																						o->next = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool;
																						HX_STACK_LINE(5908)
																						::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool = o;
																					}
																					HX_STACK_LINE(5908)
																					if (((_this->head == null()))){
																						HX_STACK_LINE(5908)
																						_this->pushmod = true;
																					}
																					HX_STACK_LINE(5908)
																					_this->modified = true;
																					HX_STACK_LINE(5908)
																					(_this->length)--;
																				}
																				HX_STACK_LINE(5908)
																				_this->pushmod = true;
																			}
																		}
																		HX_STACK_LINE(5909)
																		::zpp_nape::util::ZNPNode_ZPP_InteractionListener lite = null();		HX_STACK_VAR(lite,"lite");
																		HX_STACK_LINE(5910)
																		{
																			HX_STACK_LINE(5910)
																			int event = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_PRE;		HX_STACK_VAR(event,"event");
																			HX_STACK_LINE(5910)
																			{
																				HX_STACK_LINE(5910)
																				{
																				}
																				HX_STACK_LINE(5910)
																				{
																					struct _Function_15_1{
																						inline static ::zpp_nape::callbacks::ZPP_CbSetPair Block( ::zpp_nape::callbacks::ZPP_CbSet &cb1,::zpp_nape::callbacks::ZPP_CbSet &cb2){
																							HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5910);
																							{
																								HX_STACK_LINE(5910)
																								::zpp_nape::callbacks::ZPP_CbSetPair ret1 = null();		HX_STACK_VAR(ret1,"ret1");
																								HX_STACK_LINE(5910)
																								::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs = (  (((cb1->cbpairs->length < cb2->cbpairs->length))) ? ::zpp_nape::util::ZNPList_ZPP_CbSetPair(cb1->cbpairs) : ::zpp_nape::util::ZNPList_ZPP_CbSetPair(cb2->cbpairs) );		HX_STACK_VAR(pairs,"pairs");
																								HX_STACK_LINE(5910)
																								{
																									HX_STACK_LINE(5910)
																									::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite2 = pairs->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																									HX_STACK_LINE(5910)
																									while(((cx_ite2 != null()))){
																										HX_STACK_LINE(5910)
																										::zpp_nape::callbacks::ZPP_CbSetPair p = cx_ite2->elt;		HX_STACK_VAR(p,"p");
																										HX_STACK_LINE(5910)
																										if (((bool((bool((p->a == cb1)) && bool((p->b == cb2)))) || bool((bool((p->a == cb2)) && bool((p->b == cb1))))))){
																											HX_STACK_LINE(5910)
																											ret1 = p;
																											HX_STACK_LINE(5910)
																											break;
																										}
																										HX_STACK_LINE(5910)
																										cx_ite2 = cx_ite2->next;
																									}
																								}
																								HX_STACK_LINE(5910)
																								if (((ret1 == null()))){
																									struct _Function_17_1{
																										inline static ::zpp_nape::callbacks::ZPP_CbSetPair Block( ::zpp_nape::callbacks::ZPP_CbSet &cb1,::zpp_nape::callbacks::ZPP_CbSet &cb2){
																											HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5910);
																											{
																												HX_STACK_LINE(5910)
																												::zpp_nape::callbacks::ZPP_CbSetPair ret2;		HX_STACK_VAR(ret2,"ret2");
																												HX_STACK_LINE(5910)
																												{
																													HX_STACK_LINE(5910)
																													if (((::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool == null()))){
																														HX_STACK_LINE(5910)
																														ret2 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__new();
																													}
																													else{
																														HX_STACK_LINE(5910)
																														ret2 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
																														HX_STACK_LINE(5910)
																														::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret2->next;
																														HX_STACK_LINE(5910)
																														ret2->next = null();
																													}
																													HX_STACK_LINE(5910)
																													ret2->zip_listeners = true;
																												}
																												HX_STACK_LINE(5910)
																												if ((::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(cb1,cb2))){
																													HX_STACK_LINE(5910)
																													ret2->a = cb1;
																													HX_STACK_LINE(5910)
																													ret2->b = cb2;
																												}
																												else{
																													HX_STACK_LINE(5910)
																													ret2->a = cb2;
																													HX_STACK_LINE(5910)
																													ret2->b = cb1;
																												}
																												HX_STACK_LINE(5910)
																												return ret2;
																											}
																											return null();
																										}
																									};
																									HX_STACK_LINE(5910)
																									ret1 = _Function_17_1::Block(cb1,cb2);
																									HX_STACK_LINE(5910)
																									cb1->cbpairs->add(ret1);
																									HX_STACK_LINE(5910)
																									if (((cb2 != cb1))){
																										HX_STACK_LINE(5910)
																										cb2->cbpairs->add(ret1);
																									}
																								}
																								HX_STACK_LINE(5910)
																								if ((ret1->zip_listeners)){
																									HX_STACK_LINE(5910)
																									ret1->zip_listeners = false;
																									HX_STACK_LINE(5910)
																									ret1->__validate();
																								}
																								HX_STACK_LINE(5910)
																								return ret1;
																							}
																							return null();
																						}
																					};
																					HX_STACK_LINE(5910)
																					::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite2 = (_Function_15_1::Block(cb1,cb2))->listeners->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																					HX_STACK_LINE(5910)
																					while(((cx_ite2 != null()))){
																						HX_STACK_LINE(5910)
																						::zpp_nape::callbacks::ZPP_InteractionListener x = cx_ite2->elt;		HX_STACK_VAR(x,"x");
																						HX_STACK_LINE(5910)
																						if (((x->event == event))){
																							HX_STACK_LINE(5910)
																							if (((((int(x->itype) & int(inttype))) != (int)0))){
																								struct _Function_18_1{
																									inline static ::zpp_nape::util::ZNPNode_ZPP_InteractionListener Block( ::zpp_nape::util::ZNPNode_ZPP_InteractionListener &lite,::zpp_nape::space::ZPP_Space &_g,::zpp_nape::callbacks::ZPP_InteractionListener &x){
																										HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5910);
																										{
																											HX_STACK_LINE(5910)
																											::zpp_nape::util::ZNPList_ZPP_InteractionListener _this = _g->prelisteners;		HX_STACK_VAR(_this,"_this");
																											HX_STACK_LINE(5910)
																											{
																											}
																											struct _Function_19_1{
																												inline static ::zpp_nape::util::ZNPNode_ZPP_InteractionListener Block( ::zpp_nape::callbacks::ZPP_InteractionListener &x){
																													HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5910);
																													{
																														HX_STACK_LINE(5910)
																														::zpp_nape::util::ZNPNode_ZPP_InteractionListener ret1;		HX_STACK_VAR(ret1,"ret1");
																														HX_STACK_LINE(5910)
																														{
																															HX_STACK_LINE(5910)
																															if (((::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool == null()))){
																																HX_STACK_LINE(5910)
																																ret1 = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::__new();
																															}
																															else{
																																HX_STACK_LINE(5910)
																																ret1 = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool;
																																HX_STACK_LINE(5910)
																																::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool = ret1->next;
																																HX_STACK_LINE(5910)
																																ret1->next = null();
																															}
																															HX_STACK_LINE(5910)
																															Dynamic();
																														}
																														HX_STACK_LINE(5910)
																														ret1->elt = x;
																														HX_STACK_LINE(5910)
																														return ret1;
																													}
																													return null();
																												}
																											};
																											HX_STACK_LINE(5910)
																											::zpp_nape::util::ZNPNode_ZPP_InteractionListener temp = _Function_19_1::Block(x);		HX_STACK_VAR(temp,"temp");
																											HX_STACK_LINE(5910)
																											if (((lite == null()))){
																												HX_STACK_LINE(5910)
																												temp->next = _this->head;
																												HX_STACK_LINE(5910)
																												_this->head = temp;
																											}
																											else{
																												HX_STACK_LINE(5910)
																												temp->next = lite->next;
																												HX_STACK_LINE(5910)
																												lite->next = temp;
																											}
																											HX_STACK_LINE(5910)
																											_this->pushmod = _this->modified = true;
																											HX_STACK_LINE(5910)
																											(_this->length)++;
																											HX_STACK_LINE(5910)
																											return temp;
																										}
																										return null();
																									}
																								};
																								HX_STACK_LINE(5910)
																								lite = _Function_18_1::Block(lite,_g,x);
																								HX_STACK_LINE(5910)
																								anyimpure = (bool(anyimpure) || bool(!(x->pure)));
																							}
																						}
																						HX_STACK_LINE(5910)
																						cx_ite2 = cx_ite2->next;
																					}
																				}
																			}
																		}
																		HX_STACK_LINE(5916)
																		if (((__this->prelisteners->head == null()))){
																			HX_STACK_LINE(5917)
																			cx_ite1 = cx_ite1->next;
																			HX_STACK_LINE(5918)
																			continue;
																		}
																		HX_STACK_LINE(5920)
																		callbackset = ::zpp_nape::phys::ZPP_Interactor_obj::get(i1,i2);
																		HX_STACK_LINE(5921)
																		if (((callbackset == null()))){
																			HX_STACK_LINE(5922)
																			ncallbackset = ::zpp_nape::space::ZPP_CallbackSet_obj::get(i1,i2);
																			HX_STACK_LINE(5923)
																			__this->add_callbackset(ncallbackset);
																		}
																		HX_STACK_LINE(5925)
																		if (((bool((callbackset == null())) || bool((bool(((bool((callbackset->FLUIDstamp != __this->stamp)) || bool(continuous)))) && bool((((int(callbackset->FLUIDstate) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS))) == (int)0))))))){
																			HX_STACK_LINE(5926)
																			if (((ncallbackset != null()))){
																				HX_STACK_LINE(5926)
																				callbackset = ncallbackset;
																			}
																			HX_STACK_LINE(5927)
																			if (((callbackset != null()))){
																				HX_STACK_LINE(5929)
																				::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite2 = __this->prelisteners->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																				HX_STACK_LINE(5930)
																				while(((cx_ite2 != null()))){
																					HX_STACK_LINE(5931)
																					::zpp_nape::callbacks::ZPP_InteractionListener listener = cx_ite2->elt;		HX_STACK_VAR(listener,"listener");
																					HX_STACK_LINE(5932)
																					if (((listener->itype == ::zpp_nape::util::ZPP_Flags_obj::id_InteractionType_ANY))){
																						HX_STACK_LINE(5934)
																						callbackset->COLLISIONstamp = __this->stamp;
																						HX_STACK_LINE(5935)
																						callbackset->SENSORstamp = __this->stamp;
																						HX_STACK_LINE(5936)
																						callbackset->FLUIDstamp = __this->stamp;
																					}
																					else{
																						HX_STACK_LINE(5938)
																						callbackset->FLUIDstamp = __this->stamp;
																					}
																					HX_STACK_LINE(5940)
																					cx_ite2 = cx_ite2->next;
																				}
																			}
																			HX_STACK_LINE(5945)
																			{
																				HX_STACK_LINE(5945)
																				arb->_mutable = true;
																				HX_STACK_LINE(5945)
																				if (((arb->wrap_position != null()))){
																					HX_STACK_LINE(5945)
																					arb->wrap_position->zpp_inner->_immutable = false;
																				}
																			}
																			HX_STACK_LINE(5947)
																			bool pact = arb->active;		HX_STACK_VAR(pact,"pact");
																			HX_STACK_LINE(5948)
																			arb->active = true;
																			HX_STACK_LINE(5949)
																			bool emptycontacts = false;		HX_STACK_VAR(emptycontacts,"emptycontacts");
																			HX_STACK_LINE(5952)
																			__this->precb->zpp_inner->pre_arbiter = arb;
																			HX_STACK_LINE(5953)
																			__this->precb->zpp_inner->set = callbackset;
																			HX_STACK_LINE(5954)
																			{
																				HX_STACK_LINE(5955)
																				::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite2 = __this->prelisteners->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																				HX_STACK_LINE(5956)
																				while(((cx_ite2 != null()))){
																					HX_STACK_LINE(5957)
																					::zpp_nape::callbacks::ZPP_InteractionListener listener = cx_ite2->elt;		HX_STACK_VAR(listener,"listener");
																					HX_STACK_LINE(5958)
																					{
																						HX_STACK_LINE(5959)
																						__this->precb->zpp_inner->listener = listener;
																						HX_STACK_LINE(5986)
																						{
																							HX_STACK_LINE(5986)
																							::zpp_nape::callbacks::ZPP_Callback cb = __this->precb->zpp_inner;		HX_STACK_VAR(cb,"cb");
																							HX_STACK_LINE(5986)
																							::zpp_nape::phys::ZPP_Interactor o1 = callbackset->int1;		HX_STACK_VAR(o1,"o1");
																							HX_STACK_LINE(5986)
																							::zpp_nape::phys::ZPP_Interactor o2 = callbackset->int2;		HX_STACK_VAR(o2,"o2");
																							struct _Function_17_1{
																								inline static bool Block( ::zpp_nape::callbacks::ZPP_InteractionListener &listener,::zpp_nape::phys::ZPP_Interactor &o1){
																									HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5986);
																									{
																										HX_STACK_LINE(5986)
																										::zpp_nape::callbacks::ZPP_OptionType _this = listener->options1;		HX_STACK_VAR(_this,"_this");
																										::zpp_nape::util::ZNPList_ZPP_CbType xs = o1->cbTypes;		HX_STACK_VAR(xs,"xs");
																										HX_STACK_LINE(5986)
																										return (bool(_this->nonemptyintersection(xs,_this->includes)) && bool(!(_this->nonemptyintersection(xs,_this->excludes))));
																									}
																									return null();
																								}
																							};
																							struct _Function_17_2{
																								inline static bool Block( ::zpp_nape::callbacks::ZPP_InteractionListener &listener,::zpp_nape::phys::ZPP_Interactor &o2){
																									HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5986);
																									{
																										HX_STACK_LINE(5986)
																										::zpp_nape::callbacks::ZPP_OptionType _this = listener->options2;		HX_STACK_VAR(_this,"_this");
																										::zpp_nape::util::ZNPList_ZPP_CbType xs = o2->cbTypes;		HX_STACK_VAR(xs,"xs");
																										HX_STACK_LINE(5986)
																										return (bool(_this->nonemptyintersection(xs,_this->includes)) && bool(!(_this->nonemptyintersection(xs,_this->excludes))));
																									}
																									return null();
																								}
																							};
																							HX_STACK_LINE(5986)
																							if (((bool(_Function_17_1::Block(listener,o1)) && bool(_Function_17_2::Block(listener,o2))))){
																								HX_STACK_LINE(5986)
																								cb->int1 = o1;
																								HX_STACK_LINE(5986)
																								cb->int2 = o2;
																							}
																							else{
																								HX_STACK_LINE(5986)
																								cb->int1 = o2;
																								HX_STACK_LINE(5986)
																								cb->int2 = o1;
																							}
																						}
																						HX_STACK_LINE(5987)
																						__this->precb->zpp_inner->pre_swapped = (i1 != __this->precb->zpp_inner->int1);
																						HX_STACK_LINE(5988)
																						::nape::callbacks::PreFlag ret1 = listener->handlerp(__this->precb);		HX_STACK_VAR(ret1,"ret1");
																						HX_STACK_LINE(5989)
																						if (((ret1 != null()))){
																							struct _Function_17_1{
																								inline static ::nape::callbacks::PreFlag Block( ){
																									HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5990);
																									{
																										HX_STACK_LINE(5990)
																										if (((::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT == null()))){
																											HX_STACK_LINE(5990)
																											::zpp_nape::util::ZPP_Flags_obj::internal = true;
																											HX_STACK_LINE(5990)
																											::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT = ::nape::callbacks::PreFlag_obj::__new();
																											HX_STACK_LINE(5990)
																											::zpp_nape::util::ZPP_Flags_obj::internal = false;
																										}
																										HX_STACK_LINE(5990)
																										return ::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT;
																									}
																									return null();
																								}
																							};
																							struct _Function_17_2{
																								inline static ::nape::callbacks::PreFlag Block( ){
																									HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5990);
																									{
																										HX_STACK_LINE(5990)
																										if (((::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT_ONCE == null()))){
																											HX_STACK_LINE(5990)
																											::zpp_nape::util::ZPP_Flags_obj::internal = true;
																											HX_STACK_LINE(5990)
																											::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT_ONCE = ::nape::callbacks::PreFlag_obj::__new();
																											HX_STACK_LINE(5990)
																											::zpp_nape::util::ZPP_Flags_obj::internal = false;
																										}
																										HX_STACK_LINE(5990)
																										return ::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT_ONCE;
																									}
																									return null();
																								}
																							};
																							struct _Function_17_3{
																								inline static ::nape::callbacks::PreFlag Block( ){
																									HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5990);
																									{
																										HX_STACK_LINE(5990)
																										if (((::zpp_nape::util::ZPP_Flags_obj::PreFlag_IGNORE == null()))){
																											HX_STACK_LINE(5990)
																											::zpp_nape::util::ZPP_Flags_obj::internal = true;
																											HX_STACK_LINE(5990)
																											::zpp_nape::util::ZPP_Flags_obj::PreFlag_IGNORE = ::nape::callbacks::PreFlag_obj::__new();
																											HX_STACK_LINE(5990)
																											::zpp_nape::util::ZPP_Flags_obj::internal = false;
																										}
																										HX_STACK_LINE(5990)
																										return ::zpp_nape::util::ZPP_Flags_obj::PreFlag_IGNORE;
																									}
																									return null();
																								}
																							};
																							HX_STACK_LINE(5989)
																							arb->immState = (  (((ret1 == _Function_17_1::Block()))) ? int((int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT) | int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS))) : int((  (((ret1 == _Function_17_2::Block()))) ? int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT) : int((  (((ret1 == _Function_17_3::Block()))) ? int((int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_IGNORE) | int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS))) : int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_IGNORE) )) )) );
																						}
																					}
																					HX_STACK_LINE(5993)
																					cx_ite2 = cx_ite2->next;
																				}
																			}
																			HX_STACK_LINE(5997)
																			{
																				HX_STACK_LINE(5997)
																				arb->_mutable = false;
																				HX_STACK_LINE(5997)
																				if (((arb->wrap_position != null()))){
																					HX_STACK_LINE(5997)
																					arb->wrap_position->zpp_inner->_immutable = true;
																				}
																			}
																			HX_STACK_LINE(5999)
																			arb->active = pact;
																			HX_STACK_LINE(6000)
																			if (((callbackset != null()))){
																				HX_STACK_LINE(6002)
																				::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite2 = __this->prelisteners->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																				HX_STACK_LINE(6003)
																				while(((cx_ite2 != null()))){
																					HX_STACK_LINE(6004)
																					::zpp_nape::callbacks::ZPP_InteractionListener listener = cx_ite2->elt;		HX_STACK_VAR(listener,"listener");
																					HX_STACK_LINE(6005)
																					if (((listener->itype == ::zpp_nape::util::ZPP_Flags_obj::id_InteractionType_ANY))){
																						HX_STACK_LINE(6007)
																						callbackset->COLLISIONstate = arb->immState;
																						HX_STACK_LINE(6008)
																						callbackset->SENSORstate = arb->immState;
																						HX_STACK_LINE(6009)
																						callbackset->FLUIDstate = arb->immState;
																					}
																					else{
																						HX_STACK_LINE(6011)
																						callbackset->FLUIDstate = arb->immState;
																					}
																					HX_STACK_LINE(6013)
																					cx_ite2 = cx_ite2->next;
																				}
																			}
																		}
																		else{
																			HX_STACK_LINE(6018)
																			if (((callbackset == null()))){
																				HX_STACK_LINE(6018)
																				if (((((int(arb->immState) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS))) == (int)0))){
																					HX_STACK_LINE(6019)
																					arb->immState = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT;
																				}
																			}
																			else{
																				HX_STACK_LINE(6021)
																				arb->immState = callbackset->FLUIDstate;
																			}
																		}
																	}
																	HX_STACK_LINE(6023)
																	cx_ite1 = cx_ite1->next;
																}
															}
															HX_STACK_LINE(6027)
															cx_ite = cx_ite->next;
														}
													}
													HX_STACK_LINE(6030)
													if (((bool(anyimpure) && bool((((int(arb->immState) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS))) == (int)0))))){
														HX_STACK_LINE(6032)
														if (((arb->b1->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC))){
															HX_STACK_LINE(6033)
															::zpp_nape::phys::ZPP_Body o = arb->b1;		HX_STACK_VAR(o,"o");
															HX_STACK_LINE(6034)
															{
															}
															HX_STACK_LINE(6042)
															if ((!(o->world))){
																HX_STACK_LINE(6043)
																{
																}
																HX_STACK_LINE(6051)
																o->component->waket = (__this->stamp + ((  ((__this->midstep)) ? int((int)0) : int((int)1) )));
																HX_STACK_LINE(6052)
																if ((o->component->sleeping)){
																	HX_STACK_LINE(6052)
																	__this->really_wake(o,false);
																}
															}
														}
														HX_STACK_LINE(6057)
														if (((arb->b1->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC))){
															HX_STACK_LINE(6058)
															::zpp_nape::phys::ZPP_Body o = arb->b2;		HX_STACK_VAR(o,"o");
															HX_STACK_LINE(6059)
															{
															}
															HX_STACK_LINE(6067)
															if ((!(o->world))){
																HX_STACK_LINE(6068)
																{
																}
																HX_STACK_LINE(6076)
																o->component->waket = (__this->stamp + ((  ((__this->midstep)) ? int((int)0) : int((int)1) )));
																HX_STACK_LINE(6077)
																if ((o->component->sleeping)){
																	HX_STACK_LINE(6077)
																	__this->really_wake(o,false);
																}
															}
														}
													}
												}
												HX_STACK_LINE(6137)
												if (((((int(arb->immState) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT))) != (int)0))){
													HX_STACK_LINE(6138)
													if (((bool((arb->b1->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC)) && bool(arb->b1->component->sleeping)))){
														HX_STACK_LINE(6139)
														::zpp_nape::phys::ZPP_Body o = arb->b1;		HX_STACK_VAR(o,"o");
														HX_STACK_LINE(6140)
														{
														}
														HX_STACK_LINE(6148)
														if ((!(o->world))){
															HX_STACK_LINE(6149)
															{
															}
															HX_STACK_LINE(6157)
															o->component->waket = (__this->stamp + ((  ((__this->midstep)) ? int((int)0) : int((int)1) )));
															HX_STACK_LINE(6158)
															if ((o->component->sleeping)){
																HX_STACK_LINE(6158)
																__this->really_wake(o,false);
															}
														}
													}
													HX_STACK_LINE(6163)
													if (((bool((arb->b2->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC)) && bool(arb->b2->component->sleeping)))){
														HX_STACK_LINE(6164)
														::zpp_nape::phys::ZPP_Body o = arb->b2;		HX_STACK_VAR(o,"o");
														HX_STACK_LINE(6165)
														{
														}
														HX_STACK_LINE(6173)
														if ((!(o->world))){
															HX_STACK_LINE(6174)
															{
															}
															HX_STACK_LINE(6182)
															o->component->waket = (__this->stamp + ((  ((__this->midstep)) ? int((int)0) : int((int)1) )));
															HX_STACK_LINE(6183)
															if ((o->component->sleeping)){
																HX_STACK_LINE(6183)
																__this->really_wake(o,false);
															}
														}
													}
												}
												HX_STACK_LINE(6189)
												if ((arb->sleeping)){
													HX_STACK_LINE(6190)
													arb->sleeping = false;
													HX_STACK_LINE(6191)
													{
														HX_STACK_LINE(6191)
														::zpp_nape::util::ZNPList_ZPP_FluidArbiter _this = __this->f_arbiters;		HX_STACK_VAR(_this,"_this");
														HX_STACK_LINE(6191)
														{
														}
														struct _Function_8_1{
															inline static ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter Block( ::zpp_nape::dynamics::ZPP_FluidArbiter &arb){
																HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6191);
																{
																	HX_STACK_LINE(6191)
																	::zpp_nape::util::ZNPNode_ZPP_FluidArbiter ret1;		HX_STACK_VAR(ret1,"ret1");
																	HX_STACK_LINE(6191)
																	{
																		HX_STACK_LINE(6191)
																		if (((::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool == null()))){
																			HX_STACK_LINE(6191)
																			ret1 = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::__new();
																		}
																		else{
																			HX_STACK_LINE(6191)
																			ret1 = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool;
																			HX_STACK_LINE(6191)
																			::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool = ret1->next;
																			HX_STACK_LINE(6191)
																			ret1->next = null();
																		}
																		HX_STACK_LINE(6191)
																		Dynamic();
																	}
																	HX_STACK_LINE(6191)
																	ret1->elt = arb;
																	HX_STACK_LINE(6191)
																	return ret1;
																}
																return null();
															}
														};
														HX_STACK_LINE(6191)
														::zpp_nape::util::ZNPNode_ZPP_FluidArbiter temp = _Function_8_1::Block(arb);		HX_STACK_VAR(temp,"temp");
														HX_STACK_LINE(6191)
														temp->next = _this->head;
														HX_STACK_LINE(6191)
														_this->head = temp;
														HX_STACK_LINE(6191)
														_this->modified = true;
														HX_STACK_LINE(6191)
														(_this->length)++;
														HX_STACK_LINE(6191)
														arb;
													}
												}
												HX_STACK_LINE(6193)
												return arb;
											}
											return null();
										}
									};
									struct _Function_5_2{
										inline static ::zpp_nape::dynamics::ZPP_FluidArbiter Block( ::zpp_nape::dynamics::ZPP_FluidArbiter &arb){
											HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6195);
											{
												HX_STACK_LINE(6196)
												{
													HX_STACK_LINE(6197)
													::zpp_nape::dynamics::ZPP_FluidArbiter o = arb;		HX_STACK_VAR(o,"o");
													HX_STACK_LINE(6198)
													{
													}
													HX_STACK_LINE(6207)
													o->next = ::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool;
													HX_STACK_LINE(6208)
													::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool = o;
												}
												HX_STACK_LINE(6213)
												return null();
											}
											return null();
										}
									};
									HX_STACK_LINE(5868)
									return (  ((::zpp_nape::geom::ZPP_Collide_obj::flowCollide(sa,sb,arb))) ? ::zpp_nape::dynamics::ZPP_FluidArbiter(_Function_5_1::Block(arb,swapped,continuous,inttype,_g,s2,__this,sb,s1,first,sa)) : ::zpp_nape::dynamics::ZPP_FluidArbiter((  ((first)) ? ::zpp_nape::dynamics::ZPP_FluidArbiter(_Function_5_2::Block(arb)) : ::zpp_nape::dynamics::ZPP_FluidArbiter(arb) )) );
								}
								return null();
							}
						};
						HX_STACK_LINE(5866)
						return (  (((bool((bool(first) || bool((arb->stamp != __this->stamp)))) || bool(continuous)))) ? ::zpp_nape::dynamics::ZPP_FluidArbiter(_Function_4_1::Block(arb,swapped,continuous,inttype,_g,s2,__this,sb,s1,first,sa)) : ::zpp_nape::dynamics::ZPP_FluidArbiter(arb) );
					}
					return null();
				}
			};
			HX_STACK_LINE(5864)
			ret = _Function_3_2::Block(arb,swapped,continuous,_g,this,s2,sb,s1,first,sa);
		}
		else{
			HX_STACK_LINE(6220)
			if (((itype == (int)1))){
				HX_STACK_LINE(6221)
				::zpp_nape::util::ZNPList_ZPP_ColArbiter carbs = (  ((stat)) ? ::zpp_nape::util::ZNPList_ZPP_ColArbiter(this->c_arbiters_true) : ::zpp_nape::util::ZNPList_ZPP_ColArbiter(this->c_arbiters_false) );		HX_STACK_VAR(carbs,"carbs");
				struct _Function_4_1{
					inline static ::zpp_nape::dynamics::ZPP_Arbiter Block( ::zpp_nape::shape::ZPP_Shape &sa,::zpp_nape::phys::ZPP_Body &b2,::zpp_nape::phys::ZPP_Body &b1,::zpp_nape::shape::ZPP_Shape &sb){
						HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6222);
						{
							HX_STACK_LINE(6223)
							::zpp_nape::dynamics::ZPP_Arbiter ret1 = null();		HX_STACK_VAR(ret1,"ret1");
							HX_STACK_LINE(6224)
							::zpp_nape::phys::ZPP_Body b = (  (((b1->arbiters->length < b2->arbiters->length))) ? ::zpp_nape::phys::ZPP_Body(b1) : ::zpp_nape::phys::ZPP_Body(b2) );		HX_STACK_VAR(b,"b");
							HX_STACK_LINE(6225)
							{
								HX_STACK_LINE(6226)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite = b->arbiters->head;		HX_STACK_VAR(cx_ite,"cx_ite");
								HX_STACK_LINE(6227)
								while(((cx_ite != null()))){
									HX_STACK_LINE(6228)
									::zpp_nape::dynamics::ZPP_Arbiter arb = cx_ite->elt;		HX_STACK_VAR(arb,"arb");
									HX_STACK_LINE(6229)
									{
										HX_STACK_LINE(6230)
										{
										}
										HX_STACK_LINE(6238)
										if (((bool((arb->id == sa->id)) && bool((arb->di == sb->id))))){
											HX_STACK_LINE(6239)
											ret1 = arb;
											HX_STACK_LINE(6240)
											break;
										}
									}
									HX_STACK_LINE(6243)
									cx_ite = cx_ite->next;
								}
							}
							HX_STACK_LINE(6246)
							return ret1;
						}
						return null();
					}
				};
				HX_STACK_LINE(6222)
				::zpp_nape::dynamics::ZPP_Arbiter xarb = (  (((in_arb == null()))) ? ::zpp_nape::dynamics::ZPP_Arbiter(_Function_4_1::Block(sa,b2,b1,sb)) : ::zpp_nape::dynamics::ZPP_Arbiter(in_arb) );		HX_STACK_VAR(xarb,"xarb");
				HX_STACK_LINE(6248)
				bool first = (xarb == null());		HX_STACK_VAR(first,"first");
				HX_STACK_LINE(6249)
				::zpp_nape::dynamics::ZPP_ColArbiter arb;		HX_STACK_VAR(arb,"arb");
				HX_STACK_LINE(6250)
				bool swapped = false;		HX_STACK_VAR(swapped,"swapped");
				HX_STACK_LINE(6251)
				if ((first)){
					HX_STACK_LINE(6252)
					{
						HX_STACK_LINE(6253)
						if (((::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool == null()))){
							HX_STACK_LINE(6253)
							arb = ::zpp_nape::dynamics::ZPP_ColArbiter_obj::__new();
						}
						else{
							HX_STACK_LINE(6260)
							arb = ::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool;
							HX_STACK_LINE(6261)
							::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool = arb->next;
							HX_STACK_LINE(6262)
							arb->next = null();
						}
						HX_STACK_LINE(6267)
						Dynamic();
					}
					HX_STACK_LINE(6269)
					arb->stat = stat;
				}
				else{
					HX_STACK_LINE(6271)
					if (((xarb->colarb == null()))){
						HX_STACK_LINE(6273)
						{
							HX_STACK_LINE(6273)
							{
							}
							HX_STACK_LINE(6273)
							xarb->cleared = true;
							HX_STACK_LINE(6273)
							{
								HX_STACK_LINE(6273)
								::zpp_nape::util::ZNPList_ZPP_Arbiter _this = xarb->b1->arbiters;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(6273)
								{
								}
								HX_STACK_LINE(6273)
								{
									HX_STACK_LINE(6273)
									{
									}
									HX_STACK_LINE(6273)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
									HX_STACK_LINE(6273)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;		HX_STACK_VAR(cur,"cur");
									HX_STACK_LINE(6273)
									bool ret1 = false;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(6273)
									while(((cur != null()))){
										HX_STACK_LINE(6273)
										if (((cur->elt == xarb))){
											HX_STACK_LINE(6273)
											{
												HX_STACK_LINE(6273)
												{
												}
												HX_STACK_LINE(6273)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
												HX_STACK_LINE(6273)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter ret2;		HX_STACK_VAR(ret2,"ret2");
												HX_STACK_LINE(6273)
												if (((pre == null()))){
													HX_STACK_LINE(6273)
													old = _this->head;
													HX_STACK_LINE(6273)
													ret2 = old->next;
													HX_STACK_LINE(6273)
													_this->head = ret2;
													HX_STACK_LINE(6273)
													if (((_this->head == null()))){
														HX_STACK_LINE(6273)
														_this->pushmod = true;
													}
												}
												else{
													HX_STACK_LINE(6273)
													old = pre->next;
													HX_STACK_LINE(6273)
													ret2 = old->next;
													HX_STACK_LINE(6273)
													pre->next = ret2;
													HX_STACK_LINE(6273)
													if (((ret2 == null()))){
														HX_STACK_LINE(6273)
														_this->pushmod = true;
													}
												}
												HX_STACK_LINE(6273)
												{
												}
												HX_STACK_LINE(6273)
												{
													HX_STACK_LINE(6273)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
													HX_STACK_LINE(6273)
													{
													}
													HX_STACK_LINE(6273)
													o->elt = null();
													HX_STACK_LINE(6273)
													o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
													HX_STACK_LINE(6273)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
												}
												HX_STACK_LINE(6273)
												_this->modified = true;
												HX_STACK_LINE(6273)
												(_this->length)--;
												HX_STACK_LINE(6273)
												_this->pushmod = true;
												HX_STACK_LINE(6273)
												ret2;
											}
											HX_STACK_LINE(6273)
											ret1 = true;
											HX_STACK_LINE(6273)
											break;
										}
										HX_STACK_LINE(6273)
										pre = cur;
										HX_STACK_LINE(6273)
										cur = cur->next;
									}
									HX_STACK_LINE(6273)
									ret1;
								}
							}
							HX_STACK_LINE(6273)
							{
								HX_STACK_LINE(6273)
								::zpp_nape::util::ZNPList_ZPP_Arbiter _this = xarb->b2->arbiters;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(6273)
								{
								}
								HX_STACK_LINE(6273)
								{
									HX_STACK_LINE(6273)
									{
									}
									HX_STACK_LINE(6273)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
									HX_STACK_LINE(6273)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;		HX_STACK_VAR(cur,"cur");
									HX_STACK_LINE(6273)
									bool ret1 = false;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(6273)
									while(((cur != null()))){
										HX_STACK_LINE(6273)
										if (((cur->elt == xarb))){
											HX_STACK_LINE(6273)
											{
												HX_STACK_LINE(6273)
												{
												}
												HX_STACK_LINE(6273)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
												HX_STACK_LINE(6273)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter ret2;		HX_STACK_VAR(ret2,"ret2");
												HX_STACK_LINE(6273)
												if (((pre == null()))){
													HX_STACK_LINE(6273)
													old = _this->head;
													HX_STACK_LINE(6273)
													ret2 = old->next;
													HX_STACK_LINE(6273)
													_this->head = ret2;
													HX_STACK_LINE(6273)
													if (((_this->head == null()))){
														HX_STACK_LINE(6273)
														_this->pushmod = true;
													}
												}
												else{
													HX_STACK_LINE(6273)
													old = pre->next;
													HX_STACK_LINE(6273)
													ret2 = old->next;
													HX_STACK_LINE(6273)
													pre->next = ret2;
													HX_STACK_LINE(6273)
													if (((ret2 == null()))){
														HX_STACK_LINE(6273)
														_this->pushmod = true;
													}
												}
												HX_STACK_LINE(6273)
												{
												}
												HX_STACK_LINE(6273)
												{
													HX_STACK_LINE(6273)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
													HX_STACK_LINE(6273)
													{
													}
													HX_STACK_LINE(6273)
													o->elt = null();
													HX_STACK_LINE(6273)
													o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
													HX_STACK_LINE(6273)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
												}
												HX_STACK_LINE(6273)
												_this->modified = true;
												HX_STACK_LINE(6273)
												(_this->length)--;
												HX_STACK_LINE(6273)
												_this->pushmod = true;
												HX_STACK_LINE(6273)
												ret2;
											}
											HX_STACK_LINE(6273)
											ret1 = true;
											HX_STACK_LINE(6273)
											break;
										}
										HX_STACK_LINE(6273)
										pre = cur;
										HX_STACK_LINE(6273)
										cur = cur->next;
									}
									HX_STACK_LINE(6273)
									ret1;
								}
							}
							HX_STACK_LINE(6273)
							if (((xarb->pair != null()))){
								HX_STACK_LINE(6273)
								xarb->pair->arb = null();
								HX_STACK_LINE(6273)
								xarb->pair = null();
							}
							HX_STACK_LINE(6273)
							xarb->active = false;
							HX_STACK_LINE(6273)
							this->f_arbiters->modified = true;
						}
						HX_STACK_LINE(6274)
						{
							HX_STACK_LINE(6275)
							if (((::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool == null()))){
								HX_STACK_LINE(6275)
								arb = ::zpp_nape::dynamics::ZPP_ColArbiter_obj::__new();
							}
							else{
								HX_STACK_LINE(6282)
								arb = ::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool;
								HX_STACK_LINE(6283)
								::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool = arb->next;
								HX_STACK_LINE(6284)
								arb->next = null();
							}
							HX_STACK_LINE(6289)
							Dynamic();
						}
						HX_STACK_LINE(6291)
						arb->intchange = true;
						HX_STACK_LINE(6292)
						arb->stat = stat;
						HX_STACK_LINE(6293)
						first = true;
						HX_STACK_LINE(6294)
						swapped = true;
					}
					else{
						HX_STACK_LINE(6297)
						arb = xarb->colarb;
						HX_STACK_LINE(6298)
						reverse = (sa != arb->s1);
						HX_STACK_LINE(6299)
						if (((arb->stat != stat))){
							HX_STACK_LINE(6300)
							arb->stat = stat;
							HX_STACK_LINE(6301)
							if ((!(arb->sleeping))){
								HX_STACK_LINE(6302)
								((  ((stat)) ? ::zpp_nape::util::ZNPList_ZPP_ColArbiter(this->c_arbiters_false) : ::zpp_nape::util::ZNPList_ZPP_ColArbiter(this->c_arbiters_true) ))->remove(arb);
								HX_STACK_LINE(6303)
								carbs->add(arb);
							}
						}
					}
				}
				struct _Function_4_2{
					inline static ::zpp_nape::dynamics::ZPP_ColArbiter Block( ::zpp_nape::dynamics::ZPP_ColArbiter &arb,bool &reverse,bool &swapped,bool &continuous,::zpp_nape::space::ZPP_Space &_g,::zpp_nape::space::ZPP_Space_obj *__this,::zpp_nape::shape::ZPP_Shape &s2,::zpp_nape::shape::ZPP_Shape &sb,::zpp_nape::shape::ZPP_Shape &s1,bool &first,::zpp_nape::shape::ZPP_Shape &sa,::zpp_nape::util::ZNPList_ZPP_ColArbiter &carbs){
						HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6308);
						{
							HX_STACK_LINE(6309)
							int inttype = ::zpp_nape::util::ZPP_Flags_obj::id_InteractionType_COLLISION;		HX_STACK_VAR(inttype,"inttype");
							struct _Function_5_1{
								inline static ::zpp_nape::dynamics::ZPP_ColArbiter Block( ::zpp_nape::dynamics::ZPP_ColArbiter &arb,bool &reverse,bool &swapped,bool &continuous,int &inttype,::zpp_nape::space::ZPP_Space &_g,::zpp_nape::space::ZPP_Space_obj *__this,::zpp_nape::shape::ZPP_Shape &s2,::zpp_nape::shape::ZPP_Shape &sb,::zpp_nape::shape::ZPP_Shape &s1,bool &first,::zpp_nape::shape::ZPP_Shape &sa,::zpp_nape::util::ZNPList_ZPP_ColArbiter &carbs){
									HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6310);
									{
										HX_STACK_LINE(6311)
										arb->stamp = __this->stamp;
										struct _Function_6_1{
											inline static ::zpp_nape::dynamics::ZPP_ColArbiter Block( ::zpp_nape::dynamics::ZPP_ColArbiter &arb,bool &swapped,bool &continuous,int &inttype,::zpp_nape::space::ZPP_Space &_g,::zpp_nape::shape::ZPP_Shape &s2,::zpp_nape::space::ZPP_Space_obj *__this,::zpp_nape::shape::ZPP_Shape &sb,::zpp_nape::shape::ZPP_Shape &s1,bool &first,::zpp_nape::util::ZNPList_ZPP_ColArbiter &carbs,::zpp_nape::shape::ZPP_Shape &sa){
												HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6312);
												{
													HX_STACK_LINE(6313)
													if ((first)){
														HX_STACK_LINE(6314)
														{
															HX_STACK_LINE(6314)
															{
																HX_STACK_LINE(6314)
																arb->b1 = s1->body;
																HX_STACK_LINE(6314)
																arb->ws1 = s1;
																HX_STACK_LINE(6314)
																arb->b2 = s2->body;
																HX_STACK_LINE(6314)
																arb->ws2 = s2;
																HX_STACK_LINE(6314)
																arb->id = sa->id;
																HX_STACK_LINE(6314)
																arb->di = sb->id;
																HX_STACK_LINE(6314)
																{
																	HX_STACK_LINE(6314)
																	::zpp_nape::util::ZNPList_ZPP_Arbiter _this = arb->b1->arbiters;		HX_STACK_VAR(_this,"_this");
																	HX_STACK_LINE(6314)
																	{
																	}
																	struct _Function_11_1{
																		inline static ::zpp_nape::util::ZNPNode_ZPP_Arbiter Block( ::zpp_nape::dynamics::ZPP_ColArbiter &arb){
																			HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6314);
																			{
																				HX_STACK_LINE(6314)
																				::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
																				HX_STACK_LINE(6314)
																				{
																					HX_STACK_LINE(6314)
																					if (((::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool == null()))){
																						HX_STACK_LINE(6314)
																						ret1 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__new();
																					}
																					else{
																						HX_STACK_LINE(6314)
																						ret1 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
																						HX_STACK_LINE(6314)
																						::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret1->next;
																						HX_STACK_LINE(6314)
																						ret1->next = null();
																					}
																					HX_STACK_LINE(6314)
																					Dynamic();
																				}
																				HX_STACK_LINE(6314)
																				ret1->elt = arb;
																				HX_STACK_LINE(6314)
																				return ret1;
																			}
																			return null();
																		}
																	};
																	HX_STACK_LINE(6314)
																	::zpp_nape::util::ZNPNode_ZPP_Arbiter temp = _Function_11_1::Block(arb);		HX_STACK_VAR(temp,"temp");
																	HX_STACK_LINE(6314)
																	temp->next = _this->head;
																	HX_STACK_LINE(6314)
																	_this->head = temp;
																	HX_STACK_LINE(6314)
																	_this->modified = true;
																	HX_STACK_LINE(6314)
																	(_this->length)++;
																	HX_STACK_LINE(6314)
																	arb;
																}
																HX_STACK_LINE(6314)
																{
																	HX_STACK_LINE(6314)
																	::zpp_nape::util::ZNPList_ZPP_Arbiter _this = arb->b2->arbiters;		HX_STACK_VAR(_this,"_this");
																	HX_STACK_LINE(6314)
																	{
																	}
																	struct _Function_11_1{
																		inline static ::zpp_nape::util::ZNPNode_ZPP_Arbiter Block( ::zpp_nape::dynamics::ZPP_ColArbiter &arb){
																			HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6314);
																			{
																				HX_STACK_LINE(6314)
																				::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
																				HX_STACK_LINE(6314)
																				{
																					HX_STACK_LINE(6314)
																					if (((::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool == null()))){
																						HX_STACK_LINE(6314)
																						ret1 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__new();
																					}
																					else{
																						HX_STACK_LINE(6314)
																						ret1 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
																						HX_STACK_LINE(6314)
																						::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret1->next;
																						HX_STACK_LINE(6314)
																						ret1->next = null();
																					}
																					HX_STACK_LINE(6314)
																					Dynamic();
																				}
																				HX_STACK_LINE(6314)
																				ret1->elt = arb;
																				HX_STACK_LINE(6314)
																				return ret1;
																			}
																			return null();
																		}
																	};
																	HX_STACK_LINE(6314)
																	::zpp_nape::util::ZNPNode_ZPP_Arbiter temp = _Function_11_1::Block(arb);		HX_STACK_VAR(temp,"temp");
																	HX_STACK_LINE(6314)
																	temp->next = _this->head;
																	HX_STACK_LINE(6314)
																	_this->head = temp;
																	HX_STACK_LINE(6314)
																	_this->modified = true;
																	HX_STACK_LINE(6314)
																	(_this->length)++;
																	HX_STACK_LINE(6314)
																	arb;
																}
																HX_STACK_LINE(6314)
																arb->active = true;
																HX_STACK_LINE(6314)
																arb->present = (int)0;
																HX_STACK_LINE(6314)
																arb->cleared = false;
																HX_STACK_LINE(6314)
																arb->sleeping = false;
																HX_STACK_LINE(6314)
																arb->fresh = false;
																HX_STACK_LINE(6314)
																arb->presentable = false;
															}
															HX_STACK_LINE(6314)
															arb->s1 = s1;
															HX_STACK_LINE(6314)
															arb->s2 = s2;
															HX_STACK_LINE(6314)
															{
																HX_STACK_LINE(6314)
																if ((!(arb->userdef_restitution))){
																	HX_STACK_LINE(6314)
																	if (((bool((arb->s1->material->elasticity <= ::Math_obj::NEGATIVE_INFINITY)) || bool((arb->s2->material->elasticity <= ::Math_obj::NEGATIVE_INFINITY))))){
																		HX_STACK_LINE(6314)
																		arb->restitution = (int)0;
																	}
																	else{
																		HX_STACK_LINE(6314)
																		if (((bool((arb->s1->material->elasticity >= ::Math_obj::POSITIVE_INFINITY)) || bool((arb->s2->material->elasticity >= ::Math_obj::POSITIVE_INFINITY))))){
																			HX_STACK_LINE(6314)
																			arb->restitution = (int)1;
																		}
																		else{
																			HX_STACK_LINE(6314)
																			arb->restitution = (Float(((arb->s1->material->elasticity + arb->s2->material->elasticity))) / Float((int)2));
																		}
																	}
																	HX_STACK_LINE(6314)
																	if (((arb->restitution < (int)0))){
																		HX_STACK_LINE(6314)
																		arb->restitution = (int)0;
																	}
																	HX_STACK_LINE(6314)
																	if (((arb->restitution > (int)1))){
																		HX_STACK_LINE(6314)
																		arb->restitution = (int)1;
																	}
																}
																HX_STACK_LINE(6314)
																if ((!(arb->userdef_dyn_fric))){
																	struct _Function_11_1{
																		inline static Float Block( ::zpp_nape::dynamics::ZPP_ColArbiter &arb){
																			HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6314);
																			{
																				HX_STACK_LINE(6314)
																				{
																				}
																				HX_STACK_LINE(6314)
																				return ::Math_obj::sqrt((arb->s1->material->dynamicFriction * arb->s2->material->dynamicFriction));
																			}
																			return null();
																		}
																	};
																	HX_STACK_LINE(6314)
																	arb->dyn_fric = _Function_11_1::Block(arb);
																}
																HX_STACK_LINE(6314)
																if ((!(arb->userdef_stat_fric))){
																	struct _Function_11_1{
																		inline static Float Block( ::zpp_nape::dynamics::ZPP_ColArbiter &arb){
																			HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6314);
																			{
																				HX_STACK_LINE(6314)
																				{
																				}
																				HX_STACK_LINE(6314)
																				return ::Math_obj::sqrt((arb->s1->material->staticFriction * arb->s2->material->staticFriction));
																			}
																			return null();
																		}
																	};
																	HX_STACK_LINE(6314)
																	arb->stat_fric = _Function_11_1::Block(arb);
																}
																HX_STACK_LINE(6314)
																if ((!(arb->userdef_rfric))){
																	struct _Function_11_1{
																		inline static Float Block( ::zpp_nape::dynamics::ZPP_ColArbiter &arb){
																			HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6314);
																			{
																				HX_STACK_LINE(6314)
																				{
																				}
																				HX_STACK_LINE(6314)
																				return ::Math_obj::sqrt((arb->s1->material->rollingFriction * arb->s2->material->rollingFriction));
																			}
																			return null();
																		}
																	};
																	HX_STACK_LINE(6314)
																	arb->rfric = _Function_11_1::Block(arb);
																}
															}
														}
														HX_STACK_LINE(6315)
														{
															HX_STACK_LINE(6315)
															{
															}
															struct _Function_9_1{
																inline static ::zpp_nape::util::ZNPNode_ZPP_ColArbiter Block( ::zpp_nape::dynamics::ZPP_ColArbiter &arb){
																	HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6315);
																	{
																		HX_STACK_LINE(6315)
																		::zpp_nape::util::ZNPNode_ZPP_ColArbiter ret1;		HX_STACK_VAR(ret1,"ret1");
																		HX_STACK_LINE(6315)
																		{
																			HX_STACK_LINE(6315)
																			if (((::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool == null()))){
																				HX_STACK_LINE(6315)
																				ret1 = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::__new();
																			}
																			else{
																				HX_STACK_LINE(6315)
																				ret1 = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;
																				HX_STACK_LINE(6315)
																				::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool = ret1->next;
																				HX_STACK_LINE(6315)
																				ret1->next = null();
																			}
																			HX_STACK_LINE(6315)
																			Dynamic();
																		}
																		HX_STACK_LINE(6315)
																		ret1->elt = arb;
																		HX_STACK_LINE(6315)
																		return ret1;
																	}
																	return null();
																}
															};
															HX_STACK_LINE(6315)
															::zpp_nape::util::ZNPNode_ZPP_ColArbiter temp = _Function_9_1::Block(arb);		HX_STACK_VAR(temp,"temp");
															HX_STACK_LINE(6315)
															temp->next = carbs->head;
															HX_STACK_LINE(6315)
															carbs->head = temp;
															HX_STACK_LINE(6315)
															carbs->modified = true;
															HX_STACK_LINE(6315)
															(carbs->length)++;
															HX_STACK_LINE(6315)
															arb;
														}
														HX_STACK_LINE(6316)
														arb->fresh = !(swapped);
													}
													else{
														HX_STACK_LINE(6318)
														arb->fresh = (bool((arb->up_stamp < (__this->stamp - (int)1))) || bool((bool((arb->endGenerated == __this->stamp)) && bool(continuous))));
													}
													HX_STACK_LINE(6321)
													arb->up_stamp = arb->stamp;
													HX_STACK_LINE(6322)
													if (((bool(arb->fresh) || bool((((int(arb->immState) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS))) == (int)0))))){
														HX_STACK_LINE(6323)
														arb->immState = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT;
														HX_STACK_LINE(6324)
														bool anyimpure = false;		HX_STACK_VAR(anyimpure,"anyimpure");
														HX_STACK_LINE(6325)
														{
															HX_STACK_LINE(6325)
															{
															}
															HX_STACK_LINE(6325)
															{
																HX_STACK_LINE(6325)
																::zpp_nape::util::ZNPList_ZPP_Interactor _this = __this->mrca1;		HX_STACK_VAR(_this,"_this");
																HX_STACK_LINE(6325)
																{
																	HX_STACK_LINE(6325)
																	while((!(((_this->head == null()))))){
																		HX_STACK_LINE(6325)
																		{
																		}
																		HX_STACK_LINE(6325)
																		::zpp_nape::util::ZNPNode_ZPP_Interactor ret1 = _this->head;		HX_STACK_VAR(ret1,"ret1");
																		HX_STACK_LINE(6325)
																		_this->head = ret1->next;
																		HX_STACK_LINE(6325)
																		{
																		}
																		HX_STACK_LINE(6325)
																		{
																			HX_STACK_LINE(6325)
																			::zpp_nape::util::ZNPNode_ZPP_Interactor o = ret1;		HX_STACK_VAR(o,"o");
																			HX_STACK_LINE(6325)
																			{
																			}
																			HX_STACK_LINE(6325)
																			o->elt = null();
																			HX_STACK_LINE(6325)
																			o->next = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
																			HX_STACK_LINE(6325)
																			::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o;
																		}
																		HX_STACK_LINE(6325)
																		if (((_this->head == null()))){
																			HX_STACK_LINE(6325)
																			_this->pushmod = true;
																		}
																		HX_STACK_LINE(6325)
																		_this->modified = true;
																		HX_STACK_LINE(6325)
																		(_this->length)--;
																	}
																	HX_STACK_LINE(6325)
																	_this->pushmod = true;
																}
															}
															HX_STACK_LINE(6325)
															{
																HX_STACK_LINE(6325)
																::zpp_nape::util::ZNPList_ZPP_Interactor _this = __this->mrca2;		HX_STACK_VAR(_this,"_this");
																HX_STACK_LINE(6325)
																{
																	HX_STACK_LINE(6325)
																	while((!(((_this->head == null()))))){
																		HX_STACK_LINE(6325)
																		{
																		}
																		HX_STACK_LINE(6325)
																		::zpp_nape::util::ZNPNode_ZPP_Interactor ret1 = _this->head;		HX_STACK_VAR(ret1,"ret1");
																		HX_STACK_LINE(6325)
																		_this->head = ret1->next;
																		HX_STACK_LINE(6325)
																		{
																		}
																		HX_STACK_LINE(6325)
																		{
																			HX_STACK_LINE(6325)
																			::zpp_nape::util::ZNPNode_ZPP_Interactor o = ret1;		HX_STACK_VAR(o,"o");
																			HX_STACK_LINE(6325)
																			{
																			}
																			HX_STACK_LINE(6325)
																			o->elt = null();
																			HX_STACK_LINE(6325)
																			o->next = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
																			HX_STACK_LINE(6325)
																			::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o;
																		}
																		HX_STACK_LINE(6325)
																		if (((_this->head == null()))){
																			HX_STACK_LINE(6325)
																			_this->pushmod = true;
																		}
																		HX_STACK_LINE(6325)
																		_this->modified = true;
																		HX_STACK_LINE(6325)
																		(_this->length)--;
																	}
																	HX_STACK_LINE(6325)
																	_this->pushmod = true;
																}
															}
															HX_STACK_LINE(6325)
															if (((s1->cbSet != null()))){
																HX_STACK_LINE(6325)
																::zpp_nape::util::ZNPList_ZPP_Interactor _this = __this->mrca1;		HX_STACK_VAR(_this,"_this");
																HX_STACK_LINE(6325)
																{
																}
																struct _Function_10_1{
																	inline static ::zpp_nape::util::ZNPNode_ZPP_Interactor Block( ::zpp_nape::shape::ZPP_Shape &s1){
																		HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6325);
																		{
																			HX_STACK_LINE(6325)
																			::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
																			HX_STACK_LINE(6325)
																			{
																				HX_STACK_LINE(6325)
																				if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
																					HX_STACK_LINE(6325)
																					ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();
																				}
																				else{
																					HX_STACK_LINE(6325)
																					ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
																					HX_STACK_LINE(6325)
																					::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
																					HX_STACK_LINE(6325)
																					ret1->next = null();
																				}
																				HX_STACK_LINE(6325)
																				Dynamic();
																			}
																			HX_STACK_LINE(6325)
																			ret1->elt = s1;
																			HX_STACK_LINE(6325)
																			return ret1;
																		}
																		return null();
																	}
																};
																HX_STACK_LINE(6325)
																::zpp_nape::util::ZNPNode_ZPP_Interactor temp = _Function_10_1::Block(s1);		HX_STACK_VAR(temp,"temp");
																HX_STACK_LINE(6325)
																temp->next = _this->head;
																HX_STACK_LINE(6325)
																_this->head = temp;
																HX_STACK_LINE(6325)
																_this->modified = true;
																HX_STACK_LINE(6325)
																(_this->length)++;
																HX_STACK_LINE(6325)
																s1;
															}
															HX_STACK_LINE(6325)
															if (((s1->body->cbSet != null()))){
																HX_STACK_LINE(6325)
																::zpp_nape::util::ZNPList_ZPP_Interactor _this = __this->mrca1;		HX_STACK_VAR(_this,"_this");
																::zpp_nape::phys::ZPP_Interactor o = s1->body;		HX_STACK_VAR(o,"o");
																HX_STACK_LINE(6325)
																{
																}
																struct _Function_10_1{
																	inline static ::zpp_nape::util::ZNPNode_ZPP_Interactor Block( ::zpp_nape::phys::ZPP_Interactor &o){
																		HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6325);
																		{
																			HX_STACK_LINE(6325)
																			::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
																			HX_STACK_LINE(6325)
																			{
																				HX_STACK_LINE(6325)
																				if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
																					HX_STACK_LINE(6325)
																					ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();
																				}
																				else{
																					HX_STACK_LINE(6325)
																					ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
																					HX_STACK_LINE(6325)
																					::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
																					HX_STACK_LINE(6325)
																					ret1->next = null();
																				}
																				HX_STACK_LINE(6325)
																				Dynamic();
																			}
																			HX_STACK_LINE(6325)
																			ret1->elt = o;
																			HX_STACK_LINE(6325)
																			return ret1;
																		}
																		return null();
																	}
																};
																HX_STACK_LINE(6325)
																::zpp_nape::util::ZNPNode_ZPP_Interactor temp = _Function_10_1::Block(o);		HX_STACK_VAR(temp,"temp");
																HX_STACK_LINE(6325)
																temp->next = _this->head;
																HX_STACK_LINE(6325)
																_this->head = temp;
																HX_STACK_LINE(6325)
																_this->modified = true;
																HX_STACK_LINE(6325)
																(_this->length)++;
																HX_STACK_LINE(6325)
																o;
															}
															HX_STACK_LINE(6325)
															if (((s2->cbSet != null()))){
																HX_STACK_LINE(6325)
																::zpp_nape::util::ZNPList_ZPP_Interactor _this = __this->mrca2;		HX_STACK_VAR(_this,"_this");
																HX_STACK_LINE(6325)
																{
																}
																struct _Function_10_1{
																	inline static ::zpp_nape::util::ZNPNode_ZPP_Interactor Block( ::zpp_nape::shape::ZPP_Shape &s2){
																		HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6325);
																		{
																			HX_STACK_LINE(6325)
																			::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
																			HX_STACK_LINE(6325)
																			{
																				HX_STACK_LINE(6325)
																				if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
																					HX_STACK_LINE(6325)
																					ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();
																				}
																				else{
																					HX_STACK_LINE(6325)
																					ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
																					HX_STACK_LINE(6325)
																					::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
																					HX_STACK_LINE(6325)
																					ret1->next = null();
																				}
																				HX_STACK_LINE(6325)
																				Dynamic();
																			}
																			HX_STACK_LINE(6325)
																			ret1->elt = s2;
																			HX_STACK_LINE(6325)
																			return ret1;
																		}
																		return null();
																	}
																};
																HX_STACK_LINE(6325)
																::zpp_nape::util::ZNPNode_ZPP_Interactor temp = _Function_10_1::Block(s2);		HX_STACK_VAR(temp,"temp");
																HX_STACK_LINE(6325)
																temp->next = _this->head;
																HX_STACK_LINE(6325)
																_this->head = temp;
																HX_STACK_LINE(6325)
																_this->modified = true;
																HX_STACK_LINE(6325)
																(_this->length)++;
																HX_STACK_LINE(6325)
																s2;
															}
															HX_STACK_LINE(6325)
															if (((s2->body->cbSet != null()))){
																HX_STACK_LINE(6325)
																::zpp_nape::util::ZNPList_ZPP_Interactor _this = __this->mrca2;		HX_STACK_VAR(_this,"_this");
																::zpp_nape::phys::ZPP_Interactor o = s2->body;		HX_STACK_VAR(o,"o");
																HX_STACK_LINE(6325)
																{
																}
																struct _Function_10_1{
																	inline static ::zpp_nape::util::ZNPNode_ZPP_Interactor Block( ::zpp_nape::phys::ZPP_Interactor &o){
																		HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6325);
																		{
																			HX_STACK_LINE(6325)
																			::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
																			HX_STACK_LINE(6325)
																			{
																				HX_STACK_LINE(6325)
																				if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
																					HX_STACK_LINE(6325)
																					ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();
																				}
																				else{
																					HX_STACK_LINE(6325)
																					ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
																					HX_STACK_LINE(6325)
																					::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
																					HX_STACK_LINE(6325)
																					ret1->next = null();
																				}
																				HX_STACK_LINE(6325)
																				Dynamic();
																			}
																			HX_STACK_LINE(6325)
																			ret1->elt = o;
																			HX_STACK_LINE(6325)
																			return ret1;
																		}
																		return null();
																	}
																};
																HX_STACK_LINE(6325)
																::zpp_nape::util::ZNPNode_ZPP_Interactor temp = _Function_10_1::Block(o);		HX_STACK_VAR(temp,"temp");
																HX_STACK_LINE(6325)
																temp->next = _this->head;
																HX_STACK_LINE(6325)
																_this->head = temp;
																HX_STACK_LINE(6325)
																_this->modified = true;
																HX_STACK_LINE(6325)
																(_this->length)++;
																HX_STACK_LINE(6325)
																o;
															}
															HX_STACK_LINE(6325)
															::zpp_nape::phys::ZPP_Compound c1 = s1->body->compound;		HX_STACK_VAR(c1,"c1");
															HX_STACK_LINE(6325)
															::zpp_nape::phys::ZPP_Compound c2 = s2->body->compound;		HX_STACK_VAR(c2,"c2");
															HX_STACK_LINE(6325)
															while(((c1 != c2))){
																HX_STACK_LINE(6325)
																int d1 = (  (((c1 == null()))) ? int((int)0) : int(c1->depth) );		HX_STACK_VAR(d1,"d1");
																HX_STACK_LINE(6325)
																int d2 = (  (((c2 == null()))) ? int((int)0) : int(c2->depth) );		HX_STACK_VAR(d2,"d2");
																HX_STACK_LINE(6325)
																if (((d1 < d2))){
																	HX_STACK_LINE(6325)
																	if (((c2->cbSet != null()))){
																		HX_STACK_LINE(6325)
																		::zpp_nape::util::ZNPList_ZPP_Interactor _this = __this->mrca2;		HX_STACK_VAR(_this,"_this");
																		HX_STACK_LINE(6325)
																		{
																		}
																		struct _Function_12_1{
																			inline static ::zpp_nape::util::ZNPNode_ZPP_Interactor Block( ::zpp_nape::phys::ZPP_Compound &c2){
																				HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6325);
																				{
																					HX_STACK_LINE(6325)
																					::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
																					HX_STACK_LINE(6325)
																					{
																						HX_STACK_LINE(6325)
																						if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
																							HX_STACK_LINE(6325)
																							ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();
																						}
																						else{
																							HX_STACK_LINE(6325)
																							ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
																							HX_STACK_LINE(6325)
																							::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
																							HX_STACK_LINE(6325)
																							ret1->next = null();
																						}
																						HX_STACK_LINE(6325)
																						Dynamic();
																					}
																					HX_STACK_LINE(6325)
																					ret1->elt = c2;
																					HX_STACK_LINE(6325)
																					return ret1;
																				}
																				return null();
																			}
																		};
																		HX_STACK_LINE(6325)
																		::zpp_nape::util::ZNPNode_ZPP_Interactor temp = _Function_12_1::Block(c2);		HX_STACK_VAR(temp,"temp");
																		HX_STACK_LINE(6325)
																		temp->next = _this->head;
																		HX_STACK_LINE(6325)
																		_this->head = temp;
																		HX_STACK_LINE(6325)
																		_this->modified = true;
																		HX_STACK_LINE(6325)
																		(_this->length)++;
																		HX_STACK_LINE(6325)
																		c2;
																	}
																	HX_STACK_LINE(6325)
																	c2 = c2->compound;
																}
																else{
																	HX_STACK_LINE(6325)
																	if (((c1->cbSet != null()))){
																		HX_STACK_LINE(6325)
																		::zpp_nape::util::ZNPList_ZPP_Interactor _this = __this->mrca1;		HX_STACK_VAR(_this,"_this");
																		HX_STACK_LINE(6325)
																		{
																		}
																		struct _Function_12_1{
																			inline static ::zpp_nape::util::ZNPNode_ZPP_Interactor Block( ::zpp_nape::phys::ZPP_Compound &c1){
																				HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6325);
																				{
																					HX_STACK_LINE(6325)
																					::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
																					HX_STACK_LINE(6325)
																					{
																						HX_STACK_LINE(6325)
																						if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
																							HX_STACK_LINE(6325)
																							ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();
																						}
																						else{
																							HX_STACK_LINE(6325)
																							ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
																							HX_STACK_LINE(6325)
																							::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
																							HX_STACK_LINE(6325)
																							ret1->next = null();
																						}
																						HX_STACK_LINE(6325)
																						Dynamic();
																					}
																					HX_STACK_LINE(6325)
																					ret1->elt = c1;
																					HX_STACK_LINE(6325)
																					return ret1;
																				}
																				return null();
																			}
																		};
																		HX_STACK_LINE(6325)
																		::zpp_nape::util::ZNPNode_ZPP_Interactor temp = _Function_12_1::Block(c1);		HX_STACK_VAR(temp,"temp");
																		HX_STACK_LINE(6325)
																		temp->next = _this->head;
																		HX_STACK_LINE(6325)
																		_this->head = temp;
																		HX_STACK_LINE(6325)
																		_this->modified = true;
																		HX_STACK_LINE(6325)
																		(_this->length)++;
																		HX_STACK_LINE(6325)
																		c1;
																	}
																	HX_STACK_LINE(6325)
																	c1 = c1->compound;
																}
															}
														}
														HX_STACK_LINE(6326)
														{
															HX_STACK_LINE(6327)
															::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite = __this->mrca1->head;		HX_STACK_VAR(cx_ite,"cx_ite");
															HX_STACK_LINE(6328)
															while(((cx_ite != null()))){
																HX_STACK_LINE(6329)
																::zpp_nape::phys::ZPP_Interactor i1 = cx_ite->elt;		HX_STACK_VAR(i1,"i1");
																HX_STACK_LINE(6330)
																{
																	HX_STACK_LINE(6332)
																	::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite1 = __this->mrca2->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
																	HX_STACK_LINE(6333)
																	while(((cx_ite1 != null()))){
																		HX_STACK_LINE(6334)
																		::zpp_nape::phys::ZPP_Interactor i2 = cx_ite1->elt;		HX_STACK_VAR(i2,"i2");
																		HX_STACK_LINE(6335)
																		{
																			HX_STACK_LINE(6336)
																			::zpp_nape::callbacks::ZPP_CbSet cb1 = i1->cbSet;		HX_STACK_VAR(cb1,"cb1");
																			HX_STACK_LINE(6337)
																			::zpp_nape::callbacks::ZPP_CbSet cb2 = i2->cbSet;		HX_STACK_VAR(cb2,"cb2");
																			HX_STACK_LINE(6338)
																			{
																			}
																			struct _Function_13_1{
																				inline static bool Block( ::zpp_nape::callbacks::ZPP_CbSet &cb1,::zpp_nape::callbacks::ZPP_CbSet &cb2){
																					HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6346);
																					{
																						HX_STACK_LINE(6346)
																						{
																						}
																						struct _Function_14_1{
																							inline static ::zpp_nape::callbacks::ZPP_CbSetPair Block( ::zpp_nape::callbacks::ZPP_CbSet &cb1,::zpp_nape::callbacks::ZPP_CbSet &cb2){
																								HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6346);
																								{
																									HX_STACK_LINE(6346)
																									::zpp_nape::callbacks::ZPP_CbSetPair ret1 = null();		HX_STACK_VAR(ret1,"ret1");
																									HX_STACK_LINE(6346)
																									::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs = (  (((cb1->cbpairs->length < cb2->cbpairs->length))) ? ::zpp_nape::util::ZNPList_ZPP_CbSetPair(cb1->cbpairs) : ::zpp_nape::util::ZNPList_ZPP_CbSetPair(cb2->cbpairs) );		HX_STACK_VAR(pairs,"pairs");
																									HX_STACK_LINE(6346)
																									{
																										HX_STACK_LINE(6346)
																										::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite2 = pairs->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																										HX_STACK_LINE(6346)
																										while(((cx_ite2 != null()))){
																											HX_STACK_LINE(6346)
																											::zpp_nape::callbacks::ZPP_CbSetPair p = cx_ite2->elt;		HX_STACK_VAR(p,"p");
																											HX_STACK_LINE(6346)
																											if (((bool((bool((p->a == cb1)) && bool((p->b == cb2)))) || bool((bool((p->a == cb2)) && bool((p->b == cb1))))))){
																												HX_STACK_LINE(6346)
																												ret1 = p;
																												HX_STACK_LINE(6346)
																												break;
																											}
																											HX_STACK_LINE(6346)
																											cx_ite2 = cx_ite2->next;
																										}
																									}
																									HX_STACK_LINE(6346)
																									if (((ret1 == null()))){
																										struct _Function_16_1{
																											inline static ::zpp_nape::callbacks::ZPP_CbSetPair Block( ::zpp_nape::callbacks::ZPP_CbSet &cb1,::zpp_nape::callbacks::ZPP_CbSet &cb2){
																												HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6346);
																												{
																													HX_STACK_LINE(6346)
																													::zpp_nape::callbacks::ZPP_CbSetPair ret2;		HX_STACK_VAR(ret2,"ret2");
																													HX_STACK_LINE(6346)
																													{
																														HX_STACK_LINE(6346)
																														if (((::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool == null()))){
																															HX_STACK_LINE(6346)
																															ret2 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__new();
																														}
																														else{
																															HX_STACK_LINE(6346)
																															ret2 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
																															HX_STACK_LINE(6346)
																															::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret2->next;
																															HX_STACK_LINE(6346)
																															ret2->next = null();
																														}
																														HX_STACK_LINE(6346)
																														ret2->zip_listeners = true;
																													}
																													HX_STACK_LINE(6346)
																													if ((::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(cb1,cb2))){
																														HX_STACK_LINE(6346)
																														ret2->a = cb1;
																														HX_STACK_LINE(6346)
																														ret2->b = cb2;
																													}
																													else{
																														HX_STACK_LINE(6346)
																														ret2->a = cb2;
																														HX_STACK_LINE(6346)
																														ret2->b = cb1;
																													}
																													HX_STACK_LINE(6346)
																													return ret2;
																												}
																												return null();
																											}
																										};
																										HX_STACK_LINE(6346)
																										ret1 = _Function_16_1::Block(cb1,cb2);
																										HX_STACK_LINE(6346)
																										cb1->cbpairs->add(ret1);
																										HX_STACK_LINE(6346)
																										if (((cb2 != cb1))){
																											HX_STACK_LINE(6346)
																											cb2->cbpairs->add(ret1);
																										}
																									}
																									HX_STACK_LINE(6346)
																									if ((ret1->zip_listeners)){
																										HX_STACK_LINE(6346)
																										ret1->zip_listeners = false;
																										HX_STACK_LINE(6346)
																										ret1->__validate();
																									}
																									HX_STACK_LINE(6346)
																									return ret1;
																								}
																								return null();
																							}
																						};
																						HX_STACK_LINE(6346)
																						return ((_Function_14_1::Block(cb1,cb2))->listeners->head == null());
																					}
																					return null();
																				}
																			};
																			HX_STACK_LINE(6346)
																			if ((_Function_13_1::Block(cb1,cb2))){
																				HX_STACK_LINE(6347)
																				cx_ite1 = cx_ite1->next;
																				HX_STACK_LINE(6348)
																				continue;
																			}
																			HX_STACK_LINE(6350)
																			::zpp_nape::space::ZPP_CallbackSet callbackset = null();		HX_STACK_VAR(callbackset,"callbackset");
																			HX_STACK_LINE(6351)
																			::zpp_nape::space::ZPP_CallbackSet ncallbackset = null();		HX_STACK_VAR(ncallbackset,"ncallbackset");
																			HX_STACK_LINE(6352)
																			{
																				HX_STACK_LINE(6352)
																				::zpp_nape::util::ZNPList_ZPP_InteractionListener _this = __this->prelisteners;		HX_STACK_VAR(_this,"_this");
																				HX_STACK_LINE(6352)
																				{
																					HX_STACK_LINE(6352)
																					while((!(((_this->head == null()))))){
																						HX_STACK_LINE(6352)
																						{
																						}
																						HX_STACK_LINE(6352)
																						::zpp_nape::util::ZNPNode_ZPP_InteractionListener ret1 = _this->head;		HX_STACK_VAR(ret1,"ret1");
																						HX_STACK_LINE(6352)
																						_this->head = ret1->next;
																						HX_STACK_LINE(6352)
																						{
																						}
																						HX_STACK_LINE(6352)
																						{
																							HX_STACK_LINE(6352)
																							::zpp_nape::util::ZNPNode_ZPP_InteractionListener o = ret1;		HX_STACK_VAR(o,"o");
																							HX_STACK_LINE(6352)
																							{
																							}
																							HX_STACK_LINE(6352)
																							o->elt = null();
																							HX_STACK_LINE(6352)
																							o->next = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool;
																							HX_STACK_LINE(6352)
																							::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool = o;
																						}
																						HX_STACK_LINE(6352)
																						if (((_this->head == null()))){
																							HX_STACK_LINE(6352)
																							_this->pushmod = true;
																						}
																						HX_STACK_LINE(6352)
																						_this->modified = true;
																						HX_STACK_LINE(6352)
																						(_this->length)--;
																					}
																					HX_STACK_LINE(6352)
																					_this->pushmod = true;
																				}
																			}
																			HX_STACK_LINE(6353)
																			::zpp_nape::util::ZNPNode_ZPP_InteractionListener lite = null();		HX_STACK_VAR(lite,"lite");
																			HX_STACK_LINE(6354)
																			{
																				HX_STACK_LINE(6354)
																				int event = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_PRE;		HX_STACK_VAR(event,"event");
																				HX_STACK_LINE(6354)
																				{
																					HX_STACK_LINE(6354)
																					{
																					}
																					HX_STACK_LINE(6354)
																					{
																						struct _Function_16_1{
																							inline static ::zpp_nape::callbacks::ZPP_CbSetPair Block( ::zpp_nape::callbacks::ZPP_CbSet &cb1,::zpp_nape::callbacks::ZPP_CbSet &cb2){
																								HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6354);
																								{
																									HX_STACK_LINE(6354)
																									::zpp_nape::callbacks::ZPP_CbSetPair ret1 = null();		HX_STACK_VAR(ret1,"ret1");
																									HX_STACK_LINE(6354)
																									::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs = (  (((cb1->cbpairs->length < cb2->cbpairs->length))) ? ::zpp_nape::util::ZNPList_ZPP_CbSetPair(cb1->cbpairs) : ::zpp_nape::util::ZNPList_ZPP_CbSetPair(cb2->cbpairs) );		HX_STACK_VAR(pairs,"pairs");
																									HX_STACK_LINE(6354)
																									{
																										HX_STACK_LINE(6354)
																										::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite2 = pairs->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																										HX_STACK_LINE(6354)
																										while(((cx_ite2 != null()))){
																											HX_STACK_LINE(6354)
																											::zpp_nape::callbacks::ZPP_CbSetPair p = cx_ite2->elt;		HX_STACK_VAR(p,"p");
																											HX_STACK_LINE(6354)
																											if (((bool((bool((p->a == cb1)) && bool((p->b == cb2)))) || bool((bool((p->a == cb2)) && bool((p->b == cb1))))))){
																												HX_STACK_LINE(6354)
																												ret1 = p;
																												HX_STACK_LINE(6354)
																												break;
																											}
																											HX_STACK_LINE(6354)
																											cx_ite2 = cx_ite2->next;
																										}
																									}
																									HX_STACK_LINE(6354)
																									if (((ret1 == null()))){
																										struct _Function_18_1{
																											inline static ::zpp_nape::callbacks::ZPP_CbSetPair Block( ::zpp_nape::callbacks::ZPP_CbSet &cb1,::zpp_nape::callbacks::ZPP_CbSet &cb2){
																												HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6354);
																												{
																													HX_STACK_LINE(6354)
																													::zpp_nape::callbacks::ZPP_CbSetPair ret2;		HX_STACK_VAR(ret2,"ret2");
																													HX_STACK_LINE(6354)
																													{
																														HX_STACK_LINE(6354)
																														if (((::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool == null()))){
																															HX_STACK_LINE(6354)
																															ret2 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__new();
																														}
																														else{
																															HX_STACK_LINE(6354)
																															ret2 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
																															HX_STACK_LINE(6354)
																															::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret2->next;
																															HX_STACK_LINE(6354)
																															ret2->next = null();
																														}
																														HX_STACK_LINE(6354)
																														ret2->zip_listeners = true;
																													}
																													HX_STACK_LINE(6354)
																													if ((::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(cb1,cb2))){
																														HX_STACK_LINE(6354)
																														ret2->a = cb1;
																														HX_STACK_LINE(6354)
																														ret2->b = cb2;
																													}
																													else{
																														HX_STACK_LINE(6354)
																														ret2->a = cb2;
																														HX_STACK_LINE(6354)
																														ret2->b = cb1;
																													}
																													HX_STACK_LINE(6354)
																													return ret2;
																												}
																												return null();
																											}
																										};
																										HX_STACK_LINE(6354)
																										ret1 = _Function_18_1::Block(cb1,cb2);
																										HX_STACK_LINE(6354)
																										cb1->cbpairs->add(ret1);
																										HX_STACK_LINE(6354)
																										if (((cb2 != cb1))){
																											HX_STACK_LINE(6354)
																											cb2->cbpairs->add(ret1);
																										}
																									}
																									HX_STACK_LINE(6354)
																									if ((ret1->zip_listeners)){
																										HX_STACK_LINE(6354)
																										ret1->zip_listeners = false;
																										HX_STACK_LINE(6354)
																										ret1->__validate();
																									}
																									HX_STACK_LINE(6354)
																									return ret1;
																								}
																								return null();
																							}
																						};
																						HX_STACK_LINE(6354)
																						::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite2 = (_Function_16_1::Block(cb1,cb2))->listeners->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																						HX_STACK_LINE(6354)
																						while(((cx_ite2 != null()))){
																							HX_STACK_LINE(6354)
																							::zpp_nape::callbacks::ZPP_InteractionListener x = cx_ite2->elt;		HX_STACK_VAR(x,"x");
																							HX_STACK_LINE(6354)
																							if (((x->event == event))){
																								HX_STACK_LINE(6354)
																								if (((((int(x->itype) & int(inttype))) != (int)0))){
																									struct _Function_19_1{
																										inline static ::zpp_nape::util::ZNPNode_ZPP_InteractionListener Block( ::zpp_nape::util::ZNPNode_ZPP_InteractionListener &lite,::zpp_nape::space::ZPP_Space &_g,::zpp_nape::callbacks::ZPP_InteractionListener &x){
																											HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6354);
																											{
																												HX_STACK_LINE(6354)
																												::zpp_nape::util::ZNPList_ZPP_InteractionListener _this = _g->prelisteners;		HX_STACK_VAR(_this,"_this");
																												HX_STACK_LINE(6354)
																												{
																												}
																												struct _Function_20_1{
																													inline static ::zpp_nape::util::ZNPNode_ZPP_InteractionListener Block( ::zpp_nape::callbacks::ZPP_InteractionListener &x){
																														HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6354);
																														{
																															HX_STACK_LINE(6354)
																															::zpp_nape::util::ZNPNode_ZPP_InteractionListener ret1;		HX_STACK_VAR(ret1,"ret1");
																															HX_STACK_LINE(6354)
																															{
																																HX_STACK_LINE(6354)
																																if (((::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool == null()))){
																																	HX_STACK_LINE(6354)
																																	ret1 = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::__new();
																																}
																																else{
																																	HX_STACK_LINE(6354)
																																	ret1 = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool;
																																	HX_STACK_LINE(6354)
																																	::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool = ret1->next;
																																	HX_STACK_LINE(6354)
																																	ret1->next = null();
																																}
																																HX_STACK_LINE(6354)
																																Dynamic();
																															}
																															HX_STACK_LINE(6354)
																															ret1->elt = x;
																															HX_STACK_LINE(6354)
																															return ret1;
																														}
																														return null();
																													}
																												};
																												HX_STACK_LINE(6354)
																												::zpp_nape::util::ZNPNode_ZPP_InteractionListener temp = _Function_20_1::Block(x);		HX_STACK_VAR(temp,"temp");
																												HX_STACK_LINE(6354)
																												if (((lite == null()))){
																													HX_STACK_LINE(6354)
																													temp->next = _this->head;
																													HX_STACK_LINE(6354)
																													_this->head = temp;
																												}
																												else{
																													HX_STACK_LINE(6354)
																													temp->next = lite->next;
																													HX_STACK_LINE(6354)
																													lite->next = temp;
																												}
																												HX_STACK_LINE(6354)
																												_this->pushmod = _this->modified = true;
																												HX_STACK_LINE(6354)
																												(_this->length)++;
																												HX_STACK_LINE(6354)
																												return temp;
																											}
																											return null();
																										}
																									};
																									HX_STACK_LINE(6354)
																									lite = _Function_19_1::Block(lite,_g,x);
																									HX_STACK_LINE(6354)
																									anyimpure = (bool(anyimpure) || bool(!(x->pure)));
																								}
																							}
																							HX_STACK_LINE(6354)
																							cx_ite2 = cx_ite2->next;
																						}
																					}
																				}
																			}
																			HX_STACK_LINE(6360)
																			if (((__this->prelisteners->head == null()))){
																				HX_STACK_LINE(6361)
																				cx_ite1 = cx_ite1->next;
																				HX_STACK_LINE(6362)
																				continue;
																			}
																			HX_STACK_LINE(6364)
																			callbackset = ::zpp_nape::phys::ZPP_Interactor_obj::get(i1,i2);
																			HX_STACK_LINE(6365)
																			if (((callbackset == null()))){
																				HX_STACK_LINE(6366)
																				ncallbackset = ::zpp_nape::space::ZPP_CallbackSet_obj::get(i1,i2);
																				HX_STACK_LINE(6367)
																				__this->add_callbackset(ncallbackset);
																			}
																			HX_STACK_LINE(6369)
																			if (((bool((callbackset == null())) || bool((bool(((bool((callbackset->COLLISIONstamp != __this->stamp)) || bool(continuous)))) && bool((((int(callbackset->COLLISIONstate) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS))) == (int)0))))))){
																				HX_STACK_LINE(6370)
																				if (((ncallbackset != null()))){
																					HX_STACK_LINE(6370)
																					callbackset = ncallbackset;
																				}
																				HX_STACK_LINE(6371)
																				if (((callbackset != null()))){
																					HX_STACK_LINE(6373)
																					::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite2 = __this->prelisteners->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																					HX_STACK_LINE(6374)
																					while(((cx_ite2 != null()))){
																						HX_STACK_LINE(6375)
																						::zpp_nape::callbacks::ZPP_InteractionListener listener = cx_ite2->elt;		HX_STACK_VAR(listener,"listener");
																						HX_STACK_LINE(6376)
																						if (((listener->itype == ::zpp_nape::util::ZPP_Flags_obj::id_InteractionType_ANY))){
																							HX_STACK_LINE(6378)
																							callbackset->COLLISIONstamp = __this->stamp;
																							HX_STACK_LINE(6379)
																							callbackset->SENSORstamp = __this->stamp;
																							HX_STACK_LINE(6380)
																							callbackset->FLUIDstamp = __this->stamp;
																						}
																						else{
																							HX_STACK_LINE(6382)
																							callbackset->COLLISIONstamp = __this->stamp;
																						}
																						HX_STACK_LINE(6384)
																						cx_ite2 = cx_ite2->next;
																					}
																				}
																				HX_STACK_LINE(6389)
																				{
																					HX_STACK_LINE(6389)
																					arb->_mutable = true;
																					HX_STACK_LINE(6389)
																					if (((arb->wrap_normal != null()))){
																						HX_STACK_LINE(6389)
																						arb->wrap_normal->zpp_inner->_immutable = false;
																					}
																					HX_STACK_LINE(6389)
																					if (((arb->wrap_contacts != null()))){
																						HX_STACK_LINE(6389)
																						arb->wrap_contacts->zpp_inner->immutable = false;
																					}
																				}
																				HX_STACK_LINE(6391)
																				bool pact = arb->active;		HX_STACK_VAR(pact,"pact");
																				HX_STACK_LINE(6392)
																				arb->active = true;
																				HX_STACK_LINE(6393)
																				bool emptycontacts = false;		HX_STACK_VAR(emptycontacts,"emptycontacts");
																				HX_STACK_LINE(6394)
																				{
																					HX_STACK_LINE(6394)
																					bool fst = true;		HX_STACK_VAR(fst,"fst");
																					HX_STACK_LINE(6394)
																					::zpp_nape::dynamics::ZPP_Contact pre = null();		HX_STACK_VAR(pre,"pre");
																					HX_STACK_LINE(6394)
																					::zpp_nape::dynamics::ZPP_IContact prei = null();		HX_STACK_VAR(prei,"prei");
																					HX_STACK_LINE(6394)
																					::zpp_nape::dynamics::ZPP_IContact cx_itei = arb->innards->next;		HX_STACK_VAR(cx_itei,"cx_itei");
																					HX_STACK_LINE(6394)
																					arb->hc2 = false;
																					HX_STACK_LINE(6394)
																					{
																						HX_STACK_LINE(6394)
																						::zpp_nape::dynamics::ZPP_Contact cx_ite2 = arb->contacts->next;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																						HX_STACK_LINE(6394)
																						while(((cx_ite2 != null()))){
																							HX_STACK_LINE(6394)
																							::zpp_nape::dynamics::ZPP_Contact c = cx_ite2;		HX_STACK_VAR(c,"c");
																							HX_STACK_LINE(6394)
																							{
																								HX_STACK_LINE(6394)
																								if ((((c->stamp + ::nape::Config_obj::arbiterExpirationDelay) < arb->stamp))){
																									struct _Function_19_1{
																										inline static ::zpp_nape::dynamics::ZPP_Contact Block( ::zpp_nape::dynamics::ZPP_ColArbiter &arb,::zpp_nape::dynamics::ZPP_Contact &pre){
																											HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6394);
																											{
																												HX_STACK_LINE(6394)
																												::zpp_nape::dynamics::ZPP_Contact _this = arb->contacts;		HX_STACK_VAR(_this,"_this");
																												HX_STACK_LINE(6394)
																												{
																												}
																												HX_STACK_LINE(6394)
																												::zpp_nape::dynamics::ZPP_Contact old;		HX_STACK_VAR(old,"old");
																												HX_STACK_LINE(6394)
																												::zpp_nape::dynamics::ZPP_Contact ret1;		HX_STACK_VAR(ret1,"ret1");
																												HX_STACK_LINE(6394)
																												if (((pre == null()))){
																													HX_STACK_LINE(6394)
																													old = _this->next;
																													HX_STACK_LINE(6394)
																													ret1 = old->next;
																													HX_STACK_LINE(6394)
																													_this->next = ret1;
																													HX_STACK_LINE(6394)
																													if (((_this->next == null()))){
																														HX_STACK_LINE(6394)
																														_this->pushmod = true;
																													}
																												}
																												else{
																													HX_STACK_LINE(6394)
																													old = pre->next;
																													HX_STACK_LINE(6394)
																													ret1 = old->next;
																													HX_STACK_LINE(6394)
																													pre->next = ret1;
																													HX_STACK_LINE(6394)
																													if (((ret1 == null()))){
																														HX_STACK_LINE(6394)
																														_this->pushmod = true;
																													}
																												}
																												HX_STACK_LINE(6394)
																												old->_inuse = false;
																												HX_STACK_LINE(6394)
																												{
																												}
																												HX_STACK_LINE(6394)
																												_this->modified = true;
																												HX_STACK_LINE(6394)
																												(_this->length)--;
																												HX_STACK_LINE(6394)
																												_this->pushmod = true;
																												HX_STACK_LINE(6394)
																												return ret1;
																											}
																											return null();
																										}
																									};
																									HX_STACK_LINE(6394)
																									cx_ite2 = _Function_19_1::Block(arb,pre);
																									struct _Function_19_2{
																										inline static ::zpp_nape::dynamics::ZPP_IContact Block( ::zpp_nape::dynamics::ZPP_ColArbiter &arb,::zpp_nape::dynamics::ZPP_IContact &prei){
																											HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6394);
																											{
																												HX_STACK_LINE(6394)
																												::zpp_nape::dynamics::ZPP_IContact _this = arb->innards;		HX_STACK_VAR(_this,"_this");
																												HX_STACK_LINE(6394)
																												{
																												}
																												HX_STACK_LINE(6394)
																												::zpp_nape::dynamics::ZPP_IContact old;		HX_STACK_VAR(old,"old");
																												HX_STACK_LINE(6394)
																												::zpp_nape::dynamics::ZPP_IContact ret1;		HX_STACK_VAR(ret1,"ret1");
																												HX_STACK_LINE(6394)
																												if (((prei == null()))){
																													HX_STACK_LINE(6394)
																													old = _this->next;
																													HX_STACK_LINE(6394)
																													ret1 = old->next;
																													HX_STACK_LINE(6394)
																													_this->next = ret1;
																													HX_STACK_LINE(6394)
																													if (((_this->next == null()))){
																														HX_STACK_LINE(6394)
																														_this->pushmod = true;
																													}
																												}
																												else{
																													HX_STACK_LINE(6394)
																													old = prei->next;
																													HX_STACK_LINE(6394)
																													ret1 = old->next;
																													HX_STACK_LINE(6394)
																													prei->next = ret1;
																													HX_STACK_LINE(6394)
																													if (((ret1 == null()))){
																														HX_STACK_LINE(6394)
																														_this->pushmod = true;
																													}
																												}
																												HX_STACK_LINE(6394)
																												old->_inuse = false;
																												HX_STACK_LINE(6394)
																												{
																												}
																												HX_STACK_LINE(6394)
																												_this->modified = true;
																												HX_STACK_LINE(6394)
																												(_this->length)--;
																												HX_STACK_LINE(6394)
																												_this->pushmod = true;
																												HX_STACK_LINE(6394)
																												return ret1;
																											}
																											return null();
																										}
																									};
																									HX_STACK_LINE(6394)
																									cx_itei = _Function_19_2::Block(arb,prei);
																									HX_STACK_LINE(6394)
																									{
																										HX_STACK_LINE(6394)
																										::zpp_nape::dynamics::ZPP_Contact o = c;		HX_STACK_VAR(o,"o");
																										HX_STACK_LINE(6394)
																										{
																										}
																										HX_STACK_LINE(6394)
																										o->arbiter = null();
																										HX_STACK_LINE(6394)
																										o->next = ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool;
																										HX_STACK_LINE(6394)
																										::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool = o;
																									}
																									HX_STACK_LINE(6394)
																									continue;
																								}
																								HX_STACK_LINE(6394)
																								::zpp_nape::dynamics::ZPP_IContact ci = c->inner;		HX_STACK_VAR(ci,"ci");
																								HX_STACK_LINE(6394)
																								bool pact1 = c->active;		HX_STACK_VAR(pact1,"pact1");
																								HX_STACK_LINE(6394)
																								c->active = (c->stamp == arb->stamp);
																								HX_STACK_LINE(6394)
																								if ((c->active)){
																									HX_STACK_LINE(6394)
																									if ((fst)){
																										HX_STACK_LINE(6394)
																										fst = false;
																										HX_STACK_LINE(6394)
																										arb->c1 = ci;
																										HX_STACK_LINE(6394)
																										arb->oc1 = c;
																									}
																									else{
																										HX_STACK_LINE(6394)
																										{
																										}
																										HX_STACK_LINE(6394)
																										arb->hc2 = true;
																										HX_STACK_LINE(6394)
																										arb->c2 = ci;
																										HX_STACK_LINE(6394)
																										arb->oc2 = c;
																									}
																								}
																								HX_STACK_LINE(6394)
																								if (((pact1 != c->active))){
																									HX_STACK_LINE(6394)
																									arb->contacts->modified = true;
																								}
																								HX_STACK_LINE(6394)
																								pre = cx_ite2;
																								HX_STACK_LINE(6394)
																								prei = cx_itei;
																								HX_STACK_LINE(6394)
																								cx_itei = cx_itei->next;
																							}
																							HX_STACK_LINE(6394)
																							cx_ite2 = cx_ite2->next;
																						}
																					}
																					HX_STACK_LINE(6394)
																					if ((arb->hc2)){
																						HX_STACK_LINE(6394)
																						arb->hpc2 = true;
																						HX_STACK_LINE(6394)
																						if ((arb->oc1->posOnly)){
																							HX_STACK_LINE(6394)
																							::zpp_nape::dynamics::ZPP_IContact tmp = arb->c1;		HX_STACK_VAR(tmp,"tmp");
																							HX_STACK_LINE(6394)
																							arb->c1 = arb->c2;
																							HX_STACK_LINE(6394)
																							arb->c2 = tmp;
																							HX_STACK_LINE(6394)
																							::zpp_nape::dynamics::ZPP_Contact tmp2 = arb->oc1;		HX_STACK_VAR(tmp2,"tmp2");
																							HX_STACK_LINE(6394)
																							arb->oc1 = arb->oc2;
																							HX_STACK_LINE(6394)
																							arb->oc2 = tmp2;
																							HX_STACK_LINE(6394)
																							arb->hc2 = false;
																						}
																						else{
																							HX_STACK_LINE(6394)
																							if ((arb->oc2->posOnly)){
																								HX_STACK_LINE(6394)
																								arb->hc2 = false;
																							}
																						}
																						HX_STACK_LINE(6394)
																						if ((arb->oc1->posOnly)){
																							HX_STACK_LINE(6394)
																							fst = true;
																						}
																					}
																					else{
																						HX_STACK_LINE(6394)
																						arb->hpc2 = false;
																					}
																					HX_STACK_LINE(6394)
																					fst;
																				}
																				HX_STACK_LINE(6396)
																				__this->precb->zpp_inner->pre_arbiter = arb;
																				HX_STACK_LINE(6397)
																				__this->precb->zpp_inner->set = callbackset;
																				HX_STACK_LINE(6398)
																				{
																					HX_STACK_LINE(6399)
																					::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite2 = __this->prelisteners->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																					HX_STACK_LINE(6400)
																					while(((cx_ite2 != null()))){
																						HX_STACK_LINE(6401)
																						::zpp_nape::callbacks::ZPP_InteractionListener listener = cx_ite2->elt;		HX_STACK_VAR(listener,"listener");
																						HX_STACK_LINE(6402)
																						{
																							HX_STACK_LINE(6403)
																							__this->precb->zpp_inner->listener = listener;
																							HX_STACK_LINE(6430)
																							{
																								HX_STACK_LINE(6430)
																								::zpp_nape::callbacks::ZPP_Callback cb = __this->precb->zpp_inner;		HX_STACK_VAR(cb,"cb");
																								HX_STACK_LINE(6430)
																								::zpp_nape::phys::ZPP_Interactor o1 = callbackset->int1;		HX_STACK_VAR(o1,"o1");
																								HX_STACK_LINE(6430)
																								::zpp_nape::phys::ZPP_Interactor o2 = callbackset->int2;		HX_STACK_VAR(o2,"o2");
																								struct _Function_18_1{
																									inline static bool Block( ::zpp_nape::callbacks::ZPP_InteractionListener &listener,::zpp_nape::phys::ZPP_Interactor &o1){
																										HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6430);
																										{
																											HX_STACK_LINE(6430)
																											::zpp_nape::callbacks::ZPP_OptionType _this = listener->options1;		HX_STACK_VAR(_this,"_this");
																											::zpp_nape::util::ZNPList_ZPP_CbType xs = o1->cbTypes;		HX_STACK_VAR(xs,"xs");
																											HX_STACK_LINE(6430)
																											return (bool(_this->nonemptyintersection(xs,_this->includes)) && bool(!(_this->nonemptyintersection(xs,_this->excludes))));
																										}
																										return null();
																									}
																								};
																								struct _Function_18_2{
																									inline static bool Block( ::zpp_nape::callbacks::ZPP_InteractionListener &listener,::zpp_nape::phys::ZPP_Interactor &o2){
																										HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6430);
																										{
																											HX_STACK_LINE(6430)
																											::zpp_nape::callbacks::ZPP_OptionType _this = listener->options2;		HX_STACK_VAR(_this,"_this");
																											::zpp_nape::util::ZNPList_ZPP_CbType xs = o2->cbTypes;		HX_STACK_VAR(xs,"xs");
																											HX_STACK_LINE(6430)
																											return (bool(_this->nonemptyintersection(xs,_this->includes)) && bool(!(_this->nonemptyintersection(xs,_this->excludes))));
																										}
																										return null();
																									}
																								};
																								HX_STACK_LINE(6430)
																								if (((bool(_Function_18_1::Block(listener,o1)) && bool(_Function_18_2::Block(listener,o2))))){
																									HX_STACK_LINE(6430)
																									cb->int1 = o1;
																									HX_STACK_LINE(6430)
																									cb->int2 = o2;
																								}
																								else{
																									HX_STACK_LINE(6430)
																									cb->int1 = o2;
																									HX_STACK_LINE(6430)
																									cb->int2 = o1;
																								}
																							}
																							HX_STACK_LINE(6431)
																							__this->precb->zpp_inner->pre_swapped = (i1 != __this->precb->zpp_inner->int1);
																							HX_STACK_LINE(6432)
																							::nape::callbacks::PreFlag ret1 = listener->handlerp(__this->precb);		HX_STACK_VAR(ret1,"ret1");
																							HX_STACK_LINE(6433)
																							if (((ret1 != null()))){
																								struct _Function_18_1{
																									inline static ::nape::callbacks::PreFlag Block( ){
																										HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6434);
																										{
																											HX_STACK_LINE(6434)
																											if (((::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT == null()))){
																												HX_STACK_LINE(6434)
																												::zpp_nape::util::ZPP_Flags_obj::internal = true;
																												HX_STACK_LINE(6434)
																												::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT = ::nape::callbacks::PreFlag_obj::__new();
																												HX_STACK_LINE(6434)
																												::zpp_nape::util::ZPP_Flags_obj::internal = false;
																											}
																											HX_STACK_LINE(6434)
																											return ::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT;
																										}
																										return null();
																									}
																								};
																								struct _Function_18_2{
																									inline static ::nape::callbacks::PreFlag Block( ){
																										HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6434);
																										{
																											HX_STACK_LINE(6434)
																											if (((::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT_ONCE == null()))){
																												HX_STACK_LINE(6434)
																												::zpp_nape::util::ZPP_Flags_obj::internal = true;
																												HX_STACK_LINE(6434)
																												::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT_ONCE = ::nape::callbacks::PreFlag_obj::__new();
																												HX_STACK_LINE(6434)
																												::zpp_nape::util::ZPP_Flags_obj::internal = false;
																											}
																											HX_STACK_LINE(6434)
																											return ::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT_ONCE;
																										}
																										return null();
																									}
																								};
																								struct _Function_18_3{
																									inline static ::nape::callbacks::PreFlag Block( ){
																										HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6434);
																										{
																											HX_STACK_LINE(6434)
																											if (((::zpp_nape::util::ZPP_Flags_obj::PreFlag_IGNORE == null()))){
																												HX_STACK_LINE(6434)
																												::zpp_nape::util::ZPP_Flags_obj::internal = true;
																												HX_STACK_LINE(6434)
																												::zpp_nape::util::ZPP_Flags_obj::PreFlag_IGNORE = ::nape::callbacks::PreFlag_obj::__new();
																												HX_STACK_LINE(6434)
																												::zpp_nape::util::ZPP_Flags_obj::internal = false;
																											}
																											HX_STACK_LINE(6434)
																											return ::zpp_nape::util::ZPP_Flags_obj::PreFlag_IGNORE;
																										}
																										return null();
																									}
																								};
																								HX_STACK_LINE(6433)
																								arb->immState = (  (((ret1 == _Function_18_1::Block()))) ? int((int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT) | int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS))) : int((  (((ret1 == _Function_18_2::Block()))) ? int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT) : int((  (((ret1 == _Function_18_3::Block()))) ? int((int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_IGNORE) | int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS))) : int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_IGNORE) )) )) );
																							}
																						}
																						HX_STACK_LINE(6437)
																						cx_ite2 = cx_ite2->next;
																					}
																				}
																				HX_STACK_LINE(6441)
																				{
																					HX_STACK_LINE(6441)
																					arb->_mutable = false;
																					HX_STACK_LINE(6441)
																					if (((arb->wrap_normal != null()))){
																						HX_STACK_LINE(6441)
																						arb->wrap_normal->zpp_inner->_immutable = true;
																					}
																					HX_STACK_LINE(6441)
																					if (((arb->wrap_contacts != null()))){
																						HX_STACK_LINE(6441)
																						arb->wrap_contacts->zpp_inner->immutable = true;
																					}
																				}
																				HX_STACK_LINE(6443)
																				arb->active = pact;
																				HX_STACK_LINE(6444)
																				if (((callbackset != null()))){
																					HX_STACK_LINE(6446)
																					::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite2 = __this->prelisteners->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																					HX_STACK_LINE(6447)
																					while(((cx_ite2 != null()))){
																						HX_STACK_LINE(6448)
																						::zpp_nape::callbacks::ZPP_InteractionListener listener = cx_ite2->elt;		HX_STACK_VAR(listener,"listener");
																						HX_STACK_LINE(6449)
																						if (((listener->itype == ::zpp_nape::util::ZPP_Flags_obj::id_InteractionType_ANY))){
																							HX_STACK_LINE(6451)
																							callbackset->COLLISIONstate = arb->immState;
																							HX_STACK_LINE(6452)
																							callbackset->SENSORstate = arb->immState;
																							HX_STACK_LINE(6453)
																							callbackset->FLUIDstate = arb->immState;
																						}
																						else{
																							HX_STACK_LINE(6455)
																							callbackset->COLLISIONstate = arb->immState;
																						}
																						HX_STACK_LINE(6457)
																						cx_ite2 = cx_ite2->next;
																					}
																				}
																			}
																			else{
																				HX_STACK_LINE(6462)
																				if (((callbackset == null()))){
																					HX_STACK_LINE(6462)
																					if (((((int(arb->immState) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS))) == (int)0))){
																						HX_STACK_LINE(6463)
																						arb->immState = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT;
																					}
																				}
																				else{
																					HX_STACK_LINE(6465)
																					arb->immState = callbackset->COLLISIONstate;
																				}
																			}
																		}
																		HX_STACK_LINE(6467)
																		cx_ite1 = cx_ite1->next;
																	}
																}
																HX_STACK_LINE(6471)
																cx_ite = cx_ite->next;
															}
														}
														HX_STACK_LINE(6474)
														if (((bool(anyimpure) && bool((((int(arb->immState) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS))) == (int)0))))){
															HX_STACK_LINE(6476)
															if (((arb->b1->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC))){
																HX_STACK_LINE(6477)
																::zpp_nape::phys::ZPP_Body o = arb->b1;		HX_STACK_VAR(o,"o");
																HX_STACK_LINE(6478)
																{
																}
																HX_STACK_LINE(6486)
																if ((!(o->world))){
																	HX_STACK_LINE(6487)
																	{
																	}
																	HX_STACK_LINE(6495)
																	o->component->waket = (__this->stamp + ((  ((__this->midstep)) ? int((int)0) : int((int)1) )));
																	HX_STACK_LINE(6496)
																	if ((o->component->sleeping)){
																		HX_STACK_LINE(6496)
																		__this->really_wake(o,false);
																	}
																}
															}
															HX_STACK_LINE(6501)
															if (((arb->b1->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC))){
																HX_STACK_LINE(6502)
																::zpp_nape::phys::ZPP_Body o = arb->b2;		HX_STACK_VAR(o,"o");
																HX_STACK_LINE(6503)
																{
																}
																HX_STACK_LINE(6511)
																if ((!(o->world))){
																	HX_STACK_LINE(6512)
																	{
																	}
																	HX_STACK_LINE(6520)
																	o->component->waket = (__this->stamp + ((  ((__this->midstep)) ? int((int)0) : int((int)1) )));
																	HX_STACK_LINE(6521)
																	if ((o->component->sleeping)){
																		HX_STACK_LINE(6521)
																		__this->really_wake(o,false);
																	}
																}
															}
														}
													}
													HX_STACK_LINE(6581)
													if (((((int(arb->immState) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT))) != (int)0))){
														HX_STACK_LINE(6582)
														if (((bool((arb->b1->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC)) && bool(arb->b1->component->sleeping)))){
															HX_STACK_LINE(6583)
															::zpp_nape::phys::ZPP_Body o = arb->b1;		HX_STACK_VAR(o,"o");
															HX_STACK_LINE(6584)
															{
															}
															HX_STACK_LINE(6592)
															if ((!(o->world))){
																HX_STACK_LINE(6593)
																{
																}
																HX_STACK_LINE(6601)
																o->component->waket = (__this->stamp + ((  ((__this->midstep)) ? int((int)0) : int((int)1) )));
																HX_STACK_LINE(6602)
																if ((o->component->sleeping)){
																	HX_STACK_LINE(6602)
																	__this->really_wake(o,false);
																}
															}
														}
														HX_STACK_LINE(6607)
														if (((bool((arb->b2->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC)) && bool(arb->b2->component->sleeping)))){
															HX_STACK_LINE(6608)
															::zpp_nape::phys::ZPP_Body o = arb->b2;		HX_STACK_VAR(o,"o");
															HX_STACK_LINE(6609)
															{
															}
															HX_STACK_LINE(6617)
															if ((!(o->world))){
																HX_STACK_LINE(6618)
																{
																}
																HX_STACK_LINE(6626)
																o->component->waket = (__this->stamp + ((  ((__this->midstep)) ? int((int)0) : int((int)1) )));
																HX_STACK_LINE(6627)
																if ((o->component->sleeping)){
																	HX_STACK_LINE(6627)
																	__this->really_wake(o,false);
																}
															}
														}
													}
													HX_STACK_LINE(6633)
													if ((arb->sleeping)){
														HX_STACK_LINE(6634)
														arb->sleeping = false;
														HX_STACK_LINE(6635)
														{
															HX_STACK_LINE(6635)
															{
															}
															struct _Function_9_1{
																inline static ::zpp_nape::util::ZNPNode_ZPP_ColArbiter Block( ::zpp_nape::dynamics::ZPP_ColArbiter &arb){
																	HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6635);
																	{
																		HX_STACK_LINE(6635)
																		::zpp_nape::util::ZNPNode_ZPP_ColArbiter ret1;		HX_STACK_VAR(ret1,"ret1");
																		HX_STACK_LINE(6635)
																		{
																			HX_STACK_LINE(6635)
																			if (((::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool == null()))){
																				HX_STACK_LINE(6635)
																				ret1 = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::__new();
																			}
																			else{
																				HX_STACK_LINE(6635)
																				ret1 = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;
																				HX_STACK_LINE(6635)
																				::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool = ret1->next;
																				HX_STACK_LINE(6635)
																				ret1->next = null();
																			}
																			HX_STACK_LINE(6635)
																			Dynamic();
																		}
																		HX_STACK_LINE(6635)
																		ret1->elt = arb;
																		HX_STACK_LINE(6635)
																		return ret1;
																	}
																	return null();
																}
															};
															HX_STACK_LINE(6635)
															::zpp_nape::util::ZNPNode_ZPP_ColArbiter temp = _Function_9_1::Block(arb);		HX_STACK_VAR(temp,"temp");
															HX_STACK_LINE(6635)
															temp->next = carbs->head;
															HX_STACK_LINE(6635)
															carbs->head = temp;
															HX_STACK_LINE(6635)
															carbs->modified = true;
															HX_STACK_LINE(6635)
															(carbs->length)++;
															HX_STACK_LINE(6635)
															arb;
														}
													}
													HX_STACK_LINE(6637)
													return arb;
												}
												return null();
											}
										};
										struct _Function_6_2{
											inline static ::zpp_nape::dynamics::ZPP_ColArbiter Block( ::zpp_nape::dynamics::ZPP_ColArbiter &arb){
												HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6639);
												{
													HX_STACK_LINE(6640)
													{
														HX_STACK_LINE(6641)
														::zpp_nape::dynamics::ZPP_ColArbiter o = arb;		HX_STACK_VAR(o,"o");
														HX_STACK_LINE(6642)
														{
														}
														HX_STACK_LINE(6650)
														{
															HX_STACK_LINE(6650)
															{
															}
															HX_STACK_LINE(6650)
															{
															}
															HX_STACK_LINE(6650)
															o->userdef_dyn_fric = false;
															HX_STACK_LINE(6650)
															o->userdef_stat_fric = false;
															HX_STACK_LINE(6650)
															o->userdef_restitution = false;
															HX_STACK_LINE(6650)
															o->userdef_rfric = false;
															HX_STACK_LINE(6650)
															o->__ref_edge1 = o->__ref_edge2 = null();
														}
														HX_STACK_LINE(6651)
														o->next = ::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool;
														HX_STACK_LINE(6652)
														::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool = o;
													}
													HX_STACK_LINE(6657)
													return null();
												}
												return null();
											}
										};
										HX_STACK_LINE(6312)
										return (  ((::zpp_nape::geom::ZPP_Collide_obj::contactCollide(sa,sb,arb,reverse))) ? ::zpp_nape::dynamics::ZPP_ColArbiter(_Function_6_1::Block(arb,swapped,continuous,inttype,_g,s2,__this,sb,s1,first,carbs,sa)) : ::zpp_nape::dynamics::ZPP_ColArbiter((  ((first)) ? ::zpp_nape::dynamics::ZPP_ColArbiter(_Function_6_2::Block(arb)) : ::zpp_nape::dynamics::ZPP_ColArbiter(arb) )) );
									}
									return null();
								}
							};
							HX_STACK_LINE(6310)
							return (  (((bool((bool(first) || bool((arb->stamp != __this->stamp)))) || bool(continuous)))) ? ::zpp_nape::dynamics::ZPP_ColArbiter(_Function_5_1::Block(arb,reverse,swapped,continuous,inttype,_g,__this,s2,sb,s1,first,sa,carbs)) : ::zpp_nape::dynamics::ZPP_ColArbiter(arb) );
						}
						return null();
					}
				};
				HX_STACK_LINE(6308)
				ret = _Function_4_2::Block(arb,reverse,swapped,continuous,_g,this,s2,sb,s1,first,sa,carbs);
			}
			else{
				struct _Function_4_1{
					inline static ::zpp_nape::dynamics::ZPP_Arbiter Block( ::zpp_nape::shape::ZPP_Shape &sa,::zpp_nape::phys::ZPP_Body &b2,::zpp_nape::phys::ZPP_Body &b1,::zpp_nape::shape::ZPP_Shape &sb){
						HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6665);
						{
							HX_STACK_LINE(6666)
							::zpp_nape::dynamics::ZPP_Arbiter ret1 = null();		HX_STACK_VAR(ret1,"ret1");
							HX_STACK_LINE(6667)
							::zpp_nape::phys::ZPP_Body b = (  (((b1->arbiters->length < b2->arbiters->length))) ? ::zpp_nape::phys::ZPP_Body(b1) : ::zpp_nape::phys::ZPP_Body(b2) );		HX_STACK_VAR(b,"b");
							HX_STACK_LINE(6668)
							{
								HX_STACK_LINE(6669)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite = b->arbiters->head;		HX_STACK_VAR(cx_ite,"cx_ite");
								HX_STACK_LINE(6670)
								while(((cx_ite != null()))){
									HX_STACK_LINE(6671)
									::zpp_nape::dynamics::ZPP_Arbiter arb = cx_ite->elt;		HX_STACK_VAR(arb,"arb");
									HX_STACK_LINE(6672)
									{
										HX_STACK_LINE(6673)
										{
										}
										HX_STACK_LINE(6681)
										if (((bool((arb->id == sa->id)) && bool((arb->di == sb->id))))){
											HX_STACK_LINE(6682)
											ret1 = arb;
											HX_STACK_LINE(6683)
											break;
										}
									}
									HX_STACK_LINE(6686)
									cx_ite = cx_ite->next;
								}
							}
							HX_STACK_LINE(6689)
							return ret1;
						}
						return null();
					}
				};
				HX_STACK_LINE(6665)
				::zpp_nape::dynamics::ZPP_Arbiter xarb = (  (((in_arb == null()))) ? ::zpp_nape::dynamics::ZPP_Arbiter(_Function_4_1::Block(sa,b2,b1,sb)) : ::zpp_nape::dynamics::ZPP_Arbiter(in_arb) );		HX_STACK_VAR(xarb,"xarb");
				HX_STACK_LINE(6691)
				bool first = (xarb == null());		HX_STACK_VAR(first,"first");
				HX_STACK_LINE(6692)
				::zpp_nape::dynamics::ZPP_SensorArbiter arb;		HX_STACK_VAR(arb,"arb");
				HX_STACK_LINE(6693)
				bool swapped = false;		HX_STACK_VAR(swapped,"swapped");
				HX_STACK_LINE(6694)
				if ((first)){
					HX_STACK_LINE(6695)
					if (((::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool == null()))){
						HX_STACK_LINE(6695)
						arb = ::zpp_nape::dynamics::ZPP_SensorArbiter_obj::__new();
					}
					else{
						HX_STACK_LINE(6702)
						arb = ::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool;
						HX_STACK_LINE(6703)
						::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool = arb->next;
						HX_STACK_LINE(6704)
						arb->next = null();
					}
					HX_STACK_LINE(6709)
					Dynamic();
				}
				else{
					HX_STACK_LINE(6711)
					if (((xarb->sensorarb == null()))){
						HX_STACK_LINE(6713)
						{
							HX_STACK_LINE(6713)
							{
							}
							HX_STACK_LINE(6713)
							xarb->cleared = true;
							HX_STACK_LINE(6713)
							{
								HX_STACK_LINE(6713)
								::zpp_nape::util::ZNPList_ZPP_Arbiter _this = xarb->b1->arbiters;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(6713)
								{
								}
								HX_STACK_LINE(6713)
								{
									HX_STACK_LINE(6713)
									{
									}
									HX_STACK_LINE(6713)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
									HX_STACK_LINE(6713)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;		HX_STACK_VAR(cur,"cur");
									HX_STACK_LINE(6713)
									bool ret1 = false;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(6713)
									while(((cur != null()))){
										HX_STACK_LINE(6713)
										if (((cur->elt == xarb))){
											HX_STACK_LINE(6713)
											{
												HX_STACK_LINE(6713)
												{
												}
												HX_STACK_LINE(6713)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
												HX_STACK_LINE(6713)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter ret2;		HX_STACK_VAR(ret2,"ret2");
												HX_STACK_LINE(6713)
												if (((pre == null()))){
													HX_STACK_LINE(6713)
													old = _this->head;
													HX_STACK_LINE(6713)
													ret2 = old->next;
													HX_STACK_LINE(6713)
													_this->head = ret2;
													HX_STACK_LINE(6713)
													if (((_this->head == null()))){
														HX_STACK_LINE(6713)
														_this->pushmod = true;
													}
												}
												else{
													HX_STACK_LINE(6713)
													old = pre->next;
													HX_STACK_LINE(6713)
													ret2 = old->next;
													HX_STACK_LINE(6713)
													pre->next = ret2;
													HX_STACK_LINE(6713)
													if (((ret2 == null()))){
														HX_STACK_LINE(6713)
														_this->pushmod = true;
													}
												}
												HX_STACK_LINE(6713)
												{
												}
												HX_STACK_LINE(6713)
												{
													HX_STACK_LINE(6713)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
													HX_STACK_LINE(6713)
													{
													}
													HX_STACK_LINE(6713)
													o->elt = null();
													HX_STACK_LINE(6713)
													o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
													HX_STACK_LINE(6713)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
												}
												HX_STACK_LINE(6713)
												_this->modified = true;
												HX_STACK_LINE(6713)
												(_this->length)--;
												HX_STACK_LINE(6713)
												_this->pushmod = true;
												HX_STACK_LINE(6713)
												ret2;
											}
											HX_STACK_LINE(6713)
											ret1 = true;
											HX_STACK_LINE(6713)
											break;
										}
										HX_STACK_LINE(6713)
										pre = cur;
										HX_STACK_LINE(6713)
										cur = cur->next;
									}
									HX_STACK_LINE(6713)
									ret1;
								}
							}
							HX_STACK_LINE(6713)
							{
								HX_STACK_LINE(6713)
								::zpp_nape::util::ZNPList_ZPP_Arbiter _this = xarb->b2->arbiters;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(6713)
								{
								}
								HX_STACK_LINE(6713)
								{
									HX_STACK_LINE(6713)
									{
									}
									HX_STACK_LINE(6713)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
									HX_STACK_LINE(6713)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;		HX_STACK_VAR(cur,"cur");
									HX_STACK_LINE(6713)
									bool ret1 = false;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(6713)
									while(((cur != null()))){
										HX_STACK_LINE(6713)
										if (((cur->elt == xarb))){
											HX_STACK_LINE(6713)
											{
												HX_STACK_LINE(6713)
												{
												}
												HX_STACK_LINE(6713)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
												HX_STACK_LINE(6713)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter ret2;		HX_STACK_VAR(ret2,"ret2");
												HX_STACK_LINE(6713)
												if (((pre == null()))){
													HX_STACK_LINE(6713)
													old = _this->head;
													HX_STACK_LINE(6713)
													ret2 = old->next;
													HX_STACK_LINE(6713)
													_this->head = ret2;
													HX_STACK_LINE(6713)
													if (((_this->head == null()))){
														HX_STACK_LINE(6713)
														_this->pushmod = true;
													}
												}
												else{
													HX_STACK_LINE(6713)
													old = pre->next;
													HX_STACK_LINE(6713)
													ret2 = old->next;
													HX_STACK_LINE(6713)
													pre->next = ret2;
													HX_STACK_LINE(6713)
													if (((ret2 == null()))){
														HX_STACK_LINE(6713)
														_this->pushmod = true;
													}
												}
												HX_STACK_LINE(6713)
												{
												}
												HX_STACK_LINE(6713)
												{
													HX_STACK_LINE(6713)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
													HX_STACK_LINE(6713)
													{
													}
													HX_STACK_LINE(6713)
													o->elt = null();
													HX_STACK_LINE(6713)
													o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
													HX_STACK_LINE(6713)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
												}
												HX_STACK_LINE(6713)
												_this->modified = true;
												HX_STACK_LINE(6713)
												(_this->length)--;
												HX_STACK_LINE(6713)
												_this->pushmod = true;
												HX_STACK_LINE(6713)
												ret2;
											}
											HX_STACK_LINE(6713)
											ret1 = true;
											HX_STACK_LINE(6713)
											break;
										}
										HX_STACK_LINE(6713)
										pre = cur;
										HX_STACK_LINE(6713)
										cur = cur->next;
									}
									HX_STACK_LINE(6713)
									ret1;
								}
							}
							HX_STACK_LINE(6713)
							if (((xarb->pair != null()))){
								HX_STACK_LINE(6713)
								xarb->pair->arb = null();
								HX_STACK_LINE(6713)
								xarb->pair = null();
							}
							HX_STACK_LINE(6713)
							xarb->active = false;
							HX_STACK_LINE(6713)
							this->f_arbiters->modified = true;
						}
						HX_STACK_LINE(6714)
						{
							HX_STACK_LINE(6715)
							if (((::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool == null()))){
								HX_STACK_LINE(6715)
								arb = ::zpp_nape::dynamics::ZPP_SensorArbiter_obj::__new();
							}
							else{
								HX_STACK_LINE(6722)
								arb = ::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool;
								HX_STACK_LINE(6723)
								::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool = arb->next;
								HX_STACK_LINE(6724)
								arb->next = null();
							}
							HX_STACK_LINE(6729)
							Dynamic();
						}
						HX_STACK_LINE(6731)
						arb->intchange = true;
						HX_STACK_LINE(6732)
						first = true;
						HX_STACK_LINE(6733)
						swapped = true;
					}
					else{
						HX_STACK_LINE(6735)
						arb = xarb->sensorarb;
					}
				}
				struct _Function_4_2{
					inline static ::zpp_nape::dynamics::ZPP_SensorArbiter Block( ::zpp_nape::dynamics::ZPP_SensorArbiter &arb,bool &swapped,bool &continuous,::zpp_nape::space::ZPP_Space &_g,::zpp_nape::space::ZPP_Space_obj *__this,::zpp_nape::shape::ZPP_Shape &s2,::zpp_nape::shape::ZPP_Shape &sb,::zpp_nape::shape::ZPP_Shape &s1,bool &first,::zpp_nape::shape::ZPP_Shape &sa){
						HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6737);
						{
							HX_STACK_LINE(6738)
							int inttype = ::zpp_nape::util::ZPP_Flags_obj::id_InteractionType_SENSOR;		HX_STACK_VAR(inttype,"inttype");
							struct _Function_5_1{
								inline static ::zpp_nape::dynamics::ZPP_SensorArbiter Block( ::zpp_nape::dynamics::ZPP_SensorArbiter &arb,bool &swapped,bool &continuous,int &inttype,::zpp_nape::space::ZPP_Space &_g,::zpp_nape::shape::ZPP_Shape &s2,::zpp_nape::space::ZPP_Space_obj *__this,::zpp_nape::shape::ZPP_Shape &sb,::zpp_nape::shape::ZPP_Shape &s1,bool &first,::zpp_nape::shape::ZPP_Shape &sa){
									HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6739);
									{
										HX_STACK_LINE(6740)
										arb->stamp = __this->stamp;
										struct _Function_6_1{
											inline static ::zpp_nape::dynamics::ZPP_SensorArbiter Block( ::zpp_nape::dynamics::ZPP_SensorArbiter &arb,bool &swapped,bool &continuous,int &inttype,::zpp_nape::space::ZPP_Space &_g,::zpp_nape::shape::ZPP_Shape &s2,::zpp_nape::space::ZPP_Space_obj *__this,::zpp_nape::shape::ZPP_Shape &sb,::zpp_nape::shape::ZPP_Shape &s1,bool &first,::zpp_nape::shape::ZPP_Shape &sa){
												HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6741);
												{
													HX_STACK_LINE(6742)
													if ((first)){
														HX_STACK_LINE(6743)
														{
															HX_STACK_LINE(6743)
															arb->b1 = s1->body;
															HX_STACK_LINE(6743)
															arb->ws1 = s1;
															HX_STACK_LINE(6743)
															arb->b2 = s2->body;
															HX_STACK_LINE(6743)
															arb->ws2 = s2;
															HX_STACK_LINE(6743)
															arb->id = sa->id;
															HX_STACK_LINE(6743)
															arb->di = sb->id;
															HX_STACK_LINE(6743)
															{
																HX_STACK_LINE(6743)
																::zpp_nape::util::ZNPList_ZPP_Arbiter _this = arb->b1->arbiters;		HX_STACK_VAR(_this,"_this");
																HX_STACK_LINE(6743)
																{
																}
																struct _Function_10_1{
																	inline static ::zpp_nape::util::ZNPNode_ZPP_Arbiter Block( ::zpp_nape::dynamics::ZPP_SensorArbiter &arb){
																		HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6743);
																		{
																			HX_STACK_LINE(6743)
																			::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
																			HX_STACK_LINE(6743)
																			{
																				HX_STACK_LINE(6743)
																				if (((::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool == null()))){
																					HX_STACK_LINE(6743)
																					ret1 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__new();
																				}
																				else{
																					HX_STACK_LINE(6743)
																					ret1 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
																					HX_STACK_LINE(6743)
																					::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret1->next;
																					HX_STACK_LINE(6743)
																					ret1->next = null();
																				}
																				HX_STACK_LINE(6743)
																				Dynamic();
																			}
																			HX_STACK_LINE(6743)
																			ret1->elt = arb;
																			HX_STACK_LINE(6743)
																			return ret1;
																		}
																		return null();
																	}
																};
																HX_STACK_LINE(6743)
																::zpp_nape::util::ZNPNode_ZPP_Arbiter temp = _Function_10_1::Block(arb);		HX_STACK_VAR(temp,"temp");
																HX_STACK_LINE(6743)
																temp->next = _this->head;
																HX_STACK_LINE(6743)
																_this->head = temp;
																HX_STACK_LINE(6743)
																_this->modified = true;
																HX_STACK_LINE(6743)
																(_this->length)++;
																HX_STACK_LINE(6743)
																arb;
															}
															HX_STACK_LINE(6743)
															{
																HX_STACK_LINE(6743)
																::zpp_nape::util::ZNPList_ZPP_Arbiter _this = arb->b2->arbiters;		HX_STACK_VAR(_this,"_this");
																HX_STACK_LINE(6743)
																{
																}
																struct _Function_10_1{
																	inline static ::zpp_nape::util::ZNPNode_ZPP_Arbiter Block( ::zpp_nape::dynamics::ZPP_SensorArbiter &arb){
																		HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6743);
																		{
																			HX_STACK_LINE(6743)
																			::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
																			HX_STACK_LINE(6743)
																			{
																				HX_STACK_LINE(6743)
																				if (((::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool == null()))){
																					HX_STACK_LINE(6743)
																					ret1 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__new();
																				}
																				else{
																					HX_STACK_LINE(6743)
																					ret1 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
																					HX_STACK_LINE(6743)
																					::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret1->next;
																					HX_STACK_LINE(6743)
																					ret1->next = null();
																				}
																				HX_STACK_LINE(6743)
																				Dynamic();
																			}
																			HX_STACK_LINE(6743)
																			ret1->elt = arb;
																			HX_STACK_LINE(6743)
																			return ret1;
																		}
																		return null();
																	}
																};
																HX_STACK_LINE(6743)
																::zpp_nape::util::ZNPNode_ZPP_Arbiter temp = _Function_10_1::Block(arb);		HX_STACK_VAR(temp,"temp");
																HX_STACK_LINE(6743)
																temp->next = _this->head;
																HX_STACK_LINE(6743)
																_this->head = temp;
																HX_STACK_LINE(6743)
																_this->modified = true;
																HX_STACK_LINE(6743)
																(_this->length)++;
																HX_STACK_LINE(6743)
																arb;
															}
															HX_STACK_LINE(6743)
															arb->active = true;
															HX_STACK_LINE(6743)
															arb->present = (int)0;
															HX_STACK_LINE(6743)
															arb->cleared = false;
															HX_STACK_LINE(6743)
															arb->sleeping = false;
															HX_STACK_LINE(6743)
															arb->fresh = false;
															HX_STACK_LINE(6743)
															arb->presentable = false;
														}
														HX_STACK_LINE(6744)
														{
															HX_STACK_LINE(6744)
															::zpp_nape::util::ZNPList_ZPP_SensorArbiter _this = __this->s_arbiters;		HX_STACK_VAR(_this,"_this");
															HX_STACK_LINE(6744)
															{
															}
															struct _Function_9_1{
																inline static ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter Block( ::zpp_nape::dynamics::ZPP_SensorArbiter &arb){
																	HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6744);
																	{
																		HX_STACK_LINE(6744)
																		::zpp_nape::util::ZNPNode_ZPP_SensorArbiter ret1;		HX_STACK_VAR(ret1,"ret1");
																		HX_STACK_LINE(6744)
																		{
																			HX_STACK_LINE(6744)
																			if (((::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool == null()))){
																				HX_STACK_LINE(6744)
																				ret1 = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::__new();
																			}
																			else{
																				HX_STACK_LINE(6744)
																				ret1 = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool;
																				HX_STACK_LINE(6744)
																				::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool = ret1->next;
																				HX_STACK_LINE(6744)
																				ret1->next = null();
																			}
																			HX_STACK_LINE(6744)
																			Dynamic();
																		}
																		HX_STACK_LINE(6744)
																		ret1->elt = arb;
																		HX_STACK_LINE(6744)
																		return ret1;
																	}
																	return null();
																}
															};
															HX_STACK_LINE(6744)
															::zpp_nape::util::ZNPNode_ZPP_SensorArbiter temp = _Function_9_1::Block(arb);		HX_STACK_VAR(temp,"temp");
															HX_STACK_LINE(6744)
															temp->next = _this->head;
															HX_STACK_LINE(6744)
															_this->head = temp;
															HX_STACK_LINE(6744)
															_this->modified = true;
															HX_STACK_LINE(6744)
															(_this->length)++;
															HX_STACK_LINE(6744)
															arb;
														}
														HX_STACK_LINE(6745)
														arb->fresh = !(swapped);
													}
													else{
														HX_STACK_LINE(6747)
														arb->fresh = (bool((arb->up_stamp < (__this->stamp - (int)1))) || bool((bool((arb->endGenerated == __this->stamp)) && bool(continuous))));
													}
													HX_STACK_LINE(6750)
													arb->up_stamp = arb->stamp;
													HX_STACK_LINE(6751)
													if (((bool(arb->fresh) || bool((((int(arb->immState) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS))) == (int)0))))){
														HX_STACK_LINE(6752)
														arb->immState = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT;
														HX_STACK_LINE(6753)
														bool anyimpure = false;		HX_STACK_VAR(anyimpure,"anyimpure");
														HX_STACK_LINE(6754)
														{
															HX_STACK_LINE(6754)
															{
															}
															HX_STACK_LINE(6754)
															{
																HX_STACK_LINE(6754)
																::zpp_nape::util::ZNPList_ZPP_Interactor _this = __this->mrca1;		HX_STACK_VAR(_this,"_this");
																HX_STACK_LINE(6754)
																{
																	HX_STACK_LINE(6754)
																	while((!(((_this->head == null()))))){
																		HX_STACK_LINE(6754)
																		{
																		}
																		HX_STACK_LINE(6754)
																		::zpp_nape::util::ZNPNode_ZPP_Interactor ret1 = _this->head;		HX_STACK_VAR(ret1,"ret1");
																		HX_STACK_LINE(6754)
																		_this->head = ret1->next;
																		HX_STACK_LINE(6754)
																		{
																		}
																		HX_STACK_LINE(6754)
																		{
																			HX_STACK_LINE(6754)
																			::zpp_nape::util::ZNPNode_ZPP_Interactor o = ret1;		HX_STACK_VAR(o,"o");
																			HX_STACK_LINE(6754)
																			{
																			}
																			HX_STACK_LINE(6754)
																			o->elt = null();
																			HX_STACK_LINE(6754)
																			o->next = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
																			HX_STACK_LINE(6754)
																			::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o;
																		}
																		HX_STACK_LINE(6754)
																		if (((_this->head == null()))){
																			HX_STACK_LINE(6754)
																			_this->pushmod = true;
																		}
																		HX_STACK_LINE(6754)
																		_this->modified = true;
																		HX_STACK_LINE(6754)
																		(_this->length)--;
																	}
																	HX_STACK_LINE(6754)
																	_this->pushmod = true;
																}
															}
															HX_STACK_LINE(6754)
															{
																HX_STACK_LINE(6754)
																::zpp_nape::util::ZNPList_ZPP_Interactor _this = __this->mrca2;		HX_STACK_VAR(_this,"_this");
																HX_STACK_LINE(6754)
																{
																	HX_STACK_LINE(6754)
																	while((!(((_this->head == null()))))){
																		HX_STACK_LINE(6754)
																		{
																		}
																		HX_STACK_LINE(6754)
																		::zpp_nape::util::ZNPNode_ZPP_Interactor ret1 = _this->head;		HX_STACK_VAR(ret1,"ret1");
																		HX_STACK_LINE(6754)
																		_this->head = ret1->next;
																		HX_STACK_LINE(6754)
																		{
																		}
																		HX_STACK_LINE(6754)
																		{
																			HX_STACK_LINE(6754)
																			::zpp_nape::util::ZNPNode_ZPP_Interactor o = ret1;		HX_STACK_VAR(o,"o");
																			HX_STACK_LINE(6754)
																			{
																			}
																			HX_STACK_LINE(6754)
																			o->elt = null();
																			HX_STACK_LINE(6754)
																			o->next = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
																			HX_STACK_LINE(6754)
																			::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o;
																		}
																		HX_STACK_LINE(6754)
																		if (((_this->head == null()))){
																			HX_STACK_LINE(6754)
																			_this->pushmod = true;
																		}
																		HX_STACK_LINE(6754)
																		_this->modified = true;
																		HX_STACK_LINE(6754)
																		(_this->length)--;
																	}
																	HX_STACK_LINE(6754)
																	_this->pushmod = true;
																}
															}
															HX_STACK_LINE(6754)
															if (((s1->cbSet != null()))){
																HX_STACK_LINE(6754)
																::zpp_nape::util::ZNPList_ZPP_Interactor _this = __this->mrca1;		HX_STACK_VAR(_this,"_this");
																HX_STACK_LINE(6754)
																{
																}
																struct _Function_10_1{
																	inline static ::zpp_nape::util::ZNPNode_ZPP_Interactor Block( ::zpp_nape::shape::ZPP_Shape &s1){
																		HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6754);
																		{
																			HX_STACK_LINE(6754)
																			::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
																			HX_STACK_LINE(6754)
																			{
																				HX_STACK_LINE(6754)
																				if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
																					HX_STACK_LINE(6754)
																					ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();
																				}
																				else{
																					HX_STACK_LINE(6754)
																					ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
																					HX_STACK_LINE(6754)
																					::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
																					HX_STACK_LINE(6754)
																					ret1->next = null();
																				}
																				HX_STACK_LINE(6754)
																				Dynamic();
																			}
																			HX_STACK_LINE(6754)
																			ret1->elt = s1;
																			HX_STACK_LINE(6754)
																			return ret1;
																		}
																		return null();
																	}
																};
																HX_STACK_LINE(6754)
																::zpp_nape::util::ZNPNode_ZPP_Interactor temp = _Function_10_1::Block(s1);		HX_STACK_VAR(temp,"temp");
																HX_STACK_LINE(6754)
																temp->next = _this->head;
																HX_STACK_LINE(6754)
																_this->head = temp;
																HX_STACK_LINE(6754)
																_this->modified = true;
																HX_STACK_LINE(6754)
																(_this->length)++;
																HX_STACK_LINE(6754)
																s1;
															}
															HX_STACK_LINE(6754)
															if (((s1->body->cbSet != null()))){
																HX_STACK_LINE(6754)
																::zpp_nape::util::ZNPList_ZPP_Interactor _this = __this->mrca1;		HX_STACK_VAR(_this,"_this");
																::zpp_nape::phys::ZPP_Interactor o = s1->body;		HX_STACK_VAR(o,"o");
																HX_STACK_LINE(6754)
																{
																}
																struct _Function_10_1{
																	inline static ::zpp_nape::util::ZNPNode_ZPP_Interactor Block( ::zpp_nape::phys::ZPP_Interactor &o){
																		HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6754);
																		{
																			HX_STACK_LINE(6754)
																			::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
																			HX_STACK_LINE(6754)
																			{
																				HX_STACK_LINE(6754)
																				if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
																					HX_STACK_LINE(6754)
																					ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();
																				}
																				else{
																					HX_STACK_LINE(6754)
																					ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
																					HX_STACK_LINE(6754)
																					::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
																					HX_STACK_LINE(6754)
																					ret1->next = null();
																				}
																				HX_STACK_LINE(6754)
																				Dynamic();
																			}
																			HX_STACK_LINE(6754)
																			ret1->elt = o;
																			HX_STACK_LINE(6754)
																			return ret1;
																		}
																		return null();
																	}
																};
																HX_STACK_LINE(6754)
																::zpp_nape::util::ZNPNode_ZPP_Interactor temp = _Function_10_1::Block(o);		HX_STACK_VAR(temp,"temp");
																HX_STACK_LINE(6754)
																temp->next = _this->head;
																HX_STACK_LINE(6754)
																_this->head = temp;
																HX_STACK_LINE(6754)
																_this->modified = true;
																HX_STACK_LINE(6754)
																(_this->length)++;
																HX_STACK_LINE(6754)
																o;
															}
															HX_STACK_LINE(6754)
															if (((s2->cbSet != null()))){
																HX_STACK_LINE(6754)
																::zpp_nape::util::ZNPList_ZPP_Interactor _this = __this->mrca2;		HX_STACK_VAR(_this,"_this");
																HX_STACK_LINE(6754)
																{
																}
																struct _Function_10_1{
																	inline static ::zpp_nape::util::ZNPNode_ZPP_Interactor Block( ::zpp_nape::shape::ZPP_Shape &s2){
																		HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6754);
																		{
																			HX_STACK_LINE(6754)
																			::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
																			HX_STACK_LINE(6754)
																			{
																				HX_STACK_LINE(6754)
																				if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
																					HX_STACK_LINE(6754)
																					ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();
																				}
																				else{
																					HX_STACK_LINE(6754)
																					ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
																					HX_STACK_LINE(6754)
																					::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
																					HX_STACK_LINE(6754)
																					ret1->next = null();
																				}
																				HX_STACK_LINE(6754)
																				Dynamic();
																			}
																			HX_STACK_LINE(6754)
																			ret1->elt = s2;
																			HX_STACK_LINE(6754)
																			return ret1;
																		}
																		return null();
																	}
																};
																HX_STACK_LINE(6754)
																::zpp_nape::util::ZNPNode_ZPP_Interactor temp = _Function_10_1::Block(s2);		HX_STACK_VAR(temp,"temp");
																HX_STACK_LINE(6754)
																temp->next = _this->head;
																HX_STACK_LINE(6754)
																_this->head = temp;
																HX_STACK_LINE(6754)
																_this->modified = true;
																HX_STACK_LINE(6754)
																(_this->length)++;
																HX_STACK_LINE(6754)
																s2;
															}
															HX_STACK_LINE(6754)
															if (((s2->body->cbSet != null()))){
																HX_STACK_LINE(6754)
																::zpp_nape::util::ZNPList_ZPP_Interactor _this = __this->mrca2;		HX_STACK_VAR(_this,"_this");
																::zpp_nape::phys::ZPP_Interactor o = s2->body;		HX_STACK_VAR(o,"o");
																HX_STACK_LINE(6754)
																{
																}
																struct _Function_10_1{
																	inline static ::zpp_nape::util::ZNPNode_ZPP_Interactor Block( ::zpp_nape::phys::ZPP_Interactor &o){
																		HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6754);
																		{
																			HX_STACK_LINE(6754)
																			::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
																			HX_STACK_LINE(6754)
																			{
																				HX_STACK_LINE(6754)
																				if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
																					HX_STACK_LINE(6754)
																					ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();
																				}
																				else{
																					HX_STACK_LINE(6754)
																					ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
																					HX_STACK_LINE(6754)
																					::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
																					HX_STACK_LINE(6754)
																					ret1->next = null();
																				}
																				HX_STACK_LINE(6754)
																				Dynamic();
																			}
																			HX_STACK_LINE(6754)
																			ret1->elt = o;
																			HX_STACK_LINE(6754)
																			return ret1;
																		}
																		return null();
																	}
																};
																HX_STACK_LINE(6754)
																::zpp_nape::util::ZNPNode_ZPP_Interactor temp = _Function_10_1::Block(o);		HX_STACK_VAR(temp,"temp");
																HX_STACK_LINE(6754)
																temp->next = _this->head;
																HX_STACK_LINE(6754)
																_this->head = temp;
																HX_STACK_LINE(6754)
																_this->modified = true;
																HX_STACK_LINE(6754)
																(_this->length)++;
																HX_STACK_LINE(6754)
																o;
															}
															HX_STACK_LINE(6754)
															::zpp_nape::phys::ZPP_Compound c1 = s1->body->compound;		HX_STACK_VAR(c1,"c1");
															HX_STACK_LINE(6754)
															::zpp_nape::phys::ZPP_Compound c2 = s2->body->compound;		HX_STACK_VAR(c2,"c2");
															HX_STACK_LINE(6754)
															while(((c1 != c2))){
																HX_STACK_LINE(6754)
																int d1 = (  (((c1 == null()))) ? int((int)0) : int(c1->depth) );		HX_STACK_VAR(d1,"d1");
																HX_STACK_LINE(6754)
																int d2 = (  (((c2 == null()))) ? int((int)0) : int(c2->depth) );		HX_STACK_VAR(d2,"d2");
																HX_STACK_LINE(6754)
																if (((d1 < d2))){
																	HX_STACK_LINE(6754)
																	if (((c2->cbSet != null()))){
																		HX_STACK_LINE(6754)
																		::zpp_nape::util::ZNPList_ZPP_Interactor _this = __this->mrca2;		HX_STACK_VAR(_this,"_this");
																		HX_STACK_LINE(6754)
																		{
																		}
																		struct _Function_12_1{
																			inline static ::zpp_nape::util::ZNPNode_ZPP_Interactor Block( ::zpp_nape::phys::ZPP_Compound &c2){
																				HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6754);
																				{
																					HX_STACK_LINE(6754)
																					::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
																					HX_STACK_LINE(6754)
																					{
																						HX_STACK_LINE(6754)
																						if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
																							HX_STACK_LINE(6754)
																							ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();
																						}
																						else{
																							HX_STACK_LINE(6754)
																							ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
																							HX_STACK_LINE(6754)
																							::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
																							HX_STACK_LINE(6754)
																							ret1->next = null();
																						}
																						HX_STACK_LINE(6754)
																						Dynamic();
																					}
																					HX_STACK_LINE(6754)
																					ret1->elt = c2;
																					HX_STACK_LINE(6754)
																					return ret1;
																				}
																				return null();
																			}
																		};
																		HX_STACK_LINE(6754)
																		::zpp_nape::util::ZNPNode_ZPP_Interactor temp = _Function_12_1::Block(c2);		HX_STACK_VAR(temp,"temp");
																		HX_STACK_LINE(6754)
																		temp->next = _this->head;
																		HX_STACK_LINE(6754)
																		_this->head = temp;
																		HX_STACK_LINE(6754)
																		_this->modified = true;
																		HX_STACK_LINE(6754)
																		(_this->length)++;
																		HX_STACK_LINE(6754)
																		c2;
																	}
																	HX_STACK_LINE(6754)
																	c2 = c2->compound;
																}
																else{
																	HX_STACK_LINE(6754)
																	if (((c1->cbSet != null()))){
																		HX_STACK_LINE(6754)
																		::zpp_nape::util::ZNPList_ZPP_Interactor _this = __this->mrca1;		HX_STACK_VAR(_this,"_this");
																		HX_STACK_LINE(6754)
																		{
																		}
																		struct _Function_12_1{
																			inline static ::zpp_nape::util::ZNPNode_ZPP_Interactor Block( ::zpp_nape::phys::ZPP_Compound &c1){
																				HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6754);
																				{
																					HX_STACK_LINE(6754)
																					::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
																					HX_STACK_LINE(6754)
																					{
																						HX_STACK_LINE(6754)
																						if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
																							HX_STACK_LINE(6754)
																							ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();
																						}
																						else{
																							HX_STACK_LINE(6754)
																							ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
																							HX_STACK_LINE(6754)
																							::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
																							HX_STACK_LINE(6754)
																							ret1->next = null();
																						}
																						HX_STACK_LINE(6754)
																						Dynamic();
																					}
																					HX_STACK_LINE(6754)
																					ret1->elt = c1;
																					HX_STACK_LINE(6754)
																					return ret1;
																				}
																				return null();
																			}
																		};
																		HX_STACK_LINE(6754)
																		::zpp_nape::util::ZNPNode_ZPP_Interactor temp = _Function_12_1::Block(c1);		HX_STACK_VAR(temp,"temp");
																		HX_STACK_LINE(6754)
																		temp->next = _this->head;
																		HX_STACK_LINE(6754)
																		_this->head = temp;
																		HX_STACK_LINE(6754)
																		_this->modified = true;
																		HX_STACK_LINE(6754)
																		(_this->length)++;
																		HX_STACK_LINE(6754)
																		c1;
																	}
																	HX_STACK_LINE(6754)
																	c1 = c1->compound;
																}
															}
														}
														HX_STACK_LINE(6755)
														{
															HX_STACK_LINE(6756)
															::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite = __this->mrca1->head;		HX_STACK_VAR(cx_ite,"cx_ite");
															HX_STACK_LINE(6757)
															while(((cx_ite != null()))){
																HX_STACK_LINE(6758)
																::zpp_nape::phys::ZPP_Interactor i1 = cx_ite->elt;		HX_STACK_VAR(i1,"i1");
																HX_STACK_LINE(6759)
																{
																	HX_STACK_LINE(6761)
																	::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite1 = __this->mrca2->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
																	HX_STACK_LINE(6762)
																	while(((cx_ite1 != null()))){
																		HX_STACK_LINE(6763)
																		::zpp_nape::phys::ZPP_Interactor i2 = cx_ite1->elt;		HX_STACK_VAR(i2,"i2");
																		HX_STACK_LINE(6764)
																		{
																			HX_STACK_LINE(6765)
																			::zpp_nape::callbacks::ZPP_CbSet cb1 = i1->cbSet;		HX_STACK_VAR(cb1,"cb1");
																			HX_STACK_LINE(6766)
																			::zpp_nape::callbacks::ZPP_CbSet cb2 = i2->cbSet;		HX_STACK_VAR(cb2,"cb2");
																			HX_STACK_LINE(6767)
																			{
																			}
																			struct _Function_13_1{
																				inline static bool Block( ::zpp_nape::callbacks::ZPP_CbSet &cb1,::zpp_nape::callbacks::ZPP_CbSet &cb2){
																					HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6775);
																					{
																						HX_STACK_LINE(6775)
																						{
																						}
																						struct _Function_14_1{
																							inline static ::zpp_nape::callbacks::ZPP_CbSetPair Block( ::zpp_nape::callbacks::ZPP_CbSet &cb1,::zpp_nape::callbacks::ZPP_CbSet &cb2){
																								HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6775);
																								{
																									HX_STACK_LINE(6775)
																									::zpp_nape::callbacks::ZPP_CbSetPair ret1 = null();		HX_STACK_VAR(ret1,"ret1");
																									HX_STACK_LINE(6775)
																									::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs = (  (((cb1->cbpairs->length < cb2->cbpairs->length))) ? ::zpp_nape::util::ZNPList_ZPP_CbSetPair(cb1->cbpairs) : ::zpp_nape::util::ZNPList_ZPP_CbSetPair(cb2->cbpairs) );		HX_STACK_VAR(pairs,"pairs");
																									HX_STACK_LINE(6775)
																									{
																										HX_STACK_LINE(6775)
																										::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite2 = pairs->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																										HX_STACK_LINE(6775)
																										while(((cx_ite2 != null()))){
																											HX_STACK_LINE(6775)
																											::zpp_nape::callbacks::ZPP_CbSetPair p = cx_ite2->elt;		HX_STACK_VAR(p,"p");
																											HX_STACK_LINE(6775)
																											if (((bool((bool((p->a == cb1)) && bool((p->b == cb2)))) || bool((bool((p->a == cb2)) && bool((p->b == cb1))))))){
																												HX_STACK_LINE(6775)
																												ret1 = p;
																												HX_STACK_LINE(6775)
																												break;
																											}
																											HX_STACK_LINE(6775)
																											cx_ite2 = cx_ite2->next;
																										}
																									}
																									HX_STACK_LINE(6775)
																									if (((ret1 == null()))){
																										struct _Function_16_1{
																											inline static ::zpp_nape::callbacks::ZPP_CbSetPair Block( ::zpp_nape::callbacks::ZPP_CbSet &cb1,::zpp_nape::callbacks::ZPP_CbSet &cb2){
																												HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6775);
																												{
																													HX_STACK_LINE(6775)
																													::zpp_nape::callbacks::ZPP_CbSetPair ret2;		HX_STACK_VAR(ret2,"ret2");
																													HX_STACK_LINE(6775)
																													{
																														HX_STACK_LINE(6775)
																														if (((::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool == null()))){
																															HX_STACK_LINE(6775)
																															ret2 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__new();
																														}
																														else{
																															HX_STACK_LINE(6775)
																															ret2 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
																															HX_STACK_LINE(6775)
																															::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret2->next;
																															HX_STACK_LINE(6775)
																															ret2->next = null();
																														}
																														HX_STACK_LINE(6775)
																														ret2->zip_listeners = true;
																													}
																													HX_STACK_LINE(6775)
																													if ((::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(cb1,cb2))){
																														HX_STACK_LINE(6775)
																														ret2->a = cb1;
																														HX_STACK_LINE(6775)
																														ret2->b = cb2;
																													}
																													else{
																														HX_STACK_LINE(6775)
																														ret2->a = cb2;
																														HX_STACK_LINE(6775)
																														ret2->b = cb1;
																													}
																													HX_STACK_LINE(6775)
																													return ret2;
																												}
																												return null();
																											}
																										};
																										HX_STACK_LINE(6775)
																										ret1 = _Function_16_1::Block(cb1,cb2);
																										HX_STACK_LINE(6775)
																										cb1->cbpairs->add(ret1);
																										HX_STACK_LINE(6775)
																										if (((cb2 != cb1))){
																											HX_STACK_LINE(6775)
																											cb2->cbpairs->add(ret1);
																										}
																									}
																									HX_STACK_LINE(6775)
																									if ((ret1->zip_listeners)){
																										HX_STACK_LINE(6775)
																										ret1->zip_listeners = false;
																										HX_STACK_LINE(6775)
																										ret1->__validate();
																									}
																									HX_STACK_LINE(6775)
																									return ret1;
																								}
																								return null();
																							}
																						};
																						HX_STACK_LINE(6775)
																						return ((_Function_14_1::Block(cb1,cb2))->listeners->head == null());
																					}
																					return null();
																				}
																			};
																			HX_STACK_LINE(6775)
																			if ((_Function_13_1::Block(cb1,cb2))){
																				HX_STACK_LINE(6776)
																				cx_ite1 = cx_ite1->next;
																				HX_STACK_LINE(6777)
																				continue;
																			}
																			HX_STACK_LINE(6779)
																			::zpp_nape::space::ZPP_CallbackSet callbackset = null();		HX_STACK_VAR(callbackset,"callbackset");
																			HX_STACK_LINE(6780)
																			::zpp_nape::space::ZPP_CallbackSet ncallbackset = null();		HX_STACK_VAR(ncallbackset,"ncallbackset");
																			HX_STACK_LINE(6781)
																			{
																				HX_STACK_LINE(6781)
																				::zpp_nape::util::ZNPList_ZPP_InteractionListener _this = __this->prelisteners;		HX_STACK_VAR(_this,"_this");
																				HX_STACK_LINE(6781)
																				{
																					HX_STACK_LINE(6781)
																					while((!(((_this->head == null()))))){
																						HX_STACK_LINE(6781)
																						{
																						}
																						HX_STACK_LINE(6781)
																						::zpp_nape::util::ZNPNode_ZPP_InteractionListener ret1 = _this->head;		HX_STACK_VAR(ret1,"ret1");
																						HX_STACK_LINE(6781)
																						_this->head = ret1->next;
																						HX_STACK_LINE(6781)
																						{
																						}
																						HX_STACK_LINE(6781)
																						{
																							HX_STACK_LINE(6781)
																							::zpp_nape::util::ZNPNode_ZPP_InteractionListener o = ret1;		HX_STACK_VAR(o,"o");
																							HX_STACK_LINE(6781)
																							{
																							}
																							HX_STACK_LINE(6781)
																							o->elt = null();
																							HX_STACK_LINE(6781)
																							o->next = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool;
																							HX_STACK_LINE(6781)
																							::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool = o;
																						}
																						HX_STACK_LINE(6781)
																						if (((_this->head == null()))){
																							HX_STACK_LINE(6781)
																							_this->pushmod = true;
																						}
																						HX_STACK_LINE(6781)
																						_this->modified = true;
																						HX_STACK_LINE(6781)
																						(_this->length)--;
																					}
																					HX_STACK_LINE(6781)
																					_this->pushmod = true;
																				}
																			}
																			HX_STACK_LINE(6782)
																			::zpp_nape::util::ZNPNode_ZPP_InteractionListener lite = null();		HX_STACK_VAR(lite,"lite");
																			HX_STACK_LINE(6783)
																			{
																				HX_STACK_LINE(6783)
																				int event = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_PRE;		HX_STACK_VAR(event,"event");
																				HX_STACK_LINE(6783)
																				{
																					HX_STACK_LINE(6783)
																					{
																					}
																					HX_STACK_LINE(6783)
																					{
																						struct _Function_16_1{
																							inline static ::zpp_nape::callbacks::ZPP_CbSetPair Block( ::zpp_nape::callbacks::ZPP_CbSet &cb1,::zpp_nape::callbacks::ZPP_CbSet &cb2){
																								HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6783);
																								{
																									HX_STACK_LINE(6783)
																									::zpp_nape::callbacks::ZPP_CbSetPair ret1 = null();		HX_STACK_VAR(ret1,"ret1");
																									HX_STACK_LINE(6783)
																									::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs = (  (((cb1->cbpairs->length < cb2->cbpairs->length))) ? ::zpp_nape::util::ZNPList_ZPP_CbSetPair(cb1->cbpairs) : ::zpp_nape::util::ZNPList_ZPP_CbSetPair(cb2->cbpairs) );		HX_STACK_VAR(pairs,"pairs");
																									HX_STACK_LINE(6783)
																									{
																										HX_STACK_LINE(6783)
																										::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite2 = pairs->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																										HX_STACK_LINE(6783)
																										while(((cx_ite2 != null()))){
																											HX_STACK_LINE(6783)
																											::zpp_nape::callbacks::ZPP_CbSetPair p = cx_ite2->elt;		HX_STACK_VAR(p,"p");
																											HX_STACK_LINE(6783)
																											if (((bool((bool((p->a == cb1)) && bool((p->b == cb2)))) || bool((bool((p->a == cb2)) && bool((p->b == cb1))))))){
																												HX_STACK_LINE(6783)
																												ret1 = p;
																												HX_STACK_LINE(6783)
																												break;
																											}
																											HX_STACK_LINE(6783)
																											cx_ite2 = cx_ite2->next;
																										}
																									}
																									HX_STACK_LINE(6783)
																									if (((ret1 == null()))){
																										struct _Function_18_1{
																											inline static ::zpp_nape::callbacks::ZPP_CbSetPair Block( ::zpp_nape::callbacks::ZPP_CbSet &cb1,::zpp_nape::callbacks::ZPP_CbSet &cb2){
																												HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6783);
																												{
																													HX_STACK_LINE(6783)
																													::zpp_nape::callbacks::ZPP_CbSetPair ret2;		HX_STACK_VAR(ret2,"ret2");
																													HX_STACK_LINE(6783)
																													{
																														HX_STACK_LINE(6783)
																														if (((::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool == null()))){
																															HX_STACK_LINE(6783)
																															ret2 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__new();
																														}
																														else{
																															HX_STACK_LINE(6783)
																															ret2 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
																															HX_STACK_LINE(6783)
																															::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret2->next;
																															HX_STACK_LINE(6783)
																															ret2->next = null();
																														}
																														HX_STACK_LINE(6783)
																														ret2->zip_listeners = true;
																													}
																													HX_STACK_LINE(6783)
																													if ((::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(cb1,cb2))){
																														HX_STACK_LINE(6783)
																														ret2->a = cb1;
																														HX_STACK_LINE(6783)
																														ret2->b = cb2;
																													}
																													else{
																														HX_STACK_LINE(6783)
																														ret2->a = cb2;
																														HX_STACK_LINE(6783)
																														ret2->b = cb1;
																													}
																													HX_STACK_LINE(6783)
																													return ret2;
																												}
																												return null();
																											}
																										};
																										HX_STACK_LINE(6783)
																										ret1 = _Function_18_1::Block(cb1,cb2);
																										HX_STACK_LINE(6783)
																										cb1->cbpairs->add(ret1);
																										HX_STACK_LINE(6783)
																										if (((cb2 != cb1))){
																											HX_STACK_LINE(6783)
																											cb2->cbpairs->add(ret1);
																										}
																									}
																									HX_STACK_LINE(6783)
																									if ((ret1->zip_listeners)){
																										HX_STACK_LINE(6783)
																										ret1->zip_listeners = false;
																										HX_STACK_LINE(6783)
																										ret1->__validate();
																									}
																									HX_STACK_LINE(6783)
																									return ret1;
																								}
																								return null();
																							}
																						};
																						HX_STACK_LINE(6783)
																						::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite2 = (_Function_16_1::Block(cb1,cb2))->listeners->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																						HX_STACK_LINE(6783)
																						while(((cx_ite2 != null()))){
																							HX_STACK_LINE(6783)
																							::zpp_nape::callbacks::ZPP_InteractionListener x = cx_ite2->elt;		HX_STACK_VAR(x,"x");
																							HX_STACK_LINE(6783)
																							if (((x->event == event))){
																								HX_STACK_LINE(6783)
																								if (((((int(x->itype) & int(inttype))) != (int)0))){
																									struct _Function_19_1{
																										inline static ::zpp_nape::util::ZNPNode_ZPP_InteractionListener Block( ::zpp_nape::util::ZNPNode_ZPP_InteractionListener &lite,::zpp_nape::space::ZPP_Space &_g,::zpp_nape::callbacks::ZPP_InteractionListener &x){
																											HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6783);
																											{
																												HX_STACK_LINE(6783)
																												::zpp_nape::util::ZNPList_ZPP_InteractionListener _this = _g->prelisteners;		HX_STACK_VAR(_this,"_this");
																												HX_STACK_LINE(6783)
																												{
																												}
																												struct _Function_20_1{
																													inline static ::zpp_nape::util::ZNPNode_ZPP_InteractionListener Block( ::zpp_nape::callbacks::ZPP_InteractionListener &x){
																														HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6783);
																														{
																															HX_STACK_LINE(6783)
																															::zpp_nape::util::ZNPNode_ZPP_InteractionListener ret1;		HX_STACK_VAR(ret1,"ret1");
																															HX_STACK_LINE(6783)
																															{
																																HX_STACK_LINE(6783)
																																if (((::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool == null()))){
																																	HX_STACK_LINE(6783)
																																	ret1 = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::__new();
																																}
																																else{
																																	HX_STACK_LINE(6783)
																																	ret1 = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool;
																																	HX_STACK_LINE(6783)
																																	::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool = ret1->next;
																																	HX_STACK_LINE(6783)
																																	ret1->next = null();
																																}
																																HX_STACK_LINE(6783)
																																Dynamic();
																															}
																															HX_STACK_LINE(6783)
																															ret1->elt = x;
																															HX_STACK_LINE(6783)
																															return ret1;
																														}
																														return null();
																													}
																												};
																												HX_STACK_LINE(6783)
																												::zpp_nape::util::ZNPNode_ZPP_InteractionListener temp = _Function_20_1::Block(x);		HX_STACK_VAR(temp,"temp");
																												HX_STACK_LINE(6783)
																												if (((lite == null()))){
																													HX_STACK_LINE(6783)
																													temp->next = _this->head;
																													HX_STACK_LINE(6783)
																													_this->head = temp;
																												}
																												else{
																													HX_STACK_LINE(6783)
																													temp->next = lite->next;
																													HX_STACK_LINE(6783)
																													lite->next = temp;
																												}
																												HX_STACK_LINE(6783)
																												_this->pushmod = _this->modified = true;
																												HX_STACK_LINE(6783)
																												(_this->length)++;
																												HX_STACK_LINE(6783)
																												return temp;
																											}
																											return null();
																										}
																									};
																									HX_STACK_LINE(6783)
																									lite = _Function_19_1::Block(lite,_g,x);
																									HX_STACK_LINE(6783)
																									anyimpure = (bool(anyimpure) || bool(!(x->pure)));
																								}
																							}
																							HX_STACK_LINE(6783)
																							cx_ite2 = cx_ite2->next;
																						}
																					}
																				}
																			}
																			HX_STACK_LINE(6789)
																			if (((__this->prelisteners->head == null()))){
																				HX_STACK_LINE(6790)
																				cx_ite1 = cx_ite1->next;
																				HX_STACK_LINE(6791)
																				continue;
																			}
																			HX_STACK_LINE(6793)
																			callbackset = ::zpp_nape::phys::ZPP_Interactor_obj::get(i1,i2);
																			HX_STACK_LINE(6794)
																			if (((callbackset == null()))){
																				HX_STACK_LINE(6795)
																				ncallbackset = ::zpp_nape::space::ZPP_CallbackSet_obj::get(i1,i2);
																				HX_STACK_LINE(6796)
																				__this->add_callbackset(ncallbackset);
																			}
																			HX_STACK_LINE(6798)
																			if (((bool((callbackset == null())) || bool((bool(((bool((callbackset->SENSORstamp != __this->stamp)) || bool(continuous)))) && bool((((int(callbackset->SENSORstate) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS))) == (int)0))))))){
																				HX_STACK_LINE(6799)
																				if (((ncallbackset != null()))){
																					HX_STACK_LINE(6799)
																					callbackset = ncallbackset;
																				}
																				HX_STACK_LINE(6800)
																				if (((callbackset != null()))){
																					HX_STACK_LINE(6802)
																					::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite2 = __this->prelisteners->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																					HX_STACK_LINE(6803)
																					while(((cx_ite2 != null()))){
																						HX_STACK_LINE(6804)
																						::zpp_nape::callbacks::ZPP_InteractionListener listener = cx_ite2->elt;		HX_STACK_VAR(listener,"listener");
																						HX_STACK_LINE(6805)
																						if (((listener->itype == ::zpp_nape::util::ZPP_Flags_obj::id_InteractionType_ANY))){
																							HX_STACK_LINE(6807)
																							callbackset->COLLISIONstamp = __this->stamp;
																							HX_STACK_LINE(6808)
																							callbackset->SENSORstamp = __this->stamp;
																							HX_STACK_LINE(6809)
																							callbackset->FLUIDstamp = __this->stamp;
																						}
																						else{
																							HX_STACK_LINE(6811)
																							callbackset->SENSORstamp = __this->stamp;
																						}
																						HX_STACK_LINE(6813)
																						cx_ite2 = cx_ite2->next;
																					}
																				}
																				HX_STACK_LINE(6820)
																				bool pact = arb->active;		HX_STACK_VAR(pact,"pact");
																				HX_STACK_LINE(6821)
																				arb->active = true;
																				HX_STACK_LINE(6822)
																				bool emptycontacts = false;		HX_STACK_VAR(emptycontacts,"emptycontacts");
																				HX_STACK_LINE(6825)
																				__this->precb->zpp_inner->pre_arbiter = arb;
																				HX_STACK_LINE(6826)
																				__this->precb->zpp_inner->set = callbackset;
																				HX_STACK_LINE(6827)
																				{
																					HX_STACK_LINE(6828)
																					::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite2 = __this->prelisteners->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																					HX_STACK_LINE(6829)
																					while(((cx_ite2 != null()))){
																						HX_STACK_LINE(6830)
																						::zpp_nape::callbacks::ZPP_InteractionListener listener = cx_ite2->elt;		HX_STACK_VAR(listener,"listener");
																						HX_STACK_LINE(6831)
																						{
																							HX_STACK_LINE(6832)
																							__this->precb->zpp_inner->listener = listener;
																							HX_STACK_LINE(6859)
																							{
																								HX_STACK_LINE(6859)
																								::zpp_nape::callbacks::ZPP_Callback cb = __this->precb->zpp_inner;		HX_STACK_VAR(cb,"cb");
																								HX_STACK_LINE(6859)
																								::zpp_nape::phys::ZPP_Interactor o1 = callbackset->int1;		HX_STACK_VAR(o1,"o1");
																								HX_STACK_LINE(6859)
																								::zpp_nape::phys::ZPP_Interactor o2 = callbackset->int2;		HX_STACK_VAR(o2,"o2");
																								struct _Function_18_1{
																									inline static bool Block( ::zpp_nape::callbacks::ZPP_InteractionListener &listener,::zpp_nape::phys::ZPP_Interactor &o1){
																										HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6859);
																										{
																											HX_STACK_LINE(6859)
																											::zpp_nape::callbacks::ZPP_OptionType _this = listener->options1;		HX_STACK_VAR(_this,"_this");
																											::zpp_nape::util::ZNPList_ZPP_CbType xs = o1->cbTypes;		HX_STACK_VAR(xs,"xs");
																											HX_STACK_LINE(6859)
																											return (bool(_this->nonemptyintersection(xs,_this->includes)) && bool(!(_this->nonemptyintersection(xs,_this->excludes))));
																										}
																										return null();
																									}
																								};
																								struct _Function_18_2{
																									inline static bool Block( ::zpp_nape::callbacks::ZPP_InteractionListener &listener,::zpp_nape::phys::ZPP_Interactor &o2){
																										HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6859);
																										{
																											HX_STACK_LINE(6859)
																											::zpp_nape::callbacks::ZPP_OptionType _this = listener->options2;		HX_STACK_VAR(_this,"_this");
																											::zpp_nape::util::ZNPList_ZPP_CbType xs = o2->cbTypes;		HX_STACK_VAR(xs,"xs");
																											HX_STACK_LINE(6859)
																											return (bool(_this->nonemptyintersection(xs,_this->includes)) && bool(!(_this->nonemptyintersection(xs,_this->excludes))));
																										}
																										return null();
																									}
																								};
																								HX_STACK_LINE(6859)
																								if (((bool(_Function_18_1::Block(listener,o1)) && bool(_Function_18_2::Block(listener,o2))))){
																									HX_STACK_LINE(6859)
																									cb->int1 = o1;
																									HX_STACK_LINE(6859)
																									cb->int2 = o2;
																								}
																								else{
																									HX_STACK_LINE(6859)
																									cb->int1 = o2;
																									HX_STACK_LINE(6859)
																									cb->int2 = o1;
																								}
																							}
																							HX_STACK_LINE(6860)
																							__this->precb->zpp_inner->pre_swapped = (i1 != __this->precb->zpp_inner->int1);
																							HX_STACK_LINE(6861)
																							::nape::callbacks::PreFlag ret1 = listener->handlerp(__this->precb);		HX_STACK_VAR(ret1,"ret1");
																							HX_STACK_LINE(6862)
																							if (((ret1 != null()))){
																								struct _Function_18_1{
																									inline static ::nape::callbacks::PreFlag Block( ){
																										HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6863);
																										{
																											HX_STACK_LINE(6863)
																											if (((::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT == null()))){
																												HX_STACK_LINE(6863)
																												::zpp_nape::util::ZPP_Flags_obj::internal = true;
																												HX_STACK_LINE(6863)
																												::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT = ::nape::callbacks::PreFlag_obj::__new();
																												HX_STACK_LINE(6863)
																												::zpp_nape::util::ZPP_Flags_obj::internal = false;
																											}
																											HX_STACK_LINE(6863)
																											return ::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT;
																										}
																										return null();
																									}
																								};
																								struct _Function_18_2{
																									inline static ::nape::callbacks::PreFlag Block( ){
																										HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6863);
																										{
																											HX_STACK_LINE(6863)
																											if (((::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT_ONCE == null()))){
																												HX_STACK_LINE(6863)
																												::zpp_nape::util::ZPP_Flags_obj::internal = true;
																												HX_STACK_LINE(6863)
																												::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT_ONCE = ::nape::callbacks::PreFlag_obj::__new();
																												HX_STACK_LINE(6863)
																												::zpp_nape::util::ZPP_Flags_obj::internal = false;
																											}
																											HX_STACK_LINE(6863)
																											return ::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT_ONCE;
																										}
																										return null();
																									}
																								};
																								struct _Function_18_3{
																									inline static ::nape::callbacks::PreFlag Block( ){
																										HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",6863);
																										{
																											HX_STACK_LINE(6863)
																											if (((::zpp_nape::util::ZPP_Flags_obj::PreFlag_IGNORE == null()))){
																												HX_STACK_LINE(6863)
																												::zpp_nape::util::ZPP_Flags_obj::internal = true;
																												HX_STACK_LINE(6863)
																												::zpp_nape::util::ZPP_Flags_obj::PreFlag_IGNORE = ::nape::callbacks::PreFlag_obj::__new();
																												HX_STACK_LINE(6863)
																												::zpp_nape::util::ZPP_Flags_obj::internal = false;
																											}
																											HX_STACK_LINE(6863)
																											return ::zpp_nape::util::ZPP_Flags_obj::PreFlag_IGNORE;
																										}
																										return null();
																									}
																								};
																								HX_STACK_LINE(6862)
																								arb->immState = (  (((ret1 == _Function_18_1::Block()))) ? int((int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT) | int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS))) : int((  (((ret1 == _Function_18_2::Block()))) ? int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT) : int((  (((ret1 == _Function_18_3::Block()))) ? int((int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_IGNORE) | int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS))) : int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_IGNORE) )) )) );
																							}
																						}
																						HX_STACK_LINE(6866)
																						cx_ite2 = cx_ite2->next;
																					}
																				}
																				HX_STACK_LINE(6872)
																				arb->active = pact;
																				HX_STACK_LINE(6873)
																				if (((callbackset != null()))){
																					HX_STACK_LINE(6875)
																					::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite2 = __this->prelisteners->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																					HX_STACK_LINE(6876)
																					while(((cx_ite2 != null()))){
																						HX_STACK_LINE(6877)
																						::zpp_nape::callbacks::ZPP_InteractionListener listener = cx_ite2->elt;		HX_STACK_VAR(listener,"listener");
																						HX_STACK_LINE(6878)
																						if (((listener->itype == ::zpp_nape::util::ZPP_Flags_obj::id_InteractionType_ANY))){
																							HX_STACK_LINE(6880)
																							callbackset->COLLISIONstate = arb->immState;
																							HX_STACK_LINE(6881)
																							callbackset->SENSORstate = arb->immState;
																							HX_STACK_LINE(6882)
																							callbackset->FLUIDstate = arb->immState;
																						}
																						else{
																							HX_STACK_LINE(6884)
																							callbackset->SENSORstate = arb->immState;
																						}
																						HX_STACK_LINE(6886)
																						cx_ite2 = cx_ite2->next;
																					}
																				}
																			}
																			else{
																				HX_STACK_LINE(6891)
																				if (((callbackset == null()))){
																					HX_STACK_LINE(6891)
																					if (((((int(arb->immState) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS))) == (int)0))){
																						HX_STACK_LINE(6892)
																						arb->immState = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT;
																					}
																				}
																				else{
																					HX_STACK_LINE(6894)
																					arb->immState = callbackset->SENSORstate;
																				}
																			}
																		}
																		HX_STACK_LINE(6896)
																		cx_ite1 = cx_ite1->next;
																	}
																}
																HX_STACK_LINE(6900)
																cx_ite = cx_ite->next;
															}
														}
														HX_STACK_LINE(6903)
														if (((bool(anyimpure) && bool((((int(arb->immState) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS))) == (int)0))))){
															HX_STACK_LINE(6957)
															if ((!(((arb->b1->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_STATIC))))){
																HX_STACK_LINE(6958)
																::zpp_nape::phys::ZPP_Body o = arb->b1;		HX_STACK_VAR(o,"o");
																HX_STACK_LINE(6959)
																{
																}
																HX_STACK_LINE(6967)
																if ((!(o->world))){
																	HX_STACK_LINE(6968)
																	{
																	}
																	HX_STACK_LINE(6976)
																	o->component->waket = (__this->stamp + ((  ((__this->midstep)) ? int((int)0) : int((int)1) )));
																	HX_STACK_LINE(6977)
																	if ((o->component->sleeping)){
																		HX_STACK_LINE(6977)
																		__this->really_wake(o,false);
																	}
																}
															}
															HX_STACK_LINE(6982)
															if ((!(((arb->b2->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_STATIC))))){
																HX_STACK_LINE(6983)
																::zpp_nape::phys::ZPP_Body o = arb->b2;		HX_STACK_VAR(o,"o");
																HX_STACK_LINE(6984)
																{
																}
																HX_STACK_LINE(6992)
																if ((!(o->world))){
																	HX_STACK_LINE(6993)
																	{
																	}
																	HX_STACK_LINE(7001)
																	o->component->waket = (__this->stamp + ((  ((__this->midstep)) ? int((int)0) : int((int)1) )));
																	HX_STACK_LINE(7002)
																	if ((o->component->sleeping)){
																		HX_STACK_LINE(7002)
																		__this->really_wake(o,false);
																	}
																}
															}
														}
													}
													HX_STACK_LINE(7010)
													{
													}
													HX_STACK_LINE(7062)
													if ((arb->sleeping)){
														HX_STACK_LINE(7063)
														arb->sleeping = false;
														HX_STACK_LINE(7064)
														{
															HX_STACK_LINE(7064)
															::zpp_nape::util::ZNPList_ZPP_SensorArbiter _this = __this->s_arbiters;		HX_STACK_VAR(_this,"_this");
															HX_STACK_LINE(7064)
															{
															}
															struct _Function_9_1{
																inline static ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter Block( ::zpp_nape::dynamics::ZPP_SensorArbiter &arb){
																	HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",7064);
																	{
																		HX_STACK_LINE(7064)
																		::zpp_nape::util::ZNPNode_ZPP_SensorArbiter ret1;		HX_STACK_VAR(ret1,"ret1");
																		HX_STACK_LINE(7064)
																		{
																			HX_STACK_LINE(7064)
																			if (((::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool == null()))){
																				HX_STACK_LINE(7064)
																				ret1 = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::__new();
																			}
																			else{
																				HX_STACK_LINE(7064)
																				ret1 = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool;
																				HX_STACK_LINE(7064)
																				::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool = ret1->next;
																				HX_STACK_LINE(7064)
																				ret1->next = null();
																			}
																			HX_STACK_LINE(7064)
																			Dynamic();
																		}
																		HX_STACK_LINE(7064)
																		ret1->elt = arb;
																		HX_STACK_LINE(7064)
																		return ret1;
																	}
																	return null();
																}
															};
															HX_STACK_LINE(7064)
															::zpp_nape::util::ZNPNode_ZPP_SensorArbiter temp = _Function_9_1::Block(arb);		HX_STACK_VAR(temp,"temp");
															HX_STACK_LINE(7064)
															temp->next = _this->head;
															HX_STACK_LINE(7064)
															_this->head = temp;
															HX_STACK_LINE(7064)
															_this->modified = true;
															HX_STACK_LINE(7064)
															(_this->length)++;
															HX_STACK_LINE(7064)
															arb;
														}
													}
													HX_STACK_LINE(7066)
													return arb;
												}
												return null();
											}
										};
										struct _Function_6_2{
											inline static ::zpp_nape::dynamics::ZPP_SensorArbiter Block( ::zpp_nape::dynamics::ZPP_SensorArbiter &arb){
												HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",7068);
												{
													HX_STACK_LINE(7069)
													{
														HX_STACK_LINE(7070)
														::zpp_nape::dynamics::ZPP_SensorArbiter o = arb;		HX_STACK_VAR(o,"o");
														HX_STACK_LINE(7071)
														{
														}
														HX_STACK_LINE(7080)
														o->next = ::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool;
														HX_STACK_LINE(7081)
														::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool = o;
													}
													HX_STACK_LINE(7086)
													return null();
												}
												return null();
											}
										};
										HX_STACK_LINE(6741)
										return (  ((::zpp_nape::geom::ZPP_Collide_obj::testCollide(sa,sb))) ? ::zpp_nape::dynamics::ZPP_SensorArbiter(_Function_6_1::Block(arb,swapped,continuous,inttype,_g,s2,__this,sb,s1,first,sa)) : ::zpp_nape::dynamics::ZPP_SensorArbiter((  ((first)) ? ::zpp_nape::dynamics::ZPP_SensorArbiter(_Function_6_2::Block(arb)) : ::zpp_nape::dynamics::ZPP_SensorArbiter(arb) )) );
									}
									return null();
								}
							};
							HX_STACK_LINE(6739)
							return (  (((bool((bool(first) || bool((arb->stamp != __this->stamp)))) || bool(continuous)))) ? ::zpp_nape::dynamics::ZPP_SensorArbiter(_Function_5_1::Block(arb,swapped,continuous,inttype,_g,s2,__this,sb,s1,first,sa)) : ::zpp_nape::dynamics::ZPP_SensorArbiter(arb) );
						}
						return null();
					}
				};
				HX_STACK_LINE(6737)
				ret = _Function_4_2::Block(arb,swapped,continuous,_g,this,s2,sb,s1,first,sa);
			}
		}
	}
	HX_STACK_LINE(7096)
	return ret;
}


HX_DEFINE_DYNAMIC_FUNC5(ZPP_Space_obj,narrowPhase,return )

int ZPP_Space_obj::interactionType( ::zpp_nape::shape::ZPP_Shape s1,::zpp_nape::shape::ZPP_Shape s2,::zpp_nape::phys::ZPP_Body b1,::zpp_nape::phys::ZPP_Body b2){
	HX_STACK_PUSH("ZPP_Space::interactionType","zpp_nape/space/Space.hx",5713);
	HX_STACK_THIS(this);
	HX_STACK_ARG(s1,"s1");
	HX_STACK_ARG(s2,"s2");
	HX_STACK_ARG(b1,"b1");
	HX_STACK_ARG(b2,"b2");
	HX_STACK_LINE(5714)
	{
	}
	HX_STACK_LINE(5722)
	{
	}
	HX_STACK_LINE(5730)
	bool con_ignore;		HX_STACK_VAR(con_ignore,"con_ignore");
	HX_STACK_LINE(5731)
	{
		HX_STACK_LINE(5732)
		con_ignore = false;
		HX_STACK_LINE(5733)
		{
			HX_STACK_LINE(5734)
			::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = b1->constraints->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(5735)
			while(((cx_ite != null()))){
				HX_STACK_LINE(5736)
				::zpp_nape::constraint::ZPP_Constraint con = cx_ite->elt;		HX_STACK_VAR(con,"con");
				HX_STACK_LINE(5737)
				if (((bool(con->ignore) && bool(con->pair_exists(b1->id,b2->id))))){
					HX_STACK_LINE(5739)
					con_ignore = true;
					HX_STACK_LINE(5740)
					break;
				}
				HX_STACK_LINE(5743)
				cx_ite = cx_ite->next;
			}
		}
	}
	struct _Function_1_1{
		inline static bool Block( ::zpp_nape::shape::ZPP_Shape &s1,::zpp_nape::shape::ZPP_Shape &s2){
			HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5747);
			{
				struct _Function_2_1{
					inline static ::zpp_nape::dynamics::ZPP_InteractionGroup Block( ::zpp_nape::shape::ZPP_Shape &s1){
						HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5747);
						{
							HX_STACK_LINE(5747)
							::zpp_nape::phys::ZPP_Interactor cur = s1;		HX_STACK_VAR(cur,"cur");
							HX_STACK_LINE(5747)
							while(((bool((cur != null())) && bool((cur->group == null()))))){
								HX_STACK_LINE(5747)
								if (((cur->ishape != null()))){
									HX_STACK_LINE(5747)
									cur = cur->ishape->body;
								}
								else{
									HX_STACK_LINE(5747)
									if (((cur->icompound != null()))){
										HX_STACK_LINE(5747)
										cur = cur->icompound->compound;
									}
									else{
										HX_STACK_LINE(5747)
										cur = cur->ibody->compound;
									}
								}
							}
							HX_STACK_LINE(5747)
							return (  (((cur == null()))) ? ::zpp_nape::dynamics::ZPP_InteractionGroup(null()) : ::zpp_nape::dynamics::ZPP_InteractionGroup(cur->group) );
						}
						return null();
					}
				};
				HX_STACK_LINE(5747)
				::zpp_nape::dynamics::ZPP_InteractionGroup g1 = _Function_2_1::Block(s1);		HX_STACK_VAR(g1,"g1");
				struct _Function_2_2{
					inline static bool Block( ::zpp_nape::shape::ZPP_Shape &s2,::zpp_nape::dynamics::ZPP_InteractionGroup &g1){
						HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5747);
						{
							struct _Function_3_1{
								inline static ::zpp_nape::dynamics::ZPP_InteractionGroup Block( ::zpp_nape::shape::ZPP_Shape &s2){
									HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5747);
									{
										HX_STACK_LINE(5747)
										::zpp_nape::phys::ZPP_Interactor cur = s2;		HX_STACK_VAR(cur,"cur");
										HX_STACK_LINE(5747)
										while(((bool((cur != null())) && bool((cur->group == null()))))){
											HX_STACK_LINE(5747)
											if (((cur->ishape != null()))){
												HX_STACK_LINE(5747)
												cur = cur->ishape->body;
											}
											else{
												HX_STACK_LINE(5747)
												if (((cur->icompound != null()))){
													HX_STACK_LINE(5747)
													cur = cur->icompound->compound;
												}
												else{
													HX_STACK_LINE(5747)
													cur = cur->ibody->compound;
												}
											}
										}
										HX_STACK_LINE(5747)
										return (  (((cur == null()))) ? ::zpp_nape::dynamics::ZPP_InteractionGroup(null()) : ::zpp_nape::dynamics::ZPP_InteractionGroup(cur->group) );
									}
									return null();
								}
							};
							HX_STACK_LINE(5747)
							::zpp_nape::dynamics::ZPP_InteractionGroup g2 = _Function_3_1::Block(s2);		HX_STACK_VAR(g2,"g2");
							struct _Function_3_2{
								inline static bool Block( ::zpp_nape::dynamics::ZPP_InteractionGroup &g1,::zpp_nape::dynamics::ZPP_InteractionGroup &g2){
									HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5747);
									{
										HX_STACK_LINE(5747)
										bool ret = false;		HX_STACK_VAR(ret,"ret");
										HX_STACK_LINE(5747)
										while(((bool((g1 != null())) && bool((g2 != null()))))){
											HX_STACK_LINE(5747)
											if (((g1 == g2))){
												HX_STACK_LINE(5747)
												ret = g1->ignore;
												HX_STACK_LINE(5747)
												break;
											}
											HX_STACK_LINE(5747)
											if (((g1->depth < g2->depth))){
												HX_STACK_LINE(5747)
												g2 = g2->group;
											}
											else{
												HX_STACK_LINE(5747)
												g1 = g1->group;
											}
										}
										HX_STACK_LINE(5747)
										return ret;
									}
									return null();
								}
							};
							HX_STACK_LINE(5747)
							return (  (((g2 == null()))) ? bool(false) : bool(_Function_3_2::Block(g1,g2)) );
						}
						return null();
					}
				};
				HX_STACK_LINE(5747)
				return (  (((g1 == null()))) ? bool(false) : bool(_Function_2_2::Block(s2,g1)) );
			}
			return null();
		}
	};
	HX_STACK_LINE(5747)
	if (((bool(!(con_ignore)) && bool(!(_Function_1_1::Block(s1,s2)))))){
		struct _Function_2_1{
			inline static bool Block( ::zpp_nape::shape::ZPP_Shape &s1,::zpp_nape::shape::ZPP_Shape &s2){
				HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5748);
				{
					HX_STACK_LINE(5748)
					::zpp_nape::dynamics::ZPP_InteractionFilter _this = s1->filter;		HX_STACK_VAR(_this,"_this");
					::zpp_nape::dynamics::ZPP_InteractionFilter x = s2->filter;		HX_STACK_VAR(x,"x");
					HX_STACK_LINE(5748)
					return (bool((((int(_this->sensorMask) & int(x->sensorGroup))) != (int)0)) && bool((((int(x->sensorMask) & int(_this->sensorGroup))) != (int)0)));
				}
				return null();
			}
		};
		HX_STACK_LINE(5747)
		if (((bool(((bool(s1->sensorEnabled) || bool(s2->sensorEnabled)))) && bool(_Function_2_1::Block(s1,s2))))){
			HX_STACK_LINE(5748)
			return (int)2;
		}
		else{
			struct _Function_3_1{
				inline static bool Block( ::zpp_nape::shape::ZPP_Shape &s1,::zpp_nape::shape::ZPP_Shape &s2){
					HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5751);
					{
						HX_STACK_LINE(5751)
						::zpp_nape::dynamics::ZPP_InteractionFilter _this = s1->filter;		HX_STACK_VAR(_this,"_this");
						::zpp_nape::dynamics::ZPP_InteractionFilter x = s2->filter;		HX_STACK_VAR(x,"x");
						HX_STACK_LINE(5751)
						return (bool((((int(_this->fluidMask) & int(x->fluidGroup))) != (int)0)) && bool((((int(x->fluidMask) & int(_this->fluidGroup))) != (int)0)));
					}
					return null();
				}
			};
			HX_STACK_LINE(5751)
			if (((bool((bool(((bool(s1->fluidEnabled) || bool(s2->fluidEnabled)))) && bool(_Function_3_1::Block(s1,s2)))) && bool(!(((bool((bool((bool((b1->imass == (int)0)) && bool((b2->imass == (int)0)))) && bool((b1->iinertia == (int)0)))) && bool((b2->iinertia == (int)0))))))))){
				HX_STACK_LINE(5751)
				return (int)0;
			}
			else{
				struct _Function_4_1{
					inline static bool Block( ::zpp_nape::shape::ZPP_Shape &s1,::zpp_nape::shape::ZPP_Shape &s2){
						HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5754);
						{
							HX_STACK_LINE(5754)
							::zpp_nape::dynamics::ZPP_InteractionFilter _this = s1->filter;		HX_STACK_VAR(_this,"_this");
							::zpp_nape::dynamics::ZPP_InteractionFilter x = s2->filter;		HX_STACK_VAR(x,"x");
							HX_STACK_LINE(5754)
							return (bool((((int(_this->collisionMask) & int(x->collisionGroup))) != (int)0)) && bool((((int(x->collisionMask) & int(_this->collisionGroup))) != (int)0)));
						}
						return null();
					}
				};
				HX_STACK_LINE(5754)
				if (((bool(_Function_4_1::Block(s1,s2)) && bool(!(((bool((bool((bool((b1->imass == (int)0)) && bool((b2->imass == (int)0)))) && bool((b1->iinertia == (int)0)))) && bool((b2->iinertia == (int)0))))))))){
					HX_STACK_LINE(5754)
					return (int)1;
				}
				else{
					HX_STACK_LINE(5757)
					return (int)-1;
				}
			}
		}
	}
	else{
		HX_STACK_LINE(5759)
		return (int)-1;
	}
	HX_STACK_LINE(5747)
	return (int)0;
}


HX_DEFINE_DYNAMIC_FUNC4(ZPP_Space_obj,interactionType,return )

bool ZPP_Space_obj::group_ignore( ::zpp_nape::shape::ZPP_Shape s1,::zpp_nape::shape::ZPP_Shape s2){
	HX_STACK_PUSH("ZPP_Space::group_ignore","zpp_nape/space/Space.hx",5691);
	HX_STACK_THIS(this);
	HX_STACK_ARG(s1,"s1");
	HX_STACK_ARG(s2,"s2");
	struct _Function_1_1{
		inline static ::zpp_nape::dynamics::ZPP_InteractionGroup Block( ::zpp_nape::shape::ZPP_Shape &s1){
			HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5692);
			{
				HX_STACK_LINE(5692)
				::zpp_nape::phys::ZPP_Interactor cur = s1;		HX_STACK_VAR(cur,"cur");
				HX_STACK_LINE(5692)
				while(((bool((cur != null())) && bool((cur->group == null()))))){
					HX_STACK_LINE(5692)
					if (((cur->ishape != null()))){
						HX_STACK_LINE(5692)
						cur = cur->ishape->body;
					}
					else{
						HX_STACK_LINE(5692)
						if (((cur->icompound != null()))){
							HX_STACK_LINE(5692)
							cur = cur->icompound->compound;
						}
						else{
							HX_STACK_LINE(5692)
							cur = cur->ibody->compound;
						}
					}
				}
				HX_STACK_LINE(5692)
				return (  (((cur == null()))) ? ::zpp_nape::dynamics::ZPP_InteractionGroup(null()) : ::zpp_nape::dynamics::ZPP_InteractionGroup(cur->group) );
			}
			return null();
		}
	};
	HX_STACK_LINE(5692)
	::zpp_nape::dynamics::ZPP_InteractionGroup g1 = _Function_1_1::Block(s1);		HX_STACK_VAR(g1,"g1");
	HX_STACK_LINE(5693)
	if (((g1 == null()))){
		HX_STACK_LINE(5693)
		return false;
	}
	else{
		struct _Function_2_1{
			inline static ::zpp_nape::dynamics::ZPP_InteractionGroup Block( ::zpp_nape::shape::ZPP_Shape &s2){
				HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5695);
				{
					HX_STACK_LINE(5695)
					::zpp_nape::phys::ZPP_Interactor cur = s2;		HX_STACK_VAR(cur,"cur");
					HX_STACK_LINE(5695)
					while(((bool((cur != null())) && bool((cur->group == null()))))){
						HX_STACK_LINE(5695)
						if (((cur->ishape != null()))){
							HX_STACK_LINE(5695)
							cur = cur->ishape->body;
						}
						else{
							HX_STACK_LINE(5695)
							if (((cur->icompound != null()))){
								HX_STACK_LINE(5695)
								cur = cur->icompound->compound;
							}
							else{
								HX_STACK_LINE(5695)
								cur = cur->ibody->compound;
							}
						}
					}
					HX_STACK_LINE(5695)
					return (  (((cur == null()))) ? ::zpp_nape::dynamics::ZPP_InteractionGroup(null()) : ::zpp_nape::dynamics::ZPP_InteractionGroup(cur->group) );
				}
				return null();
			}
		};
		HX_STACK_LINE(5695)
		::zpp_nape::dynamics::ZPP_InteractionGroup g2 = _Function_2_1::Block(s2);		HX_STACK_VAR(g2,"g2");
		HX_STACK_LINE(5696)
		if (((g2 == null()))){
			HX_STACK_LINE(5696)
			return false;
		}
		else{
			HX_STACK_LINE(5698)
			bool ret = false;		HX_STACK_VAR(ret,"ret");
			HX_STACK_LINE(5699)
			while(((bool((g1 != null())) && bool((g2 != null()))))){
				HX_STACK_LINE(5700)
				if (((g1 == g2))){
					HX_STACK_LINE(5701)
					ret = g1->ignore;
					HX_STACK_LINE(5702)
					break;
				}
				HX_STACK_LINE(5704)
				if (((g1->depth < g2->depth))){
					HX_STACK_LINE(5704)
					g2 = g2->group;
				}
				else{
					HX_STACK_LINE(5705)
					g1 = g1->group;
				}
			}
			HX_STACK_LINE(5707)
			return ret;
		}
	}
	HX_STACK_LINE(5693)
	return false;
}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,group_ignore,return )

Void ZPP_Space_obj::iteratePos( int times){
{
		HX_STACK_PUSH("ZPP_Space::iteratePos","zpp_nape/space/Space.hx",5634);
		HX_STACK_THIS(this);
		HX_STACK_ARG(times,"times");
		HX_STACK_LINE(5635)
		int _g = (int)0;		HX_STACK_VAR(_g,"_g");
		HX_STACK_LINE(5635)
		while(((_g < times))){
			HX_STACK_LINE(5635)
			int i = (_g)++;		HX_STACK_VAR(i,"i");
			HX_STACK_LINE(5636)
			::zpp_nape::util::ZNPNode_ZPP_Constraint pre = null();		HX_STACK_VAR(pre,"pre");
			HX_STACK_LINE(5637)
			{
				HX_STACK_LINE(5638)
				::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = this->live_constraints->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(5639)
				while(((cx_ite != null()))){
					HX_STACK_LINE(5640)
					::zpp_nape::constraint::ZPP_Constraint con = cx_ite->elt;		HX_STACK_VAR(con,"con");
					HX_STACK_LINE(5641)
					{
						HX_STACK_LINE(5642)
						if (((bool(!(con->__velocity)) && bool(con->stiff)))){
							HX_STACK_LINE(5642)
							if ((con->applyImpulsePos())){
								HX_STACK_LINE(5644)
								cx_ite = this->live_constraints->erase(pre);
								HX_STACK_LINE(5645)
								con->broken();
								HX_STACK_LINE(5646)
								this->constraintCbBreak(con);
								HX_STACK_LINE(5647)
								if ((con->removeOnBreak)){
									HX_STACK_LINE(5648)
									con->component->sleeping = true;
									HX_STACK_LINE(5649)
									this->midstep = false;
									HX_STACK_LINE(5650)
									if (((con->compound != null()))){
										HX_STACK_LINE(5650)
										con->compound->wrap_constraints->remove(con->outer);
									}
									else{
										HX_STACK_LINE(5651)
										this->wrap_constraints->remove(con->outer);
									}
									HX_STACK_LINE(5652)
									this->midstep = true;
								}
								else{
									HX_STACK_LINE(5654)
									con->active = false;
								}
								HX_STACK_LINE(5655)
								con->clearcache();
								HX_STACK_LINE(5656)
								continue;
							}
						}
						HX_STACK_LINE(5659)
						pre = cx_ite;
					}
					HX_STACK_LINE(5661)
					cx_ite = cx_ite->next;
				}
			}
			HX_STACK_LINE(5664)
			{
				HX_STACK_LINE(5665)
				::zpp_nape::util::ZNPNode_ZPP_ColArbiter arbi = this->c_arbiters_false->head;		HX_STACK_VAR(arbi,"arbi");
				HX_STACK_LINE(5666)
				bool fst = true;		HX_STACK_VAR(fst,"fst");
				HX_STACK_LINE(5667)
				if (((arbi == null()))){
					HX_STACK_LINE(5668)
					arbi = this->c_arbiters_true->head;
					HX_STACK_LINE(5669)
					fst = false;
				}
				HX_STACK_LINE(5671)
				while(((arbi != null()))){
					HX_STACK_LINE(5672)
					::zpp_nape::dynamics::ZPP_ColArbiter arb = arbi->elt;		HX_STACK_VAR(arb,"arb");
					HX_STACK_LINE(5673)
					if (((bool(arb->active) && bool((((int(arb->immState) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT))) != (int)0))))){
						HX_STACK_LINE(5675)
						if (((arb->ptype == (int)2))){
							HX_STACK_LINE(5676)
							::zpp_nape::dynamics::ZPP_IContact c = arb->c1;		HX_STACK_VAR(c,"c");
							HX_STACK_LINE(5676)
							Float dx = 0.0;		HX_STACK_VAR(dx,"dx");
							HX_STACK_LINE(5676)
							Float dy = 0.0;		HX_STACK_VAR(dy,"dy");
							HX_STACK_LINE(5676)
							Float r2x = 0.0;		HX_STACK_VAR(r2x,"r2x");
							HX_STACK_LINE(5676)
							Float r2y = 0.0;		HX_STACK_VAR(r2y,"r2y");
							HX_STACK_LINE(5676)
							{
								HX_STACK_LINE(5676)
								r2x = ((arb->b2->axisy * c->lr2x) - (arb->b2->axisx * c->lr2y));
								HX_STACK_LINE(5676)
								r2y = ((c->lr2x * arb->b2->axisx) + (c->lr2y * arb->b2->axisy));
							}
							HX_STACK_LINE(5676)
							{
								HX_STACK_LINE(5676)
								Float t = 1.0;		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(5676)
								{
								}
								HX_STACK_LINE(5676)
								hx::AddEq(r2x,(arb->b2->posx * t));
								HX_STACK_LINE(5676)
								hx::AddEq(r2y,(arb->b2->posy * t));
							}
							HX_STACK_LINE(5676)
							Float r1x = 0.0;		HX_STACK_VAR(r1x,"r1x");
							HX_STACK_LINE(5676)
							Float r1y = 0.0;		HX_STACK_VAR(r1y,"r1y");
							HX_STACK_LINE(5676)
							{
								HX_STACK_LINE(5676)
								r1x = ((arb->b1->axisy * c->lr1x) - (arb->b1->axisx * c->lr1y));
								HX_STACK_LINE(5676)
								r1y = ((c->lr1x * arb->b1->axisx) + (c->lr1y * arb->b1->axisy));
							}
							HX_STACK_LINE(5676)
							{
								HX_STACK_LINE(5676)
								Float t = 1.0;		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(5676)
								{
								}
								HX_STACK_LINE(5676)
								hx::AddEq(r1x,(arb->b1->posx * t));
								HX_STACK_LINE(5676)
								hx::AddEq(r1y,(arb->b1->posy * t));
							}
							HX_STACK_LINE(5676)
							Float dx1 = 0.0;		HX_STACK_VAR(dx1,"dx1");
							HX_STACK_LINE(5676)
							Float dy1 = 0.0;		HX_STACK_VAR(dy1,"dy1");
							HX_STACK_LINE(5676)
							{
								HX_STACK_LINE(5676)
								dx1 = (r2x - r1x);
								HX_STACK_LINE(5676)
								dy1 = (r2y - r1y);
							}
							struct _Function_6_1{
								inline static Float Block( Float &dx1,Float &dy1){
									HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5676);
									{
										HX_STACK_LINE(5676)
										{
										}
										HX_STACK_LINE(5676)
										return ::Math_obj::sqrt(((dx1 * dx1) + (dy1 * dy1)));
									}
									return null();
								}
							};
							HX_STACK_LINE(5676)
							Float dl = _Function_6_1::Block(dx1,dy1);		HX_STACK_VAR(dl,"dl");
							HX_STACK_LINE(5676)
							Float r = (arb->radius - ::nape::Config_obj::collisionSlop);		HX_STACK_VAR(r,"r");
							HX_STACK_LINE(5676)
							Float err = (dl - r);		HX_STACK_VAR(err,"err");
							HX_STACK_LINE(5676)
							if (((((dx1 * arb->nx) + (dy1 * arb->ny)) < (int)0))){
								HX_STACK_LINE(5676)
								{
									HX_STACK_LINE(5676)
									dx1 = -(dx1);
									HX_STACK_LINE(5676)
									dy1 = -(dy1);
								}
								HX_STACK_LINE(5676)
								hx::SubEq(err,arb->radius);
							}
							HX_STACK_LINE(5676)
							if (((err < (int)0))){
								HX_STACK_LINE(5676)
								if (((dl < ::nape::Config_obj::epsilon))){
									HX_STACK_LINE(5676)
									if (((arb->b1->smass != 0.0))){
										HX_STACK_LINE(5676)
										hx::AddEq(arb->b1->posx,(::nape::Config_obj::epsilon * (int)10));
									}
									else{
										HX_STACK_LINE(5676)
										hx::AddEq(arb->b2->posx,(::nape::Config_obj::epsilon * (int)10));
									}
								}
								else{
									HX_STACK_LINE(5676)
									{
										HX_STACK_LINE(5676)
										Float t = (Float(1.0) / Float(dl));		HX_STACK_VAR(t,"t");
										HX_STACK_LINE(5676)
										{
										}
										HX_STACK_LINE(5676)
										hx::MultEq(dx1,t);
										HX_STACK_LINE(5676)
										hx::MultEq(dy1,t);
									}
									HX_STACK_LINE(5676)
									Float px = (0.5 * ((r1x + r2x)));		HX_STACK_VAR(px,"px");
									HX_STACK_LINE(5676)
									Float py = (0.5 * ((r1y + r2y)));		HX_STACK_VAR(py,"py");
									HX_STACK_LINE(5676)
									{
									}
									HX_STACK_LINE(5676)
									{
									}
									HX_STACK_LINE(5676)
									Float pen = (dl - r);		HX_STACK_VAR(pen,"pen");
									HX_STACK_LINE(5676)
									{
										HX_STACK_LINE(5676)
										r1x = (px - arb->b1->posx);
										HX_STACK_LINE(5676)
										r1y = (py - arb->b1->posy);
									}
									HX_STACK_LINE(5676)
									{
										HX_STACK_LINE(5676)
										r2x = (px - arb->b2->posx);
										HX_STACK_LINE(5676)
										r2y = (py - arb->b2->posy);
									}
									HX_STACK_LINE(5676)
									Float rn1 = ((dy1 * r1x) - (dx1 * r1y));		HX_STACK_VAR(rn1,"rn1");
									HX_STACK_LINE(5676)
									Float rn2 = ((dy1 * r2x) - (dx1 * r2y));		HX_STACK_VAR(rn2,"rn2");
									HX_STACK_LINE(5676)
									Float K = (((arb->b2->smass + ((rn2 * rn2) * arb->b2->sinertia)) + arb->b1->smass) + ((rn1 * rn1) * arb->b1->sinertia));		HX_STACK_VAR(K,"K");
									HX_STACK_LINE(5676)
									if (((K != (int)0))){
										HX_STACK_LINE(5676)
										Float jn = (Float((-(arb->biasCoef) * pen)) / Float(K));		HX_STACK_VAR(jn,"jn");
										HX_STACK_LINE(5676)
										Float Jx = 0.0;		HX_STACK_VAR(Jx,"Jx");
										HX_STACK_LINE(5676)
										Float Jy = 0.0;		HX_STACK_VAR(Jy,"Jy");
										HX_STACK_LINE(5676)
										{
											HX_STACK_LINE(5676)
											Float t = jn;		HX_STACK_VAR(t,"t");
											HX_STACK_LINE(5676)
											{
											}
											HX_STACK_LINE(5676)
											Jx = (dx1 * t);
											HX_STACK_LINE(5676)
											Jy = (dy1 * t);
										}
										HX_STACK_LINE(5676)
										{
											HX_STACK_LINE(5676)
											Float t = arb->b1->imass;		HX_STACK_VAR(t,"t");
											HX_STACK_LINE(5676)
											{
											}
											HX_STACK_LINE(5676)
											hx::SubEq(arb->b1->posx,(Jx * t));
											HX_STACK_LINE(5676)
											hx::SubEq(arb->b1->posy,(Jy * t));
										}
										HX_STACK_LINE(5676)
										{
											HX_STACK_LINE(5676)
											::zpp_nape::phys::ZPP_Body _this = arb->b1;		HX_STACK_VAR(_this,"_this");
											Float dr = ((-(rn1) * arb->b1->iinertia) * jn);		HX_STACK_VAR(dr,"dr");
											HX_STACK_LINE(5676)
											hx::AddEq(_this->rot,dr);
											HX_STACK_LINE(5676)
											if ((((dr * dr) > 0.0001))){
												HX_STACK_LINE(5676)
												_this->axisx = ::Math_obj::sin(_this->rot);
												HX_STACK_LINE(5676)
												_this->axisy = ::Math_obj::cos(_this->rot);
												HX_STACK_LINE(5676)
												{
												}
												HX_STACK_LINE(5676)
												Dynamic();
											}
											else{
												HX_STACK_LINE(5676)
												Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
												HX_STACK_LINE(5676)
												Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
												HX_STACK_LINE(5676)
												Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
												HX_STACK_LINE(5676)
												Float nx = ((((p * _this->axisx) + (dr * _this->axisy))) * m);		HX_STACK_VAR(nx,"nx");
												HX_STACK_LINE(5676)
												_this->axisy = ((((p * _this->axisy) - (dr * _this->axisx))) * m);
												HX_STACK_LINE(5676)
												_this->axisx = nx;
											}
										}
										HX_STACK_LINE(5676)
										{
											HX_STACK_LINE(5676)
											Float t = arb->b2->imass;		HX_STACK_VAR(t,"t");
											HX_STACK_LINE(5676)
											{
											}
											HX_STACK_LINE(5676)
											hx::AddEq(arb->b2->posx,(Jx * t));
											HX_STACK_LINE(5676)
											hx::AddEq(arb->b2->posy,(Jy * t));
										}
										HX_STACK_LINE(5676)
										{
											HX_STACK_LINE(5676)
											::zpp_nape::phys::ZPP_Body _this = arb->b2;		HX_STACK_VAR(_this,"_this");
											Float dr = ((rn2 * arb->b2->iinertia) * jn);		HX_STACK_VAR(dr,"dr");
											HX_STACK_LINE(5676)
											hx::AddEq(_this->rot,dr);
											HX_STACK_LINE(5676)
											if ((((dr * dr) > 0.0001))){
												HX_STACK_LINE(5676)
												_this->axisx = ::Math_obj::sin(_this->rot);
												HX_STACK_LINE(5676)
												_this->axisy = ::Math_obj::cos(_this->rot);
												HX_STACK_LINE(5676)
												{
												}
												HX_STACK_LINE(5676)
												Dynamic();
											}
											else{
												HX_STACK_LINE(5676)
												Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
												HX_STACK_LINE(5676)
												Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
												HX_STACK_LINE(5676)
												Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
												HX_STACK_LINE(5676)
												Float nx = ((((p * _this->axisx) + (dr * _this->axisy))) * m);		HX_STACK_VAR(nx,"nx");
												HX_STACK_LINE(5676)
												_this->axisy = ((((p * _this->axisy) - (dr * _this->axisx))) * m);
												HX_STACK_LINE(5676)
												_this->axisx = nx;
											}
										}
									}
								}
							}
						}
						else{
							HX_STACK_LINE(5676)
							Float gnormx = 0.0;		HX_STACK_VAR(gnormx,"gnormx");
							HX_STACK_LINE(5676)
							Float gnormy = 0.0;		HX_STACK_VAR(gnormy,"gnormy");
							HX_STACK_LINE(5676)
							Float gproj;		HX_STACK_VAR(gproj,"gproj");
							HX_STACK_LINE(5676)
							Float clip1x = 0.0;		HX_STACK_VAR(clip1x,"clip1x");
							HX_STACK_LINE(5676)
							Float clip1y = 0.0;		HX_STACK_VAR(clip1y,"clip1y");
							HX_STACK_LINE(5676)
							Float clip2x = (int)0;		HX_STACK_VAR(clip2x,"clip2x");
							HX_STACK_LINE(5676)
							Float clip2y = (int)0;		HX_STACK_VAR(clip2y,"clip2y");
							HX_STACK_LINE(5676)
							{
							}
							HX_STACK_LINE(5676)
							{
							}
							HX_STACK_LINE(5676)
							if (((arb->ptype == (int)0))){
								HX_STACK_LINE(5676)
								{
									HX_STACK_LINE(5676)
									gnormx = ((arb->b1->axisy * arb->lnormx) - (arb->b1->axisx * arb->lnormy));
									HX_STACK_LINE(5676)
									gnormy = ((arb->lnormx * arb->b1->axisx) + (arb->lnormy * arb->b1->axisy));
								}
								HX_STACK_LINE(5676)
								gproj = (arb->lproj + (((gnormx * arb->b1->posx) + (gnormy * arb->b1->posy))));
								HX_STACK_LINE(5676)
								{
									HX_STACK_LINE(5676)
									clip1x = ((arb->b2->axisy * arb->c1->lr1x) - (arb->b2->axisx * arb->c1->lr1y));
									HX_STACK_LINE(5676)
									clip1y = ((arb->c1->lr1x * arb->b2->axisx) + (arb->c1->lr1y * arb->b2->axisy));
								}
								HX_STACK_LINE(5676)
								{
									HX_STACK_LINE(5676)
									Float t = 1.0;		HX_STACK_VAR(t,"t");
									HX_STACK_LINE(5676)
									{
									}
									HX_STACK_LINE(5676)
									hx::AddEq(clip1x,(arb->b2->posx * t));
									HX_STACK_LINE(5676)
									hx::AddEq(clip1y,(arb->b2->posy * t));
								}
								HX_STACK_LINE(5676)
								if ((arb->hpc2)){
									HX_STACK_LINE(5676)
									{
										HX_STACK_LINE(5676)
										clip2x = ((arb->b2->axisy * arb->c2->lr1x) - (arb->b2->axisx * arb->c2->lr1y));
										HX_STACK_LINE(5676)
										clip2y = ((arb->c2->lr1x * arb->b2->axisx) + (arb->c2->lr1y * arb->b2->axisy));
									}
									HX_STACK_LINE(5676)
									{
										HX_STACK_LINE(5676)
										Float t = 1.0;		HX_STACK_VAR(t,"t");
										HX_STACK_LINE(5676)
										{
										}
										HX_STACK_LINE(5676)
										hx::AddEq(clip2x,(arb->b2->posx * t));
										HX_STACK_LINE(5676)
										hx::AddEq(clip2y,(arb->b2->posy * t));
									}
								}
							}
							else{
								HX_STACK_LINE(5676)
								{
									HX_STACK_LINE(5676)
									gnormx = ((arb->b2->axisy * arb->lnormx) - (arb->b2->axisx * arb->lnormy));
									HX_STACK_LINE(5676)
									gnormy = ((arb->lnormx * arb->b2->axisx) + (arb->lnormy * arb->b2->axisy));
								}
								HX_STACK_LINE(5676)
								gproj = (arb->lproj + (((gnormx * arb->b2->posx) + (gnormy * arb->b2->posy))));
								HX_STACK_LINE(5676)
								{
									HX_STACK_LINE(5676)
									clip1x = ((arb->b1->axisy * arb->c1->lr1x) - (arb->b1->axisx * arb->c1->lr1y));
									HX_STACK_LINE(5676)
									clip1y = ((arb->c1->lr1x * arb->b1->axisx) + (arb->c1->lr1y * arb->b1->axisy));
								}
								HX_STACK_LINE(5676)
								{
									HX_STACK_LINE(5676)
									Float t = 1.0;		HX_STACK_VAR(t,"t");
									HX_STACK_LINE(5676)
									{
									}
									HX_STACK_LINE(5676)
									hx::AddEq(clip1x,(arb->b1->posx * t));
									HX_STACK_LINE(5676)
									hx::AddEq(clip1y,(arb->b1->posy * t));
								}
								HX_STACK_LINE(5676)
								if ((arb->hpc2)){
									HX_STACK_LINE(5676)
									{
										HX_STACK_LINE(5676)
										clip2x = ((arb->b1->axisy * arb->c2->lr1x) - (arb->b1->axisx * arb->c2->lr1y));
										HX_STACK_LINE(5676)
										clip2y = ((arb->c2->lr1x * arb->b1->axisx) + (arb->c2->lr1y * arb->b1->axisy));
									}
									HX_STACK_LINE(5676)
									{
										HX_STACK_LINE(5676)
										Float t = 1.0;		HX_STACK_VAR(t,"t");
										HX_STACK_LINE(5676)
										{
										}
										HX_STACK_LINE(5676)
										hx::AddEq(clip2x,(arb->b1->posx * t));
										HX_STACK_LINE(5676)
										hx::AddEq(clip2y,(arb->b1->posy * t));
									}
								}
							}
							HX_STACK_LINE(5676)
							Float err1 = ((((clip1x * gnormx) + (clip1y * gnormy)) - gproj) - arb->radius);		HX_STACK_VAR(err1,"err1");
							HX_STACK_LINE(5676)
							hx::AddEq(err1,::nape::Config_obj::collisionSlop);
							HX_STACK_LINE(5676)
							Float err2 = 0.0;		HX_STACK_VAR(err2,"err2");
							HX_STACK_LINE(5676)
							if ((arb->hpc2)){
								HX_STACK_LINE(5676)
								err2 = ((((clip2x * gnormx) + (clip2y * gnormy)) - gproj) - arb->radius);
								HX_STACK_LINE(5676)
								hx::AddEq(err2,::nape::Config_obj::collisionSlop);
							}
							HX_STACK_LINE(5676)
							if (((bool((err1 < (int)0)) || bool((err2 < (int)0))))){
								HX_STACK_LINE(5676)
								if ((arb->rev)){
									HX_STACK_LINE(5676)
									gnormx = -(gnormx);
									HX_STACK_LINE(5676)
									gnormy = -(gnormy);
								}
								HX_STACK_LINE(5676)
								Float c1r1x = 0.0;		HX_STACK_VAR(c1r1x,"c1r1x");
								HX_STACK_LINE(5676)
								Float c1r1y = 0.0;		HX_STACK_VAR(c1r1y,"c1r1y");
								HX_STACK_LINE(5676)
								{
									HX_STACK_LINE(5676)
									c1r1x = (clip1x - arb->b1->posx);
									HX_STACK_LINE(5676)
									c1r1y = (clip1y - arb->b1->posy);
								}
								HX_STACK_LINE(5676)
								Float c1r2x = 0.0;		HX_STACK_VAR(c1r2x,"c1r2x");
								HX_STACK_LINE(5676)
								Float c1r2y = 0.0;		HX_STACK_VAR(c1r2y,"c1r2y");
								HX_STACK_LINE(5676)
								{
									HX_STACK_LINE(5676)
									c1r2x = (clip1x - arb->b2->posx);
									HX_STACK_LINE(5676)
									c1r2y = (clip1y - arb->b2->posy);
								}
								HX_STACK_LINE(5676)
								Float c2r1x = (int)0;		HX_STACK_VAR(c2r1x,"c2r1x");
								HX_STACK_LINE(5676)
								Float c2r1y = (int)0;		HX_STACK_VAR(c2r1y,"c2r1y");
								HX_STACK_LINE(5676)
								{
								}
								HX_STACK_LINE(5676)
								{
								}
								HX_STACK_LINE(5676)
								Float c2r2x = (int)0;		HX_STACK_VAR(c2r2x,"c2r2x");
								HX_STACK_LINE(5676)
								Float c2r2y = (int)0;		HX_STACK_VAR(c2r2y,"c2r2y");
								HX_STACK_LINE(5676)
								{
								}
								HX_STACK_LINE(5676)
								{
								}
								HX_STACK_LINE(5676)
								if ((arb->hpc2)){
									HX_STACK_LINE(5676)
									{
										HX_STACK_LINE(5676)
										c2r1x = (clip2x - arb->b1->posx);
										HX_STACK_LINE(5676)
										c2r1y = (clip2y - arb->b1->posy);
									}
									HX_STACK_LINE(5676)
									{
										HX_STACK_LINE(5676)
										c2r2x = (clip2x - arb->b2->posx);
										HX_STACK_LINE(5676)
										c2r2y = (clip2y - arb->b2->posy);
									}
									HX_STACK_LINE(5676)
									Float rn1a = ((gnormy * c1r1x) - (gnormx * c1r1y));		HX_STACK_VAR(rn1a,"rn1a");
									HX_STACK_LINE(5676)
									Float rn1b = ((gnormy * c1r2x) - (gnormx * c1r2y));		HX_STACK_VAR(rn1b,"rn1b");
									HX_STACK_LINE(5676)
									Float rn2a = ((gnormy * c2r1x) - (gnormx * c2r1y));		HX_STACK_VAR(rn2a,"rn2a");
									HX_STACK_LINE(5676)
									Float rn2b = ((gnormy * c2r2x) - (gnormx * c2r2y));		HX_STACK_VAR(rn2b,"rn2b");
									HX_STACK_LINE(5676)
									Float mass_sum = (arb->b1->smass + arb->b2->smass);		HX_STACK_VAR(mass_sum,"mass_sum");
									HX_STACK_LINE(5676)
									{
										HX_STACK_LINE(5676)
										arb->kMassa = ((mass_sum + ((arb->b1->sinertia * rn1a) * rn1a)) + ((arb->b2->sinertia * rn1b) * rn1b));
										HX_STACK_LINE(5676)
										arb->kMassb = ((mass_sum + ((arb->b1->sinertia * rn1a) * rn2a)) + ((arb->b2->sinertia * rn1b) * rn2b));
										HX_STACK_LINE(5676)
										arb->kMassc = ((mass_sum + ((arb->b1->sinertia * rn2a) * rn2a)) + ((arb->b2->sinertia * rn2b) * rn2b));
									}
									HX_STACK_LINE(5676)
									Float Ka = 0.0;		HX_STACK_VAR(Ka,"Ka");
									HX_STACK_LINE(5676)
									Float Kb = 0.0;		HX_STACK_VAR(Kb,"Kb");
									HX_STACK_LINE(5676)
									Float Kc = 0.0;		HX_STACK_VAR(Kc,"Kc");
									HX_STACK_LINE(5676)
									{
										HX_STACK_LINE(5676)
										Ka = arb->kMassa;
										HX_STACK_LINE(5676)
										Kb = arb->kMassb;
										HX_STACK_LINE(5676)
										Kc = arb->kMassc;
									}
									HX_STACK_LINE(5676)
									Float bx = (err1 * arb->biasCoef);		HX_STACK_VAR(bx,"bx");
									HX_STACK_LINE(5676)
									Float by = (err2 * arb->biasCoef);		HX_STACK_VAR(by,"by");
									HX_STACK_LINE(5676)
									{
									}
									HX_STACK_LINE(5676)
									{
									}
									HX_STACK_LINE(5676)
									do{
										HX_STACK_LINE(5676)
										Float xx = 0.0;		HX_STACK_VAR(xx,"xx");
										HX_STACK_LINE(5676)
										Float xy = 0.0;		HX_STACK_VAR(xy,"xy");
										HX_STACK_LINE(5676)
										{
											HX_STACK_LINE(5676)
											xx = bx;
											HX_STACK_LINE(5676)
											xy = by;
											HX_STACK_LINE(5676)
											{
											}
											HX_STACK_LINE(5676)
											{
											}
										}
										HX_STACK_LINE(5676)
										{
											HX_STACK_LINE(5676)
											xx = -(xx);
											HX_STACK_LINE(5676)
											xy = -(xy);
										}
										HX_STACK_LINE(5676)
										{
											HX_STACK_LINE(5676)
											Float det = ((arb->kMassa * arb->kMassc) - (arb->kMassb * arb->kMassb));		HX_STACK_VAR(det,"det");
											HX_STACK_LINE(5676)
											if (((det != det))){
												HX_STACK_LINE(5676)
												xx = xy = (int)0;
											}
											else{
												HX_STACK_LINE(5676)
												if (((det == (int)0))){
													HX_STACK_LINE(5676)
													if (((arb->kMassa != (int)0))){
														HX_STACK_LINE(5676)
														hx::DivEq(xx,arb->kMassa);
													}
													else{
														HX_STACK_LINE(5676)
														xx = (int)0;
													}
													HX_STACK_LINE(5676)
													if (((arb->kMassc != (int)0))){
														HX_STACK_LINE(5676)
														hx::DivEq(xy,arb->kMassc);
													}
													else{
														HX_STACK_LINE(5676)
														xy = (int)0;
													}
												}
												else{
													HX_STACK_LINE(5676)
													det = (Float((int)1) / Float(det));
													HX_STACK_LINE(5676)
													Float t = (det * (((arb->kMassc * xx) - (arb->kMassb * xy))));		HX_STACK_VAR(t,"t");
													HX_STACK_LINE(5676)
													xy = (det * (((arb->kMassa * xy) - (arb->kMassb * xx))));
													HX_STACK_LINE(5676)
													xx = t;
												}
											}
										}
										HX_STACK_LINE(5676)
										if (((bool((xx >= (int)0)) && bool((xy >= (int)0))))){
											HX_STACK_LINE(5676)
											{
												HX_STACK_LINE(5676)
												Float t = (((xx + xy)) * arb->b1->imass);		HX_STACK_VAR(t,"t");
												HX_STACK_LINE(5676)
												{
												}
												HX_STACK_LINE(5676)
												hx::SubEq(arb->b1->posx,(gnormx * t));
												HX_STACK_LINE(5676)
												hx::SubEq(arb->b1->posy,(gnormy * t));
											}
											HX_STACK_LINE(5676)
											{
												HX_STACK_LINE(5676)
												::zpp_nape::phys::ZPP_Body _this = arb->b1;		HX_STACK_VAR(_this,"_this");
												Float dr = (-(arb->b1->iinertia) * (((rn1a * xx) + (rn2a * xy))));		HX_STACK_VAR(dr,"dr");
												HX_STACK_LINE(5676)
												hx::AddEq(_this->rot,dr);
												HX_STACK_LINE(5676)
												if ((((dr * dr) > 0.0001))){
													HX_STACK_LINE(5676)
													_this->axisx = ::Math_obj::sin(_this->rot);
													HX_STACK_LINE(5676)
													_this->axisy = ::Math_obj::cos(_this->rot);
													HX_STACK_LINE(5676)
													{
													}
													HX_STACK_LINE(5676)
													Dynamic();
												}
												else{
													HX_STACK_LINE(5676)
													Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
													HX_STACK_LINE(5676)
													Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
													HX_STACK_LINE(5676)
													Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
													HX_STACK_LINE(5676)
													Float nx = ((((p * _this->axisx) + (dr * _this->axisy))) * m);		HX_STACK_VAR(nx,"nx");
													HX_STACK_LINE(5676)
													_this->axisy = ((((p * _this->axisy) - (dr * _this->axisx))) * m);
													HX_STACK_LINE(5676)
													_this->axisx = nx;
												}
											}
											HX_STACK_LINE(5676)
											{
												HX_STACK_LINE(5676)
												Float t = (((xx + xy)) * arb->b2->imass);		HX_STACK_VAR(t,"t");
												HX_STACK_LINE(5676)
												{
												}
												HX_STACK_LINE(5676)
												hx::AddEq(arb->b2->posx,(gnormx * t));
												HX_STACK_LINE(5676)
												hx::AddEq(arb->b2->posy,(gnormy * t));
											}
											HX_STACK_LINE(5676)
											{
												HX_STACK_LINE(5676)
												::zpp_nape::phys::ZPP_Body _this = arb->b2;		HX_STACK_VAR(_this,"_this");
												Float dr = (arb->b2->iinertia * (((rn1b * xx) + (rn2b * xy))));		HX_STACK_VAR(dr,"dr");
												HX_STACK_LINE(5676)
												hx::AddEq(_this->rot,dr);
												HX_STACK_LINE(5676)
												if ((((dr * dr) > 0.0001))){
													HX_STACK_LINE(5676)
													_this->axisx = ::Math_obj::sin(_this->rot);
													HX_STACK_LINE(5676)
													_this->axisy = ::Math_obj::cos(_this->rot);
													HX_STACK_LINE(5676)
													{
													}
													HX_STACK_LINE(5676)
													Dynamic();
												}
												else{
													HX_STACK_LINE(5676)
													Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
													HX_STACK_LINE(5676)
													Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
													HX_STACK_LINE(5676)
													Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
													HX_STACK_LINE(5676)
													Float nx = ((((p * _this->axisx) + (dr * _this->axisy))) * m);		HX_STACK_VAR(nx,"nx");
													HX_STACK_LINE(5676)
													_this->axisy = ((((p * _this->axisy) - (dr * _this->axisx))) * m);
													HX_STACK_LINE(5676)
													_this->axisx = nx;
												}
											}
											HX_STACK_LINE(5676)
											break;
										}
										HX_STACK_LINE(5676)
										{
											HX_STACK_LINE(5676)
											xx = (Float(-(bx)) / Float(Ka));
											HX_STACK_LINE(5676)
											xy = (int)0;
											HX_STACK_LINE(5676)
											{
											}
											HX_STACK_LINE(5676)
											{
											}
										}
										HX_STACK_LINE(5676)
										Float vn2 = ((Kb * xx) + by);		HX_STACK_VAR(vn2,"vn2");
										HX_STACK_LINE(5676)
										if (((bool((xx >= (int)0)) && bool((vn2 >= (int)0))))){
											HX_STACK_LINE(5676)
											{
												HX_STACK_LINE(5676)
												Float t = (((xx + xy)) * arb->b1->imass);		HX_STACK_VAR(t,"t");
												HX_STACK_LINE(5676)
												{
												}
												HX_STACK_LINE(5676)
												hx::SubEq(arb->b1->posx,(gnormx * t));
												HX_STACK_LINE(5676)
												hx::SubEq(arb->b1->posy,(gnormy * t));
											}
											HX_STACK_LINE(5676)
											{
												HX_STACK_LINE(5676)
												::zpp_nape::phys::ZPP_Body _this = arb->b1;		HX_STACK_VAR(_this,"_this");
												Float dr = (-(arb->b1->iinertia) * (((rn1a * xx) + (rn2a * xy))));		HX_STACK_VAR(dr,"dr");
												HX_STACK_LINE(5676)
												hx::AddEq(_this->rot,dr);
												HX_STACK_LINE(5676)
												if ((((dr * dr) > 0.0001))){
													HX_STACK_LINE(5676)
													_this->axisx = ::Math_obj::sin(_this->rot);
													HX_STACK_LINE(5676)
													_this->axisy = ::Math_obj::cos(_this->rot);
													HX_STACK_LINE(5676)
													{
													}
													HX_STACK_LINE(5676)
													Dynamic();
												}
												else{
													HX_STACK_LINE(5676)
													Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
													HX_STACK_LINE(5676)
													Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
													HX_STACK_LINE(5676)
													Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
													HX_STACK_LINE(5676)
													Float nx = ((((p * _this->axisx) + (dr * _this->axisy))) * m);		HX_STACK_VAR(nx,"nx");
													HX_STACK_LINE(5676)
													_this->axisy = ((((p * _this->axisy) - (dr * _this->axisx))) * m);
													HX_STACK_LINE(5676)
													_this->axisx = nx;
												}
											}
											HX_STACK_LINE(5676)
											{
												HX_STACK_LINE(5676)
												Float t = (((xx + xy)) * arb->b2->imass);		HX_STACK_VAR(t,"t");
												HX_STACK_LINE(5676)
												{
												}
												HX_STACK_LINE(5676)
												hx::AddEq(arb->b2->posx,(gnormx * t));
												HX_STACK_LINE(5676)
												hx::AddEq(arb->b2->posy,(gnormy * t));
											}
											HX_STACK_LINE(5676)
											{
												HX_STACK_LINE(5676)
												::zpp_nape::phys::ZPP_Body _this = arb->b2;		HX_STACK_VAR(_this,"_this");
												Float dr = (arb->b2->iinertia * (((rn1b * xx) + (rn2b * xy))));		HX_STACK_VAR(dr,"dr");
												HX_STACK_LINE(5676)
												hx::AddEq(_this->rot,dr);
												HX_STACK_LINE(5676)
												if ((((dr * dr) > 0.0001))){
													HX_STACK_LINE(5676)
													_this->axisx = ::Math_obj::sin(_this->rot);
													HX_STACK_LINE(5676)
													_this->axisy = ::Math_obj::cos(_this->rot);
													HX_STACK_LINE(5676)
													{
													}
													HX_STACK_LINE(5676)
													Dynamic();
												}
												else{
													HX_STACK_LINE(5676)
													Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
													HX_STACK_LINE(5676)
													Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
													HX_STACK_LINE(5676)
													Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
													HX_STACK_LINE(5676)
													Float nx = ((((p * _this->axisx) + (dr * _this->axisy))) * m);		HX_STACK_VAR(nx,"nx");
													HX_STACK_LINE(5676)
													_this->axisy = ((((p * _this->axisy) - (dr * _this->axisx))) * m);
													HX_STACK_LINE(5676)
													_this->axisx = nx;
												}
											}
											HX_STACK_LINE(5676)
											break;
										}
										HX_STACK_LINE(5676)
										{
											HX_STACK_LINE(5676)
											xx = (int)0;
											HX_STACK_LINE(5676)
											xy = (Float(-(by)) / Float(Kc));
											HX_STACK_LINE(5676)
											{
											}
											HX_STACK_LINE(5676)
											{
											}
										}
										HX_STACK_LINE(5676)
										Float vn1 = ((Kb * xy) + bx);		HX_STACK_VAR(vn1,"vn1");
										HX_STACK_LINE(5676)
										if (((bool((xy >= (int)0)) && bool((vn1 >= (int)0))))){
											HX_STACK_LINE(5676)
											{
												HX_STACK_LINE(5676)
												Float t = (((xx + xy)) * arb->b1->imass);		HX_STACK_VAR(t,"t");
												HX_STACK_LINE(5676)
												{
												}
												HX_STACK_LINE(5676)
												hx::SubEq(arb->b1->posx,(gnormx * t));
												HX_STACK_LINE(5676)
												hx::SubEq(arb->b1->posy,(gnormy * t));
											}
											HX_STACK_LINE(5676)
											{
												HX_STACK_LINE(5676)
												::zpp_nape::phys::ZPP_Body _this = arb->b1;		HX_STACK_VAR(_this,"_this");
												Float dr = (-(arb->b1->iinertia) * (((rn1a * xx) + (rn2a * xy))));		HX_STACK_VAR(dr,"dr");
												HX_STACK_LINE(5676)
												hx::AddEq(_this->rot,dr);
												HX_STACK_LINE(5676)
												if ((((dr * dr) > 0.0001))){
													HX_STACK_LINE(5676)
													_this->axisx = ::Math_obj::sin(_this->rot);
													HX_STACK_LINE(5676)
													_this->axisy = ::Math_obj::cos(_this->rot);
													HX_STACK_LINE(5676)
													{
													}
													HX_STACK_LINE(5676)
													Dynamic();
												}
												else{
													HX_STACK_LINE(5676)
													Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
													HX_STACK_LINE(5676)
													Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
													HX_STACK_LINE(5676)
													Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
													HX_STACK_LINE(5676)
													Float nx = ((((p * _this->axisx) + (dr * _this->axisy))) * m);		HX_STACK_VAR(nx,"nx");
													HX_STACK_LINE(5676)
													_this->axisy = ((((p * _this->axisy) - (dr * _this->axisx))) * m);
													HX_STACK_LINE(5676)
													_this->axisx = nx;
												}
											}
											HX_STACK_LINE(5676)
											{
												HX_STACK_LINE(5676)
												Float t = (((xx + xy)) * arb->b2->imass);		HX_STACK_VAR(t,"t");
												HX_STACK_LINE(5676)
												{
												}
												HX_STACK_LINE(5676)
												hx::AddEq(arb->b2->posx,(gnormx * t));
												HX_STACK_LINE(5676)
												hx::AddEq(arb->b2->posy,(gnormy * t));
											}
											HX_STACK_LINE(5676)
											{
												HX_STACK_LINE(5676)
												::zpp_nape::phys::ZPP_Body _this = arb->b2;		HX_STACK_VAR(_this,"_this");
												Float dr = (arb->b2->iinertia * (((rn1b * xx) + (rn2b * xy))));		HX_STACK_VAR(dr,"dr");
												HX_STACK_LINE(5676)
												hx::AddEq(_this->rot,dr);
												HX_STACK_LINE(5676)
												if ((((dr * dr) > 0.0001))){
													HX_STACK_LINE(5676)
													_this->axisx = ::Math_obj::sin(_this->rot);
													HX_STACK_LINE(5676)
													_this->axisy = ::Math_obj::cos(_this->rot);
													HX_STACK_LINE(5676)
													{
													}
													HX_STACK_LINE(5676)
													Dynamic();
												}
												else{
													HX_STACK_LINE(5676)
													Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
													HX_STACK_LINE(5676)
													Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
													HX_STACK_LINE(5676)
													Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
													HX_STACK_LINE(5676)
													Float nx = ((((p * _this->axisx) + (dr * _this->axisy))) * m);		HX_STACK_VAR(nx,"nx");
													HX_STACK_LINE(5676)
													_this->axisy = ((((p * _this->axisy) - (dr * _this->axisx))) * m);
													HX_STACK_LINE(5676)
													_this->axisx = nx;
												}
											}
											HX_STACK_LINE(5676)
											break;
										}
									}
while((false));
								}
								else{
									HX_STACK_LINE(5676)
									Float rn1 = ((gnormy * c1r1x) - (gnormx * c1r1y));		HX_STACK_VAR(rn1,"rn1");
									HX_STACK_LINE(5676)
									Float rn2 = ((gnormy * c1r2x) - (gnormx * c1r2y));		HX_STACK_VAR(rn2,"rn2");
									HX_STACK_LINE(5676)
									Float K = (((arb->b2->smass + ((rn2 * rn2) * arb->b2->sinertia)) + arb->b1->smass) + ((rn1 * rn1) * arb->b1->sinertia));		HX_STACK_VAR(K,"K");
									HX_STACK_LINE(5676)
									if (((K != (int)0))){
										HX_STACK_LINE(5676)
										Float jn = (Float((-(arb->biasCoef) * err1)) / Float(K));		HX_STACK_VAR(jn,"jn");
										HX_STACK_LINE(5676)
										Float Jx = 0.0;		HX_STACK_VAR(Jx,"Jx");
										HX_STACK_LINE(5676)
										Float Jy = 0.0;		HX_STACK_VAR(Jy,"Jy");
										HX_STACK_LINE(5676)
										{
											HX_STACK_LINE(5676)
											Float t = jn;		HX_STACK_VAR(t,"t");
											HX_STACK_LINE(5676)
											{
											}
											HX_STACK_LINE(5676)
											Jx = (gnormx * t);
											HX_STACK_LINE(5676)
											Jy = (gnormy * t);
										}
										HX_STACK_LINE(5676)
										{
											HX_STACK_LINE(5676)
											Float t = arb->b1->imass;		HX_STACK_VAR(t,"t");
											HX_STACK_LINE(5676)
											{
											}
											HX_STACK_LINE(5676)
											hx::SubEq(arb->b1->posx,(Jx * t));
											HX_STACK_LINE(5676)
											hx::SubEq(arb->b1->posy,(Jy * t));
										}
										HX_STACK_LINE(5676)
										{
											HX_STACK_LINE(5676)
											::zpp_nape::phys::ZPP_Body _this = arb->b1;		HX_STACK_VAR(_this,"_this");
											Float dr = ((-(rn1) * arb->b1->iinertia) * jn);		HX_STACK_VAR(dr,"dr");
											HX_STACK_LINE(5676)
											hx::AddEq(_this->rot,dr);
											HX_STACK_LINE(5676)
											if ((((dr * dr) > 0.0001))){
												HX_STACK_LINE(5676)
												_this->axisx = ::Math_obj::sin(_this->rot);
												HX_STACK_LINE(5676)
												_this->axisy = ::Math_obj::cos(_this->rot);
												HX_STACK_LINE(5676)
												{
												}
												HX_STACK_LINE(5676)
												Dynamic();
											}
											else{
												HX_STACK_LINE(5676)
												Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
												HX_STACK_LINE(5676)
												Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
												HX_STACK_LINE(5676)
												Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
												HX_STACK_LINE(5676)
												Float nx = ((((p * _this->axisx) + (dr * _this->axisy))) * m);		HX_STACK_VAR(nx,"nx");
												HX_STACK_LINE(5676)
												_this->axisy = ((((p * _this->axisy) - (dr * _this->axisx))) * m);
												HX_STACK_LINE(5676)
												_this->axisx = nx;
											}
										}
										HX_STACK_LINE(5676)
										{
											HX_STACK_LINE(5676)
											Float t = arb->b2->imass;		HX_STACK_VAR(t,"t");
											HX_STACK_LINE(5676)
											{
											}
											HX_STACK_LINE(5676)
											hx::AddEq(arb->b2->posx,(Jx * t));
											HX_STACK_LINE(5676)
											hx::AddEq(arb->b2->posy,(Jy * t));
										}
										HX_STACK_LINE(5676)
										{
											HX_STACK_LINE(5676)
											::zpp_nape::phys::ZPP_Body _this = arb->b2;		HX_STACK_VAR(_this,"_this");
											Float dr = ((rn2 * arb->b2->iinertia) * jn);		HX_STACK_VAR(dr,"dr");
											HX_STACK_LINE(5676)
											hx::AddEq(_this->rot,dr);
											HX_STACK_LINE(5676)
											if ((((dr * dr) > 0.0001))){
												HX_STACK_LINE(5676)
												_this->axisx = ::Math_obj::sin(_this->rot);
												HX_STACK_LINE(5676)
												_this->axisy = ::Math_obj::cos(_this->rot);
												HX_STACK_LINE(5676)
												{
												}
												HX_STACK_LINE(5676)
												Dynamic();
											}
											else{
												HX_STACK_LINE(5676)
												Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
												HX_STACK_LINE(5676)
												Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
												HX_STACK_LINE(5676)
												Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
												HX_STACK_LINE(5676)
												Float nx = ((((p * _this->axisx) + (dr * _this->axisy))) * m);		HX_STACK_VAR(nx,"nx");
												HX_STACK_LINE(5676)
												_this->axisy = ((((p * _this->axisy) - (dr * _this->axisx))) * m);
												HX_STACK_LINE(5676)
												_this->axisx = nx;
											}
										}
									}
								}
							}
						}
					}
					HX_STACK_LINE(5680)
					arbi = arbi->next;
					HX_STACK_LINE(5681)
					if (((bool(fst) && bool((arbi == null()))))){
						HX_STACK_LINE(5682)
						arbi = this->c_arbiters_true->head;
						HX_STACK_LINE(5683)
						fst = false;
					}
				}
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,iteratePos,(void))

Void ZPP_Space_obj::iterateVel( int times){
{
		HX_STACK_PUSH("ZPP_Space::iterateVel","zpp_nape/space/Space.hx",5577);
		HX_STACK_THIS(this);
		HX_STACK_ARG(times,"times");
		HX_STACK_LINE(5578)
		int _g = (int)0;		HX_STACK_VAR(_g,"_g");
		HX_STACK_LINE(5578)
		while(((_g < times))){
			HX_STACK_LINE(5578)
			int i = (_g)++;		HX_STACK_VAR(i,"i");
			HX_STACK_LINE(5579)
			{
				HX_STACK_LINE(5580)
				::zpp_nape::util::ZNPNode_ZPP_FluidArbiter cx_ite = this->f_arbiters->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(5581)
				while(((cx_ite != null()))){
					HX_STACK_LINE(5582)
					::zpp_nape::dynamics::ZPP_FluidArbiter arb = cx_ite->elt;		HX_STACK_VAR(arb,"arb");
					HX_STACK_LINE(5583)
					if (((bool(arb->active) && bool((((int(arb->immState) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT))) != (int)0))))){
						HX_STACK_LINE(5583)
						if ((!(arb->nodrag))){
							HX_STACK_LINE(5583)
							Float w1 = (arb->b1->angvel + arb->b1->kinangvel);		HX_STACK_VAR(w1,"w1");
							HX_STACK_LINE(5583)
							Float w2 = (arb->b2->angvel + arb->b2->kinangvel);		HX_STACK_VAR(w2,"w2");
							HX_STACK_LINE(5583)
							Float jx = (((arb->b1->velx + arb->b1->kinvelx) - (arb->r1y * w1)) - (((arb->b2->velx + arb->b2->kinvelx) - (arb->r2y * w2))));		HX_STACK_VAR(jx,"jx");
							HX_STACK_LINE(5583)
							Float jy = (((arb->b1->vely + arb->b1->kinvely) + (arb->r1x * w1)) - (((arb->b2->vely + arb->b2->kinvely) + (arb->r2x * w2))));		HX_STACK_VAR(jy,"jy");
							HX_STACK_LINE(5583)
							{
							}
							HX_STACK_LINE(5583)
							{
							}
							HX_STACK_LINE(5583)
							{
								HX_STACK_LINE(5583)
								Float t = ((arb->vMassa * jx) + (arb->vMassb * jy));		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(5583)
								jy = ((arb->vMassb * jx) + (arb->vMassc * jy));
								HX_STACK_LINE(5583)
								jx = t;
							}
							HX_STACK_LINE(5583)
							{
								HX_STACK_LINE(5583)
								Float t = arb->lgamma;		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(5583)
								{
								}
								HX_STACK_LINE(5583)
								hx::SubEq(jx,(arb->dampx * t));
								HX_STACK_LINE(5583)
								hx::SubEq(jy,(arb->dampy * t));
							}
							HX_STACK_LINE(5583)
							{
								HX_STACK_LINE(5583)
								Float t = 1.0;		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(5583)
								{
								}
								HX_STACK_LINE(5583)
								hx::AddEq(arb->dampx,(jx * t));
								HX_STACK_LINE(5583)
								hx::AddEq(arb->dampy,(jy * t));
							}
							HX_STACK_LINE(5583)
							{
								HX_STACK_LINE(5583)
								Float t = arb->b1->imass;		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(5583)
								{
								}
								HX_STACK_LINE(5583)
								hx::SubEq(arb->b1->velx,(jx * t));
								HX_STACK_LINE(5583)
								hx::SubEq(arb->b1->vely,(jy * t));
							}
							HX_STACK_LINE(5583)
							{
								HX_STACK_LINE(5583)
								Float t = arb->b2->imass;		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(5583)
								{
								}
								HX_STACK_LINE(5583)
								hx::AddEq(arb->b2->velx,(jx * t));
								HX_STACK_LINE(5583)
								hx::AddEq(arb->b2->vely,(jy * t));
							}
							HX_STACK_LINE(5583)
							hx::SubEq(arb->b1->angvel,(arb->b1->iinertia * (((jy * arb->r1x) - (jx * arb->r1y)))));
							HX_STACK_LINE(5583)
							hx::AddEq(arb->b2->angvel,(arb->b2->iinertia * (((jy * arb->r2x) - (jx * arb->r2y)))));
							HX_STACK_LINE(5583)
							Float j_damp = ((((w1 - w2)) * arb->wMass) - (arb->adamp * arb->agamma));		HX_STACK_VAR(j_damp,"j_damp");
							HX_STACK_LINE(5583)
							hx::AddEq(arb->adamp,j_damp);
							HX_STACK_LINE(5583)
							hx::SubEq(arb->b1->angvel,(j_damp * arb->b1->iinertia));
							HX_STACK_LINE(5583)
							hx::AddEq(arb->b2->angvel,(j_damp * arb->b2->iinertia));
						}
					}
					HX_STACK_LINE(5584)
					cx_ite = cx_ite->next;
				}
			}
			HX_STACK_LINE(5587)
			::zpp_nape::util::ZNPNode_ZPP_Constraint pre = null();		HX_STACK_VAR(pre,"pre");
			HX_STACK_LINE(5588)
			{
				HX_STACK_LINE(5589)
				::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = this->live_constraints->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(5590)
				while(((cx_ite != null()))){
					HX_STACK_LINE(5591)
					::zpp_nape::constraint::ZPP_Constraint con = cx_ite->elt;		HX_STACK_VAR(con,"con");
					HX_STACK_LINE(5592)
					{
						HX_STACK_LINE(5593)
						if ((con->applyImpulseVel())){
							HX_STACK_LINE(5594)
							cx_ite = this->live_constraints->erase(pre);
							HX_STACK_LINE(5595)
							con->broken();
							HX_STACK_LINE(5596)
							this->constraintCbBreak(con);
							HX_STACK_LINE(5597)
							if ((con->removeOnBreak)){
								HX_STACK_LINE(5598)
								con->component->sleeping = true;
								HX_STACK_LINE(5599)
								this->midstep = false;
								HX_STACK_LINE(5600)
								if (((con->compound != null()))){
									HX_STACK_LINE(5600)
									con->compound->wrap_constraints->remove(con->outer);
								}
								else{
									HX_STACK_LINE(5601)
									this->wrap_constraints->remove(con->outer);
								}
								HX_STACK_LINE(5602)
								this->midstep = true;
							}
							else{
								HX_STACK_LINE(5604)
								con->active = false;
							}
							HX_STACK_LINE(5605)
							con->clearcache();
							HX_STACK_LINE(5606)
							continue;
						}
						HX_STACK_LINE(5608)
						pre = cx_ite;
					}
					HX_STACK_LINE(5610)
					cx_ite = cx_ite->next;
				}
			}
			HX_STACK_LINE(5613)
			{
				HX_STACK_LINE(5614)
				::zpp_nape::util::ZNPNode_ZPP_ColArbiter arbi = this->c_arbiters_false->head;		HX_STACK_VAR(arbi,"arbi");
				HX_STACK_LINE(5615)
				bool fst = true;		HX_STACK_VAR(fst,"fst");
				HX_STACK_LINE(5616)
				if (((arbi == null()))){
					HX_STACK_LINE(5617)
					arbi = this->c_arbiters_true->head;
					HX_STACK_LINE(5618)
					fst = false;
				}
				HX_STACK_LINE(5620)
				while(((arbi != null()))){
					HX_STACK_LINE(5621)
					::zpp_nape::dynamics::ZPP_ColArbiter arb = arbi->elt;		HX_STACK_VAR(arb,"arb");
					HX_STACK_LINE(5622)
					if (((bool(arb->active) && bool((((int(arb->immState) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT))) != (int)0))))){
						HX_STACK_LINE(5623)
						Float jx;		HX_STACK_VAR(jx,"jx");
						HX_STACK_LINE(5623)
						Float jy;		HX_STACK_VAR(jy,"jy");
						HX_STACK_LINE(5623)
						Float j;		HX_STACK_VAR(j,"j");
						HX_STACK_LINE(5623)
						Float jMax;		HX_STACK_VAR(jMax,"jMax");
						HX_STACK_LINE(5623)
						Float jOld;		HX_STACK_VAR(jOld,"jOld");
						HX_STACK_LINE(5623)
						Float cjAcc;		HX_STACK_VAR(cjAcc,"cjAcc");
						HX_STACK_LINE(5623)
						Float v1x = (((arb->k1x + arb->b2->velx) - (arb->c1->r2y * arb->b2->angvel)) - ((arb->b1->velx - (arb->c1->r1y * arb->b1->angvel))));		HX_STACK_VAR(v1x,"v1x");
						HX_STACK_LINE(5623)
						Float v1y = (((arb->k1y + arb->b2->vely) + (arb->c1->r2x * arb->b2->angvel)) - ((arb->b1->vely + (arb->c1->r1x * arb->b1->angvel))));		HX_STACK_VAR(v1y,"v1y");
						HX_STACK_LINE(5623)
						j = (((((v1y * arb->nx) - (v1x * arb->ny)) + arb->surfacex)) * arb->c1->tMass);
						HX_STACK_LINE(5623)
						jMax = (arb->c1->friction * arb->c1->jnAcc);
						HX_STACK_LINE(5623)
						jOld = arb->c1->jtAcc;
						HX_STACK_LINE(5623)
						cjAcc = (jOld - j);
						HX_STACK_LINE(5623)
						if (((cjAcc > jMax))){
							HX_STACK_LINE(5623)
							cjAcc = jMax;
						}
						else{
							HX_STACK_LINE(5623)
							if (((cjAcc < -(jMax)))){
								HX_STACK_LINE(5623)
								cjAcc = -(jMax);
							}
						}
						HX_STACK_LINE(5623)
						j = (cjAcc - jOld);
						HX_STACK_LINE(5623)
						arb->c1->jtAcc = cjAcc;
						HX_STACK_LINE(5623)
						jx = (-(arb->ny) * j);
						HX_STACK_LINE(5623)
						jy = (arb->nx * j);
						HX_STACK_LINE(5623)
						hx::AddEq(arb->b2->velx,(jx * arb->b2->imass));
						HX_STACK_LINE(5623)
						hx::AddEq(arb->b2->vely,(jy * arb->b2->imass));
						HX_STACK_LINE(5623)
						hx::SubEq(arb->b1->velx,(jx * arb->b1->imass));
						HX_STACK_LINE(5623)
						hx::SubEq(arb->b1->vely,(jy * arb->b1->imass));
						HX_STACK_LINE(5623)
						hx::AddEq(arb->b2->angvel,((arb->rt1b * j) * arb->b2->iinertia));
						HX_STACK_LINE(5623)
						hx::SubEq(arb->b1->angvel,((arb->rt1a * j) * arb->b1->iinertia));
						HX_STACK_LINE(5623)
						if ((arb->hc2)){
							HX_STACK_LINE(5623)
							Float v2x = (((arb->k2x + arb->b2->velx) - (arb->c2->r2y * arb->b2->angvel)) - ((arb->b1->velx - (arb->c2->r1y * arb->b1->angvel))));		HX_STACK_VAR(v2x,"v2x");
							HX_STACK_LINE(5623)
							Float v2y = (((arb->k2y + arb->b2->vely) + (arb->c2->r2x * arb->b2->angvel)) - ((arb->b1->vely + (arb->c2->r1x * arb->b1->angvel))));		HX_STACK_VAR(v2y,"v2y");
							HX_STACK_LINE(5623)
							j = (((((v2y * arb->nx) - (v2x * arb->ny)) + arb->surfacex)) * arb->c2->tMass);
							HX_STACK_LINE(5623)
							jMax = (arb->c2->friction * arb->c2->jnAcc);
							HX_STACK_LINE(5623)
							jOld = arb->c2->jtAcc;
							HX_STACK_LINE(5623)
							cjAcc = (jOld - j);
							HX_STACK_LINE(5623)
							if (((cjAcc > jMax))){
								HX_STACK_LINE(5623)
								cjAcc = jMax;
							}
							else{
								HX_STACK_LINE(5623)
								if (((cjAcc < -(jMax)))){
									HX_STACK_LINE(5623)
									cjAcc = -(jMax);
								}
							}
							HX_STACK_LINE(5623)
							j = (cjAcc - jOld);
							HX_STACK_LINE(5623)
							arb->c2->jtAcc = cjAcc;
							HX_STACK_LINE(5623)
							jx = (-(arb->ny) * j);
							HX_STACK_LINE(5623)
							jy = (arb->nx * j);
							HX_STACK_LINE(5623)
							hx::AddEq(arb->b2->velx,(jx * arb->b2->imass));
							HX_STACK_LINE(5623)
							hx::AddEq(arb->b2->vely,(jy * arb->b2->imass));
							HX_STACK_LINE(5623)
							hx::SubEq(arb->b1->velx,(jx * arb->b1->imass));
							HX_STACK_LINE(5623)
							hx::SubEq(arb->b1->vely,(jy * arb->b1->imass));
							HX_STACK_LINE(5623)
							hx::AddEq(arb->b2->angvel,((arb->rt2b * j) * arb->b2->iinertia));
							HX_STACK_LINE(5623)
							hx::SubEq(arb->b1->angvel,((arb->rt2a * j) * arb->b1->iinertia));
							HX_STACK_LINE(5623)
							v1x = (((arb->k1x + arb->b2->velx) - (arb->c1->r2y * arb->b2->angvel)) - ((arb->b1->velx - (arb->c1->r1y * arb->b1->angvel))));
							HX_STACK_LINE(5623)
							v1y = (((arb->k1y + arb->b2->vely) + (arb->c1->r2x * arb->b2->angvel)) - ((arb->b1->vely + (arb->c1->r1x * arb->b1->angvel))));
							HX_STACK_LINE(5623)
							v2x = (((arb->k2x + arb->b2->velx) - (arb->c2->r2y * arb->b2->angvel)) - ((arb->b1->velx - (arb->c2->r1y * arb->b1->angvel))));
							HX_STACK_LINE(5623)
							v2y = (((arb->k2y + arb->b2->vely) + (arb->c2->r2x * arb->b2->angvel)) - ((arb->b1->vely + (arb->c2->r1x * arb->b1->angvel))));
							HX_STACK_LINE(5623)
							Float ax = arb->c1->jnAcc;		HX_STACK_VAR(ax,"ax");
							HX_STACK_LINE(5623)
							Float ay = arb->c2->jnAcc;		HX_STACK_VAR(ay,"ay");
							HX_STACK_LINE(5623)
							{
							}
							HX_STACK_LINE(5623)
							{
							}
							HX_STACK_LINE(5623)
							Float jnx = (((((v1x * arb->nx) + (v1y * arb->ny)) + arb->surfacey) + arb->c1->bounce) - (((arb->Ka * ax) + (arb->Kb * ay))));		HX_STACK_VAR(jnx,"jnx");
							HX_STACK_LINE(5623)
							Float jny = (((((v2x * arb->nx) + (v2y * arb->ny)) + arb->surfacey) + arb->c2->bounce) - (((arb->Kb * ax) + (arb->Kc * ay))));		HX_STACK_VAR(jny,"jny");
							HX_STACK_LINE(5623)
							Float xx = -((((arb->kMassa * jnx) + (arb->kMassb * jny))));		HX_STACK_VAR(xx,"xx");
							HX_STACK_LINE(5623)
							Float xy = -((((arb->kMassb * jnx) + (arb->kMassc * jny))));		HX_STACK_VAR(xy,"xy");
							HX_STACK_LINE(5623)
							if (((bool((xx >= (int)0)) && bool((xy >= (int)0))))){
								HX_STACK_LINE(5623)
								{
									HX_STACK_LINE(5623)
									jnx = (xx - ax);
									HX_STACK_LINE(5623)
									jny = (xy - ay);
								}
								HX_STACK_LINE(5623)
								arb->c1->jnAcc = xx;
								HX_STACK_LINE(5623)
								arb->c2->jnAcc = xy;
							}
							else{
								HX_STACK_LINE(5623)
								xx = (-(arb->c1->nMass) * jnx);
								HX_STACK_LINE(5623)
								if (((bool((xx >= (int)0)) && bool((((arb->Kb * xx) + jny) >= (int)0))))){
									HX_STACK_LINE(5623)
									jnx = (xx - ax);
									HX_STACK_LINE(5623)
									jny = -(ay);
									HX_STACK_LINE(5623)
									arb->c1->jnAcc = xx;
									HX_STACK_LINE(5623)
									arb->c2->jnAcc = (int)0;
								}
								else{
									HX_STACK_LINE(5623)
									xy = (-(arb->c2->nMass) * jny);
									HX_STACK_LINE(5623)
									if (((bool((xy >= (int)0)) && bool((((arb->Kb * xy) + jnx) >= (int)0))))){
										HX_STACK_LINE(5623)
										jnx = -(ax);
										HX_STACK_LINE(5623)
										jny = (xy - ay);
										HX_STACK_LINE(5623)
										arb->c1->jnAcc = (int)0;
										HX_STACK_LINE(5623)
										arb->c2->jnAcc = xy;
									}
									else{
										HX_STACK_LINE(5623)
										if (((bool((jnx >= (int)0)) && bool((jny >= (int)0))))){
											HX_STACK_LINE(5623)
											jnx = -(ax);
											HX_STACK_LINE(5623)
											jny = -(ay);
											HX_STACK_LINE(5623)
											arb->c1->jnAcc = arb->c2->jnAcc = (int)0;
										}
										else{
											HX_STACK_LINE(5623)
											jnx = (int)0;
											HX_STACK_LINE(5623)
											jny = (int)0;
										}
									}
								}
							}
							HX_STACK_LINE(5623)
							j = (jnx + jny);
							HX_STACK_LINE(5623)
							jx = (arb->nx * j);
							HX_STACK_LINE(5623)
							jy = (arb->ny * j);
							HX_STACK_LINE(5623)
							hx::AddEq(arb->b2->velx,(jx * arb->b2->imass));
							HX_STACK_LINE(5623)
							hx::AddEq(arb->b2->vely,(jy * arb->b2->imass));
							HX_STACK_LINE(5623)
							hx::SubEq(arb->b1->velx,(jx * arb->b1->imass));
							HX_STACK_LINE(5623)
							hx::SubEq(arb->b1->vely,(jy * arb->b1->imass));
							HX_STACK_LINE(5623)
							hx::AddEq(arb->b2->angvel,((((arb->rn1b * jnx) + (arb->rn2b * jny))) * arb->b2->iinertia));
							HX_STACK_LINE(5623)
							hx::SubEq(arb->b1->angvel,((((arb->rn1a * jnx) + (arb->rn2a * jny))) * arb->b1->iinertia));
						}
						else{
							HX_STACK_LINE(5623)
							if (((arb->radius != 0.0))){
								HX_STACK_LINE(5623)
								Float dw = (arb->b2->angvel - arb->b1->angvel);		HX_STACK_VAR(dw,"dw");
								HX_STACK_LINE(5623)
								j = (dw * arb->rMass);
								HX_STACK_LINE(5623)
								jMax = (arb->rfric * arb->c1->jnAcc);
								HX_STACK_LINE(5623)
								jOld = arb->jrAcc;
								HX_STACK_LINE(5623)
								hx::SubEq(arb->jrAcc,j);
								HX_STACK_LINE(5623)
								if (((arb->jrAcc > jMax))){
									HX_STACK_LINE(5623)
									arb->jrAcc = jMax;
								}
								else{
									HX_STACK_LINE(5623)
									if (((arb->jrAcc < -(jMax)))){
										HX_STACK_LINE(5623)
										arb->jrAcc = -(jMax);
									}
								}
								HX_STACK_LINE(5623)
								j = (arb->jrAcc - jOld);
								HX_STACK_LINE(5623)
								hx::AddEq(arb->b2->angvel,(j * arb->b2->iinertia));
								HX_STACK_LINE(5623)
								hx::SubEq(arb->b1->angvel,(j * arb->b1->iinertia));
							}
							HX_STACK_LINE(5623)
							v1x = (((arb->k1x + arb->b2->velx) - (arb->c1->r2y * arb->b2->angvel)) - ((arb->b1->velx - (arb->c1->r1y * arb->b1->angvel))));
							HX_STACK_LINE(5623)
							v1y = (((arb->k1y + arb->b2->vely) + (arb->c1->r2x * arb->b2->angvel)) - ((arb->b1->vely + (arb->c1->r1x * arb->b1->angvel))));
							HX_STACK_LINE(5623)
							j = ((((arb->c1->bounce + (((arb->nx * v1x) + (arb->ny * v1y)))) + arb->surfacey)) * arb->c1->nMass);
							HX_STACK_LINE(5623)
							jOld = arb->c1->jnAcc;
							HX_STACK_LINE(5623)
							cjAcc = (jOld - j);
							HX_STACK_LINE(5623)
							if (((cjAcc < 0.0))){
								HX_STACK_LINE(5623)
								cjAcc = 0.0;
							}
							HX_STACK_LINE(5623)
							j = (cjAcc - jOld);
							HX_STACK_LINE(5623)
							arb->c1->jnAcc = cjAcc;
							HX_STACK_LINE(5623)
							jx = (arb->nx * j);
							HX_STACK_LINE(5623)
							jy = (arb->ny * j);
							HX_STACK_LINE(5623)
							hx::AddEq(arb->b2->velx,(jx * arb->b2->imass));
							HX_STACK_LINE(5623)
							hx::AddEq(arb->b2->vely,(jy * arb->b2->imass));
							HX_STACK_LINE(5623)
							hx::SubEq(arb->b1->velx,(jx * arb->b1->imass));
							HX_STACK_LINE(5623)
							hx::SubEq(arb->b1->vely,(jy * arb->b1->imass));
							HX_STACK_LINE(5623)
							hx::AddEq(arb->b2->angvel,((arb->rn1b * j) * arb->b2->iinertia));
							HX_STACK_LINE(5623)
							hx::SubEq(arb->b1->angvel,((arb->rn1a * j) * arb->b1->iinertia));
						}
					}
					HX_STACK_LINE(5625)
					arbi = arbi->next;
					HX_STACK_LINE(5626)
					if (((bool(fst) && bool((arbi == null()))))){
						HX_STACK_LINE(5627)
						arbi = this->c_arbiters_true->head;
						HX_STACK_LINE(5628)
						fst = false;
					}
				}
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,iterateVel,(void))

Void ZPP_Space_obj::warmStart( ){
{
		HX_STACK_PUSH("ZPP_Space::warmStart","zpp_nape/space/Space.hx",5540);
		HX_STACK_THIS(this);
		HX_STACK_LINE(5541)
		{
			HX_STACK_LINE(5542)
			::zpp_nape::util::ZNPNode_ZPP_FluidArbiter cx_ite = this->f_arbiters->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(5543)
			while(((cx_ite != null()))){
				HX_STACK_LINE(5544)
				::zpp_nape::dynamics::ZPP_FluidArbiter arb = cx_ite->elt;		HX_STACK_VAR(arb,"arb");
				HX_STACK_LINE(5545)
				if (((bool(arb->active) && bool((((int(arb->immState) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT))) != (int)0))))){
					HX_STACK_LINE(5545)
					{
						HX_STACK_LINE(5545)
						{
							HX_STACK_LINE(5545)
							Float t = arb->b1->imass;		HX_STACK_VAR(t,"t");
							HX_STACK_LINE(5545)
							{
							}
							HX_STACK_LINE(5545)
							hx::SubEq(arb->b1->velx,(arb->dampx * t));
							HX_STACK_LINE(5545)
							hx::SubEq(arb->b1->vely,(arb->dampy * t));
						}
						HX_STACK_LINE(5545)
						{
							HX_STACK_LINE(5545)
							Float t = arb->b2->imass;		HX_STACK_VAR(t,"t");
							HX_STACK_LINE(5545)
							{
							}
							HX_STACK_LINE(5545)
							hx::AddEq(arb->b2->velx,(arb->dampx * t));
							HX_STACK_LINE(5545)
							hx::AddEq(arb->b2->vely,(arb->dampy * t));
						}
						HX_STACK_LINE(5545)
						hx::SubEq(arb->b1->angvel,(arb->b1->iinertia * (((arb->dampy * arb->r1x) - (arb->dampx * arb->r1y)))));
						HX_STACK_LINE(5545)
						hx::AddEq(arb->b2->angvel,(arb->b2->iinertia * (((arb->dampy * arb->r2x) - (arb->dampx * arb->r2y)))));
						HX_STACK_LINE(5545)
						hx::SubEq(arb->b1->angvel,(arb->adamp * arb->b1->iinertia));
						HX_STACK_LINE(5545)
						hx::AddEq(arb->b2->angvel,(arb->adamp * arb->b2->iinertia));
					}
				}
				HX_STACK_LINE(5546)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(5549)
		{
			HX_STACK_LINE(5550)
			::zpp_nape::util::ZNPNode_ZPP_ColArbiter arbi = this->c_arbiters_false->head;		HX_STACK_VAR(arbi,"arbi");
			HX_STACK_LINE(5551)
			bool fst = true;		HX_STACK_VAR(fst,"fst");
			HX_STACK_LINE(5552)
			if (((arbi == null()))){
				HX_STACK_LINE(5553)
				arbi = this->c_arbiters_true->head;
				HX_STACK_LINE(5554)
				fst = false;
			}
			HX_STACK_LINE(5556)
			while(((arbi != null()))){
				HX_STACK_LINE(5557)
				::zpp_nape::dynamics::ZPP_ColArbiter arb = arbi->elt;		HX_STACK_VAR(arb,"arb");
				HX_STACK_LINE(5558)
				if (((bool(arb->active) && bool((((int(arb->immState) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT))) != (int)0))))){
					HX_STACK_LINE(5559)
					{
						HX_STACK_LINE(5559)
						{
							HX_STACK_LINE(5559)
							Float jx = ((arb->nx * arb->c1->jnAcc) - (arb->ny * arb->c1->jtAcc));		HX_STACK_VAR(jx,"jx");
							HX_STACK_LINE(5559)
							Float jy = ((arb->ny * arb->c1->jnAcc) + (arb->nx * arb->c1->jtAcc));		HX_STACK_VAR(jy,"jy");
							HX_STACK_LINE(5559)
							{
								HX_STACK_LINE(5559)
								Float t = arb->b1->imass;		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(5559)
								{
								}
								HX_STACK_LINE(5559)
								hx::SubEq(arb->b1->velx,(jx * t));
								HX_STACK_LINE(5559)
								hx::SubEq(arb->b1->vely,(jy * t));
							}
							HX_STACK_LINE(5559)
							hx::SubEq(arb->b1->angvel,(arb->b1->iinertia * (((jy * arb->c1->r1x) - (jx * arb->c1->r1y)))));
							HX_STACK_LINE(5559)
							{
								HX_STACK_LINE(5559)
								Float t = arb->b2->imass;		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(5559)
								{
								}
								HX_STACK_LINE(5559)
								hx::AddEq(arb->b2->velx,(jx * t));
								HX_STACK_LINE(5559)
								hx::AddEq(arb->b2->vely,(jy * t));
							}
							HX_STACK_LINE(5559)
							hx::AddEq(arb->b2->angvel,(arb->b2->iinertia * (((jy * arb->c1->r2x) - (jx * arb->c1->r2y)))));
						}
						HX_STACK_LINE(5559)
						if ((arb->hc2)){
							HX_STACK_LINE(5559)
							Float jx = ((arb->nx * arb->c2->jnAcc) - (arb->ny * arb->c2->jtAcc));		HX_STACK_VAR(jx,"jx");
							HX_STACK_LINE(5559)
							Float jy = ((arb->ny * arb->c2->jnAcc) + (arb->nx * arb->c2->jtAcc));		HX_STACK_VAR(jy,"jy");
							HX_STACK_LINE(5559)
							{
								HX_STACK_LINE(5559)
								Float t = arb->b1->imass;		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(5559)
								{
								}
								HX_STACK_LINE(5559)
								hx::SubEq(arb->b1->velx,(jx * t));
								HX_STACK_LINE(5559)
								hx::SubEq(arb->b1->vely,(jy * t));
							}
							HX_STACK_LINE(5559)
							hx::SubEq(arb->b1->angvel,(arb->b1->iinertia * (((jy * arb->c2->r1x) - (jx * arb->c2->r1y)))));
							HX_STACK_LINE(5559)
							{
								HX_STACK_LINE(5559)
								Float t = arb->b2->imass;		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(5559)
								{
								}
								HX_STACK_LINE(5559)
								hx::AddEq(arb->b2->velx,(jx * t));
								HX_STACK_LINE(5559)
								hx::AddEq(arb->b2->vely,(jy * t));
							}
							HX_STACK_LINE(5559)
							hx::AddEq(arb->b2->angvel,(arb->b2->iinertia * (((jy * arb->c2->r2x) - (jx * arb->c2->r2y)))));
						}
						HX_STACK_LINE(5559)
						hx::AddEq(arb->b2->angvel,(arb->jrAcc * arb->b2->iinertia));
						HX_STACK_LINE(5559)
						hx::SubEq(arb->b1->angvel,(arb->jrAcc * arb->b1->iinertia));
					}
				}
				HX_STACK_LINE(5561)
				arbi = arbi->next;
				HX_STACK_LINE(5562)
				if (((bool(fst) && bool((arbi == null()))))){
					HX_STACK_LINE(5563)
					arbi = this->c_arbiters_true->head;
					HX_STACK_LINE(5564)
					fst = false;
				}
			}
		}
		HX_STACK_LINE(5568)
		{
			HX_STACK_LINE(5569)
			::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = this->live_constraints->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(5570)
			while(((cx_ite != null()))){
				HX_STACK_LINE(5571)
				::zpp_nape::constraint::ZPP_Constraint con = cx_ite->elt;		HX_STACK_VAR(con,"con");
				HX_STACK_LINE(5572)
				con->warmStart();
				HX_STACK_LINE(5573)
				cx_ite = cx_ite->next;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Space_obj,warmStart,(void))

Void ZPP_Space_obj::prestep( Float dt){
{
		HX_STACK_PUSH("ZPP_Space::prestep","zpp_nape/space/Space.hx",5395);
		HX_STACK_THIS(this);
		HX_STACK_ARG(dt,"dt");
		HX_STACK_LINE(5396)
		::zpp_nape::util::ZNPNode_ZPP_Constraint pre = null();		HX_STACK_VAR(pre,"pre");
		HX_STACK_LINE(5397)
		{
			HX_STACK_LINE(5398)
			::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = this->live_constraints->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(5399)
			while(((cx_ite != null()))){
				HX_STACK_LINE(5400)
				::zpp_nape::constraint::ZPP_Constraint con = cx_ite->elt;		HX_STACK_VAR(con,"con");
				HX_STACK_LINE(5401)
				{
					HX_STACK_LINE(5402)
					if ((con->preStep(dt))){
						HX_STACK_LINE(5403)
						cx_ite = this->live_constraints->erase(pre);
						HX_STACK_LINE(5404)
						con->broken();
						HX_STACK_LINE(5405)
						this->constraintCbBreak(con);
						HX_STACK_LINE(5406)
						if ((con->removeOnBreak)){
							HX_STACK_LINE(5407)
							con->component->sleeping = true;
							HX_STACK_LINE(5408)
							this->midstep = false;
							HX_STACK_LINE(5409)
							if (((con->compound != null()))){
								HX_STACK_LINE(5409)
								con->compound->wrap_constraints->remove(con->outer);
							}
							else{
								HX_STACK_LINE(5410)
								this->wrap_constraints->remove(con->outer);
							}
							HX_STACK_LINE(5411)
							this->midstep = true;
						}
						else{
							HX_STACK_LINE(5413)
							con->active = false;
						}
						HX_STACK_LINE(5414)
						con->clearcache();
						HX_STACK_LINE(5415)
						continue;
					}
					HX_STACK_LINE(5417)
					pre = cx_ite;
				}
				HX_STACK_LINE(5419)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(5422)
		{
			HX_STACK_LINE(5423)
			::zpp_nape::util::ZNPNode_ZPP_ColArbiter pre1 = null();		HX_STACK_VAR(pre1,"pre1");
			HX_STACK_LINE(5424)
			::zpp_nape::util::ZNPList_ZPP_ColArbiter arbs = this->c_arbiters_true;		HX_STACK_VAR(arbs,"arbs");
			HX_STACK_LINE(5425)
			::zpp_nape::util::ZNPNode_ZPP_ColArbiter arbite = arbs->head;		HX_STACK_VAR(arbite,"arbite");
			HX_STACK_LINE(5426)
			bool fst = (this->c_arbiters_false != null());		HX_STACK_VAR(fst,"fst");
			HX_STACK_LINE(5427)
			if (((bool(fst) && bool((arbite == null()))))){
				HX_STACK_LINE(5429)
				fst = false;
				HX_STACK_LINE(5430)
				arbite = this->c_arbiters_false->head;
				HX_STACK_LINE(5431)
				arbs = this->c_arbiters_false;
				HX_STACK_LINE(5432)
				pre1 = null();
			}
			HX_STACK_LINE(5435)
			while(((arbite != null()))){
				HX_STACK_LINE(5436)
				::zpp_nape::dynamics::ZPP_ColArbiter arb = arbite->elt;		HX_STACK_VAR(arb,"arb");
				HX_STACK_LINE(5437)
				if ((this->presteparb(arb,dt,null()))){
					struct _Function_4_1{
						inline static ::zpp_nape::util::ZNPNode_ZPP_ColArbiter Block( ::zpp_nape::util::ZNPNode_ZPP_ColArbiter &pre1,::zpp_nape::util::ZNPList_ZPP_ColArbiter &arbs){
							HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5438);
							{
								HX_STACK_LINE(5438)
								{
								}
								HX_STACK_LINE(5438)
								::zpp_nape::util::ZNPNode_ZPP_ColArbiter old;		HX_STACK_VAR(old,"old");
								HX_STACK_LINE(5438)
								::zpp_nape::util::ZNPNode_ZPP_ColArbiter ret;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(5438)
								if (((pre1 == null()))){
									HX_STACK_LINE(5438)
									old = arbs->head;
									HX_STACK_LINE(5438)
									ret = old->next;
									HX_STACK_LINE(5438)
									arbs->head = ret;
									HX_STACK_LINE(5438)
									if (((arbs->head == null()))){
										HX_STACK_LINE(5438)
										arbs->pushmod = true;
									}
								}
								else{
									HX_STACK_LINE(5438)
									old = pre1->next;
									HX_STACK_LINE(5438)
									ret = old->next;
									HX_STACK_LINE(5438)
									pre1->next = ret;
									HX_STACK_LINE(5438)
									if (((ret == null()))){
										HX_STACK_LINE(5438)
										arbs->pushmod = true;
									}
								}
								HX_STACK_LINE(5438)
								{
								}
								HX_STACK_LINE(5438)
								{
									HX_STACK_LINE(5438)
									::zpp_nape::util::ZNPNode_ZPP_ColArbiter o = old;		HX_STACK_VAR(o,"o");
									HX_STACK_LINE(5438)
									{
									}
									HX_STACK_LINE(5438)
									o->elt = null();
									HX_STACK_LINE(5438)
									o->next = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;
									HX_STACK_LINE(5438)
									::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool = o;
								}
								HX_STACK_LINE(5438)
								arbs->modified = true;
								HX_STACK_LINE(5438)
								(arbs->length)--;
								HX_STACK_LINE(5438)
								arbs->pushmod = true;
								HX_STACK_LINE(5438)
								return ret;
							}
							return null();
						}
					};
					HX_STACK_LINE(5438)
					arbite = _Function_4_1::Block(pre1,arbs);
					HX_STACK_LINE(5439)
					if (((bool(fst) && bool((arbite == null()))))){
						HX_STACK_LINE(5441)
						fst = false;
						HX_STACK_LINE(5442)
						arbite = this->c_arbiters_false->head;
						HX_STACK_LINE(5443)
						arbs = this->c_arbiters_false;
						HX_STACK_LINE(5444)
						pre1 = null();
					}
					HX_STACK_LINE(5447)
					continue;
				}
				HX_STACK_LINE(5449)
				pre1 = arbite;
				HX_STACK_LINE(5450)
				arbite = arbite->next;
				HX_STACK_LINE(5451)
				if (((bool(fst) && bool((arbite == null()))))){
					HX_STACK_LINE(5453)
					fst = false;
					HX_STACK_LINE(5454)
					arbite = this->c_arbiters_false->head;
					HX_STACK_LINE(5455)
					arbs = this->c_arbiters_false;
					HX_STACK_LINE(5456)
					pre1 = null();
				}
			}
		}
		HX_STACK_LINE(5461)
		{
			HX_STACK_LINE(5462)
			::zpp_nape::util::ZNPNode_ZPP_FluidArbiter pre1 = null();		HX_STACK_VAR(pre1,"pre1");
			HX_STACK_LINE(5463)
			::zpp_nape::util::ZNPList_ZPP_FluidArbiter arbs = this->f_arbiters;		HX_STACK_VAR(arbs,"arbs");
			HX_STACK_LINE(5464)
			::zpp_nape::util::ZNPNode_ZPP_FluidArbiter arbite = arbs->head;		HX_STACK_VAR(arbite,"arbite");
			HX_STACK_LINE(5465)
			bool fst = false;		HX_STACK_VAR(fst,"fst");
			HX_STACK_LINE(5466)
			if (((bool(fst) && bool((arbite == null()))))){
				HX_STACK_LINE(5468)
				fst = false;
				HX_STACK_LINE(5469)
				arbite = Dynamic()();
				HX_STACK_LINE(5470)
				arbs = null();
				HX_STACK_LINE(5471)
				pre1 = null();
			}
			HX_STACK_LINE(5474)
			while(((arbite != null()))){
				HX_STACK_LINE(5475)
				::zpp_nape::dynamics::ZPP_FluidArbiter arb = arbite->elt;		HX_STACK_VAR(arb,"arb");
				HX_STACK_LINE(5476)
				if ((this->presteparb(arb,dt,null()))){
					struct _Function_4_1{
						inline static ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter Block( ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter &pre1,::zpp_nape::util::ZNPList_ZPP_FluidArbiter &arbs){
							HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5477);
							{
								HX_STACK_LINE(5477)
								{
								}
								HX_STACK_LINE(5477)
								::zpp_nape::util::ZNPNode_ZPP_FluidArbiter old;		HX_STACK_VAR(old,"old");
								HX_STACK_LINE(5477)
								::zpp_nape::util::ZNPNode_ZPP_FluidArbiter ret;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(5477)
								if (((pre1 == null()))){
									HX_STACK_LINE(5477)
									old = arbs->head;
									HX_STACK_LINE(5477)
									ret = old->next;
									HX_STACK_LINE(5477)
									arbs->head = ret;
									HX_STACK_LINE(5477)
									if (((arbs->head == null()))){
										HX_STACK_LINE(5477)
										arbs->pushmod = true;
									}
								}
								else{
									HX_STACK_LINE(5477)
									old = pre1->next;
									HX_STACK_LINE(5477)
									ret = old->next;
									HX_STACK_LINE(5477)
									pre1->next = ret;
									HX_STACK_LINE(5477)
									if (((ret == null()))){
										HX_STACK_LINE(5477)
										arbs->pushmod = true;
									}
								}
								HX_STACK_LINE(5477)
								{
								}
								HX_STACK_LINE(5477)
								{
									HX_STACK_LINE(5477)
									::zpp_nape::util::ZNPNode_ZPP_FluidArbiter o = old;		HX_STACK_VAR(o,"o");
									HX_STACK_LINE(5477)
									{
									}
									HX_STACK_LINE(5477)
									o->elt = null();
									HX_STACK_LINE(5477)
									o->next = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool;
									HX_STACK_LINE(5477)
									::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool = o;
								}
								HX_STACK_LINE(5477)
								arbs->modified = true;
								HX_STACK_LINE(5477)
								(arbs->length)--;
								HX_STACK_LINE(5477)
								arbs->pushmod = true;
								HX_STACK_LINE(5477)
								return ret;
							}
							return null();
						}
					};
					HX_STACK_LINE(5477)
					arbite = _Function_4_1::Block(pre1,arbs);
					HX_STACK_LINE(5478)
					if (((bool(fst) && bool((arbite == null()))))){
						HX_STACK_LINE(5480)
						fst = false;
						HX_STACK_LINE(5481)
						arbite = Dynamic()();
						HX_STACK_LINE(5482)
						arbs = null();
						HX_STACK_LINE(5483)
						pre1 = null();
					}
					HX_STACK_LINE(5486)
					continue;
				}
				HX_STACK_LINE(5488)
				pre1 = arbite;
				HX_STACK_LINE(5489)
				arbite = arbite->next;
				HX_STACK_LINE(5490)
				if (((bool(fst) && bool((arbite == null()))))){
					HX_STACK_LINE(5492)
					fst = false;
					HX_STACK_LINE(5493)
					arbite = Dynamic()();
					HX_STACK_LINE(5494)
					arbs = null();
					HX_STACK_LINE(5495)
					pre1 = null();
				}
			}
		}
		HX_STACK_LINE(5500)
		{
			HX_STACK_LINE(5501)
			::zpp_nape::util::ZNPNode_ZPP_SensorArbiter pre1 = null();		HX_STACK_VAR(pre1,"pre1");
			HX_STACK_LINE(5502)
			::zpp_nape::util::ZNPList_ZPP_SensorArbiter arbs = this->s_arbiters;		HX_STACK_VAR(arbs,"arbs");
			HX_STACK_LINE(5503)
			::zpp_nape::util::ZNPNode_ZPP_SensorArbiter arbite = arbs->head;		HX_STACK_VAR(arbite,"arbite");
			HX_STACK_LINE(5504)
			bool fst = false;		HX_STACK_VAR(fst,"fst");
			HX_STACK_LINE(5505)
			if (((bool(fst) && bool((arbite == null()))))){
				HX_STACK_LINE(5507)
				fst = false;
				HX_STACK_LINE(5508)
				arbite = Dynamic()();
				HX_STACK_LINE(5509)
				arbs = null();
				HX_STACK_LINE(5510)
				pre1 = null();
			}
			HX_STACK_LINE(5513)
			while(((arbite != null()))){
				HX_STACK_LINE(5514)
				::zpp_nape::dynamics::ZPP_SensorArbiter arb = arbite->elt;		HX_STACK_VAR(arb,"arb");
				HX_STACK_LINE(5515)
				if ((this->presteparb(arb,dt,null()))){
					struct _Function_4_1{
						inline static ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter Block( ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter &pre1,::zpp_nape::util::ZNPList_ZPP_SensorArbiter &arbs){
							HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5516);
							{
								HX_STACK_LINE(5516)
								{
								}
								HX_STACK_LINE(5516)
								::zpp_nape::util::ZNPNode_ZPP_SensorArbiter old;		HX_STACK_VAR(old,"old");
								HX_STACK_LINE(5516)
								::zpp_nape::util::ZNPNode_ZPP_SensorArbiter ret;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(5516)
								if (((pre1 == null()))){
									HX_STACK_LINE(5516)
									old = arbs->head;
									HX_STACK_LINE(5516)
									ret = old->next;
									HX_STACK_LINE(5516)
									arbs->head = ret;
									HX_STACK_LINE(5516)
									if (((arbs->head == null()))){
										HX_STACK_LINE(5516)
										arbs->pushmod = true;
									}
								}
								else{
									HX_STACK_LINE(5516)
									old = pre1->next;
									HX_STACK_LINE(5516)
									ret = old->next;
									HX_STACK_LINE(5516)
									pre1->next = ret;
									HX_STACK_LINE(5516)
									if (((ret == null()))){
										HX_STACK_LINE(5516)
										arbs->pushmod = true;
									}
								}
								HX_STACK_LINE(5516)
								{
								}
								HX_STACK_LINE(5516)
								{
									HX_STACK_LINE(5516)
									::zpp_nape::util::ZNPNode_ZPP_SensorArbiter o = old;		HX_STACK_VAR(o,"o");
									HX_STACK_LINE(5516)
									{
									}
									HX_STACK_LINE(5516)
									o->elt = null();
									HX_STACK_LINE(5516)
									o->next = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool;
									HX_STACK_LINE(5516)
									::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool = o;
								}
								HX_STACK_LINE(5516)
								arbs->modified = true;
								HX_STACK_LINE(5516)
								(arbs->length)--;
								HX_STACK_LINE(5516)
								arbs->pushmod = true;
								HX_STACK_LINE(5516)
								return ret;
							}
							return null();
						}
					};
					HX_STACK_LINE(5516)
					arbite = _Function_4_1::Block(pre1,arbs);
					HX_STACK_LINE(5517)
					if (((bool(fst) && bool((arbite == null()))))){
						HX_STACK_LINE(5519)
						fst = false;
						HX_STACK_LINE(5520)
						arbite = Dynamic()();
						HX_STACK_LINE(5521)
						arbs = null();
						HX_STACK_LINE(5522)
						pre1 = null();
					}
					HX_STACK_LINE(5525)
					continue;
				}
				HX_STACK_LINE(5527)
				pre1 = arbite;
				HX_STACK_LINE(5528)
				arbite = arbite->next;
				HX_STACK_LINE(5529)
				if (((bool(fst) && bool((arbite == null()))))){
					HX_STACK_LINE(5531)
					fst = false;
					HX_STACK_LINE(5532)
					arbite = Dynamic()();
					HX_STACK_LINE(5533)
					arbs = null();
					HX_STACK_LINE(5534)
					pre1 = null();
				}
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,prestep,(void))

bool ZPP_Space_obj::presteparb( ::zpp_nape::dynamics::ZPP_Arbiter arb,Float dt,Dynamic __o_cont){
Dynamic cont = __o_cont.Default(false);
	HX_STACK_PUSH("ZPP_Space::presteparb","zpp_nape/space/Space.hx",5251);
	HX_STACK_THIS(this);
	HX_STACK_ARG(arb,"arb");
	HX_STACK_ARG(dt,"dt");
	HX_STACK_ARG(cont,"cont");
{
		HX_STACK_LINE(5251)
		::zpp_nape::space::ZPP_Space _g = hx::ObjectPtr<OBJ_>(this);		HX_STACK_VAR(_g,"_g");
		HX_STACK_LINE(5252)
		if (((bool(!(arb->cleared)) && bool(((bool(arb->b1->component->sleeping) && bool(arb->b2->component->sleeping))))))){
			HX_STACK_LINE(5253)
			{
			}
			HX_STACK_LINE(5261)
			arb->sleep_stamp = this->stamp;
			HX_STACK_LINE(5262)
			arb->sleeping = true;
			HX_STACK_LINE(5263)
			return true;
		}
		HX_STACK_LINE(5267)
		if (((bool((bool(!(arb->cleared)) || bool((arb->present != (int)0)))) || bool(arb->intchange)))){
			HX_STACK_LINE(5268)
			bool endcb = (bool((bool((bool(!(cont)) && bool((arb->up_stamp == (this->stamp - (int)1))))) && bool(!(arb->cleared)))) && bool(!(arb->intchange)));		HX_STACK_VAR(endcb,"endcb");
			HX_STACK_LINE(5269)
			bool begcb = (bool((bool(arb->fresh) && bool(!(arb->cleared)))) && bool(!(arb->intchange)));		HX_STACK_VAR(begcb,"begcb");
			HX_STACK_LINE(5270)
			{
			}
			HX_STACK_LINE(5278)
			if ((endcb)){
				HX_STACK_LINE(5278)
				arb->endGenerated = this->stamp;
			}
			HX_STACK_LINE(5281)
			if (((bool((bool((bool(begcb) || bool(endcb))) || bool(arb->cleared))) || bool(arb->intchange)))){
				HX_STACK_LINE(5282)
				{
					HX_STACK_LINE(5282)
					::zpp_nape::shape::ZPP_Shape s1 = arb->ws1;		HX_STACK_VAR(s1,"s1");
					::zpp_nape::shape::ZPP_Shape s2 = arb->ws2;		HX_STACK_VAR(s2,"s2");
					HX_STACK_LINE(5282)
					{
					}
					HX_STACK_LINE(5282)
					{
						HX_STACK_LINE(5282)
						::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca1;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(5282)
						{
							HX_STACK_LINE(5282)
							while((!(((_this->head == null()))))){
								HX_STACK_LINE(5282)
								{
								}
								HX_STACK_LINE(5282)
								::zpp_nape::util::ZNPNode_ZPP_Interactor ret = _this->head;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(5282)
								_this->head = ret->next;
								HX_STACK_LINE(5282)
								{
								}
								HX_STACK_LINE(5282)
								{
									HX_STACK_LINE(5282)
									::zpp_nape::util::ZNPNode_ZPP_Interactor o = ret;		HX_STACK_VAR(o,"o");
									HX_STACK_LINE(5282)
									{
									}
									HX_STACK_LINE(5282)
									o->elt = null();
									HX_STACK_LINE(5282)
									o->next = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
									HX_STACK_LINE(5282)
									::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o;
								}
								HX_STACK_LINE(5282)
								if (((_this->head == null()))){
									HX_STACK_LINE(5282)
									_this->pushmod = true;
								}
								HX_STACK_LINE(5282)
								_this->modified = true;
								HX_STACK_LINE(5282)
								(_this->length)--;
							}
							HX_STACK_LINE(5282)
							_this->pushmod = true;
						}
					}
					HX_STACK_LINE(5282)
					{
						HX_STACK_LINE(5282)
						::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca2;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(5282)
						{
							HX_STACK_LINE(5282)
							while((!(((_this->head == null()))))){
								HX_STACK_LINE(5282)
								{
								}
								HX_STACK_LINE(5282)
								::zpp_nape::util::ZNPNode_ZPP_Interactor ret = _this->head;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(5282)
								_this->head = ret->next;
								HX_STACK_LINE(5282)
								{
								}
								HX_STACK_LINE(5282)
								{
									HX_STACK_LINE(5282)
									::zpp_nape::util::ZNPNode_ZPP_Interactor o = ret;		HX_STACK_VAR(o,"o");
									HX_STACK_LINE(5282)
									{
									}
									HX_STACK_LINE(5282)
									o->elt = null();
									HX_STACK_LINE(5282)
									o->next = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
									HX_STACK_LINE(5282)
									::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o;
								}
								HX_STACK_LINE(5282)
								if (((_this->head == null()))){
									HX_STACK_LINE(5282)
									_this->pushmod = true;
								}
								HX_STACK_LINE(5282)
								_this->modified = true;
								HX_STACK_LINE(5282)
								(_this->length)--;
							}
							HX_STACK_LINE(5282)
							_this->pushmod = true;
						}
					}
					HX_STACK_LINE(5282)
					if (((s1->cbSet != null()))){
						HX_STACK_LINE(5282)
						::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca1;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(5282)
						{
						}
						struct _Function_5_1{
							inline static ::zpp_nape::util::ZNPNode_ZPP_Interactor Block( ::zpp_nape::shape::ZPP_Shape &s1){
								HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5282);
								{
									HX_STACK_LINE(5282)
									::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
									HX_STACK_LINE(5282)
									{
										HX_STACK_LINE(5282)
										if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
											HX_STACK_LINE(5282)
											ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();
										}
										else{
											HX_STACK_LINE(5282)
											ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
											HX_STACK_LINE(5282)
											::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
											HX_STACK_LINE(5282)
											ret->next = null();
										}
										HX_STACK_LINE(5282)
										Dynamic();
									}
									HX_STACK_LINE(5282)
									ret->elt = s1;
									HX_STACK_LINE(5282)
									return ret;
								}
								return null();
							}
						};
						HX_STACK_LINE(5282)
						::zpp_nape::util::ZNPNode_ZPP_Interactor temp = _Function_5_1::Block(s1);		HX_STACK_VAR(temp,"temp");
						HX_STACK_LINE(5282)
						temp->next = _this->head;
						HX_STACK_LINE(5282)
						_this->head = temp;
						HX_STACK_LINE(5282)
						_this->modified = true;
						HX_STACK_LINE(5282)
						(_this->length)++;
						HX_STACK_LINE(5282)
						s1;
					}
					HX_STACK_LINE(5282)
					if (((s1->body->cbSet != null()))){
						HX_STACK_LINE(5282)
						::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca1;		HX_STACK_VAR(_this,"_this");
						::zpp_nape::phys::ZPP_Interactor o = s1->body;		HX_STACK_VAR(o,"o");
						HX_STACK_LINE(5282)
						{
						}
						struct _Function_5_1{
							inline static ::zpp_nape::util::ZNPNode_ZPP_Interactor Block( ::zpp_nape::phys::ZPP_Interactor &o){
								HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5282);
								{
									HX_STACK_LINE(5282)
									::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
									HX_STACK_LINE(5282)
									{
										HX_STACK_LINE(5282)
										if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
											HX_STACK_LINE(5282)
											ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();
										}
										else{
											HX_STACK_LINE(5282)
											ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
											HX_STACK_LINE(5282)
											::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
											HX_STACK_LINE(5282)
											ret->next = null();
										}
										HX_STACK_LINE(5282)
										Dynamic();
									}
									HX_STACK_LINE(5282)
									ret->elt = o;
									HX_STACK_LINE(5282)
									return ret;
								}
								return null();
							}
						};
						HX_STACK_LINE(5282)
						::zpp_nape::util::ZNPNode_ZPP_Interactor temp = _Function_5_1::Block(o);		HX_STACK_VAR(temp,"temp");
						HX_STACK_LINE(5282)
						temp->next = _this->head;
						HX_STACK_LINE(5282)
						_this->head = temp;
						HX_STACK_LINE(5282)
						_this->modified = true;
						HX_STACK_LINE(5282)
						(_this->length)++;
						HX_STACK_LINE(5282)
						o;
					}
					HX_STACK_LINE(5282)
					if (((s2->cbSet != null()))){
						HX_STACK_LINE(5282)
						::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca2;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(5282)
						{
						}
						struct _Function_5_1{
							inline static ::zpp_nape::util::ZNPNode_ZPP_Interactor Block( ::zpp_nape::shape::ZPP_Shape &s2){
								HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5282);
								{
									HX_STACK_LINE(5282)
									::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
									HX_STACK_LINE(5282)
									{
										HX_STACK_LINE(5282)
										if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
											HX_STACK_LINE(5282)
											ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();
										}
										else{
											HX_STACK_LINE(5282)
											ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
											HX_STACK_LINE(5282)
											::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
											HX_STACK_LINE(5282)
											ret->next = null();
										}
										HX_STACK_LINE(5282)
										Dynamic();
									}
									HX_STACK_LINE(5282)
									ret->elt = s2;
									HX_STACK_LINE(5282)
									return ret;
								}
								return null();
							}
						};
						HX_STACK_LINE(5282)
						::zpp_nape::util::ZNPNode_ZPP_Interactor temp = _Function_5_1::Block(s2);		HX_STACK_VAR(temp,"temp");
						HX_STACK_LINE(5282)
						temp->next = _this->head;
						HX_STACK_LINE(5282)
						_this->head = temp;
						HX_STACK_LINE(5282)
						_this->modified = true;
						HX_STACK_LINE(5282)
						(_this->length)++;
						HX_STACK_LINE(5282)
						s2;
					}
					HX_STACK_LINE(5282)
					if (((s2->body->cbSet != null()))){
						HX_STACK_LINE(5282)
						::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca2;		HX_STACK_VAR(_this,"_this");
						::zpp_nape::phys::ZPP_Interactor o = s2->body;		HX_STACK_VAR(o,"o");
						HX_STACK_LINE(5282)
						{
						}
						struct _Function_5_1{
							inline static ::zpp_nape::util::ZNPNode_ZPP_Interactor Block( ::zpp_nape::phys::ZPP_Interactor &o){
								HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5282);
								{
									HX_STACK_LINE(5282)
									::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
									HX_STACK_LINE(5282)
									{
										HX_STACK_LINE(5282)
										if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
											HX_STACK_LINE(5282)
											ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();
										}
										else{
											HX_STACK_LINE(5282)
											ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
											HX_STACK_LINE(5282)
											::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
											HX_STACK_LINE(5282)
											ret->next = null();
										}
										HX_STACK_LINE(5282)
										Dynamic();
									}
									HX_STACK_LINE(5282)
									ret->elt = o;
									HX_STACK_LINE(5282)
									return ret;
								}
								return null();
							}
						};
						HX_STACK_LINE(5282)
						::zpp_nape::util::ZNPNode_ZPP_Interactor temp = _Function_5_1::Block(o);		HX_STACK_VAR(temp,"temp");
						HX_STACK_LINE(5282)
						temp->next = _this->head;
						HX_STACK_LINE(5282)
						_this->head = temp;
						HX_STACK_LINE(5282)
						_this->modified = true;
						HX_STACK_LINE(5282)
						(_this->length)++;
						HX_STACK_LINE(5282)
						o;
					}
					HX_STACK_LINE(5282)
					::zpp_nape::phys::ZPP_Compound c1 = s1->body->compound;		HX_STACK_VAR(c1,"c1");
					HX_STACK_LINE(5282)
					::zpp_nape::phys::ZPP_Compound c2 = s2->body->compound;		HX_STACK_VAR(c2,"c2");
					HX_STACK_LINE(5282)
					while(((c1 != c2))){
						HX_STACK_LINE(5282)
						int d1 = (  (((c1 == null()))) ? int((int)0) : int(c1->depth) );		HX_STACK_VAR(d1,"d1");
						HX_STACK_LINE(5282)
						int d2 = (  (((c2 == null()))) ? int((int)0) : int(c2->depth) );		HX_STACK_VAR(d2,"d2");
						HX_STACK_LINE(5282)
						if (((d1 < d2))){
							HX_STACK_LINE(5282)
							if (((c2->cbSet != null()))){
								HX_STACK_LINE(5282)
								::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca2;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(5282)
								{
								}
								struct _Function_7_1{
									inline static ::zpp_nape::util::ZNPNode_ZPP_Interactor Block( ::zpp_nape::phys::ZPP_Compound &c2){
										HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5282);
										{
											HX_STACK_LINE(5282)
											::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
											HX_STACK_LINE(5282)
											{
												HX_STACK_LINE(5282)
												if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
													HX_STACK_LINE(5282)
													ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();
												}
												else{
													HX_STACK_LINE(5282)
													ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
													HX_STACK_LINE(5282)
													::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
													HX_STACK_LINE(5282)
													ret->next = null();
												}
												HX_STACK_LINE(5282)
												Dynamic();
											}
											HX_STACK_LINE(5282)
											ret->elt = c2;
											HX_STACK_LINE(5282)
											return ret;
										}
										return null();
									}
								};
								HX_STACK_LINE(5282)
								::zpp_nape::util::ZNPNode_ZPP_Interactor temp = _Function_7_1::Block(c2);		HX_STACK_VAR(temp,"temp");
								HX_STACK_LINE(5282)
								temp->next = _this->head;
								HX_STACK_LINE(5282)
								_this->head = temp;
								HX_STACK_LINE(5282)
								_this->modified = true;
								HX_STACK_LINE(5282)
								(_this->length)++;
								HX_STACK_LINE(5282)
								c2;
							}
							HX_STACK_LINE(5282)
							c2 = c2->compound;
						}
						else{
							HX_STACK_LINE(5282)
							if (((c1->cbSet != null()))){
								HX_STACK_LINE(5282)
								::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca1;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(5282)
								{
								}
								struct _Function_7_1{
									inline static ::zpp_nape::util::ZNPNode_ZPP_Interactor Block( ::zpp_nape::phys::ZPP_Compound &c1){
										HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5282);
										{
											HX_STACK_LINE(5282)
											::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
											HX_STACK_LINE(5282)
											{
												HX_STACK_LINE(5282)
												if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
													HX_STACK_LINE(5282)
													ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();
												}
												else{
													HX_STACK_LINE(5282)
													ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
													HX_STACK_LINE(5282)
													::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
													HX_STACK_LINE(5282)
													ret->next = null();
												}
												HX_STACK_LINE(5282)
												Dynamic();
											}
											HX_STACK_LINE(5282)
											ret->elt = c1;
											HX_STACK_LINE(5282)
											return ret;
										}
										return null();
									}
								};
								HX_STACK_LINE(5282)
								::zpp_nape::util::ZNPNode_ZPP_Interactor temp = _Function_7_1::Block(c1);		HX_STACK_VAR(temp,"temp");
								HX_STACK_LINE(5282)
								temp->next = _this->head;
								HX_STACK_LINE(5282)
								_this->head = temp;
								HX_STACK_LINE(5282)
								_this->modified = true;
								HX_STACK_LINE(5282)
								(_this->length)++;
								HX_STACK_LINE(5282)
								c1;
							}
							HX_STACK_LINE(5282)
							c1 = c1->compound;
						}
					}
				}
				HX_STACK_LINE(5283)
				{
					HX_STACK_LINE(5284)
					::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite = this->mrca1->head;		HX_STACK_VAR(cx_ite,"cx_ite");
					HX_STACK_LINE(5285)
					while(((cx_ite != null()))){
						HX_STACK_LINE(5286)
						::zpp_nape::phys::ZPP_Interactor i1 = cx_ite->elt;		HX_STACK_VAR(i1,"i1");
						HX_STACK_LINE(5287)
						{
							HX_STACK_LINE(5289)
							::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite1 = this->mrca2->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
							HX_STACK_LINE(5290)
							while(((cx_ite1 != null()))){
								HX_STACK_LINE(5291)
								::zpp_nape::phys::ZPP_Interactor i2 = cx_ite1->elt;		HX_STACK_VAR(i2,"i2");
								HX_STACK_LINE(5292)
								{
									HX_STACK_LINE(5293)
									::zpp_nape::callbacks::ZPP_CbSet cb1 = i1->cbSet;		HX_STACK_VAR(cb1,"cb1");
									HX_STACK_LINE(5294)
									::zpp_nape::callbacks::ZPP_CbSet cb2 = i2->cbSet;		HX_STACK_VAR(cb2,"cb2");
									HX_STACK_LINE(5295)
									{
									}
									struct _Function_8_1{
										inline static bool Block( ::zpp_nape::callbacks::ZPP_CbSet &cb1,::zpp_nape::callbacks::ZPP_CbSet &cb2){
											HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5303);
											{
												HX_STACK_LINE(5303)
												{
												}
												struct _Function_9_1{
													inline static ::zpp_nape::callbacks::ZPP_CbSetPair Block( ::zpp_nape::callbacks::ZPP_CbSet &cb1,::zpp_nape::callbacks::ZPP_CbSet &cb2){
														HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5303);
														{
															HX_STACK_LINE(5303)
															::zpp_nape::callbacks::ZPP_CbSetPair ret = null();		HX_STACK_VAR(ret,"ret");
															HX_STACK_LINE(5303)
															::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs = (  (((cb1->cbpairs->length < cb2->cbpairs->length))) ? ::zpp_nape::util::ZNPList_ZPP_CbSetPair(cb1->cbpairs) : ::zpp_nape::util::ZNPList_ZPP_CbSetPair(cb2->cbpairs) );		HX_STACK_VAR(pairs,"pairs");
															HX_STACK_LINE(5303)
															{
																HX_STACK_LINE(5303)
																::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite2 = pairs->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																HX_STACK_LINE(5303)
																while(((cx_ite2 != null()))){
																	HX_STACK_LINE(5303)
																	::zpp_nape::callbacks::ZPP_CbSetPair p = cx_ite2->elt;		HX_STACK_VAR(p,"p");
																	HX_STACK_LINE(5303)
																	if (((bool((bool((p->a == cb1)) && bool((p->b == cb2)))) || bool((bool((p->a == cb2)) && bool((p->b == cb1))))))){
																		HX_STACK_LINE(5303)
																		ret = p;
																		HX_STACK_LINE(5303)
																		break;
																	}
																	HX_STACK_LINE(5303)
																	cx_ite2 = cx_ite2->next;
																}
															}
															HX_STACK_LINE(5303)
															if (((ret == null()))){
																struct _Function_11_1{
																	inline static ::zpp_nape::callbacks::ZPP_CbSetPair Block( ::zpp_nape::callbacks::ZPP_CbSet &cb1,::zpp_nape::callbacks::ZPP_CbSet &cb2){
																		HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5303);
																		{
																			HX_STACK_LINE(5303)
																			::zpp_nape::callbacks::ZPP_CbSetPair ret1;		HX_STACK_VAR(ret1,"ret1");
																			HX_STACK_LINE(5303)
																			{
																				HX_STACK_LINE(5303)
																				if (((::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool == null()))){
																					HX_STACK_LINE(5303)
																					ret1 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__new();
																				}
																				else{
																					HX_STACK_LINE(5303)
																					ret1 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
																					HX_STACK_LINE(5303)
																					::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret1->next;
																					HX_STACK_LINE(5303)
																					ret1->next = null();
																				}
																				HX_STACK_LINE(5303)
																				ret1->zip_listeners = true;
																			}
																			HX_STACK_LINE(5303)
																			if ((::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(cb1,cb2))){
																				HX_STACK_LINE(5303)
																				ret1->a = cb1;
																				HX_STACK_LINE(5303)
																				ret1->b = cb2;
																			}
																			else{
																				HX_STACK_LINE(5303)
																				ret1->a = cb2;
																				HX_STACK_LINE(5303)
																				ret1->b = cb1;
																			}
																			HX_STACK_LINE(5303)
																			return ret1;
																		}
																		return null();
																	}
																};
																HX_STACK_LINE(5303)
																ret = _Function_11_1::Block(cb1,cb2);
																HX_STACK_LINE(5303)
																cb1->cbpairs->add(ret);
																HX_STACK_LINE(5303)
																if (((cb2 != cb1))){
																	HX_STACK_LINE(5303)
																	cb2->cbpairs->add(ret);
																}
															}
															HX_STACK_LINE(5303)
															if ((ret->zip_listeners)){
																HX_STACK_LINE(5303)
																ret->zip_listeners = false;
																HX_STACK_LINE(5303)
																ret->__validate();
															}
															HX_STACK_LINE(5303)
															return ret;
														}
														return null();
													}
												};
												HX_STACK_LINE(5303)
												return ((_Function_9_1::Block(cb1,cb2))->listeners->head == null());
											}
											return null();
										}
									};
									HX_STACK_LINE(5303)
									if ((_Function_8_1::Block(cb1,cb2))){
										HX_STACK_LINE(5304)
										cx_ite1 = cx_ite1->next;
										HX_STACK_LINE(5305)
										continue;
									}
									HX_STACK_LINE(5307)
									::zpp_nape::space::ZPP_CallbackSet callbackset = ::zpp_nape::phys::ZPP_Interactor_obj::get(i1,i2);		HX_STACK_VAR(callbackset,"callbackset");
									HX_STACK_LINE(5308)
									if (((bool(begcb) || bool(arb->intchange)))){
										HX_STACK_LINE(5309)
										if (((callbackset == null()))){
											HX_STACK_LINE(5310)
											callbackset = ::zpp_nape::space::ZPP_CallbackSet_obj::get(i1,i2);
											HX_STACK_LINE(5311)
											this->add_callbackset(callbackset);
										}
										HX_STACK_LINE(5313)
										{
											HX_STACK_LINE(5313)
											int event = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_BEGIN;		HX_STACK_VAR(event,"event");
											HX_STACK_LINE(5313)
											{
												HX_STACK_LINE(5313)
												{
												}
												HX_STACK_LINE(5313)
												{
													struct _Function_12_1{
														inline static ::zpp_nape::callbacks::ZPP_CbSetPair Block( ::zpp_nape::callbacks::ZPP_CbSet &cb1,::zpp_nape::callbacks::ZPP_CbSet &cb2){
															HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5313);
															{
																HX_STACK_LINE(5313)
																::zpp_nape::callbacks::ZPP_CbSetPair ret = null();		HX_STACK_VAR(ret,"ret");
																HX_STACK_LINE(5313)
																::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs = (  (((cb1->cbpairs->length < cb2->cbpairs->length))) ? ::zpp_nape::util::ZNPList_ZPP_CbSetPair(cb1->cbpairs) : ::zpp_nape::util::ZNPList_ZPP_CbSetPair(cb2->cbpairs) );		HX_STACK_VAR(pairs,"pairs");
																HX_STACK_LINE(5313)
																{
																	HX_STACK_LINE(5313)
																	::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite2 = pairs->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																	HX_STACK_LINE(5313)
																	while(((cx_ite2 != null()))){
																		HX_STACK_LINE(5313)
																		::zpp_nape::callbacks::ZPP_CbSetPair p = cx_ite2->elt;		HX_STACK_VAR(p,"p");
																		HX_STACK_LINE(5313)
																		if (((bool((bool((p->a == cb1)) && bool((p->b == cb2)))) || bool((bool((p->a == cb2)) && bool((p->b == cb1))))))){
																			HX_STACK_LINE(5313)
																			ret = p;
																			HX_STACK_LINE(5313)
																			break;
																		}
																		HX_STACK_LINE(5313)
																		cx_ite2 = cx_ite2->next;
																	}
																}
																HX_STACK_LINE(5313)
																if (((ret == null()))){
																	struct _Function_14_1{
																		inline static ::zpp_nape::callbacks::ZPP_CbSetPair Block( ::zpp_nape::callbacks::ZPP_CbSet &cb1,::zpp_nape::callbacks::ZPP_CbSet &cb2){
																			HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5313);
																			{
																				HX_STACK_LINE(5313)
																				::zpp_nape::callbacks::ZPP_CbSetPair ret1;		HX_STACK_VAR(ret1,"ret1");
																				HX_STACK_LINE(5313)
																				{
																					HX_STACK_LINE(5313)
																					if (((::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool == null()))){
																						HX_STACK_LINE(5313)
																						ret1 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__new();
																					}
																					else{
																						HX_STACK_LINE(5313)
																						ret1 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
																						HX_STACK_LINE(5313)
																						::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret1->next;
																						HX_STACK_LINE(5313)
																						ret1->next = null();
																					}
																					HX_STACK_LINE(5313)
																					ret1->zip_listeners = true;
																				}
																				HX_STACK_LINE(5313)
																				if ((::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(cb1,cb2))){
																					HX_STACK_LINE(5313)
																					ret1->a = cb1;
																					HX_STACK_LINE(5313)
																					ret1->b = cb2;
																				}
																				else{
																					HX_STACK_LINE(5313)
																					ret1->a = cb2;
																					HX_STACK_LINE(5313)
																					ret1->b = cb1;
																				}
																				HX_STACK_LINE(5313)
																				return ret1;
																			}
																			return null();
																		}
																	};
																	HX_STACK_LINE(5313)
																	ret = _Function_14_1::Block(cb1,cb2);
																	HX_STACK_LINE(5313)
																	cb1->cbpairs->add(ret);
																	HX_STACK_LINE(5313)
																	if (((cb2 != cb1))){
																		HX_STACK_LINE(5313)
																		cb2->cbpairs->add(ret);
																	}
																}
																HX_STACK_LINE(5313)
																if ((ret->zip_listeners)){
																	HX_STACK_LINE(5313)
																	ret->zip_listeners = false;
																	HX_STACK_LINE(5313)
																	ret->__validate();
																}
																HX_STACK_LINE(5313)
																return ret;
															}
															return null();
														}
													};
													HX_STACK_LINE(5313)
													::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite2 = (_Function_12_1::Block(cb1,cb2))->listeners->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
													HX_STACK_LINE(5313)
													while(((cx_ite2 != null()))){
														HX_STACK_LINE(5313)
														::zpp_nape::callbacks::ZPP_InteractionListener x = cx_ite2->elt;		HX_STACK_VAR(x,"x");
														HX_STACK_LINE(5313)
														if (((x->event == event))){
															HX_STACK_LINE(5313)
															if (((bool((((int(x->itype) & int(arb->type))) != (int)0)) && bool(callbackset->empty_arb(x->itype))))){
																HX_STACK_LINE(5313)
																::zpp_nape::callbacks::ZPP_Callback cb = _g->push_callback(x);		HX_STACK_VAR(cb,"cb");
																HX_STACK_LINE(5313)
																cb->event = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_BEGIN;
																HX_STACK_LINE(5313)
																{
																	HX_STACK_LINE(5313)
																	::zpp_nape::phys::ZPP_Interactor o1 = callbackset->int1;		HX_STACK_VAR(o1,"o1");
																	HX_STACK_LINE(5313)
																	::zpp_nape::phys::ZPP_Interactor o2 = callbackset->int2;		HX_STACK_VAR(o2,"o2");
																	struct _Function_16_1{
																		inline static bool Block( ::zpp_nape::callbacks::ZPP_InteractionListener &x,::zpp_nape::phys::ZPP_Interactor &o1){
																			HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5313);
																			{
																				HX_STACK_LINE(5313)
																				::zpp_nape::callbacks::ZPP_OptionType _this = x->options1;		HX_STACK_VAR(_this,"_this");
																				::zpp_nape::util::ZNPList_ZPP_CbType xs = o1->cbTypes;		HX_STACK_VAR(xs,"xs");
																				HX_STACK_LINE(5313)
																				return (bool(_this->nonemptyintersection(xs,_this->includes)) && bool(!(_this->nonemptyintersection(xs,_this->excludes))));
																			}
																			return null();
																		}
																	};
																	struct _Function_16_2{
																		inline static bool Block( ::zpp_nape::callbacks::ZPP_InteractionListener &x,::zpp_nape::phys::ZPP_Interactor &o2){
																			HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5313);
																			{
																				HX_STACK_LINE(5313)
																				::zpp_nape::callbacks::ZPP_OptionType _this = x->options2;		HX_STACK_VAR(_this,"_this");
																				::zpp_nape::util::ZNPList_ZPP_CbType xs = o2->cbTypes;		HX_STACK_VAR(xs,"xs");
																				HX_STACK_LINE(5313)
																				return (bool(_this->nonemptyintersection(xs,_this->includes)) && bool(!(_this->nonemptyintersection(xs,_this->excludes))));
																			}
																			return null();
																		}
																	};
																	HX_STACK_LINE(5313)
																	if (((bool(_Function_16_1::Block(x,o1)) && bool(_Function_16_2::Block(x,o2))))){
																		HX_STACK_LINE(5313)
																		cb->int1 = o1;
																		HX_STACK_LINE(5313)
																		cb->int2 = o2;
																	}
																	else{
																		HX_STACK_LINE(5313)
																		cb->int1 = o2;
																		HX_STACK_LINE(5313)
																		cb->int2 = o1;
																	}
																}
																HX_STACK_LINE(5313)
																cb->set = callbackset;
															}
														}
														HX_STACK_LINE(5313)
														cx_ite2 = cx_ite2->next;
													}
												}
											}
										}
										struct _Function_9_1{
											inline static bool Block( ::zpp_nape::space::ZPP_CallbackSet &callbackset,::zpp_nape::dynamics::ZPP_Arbiter &arb){
												HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5321);
												{
													HX_STACK_LINE(5321)
													{
													}
													HX_STACK_LINE(5321)
													bool ret;		HX_STACK_VAR(ret,"ret");
													HX_STACK_LINE(5321)
													{
														HX_STACK_LINE(5321)
														ret = false;
														HX_STACK_LINE(5321)
														{
															HX_STACK_LINE(5321)
															::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite2 = callbackset->arbiters->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
															HX_STACK_LINE(5321)
															while(((cx_ite2 != null()))){
																HX_STACK_LINE(5321)
																::zpp_nape::dynamics::ZPP_Arbiter npite = cx_ite2->elt;		HX_STACK_VAR(npite,"npite");
																HX_STACK_LINE(5321)
																if (((npite == arb))){
																	HX_STACK_LINE(5321)
																	ret = true;
																	HX_STACK_LINE(5321)
																	break;
																}
																HX_STACK_LINE(5321)
																cx_ite2 = cx_ite2->next;
															}
														}
													}
													HX_STACK_LINE(5321)
													return ret;
												}
												return null();
											}
										};
										struct _Function_9_2{
											inline static bool Block( ::zpp_nape::space::ZPP_CallbackSet &callbackset,::zpp_nape::dynamics::ZPP_Arbiter &arb){
												HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5321);
												{
													HX_STACK_LINE(5321)
													{
														HX_STACK_LINE(5321)
														::zpp_nape::util::ZNPList_ZPP_Arbiter _this = callbackset->arbiters;		HX_STACK_VAR(_this,"_this");
														HX_STACK_LINE(5321)
														{
														}
														struct _Function_11_1{
															inline static ::zpp_nape::util::ZNPNode_ZPP_Arbiter Block( ::zpp_nape::dynamics::ZPP_Arbiter &arb){
																HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5321);
																{
																	HX_STACK_LINE(5321)
																	::zpp_nape::util::ZNPNode_ZPP_Arbiter ret;		HX_STACK_VAR(ret,"ret");
																	HX_STACK_LINE(5321)
																	{
																		HX_STACK_LINE(5321)
																		if (((::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool == null()))){
																			HX_STACK_LINE(5321)
																			ret = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__new();
																		}
																		else{
																			HX_STACK_LINE(5321)
																			ret = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
																			HX_STACK_LINE(5321)
																			::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret->next;
																			HX_STACK_LINE(5321)
																			ret->next = null();
																		}
																		HX_STACK_LINE(5321)
																		Dynamic();
																	}
																	HX_STACK_LINE(5321)
																	ret->elt = arb;
																	HX_STACK_LINE(5321)
																	return ret;
																}
																return null();
															}
														};
														HX_STACK_LINE(5321)
														::zpp_nape::util::ZNPNode_ZPP_Arbiter temp = _Function_11_1::Block(arb);		HX_STACK_VAR(temp,"temp");
														HX_STACK_LINE(5321)
														temp->next = _this->head;
														HX_STACK_LINE(5321)
														_this->head = temp;
														HX_STACK_LINE(5321)
														_this->modified = true;
														HX_STACK_LINE(5321)
														(_this->length)++;
														HX_STACK_LINE(5321)
														arb;
													}
													HX_STACK_LINE(5321)
													return true;
												}
												return null();
											}
										};
										HX_STACK_LINE(5321)
										if (((  ((!(_Function_9_1::Block(callbackset,arb)))) ? bool(_Function_9_2::Block(callbackset,arb)) : bool(false) ))){
											HX_STACK_LINE(5321)
											(arb->present)++;
										}
									}
									else{
										HX_STACK_LINE(5324)
										(arb->present)--;
										HX_STACK_LINE(5325)
										{
										}
										HX_STACK_LINE(5333)
										{
										}
										HX_STACK_LINE(5341)
										callbackset->remove_arb(arb);
										HX_STACK_LINE(5342)
										{
											HX_STACK_LINE(5342)
											int event = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_END;		HX_STACK_VAR(event,"event");
											HX_STACK_LINE(5342)
											{
												HX_STACK_LINE(5342)
												{
												}
												HX_STACK_LINE(5342)
												{
													struct _Function_12_1{
														inline static ::zpp_nape::callbacks::ZPP_CbSetPair Block( ::zpp_nape::callbacks::ZPP_CbSet &cb1,::zpp_nape::callbacks::ZPP_CbSet &cb2){
															HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5342);
															{
																HX_STACK_LINE(5342)
																::zpp_nape::callbacks::ZPP_CbSetPair ret = null();		HX_STACK_VAR(ret,"ret");
																HX_STACK_LINE(5342)
																::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs = (  (((cb1->cbpairs->length < cb2->cbpairs->length))) ? ::zpp_nape::util::ZNPList_ZPP_CbSetPair(cb1->cbpairs) : ::zpp_nape::util::ZNPList_ZPP_CbSetPair(cb2->cbpairs) );		HX_STACK_VAR(pairs,"pairs");
																HX_STACK_LINE(5342)
																{
																	HX_STACK_LINE(5342)
																	::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite2 = pairs->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																	HX_STACK_LINE(5342)
																	while(((cx_ite2 != null()))){
																		HX_STACK_LINE(5342)
																		::zpp_nape::callbacks::ZPP_CbSetPair p = cx_ite2->elt;		HX_STACK_VAR(p,"p");
																		HX_STACK_LINE(5342)
																		if (((bool((bool((p->a == cb1)) && bool((p->b == cb2)))) || bool((bool((p->a == cb2)) && bool((p->b == cb1))))))){
																			HX_STACK_LINE(5342)
																			ret = p;
																			HX_STACK_LINE(5342)
																			break;
																		}
																		HX_STACK_LINE(5342)
																		cx_ite2 = cx_ite2->next;
																	}
																}
																HX_STACK_LINE(5342)
																if (((ret == null()))){
																	struct _Function_14_1{
																		inline static ::zpp_nape::callbacks::ZPP_CbSetPair Block( ::zpp_nape::callbacks::ZPP_CbSet &cb1,::zpp_nape::callbacks::ZPP_CbSet &cb2){
																			HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5342);
																			{
																				HX_STACK_LINE(5342)
																				::zpp_nape::callbacks::ZPP_CbSetPair ret1;		HX_STACK_VAR(ret1,"ret1");
																				HX_STACK_LINE(5342)
																				{
																					HX_STACK_LINE(5342)
																					if (((::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool == null()))){
																						HX_STACK_LINE(5342)
																						ret1 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__new();
																					}
																					else{
																						HX_STACK_LINE(5342)
																						ret1 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
																						HX_STACK_LINE(5342)
																						::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret1->next;
																						HX_STACK_LINE(5342)
																						ret1->next = null();
																					}
																					HX_STACK_LINE(5342)
																					ret1->zip_listeners = true;
																				}
																				HX_STACK_LINE(5342)
																				if ((::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(cb1,cb2))){
																					HX_STACK_LINE(5342)
																					ret1->a = cb1;
																					HX_STACK_LINE(5342)
																					ret1->b = cb2;
																				}
																				else{
																					HX_STACK_LINE(5342)
																					ret1->a = cb2;
																					HX_STACK_LINE(5342)
																					ret1->b = cb1;
																				}
																				HX_STACK_LINE(5342)
																				return ret1;
																			}
																			return null();
																		}
																	};
																	HX_STACK_LINE(5342)
																	ret = _Function_14_1::Block(cb1,cb2);
																	HX_STACK_LINE(5342)
																	cb1->cbpairs->add(ret);
																	HX_STACK_LINE(5342)
																	if (((cb2 != cb1))){
																		HX_STACK_LINE(5342)
																		cb2->cbpairs->add(ret);
																	}
																}
																HX_STACK_LINE(5342)
																if ((ret->zip_listeners)){
																	HX_STACK_LINE(5342)
																	ret->zip_listeners = false;
																	HX_STACK_LINE(5342)
																	ret->__validate();
																}
																HX_STACK_LINE(5342)
																return ret;
															}
															return null();
														}
													};
													HX_STACK_LINE(5342)
													::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite2 = (_Function_12_1::Block(cb1,cb2))->listeners->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
													HX_STACK_LINE(5342)
													while(((cx_ite2 != null()))){
														HX_STACK_LINE(5342)
														::zpp_nape::callbacks::ZPP_InteractionListener x = cx_ite2->elt;		HX_STACK_VAR(x,"x");
														HX_STACK_LINE(5342)
														if (((x->event == event))){
															HX_STACK_LINE(5342)
															if (((bool((((int(x->itype) & int(arb->type))) != (int)0)) && bool(callbackset->empty_arb(x->itype))))){
																HX_STACK_LINE(5342)
																::zpp_nape::callbacks::ZPP_Callback cb = _g->push_callback(x);		HX_STACK_VAR(cb,"cb");
																HX_STACK_LINE(5342)
																cb->event = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_END;
																HX_STACK_LINE(5342)
																{
																	HX_STACK_LINE(5342)
																	::zpp_nape::phys::ZPP_Interactor o1 = callbackset->int1;		HX_STACK_VAR(o1,"o1");
																	HX_STACK_LINE(5342)
																	::zpp_nape::phys::ZPP_Interactor o2 = callbackset->int2;		HX_STACK_VAR(o2,"o2");
																	struct _Function_16_1{
																		inline static bool Block( ::zpp_nape::callbacks::ZPP_InteractionListener &x,::zpp_nape::phys::ZPP_Interactor &o1){
																			HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5342);
																			{
																				HX_STACK_LINE(5342)
																				::zpp_nape::callbacks::ZPP_OptionType _this = x->options1;		HX_STACK_VAR(_this,"_this");
																				::zpp_nape::util::ZNPList_ZPP_CbType xs = o1->cbTypes;		HX_STACK_VAR(xs,"xs");
																				HX_STACK_LINE(5342)
																				return (bool(_this->nonemptyintersection(xs,_this->includes)) && bool(!(_this->nonemptyintersection(xs,_this->excludes))));
																			}
																			return null();
																		}
																	};
																	struct _Function_16_2{
																		inline static bool Block( ::zpp_nape::callbacks::ZPP_InteractionListener &x,::zpp_nape::phys::ZPP_Interactor &o2){
																			HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5342);
																			{
																				HX_STACK_LINE(5342)
																				::zpp_nape::callbacks::ZPP_OptionType _this = x->options2;		HX_STACK_VAR(_this,"_this");
																				::zpp_nape::util::ZNPList_ZPP_CbType xs = o2->cbTypes;		HX_STACK_VAR(xs,"xs");
																				HX_STACK_LINE(5342)
																				return (bool(_this->nonemptyintersection(xs,_this->includes)) && bool(!(_this->nonemptyintersection(xs,_this->excludes))));
																			}
																			return null();
																		}
																	};
																	HX_STACK_LINE(5342)
																	if (((bool(_Function_16_1::Block(x,o1)) && bool(_Function_16_2::Block(x,o2))))){
																		HX_STACK_LINE(5342)
																		cb->int1 = o1;
																		HX_STACK_LINE(5342)
																		cb->int2 = o2;
																	}
																	else{
																		HX_STACK_LINE(5342)
																		cb->int1 = o2;
																		HX_STACK_LINE(5342)
																		cb->int2 = o1;
																	}
																}
																HX_STACK_LINE(5342)
																cb->set = callbackset;
															}
														}
														HX_STACK_LINE(5342)
														cx_ite2 = cx_ite2->next;
													}
												}
											}
										}
										HX_STACK_LINE(5350)
										if (((callbackset->arbiters->head == null()))){
											HX_STACK_LINE(5350)
											this->remove_callbackset(callbackset);
										}
									}
								}
								HX_STACK_LINE(5355)
								cx_ite1 = cx_ite1->next;
							}
						}
						HX_STACK_LINE(5359)
						cx_ite = cx_ite->next;
					}
				}
			}
			HX_STACK_LINE(5363)
			arb->fresh = false;
			HX_STACK_LINE(5364)
			arb->intchange = false;
		}
		HX_STACK_LINE(5366)
		if (((bool(arb->cleared) || bool(((arb->up_stamp + ((  (((arb->type == ::zpp_nape::dynamics::ZPP_Arbiter_obj::COL))) ? int(::nape::Config_obj::arbiterExpirationDelay) : int((int)0) ))) < this->stamp))))){
			HX_STACK_LINE(5367)
			if (((arb->type == ::zpp_nape::dynamics::ZPP_Arbiter_obj::SENSOR))){
				HX_STACK_LINE(5367)
				::zpp_nape::dynamics::ZPP_SensorArbiter _this = arb->sensorarb;		HX_STACK_VAR(_this,"_this");
				HX_STACK_LINE(5367)
				{
					HX_STACK_LINE(5367)
					{
					}
					HX_STACK_LINE(5367)
					{
					}
					HX_STACK_LINE(5367)
					{
					}
					HX_STACK_LINE(5367)
					{
					}
					HX_STACK_LINE(5367)
					if ((!(_this->cleared))){
						HX_STACK_LINE(5367)
						{
							HX_STACK_LINE(5367)
							::zpp_nape::util::ZNPList_ZPP_Arbiter _this1 = _this->b1->arbiters;		HX_STACK_VAR(_this1,"_this1");
							HX_STACK_LINE(5367)
							{
							}
							HX_STACK_LINE(5367)
							{
								HX_STACK_LINE(5367)
								{
								}
								HX_STACK_LINE(5367)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
								HX_STACK_LINE(5367)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this1->head;		HX_STACK_VAR(cur,"cur");
								HX_STACK_LINE(5367)
								bool ret = false;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(5367)
								while(((cur != null()))){
									HX_STACK_LINE(5367)
									if (((cur->elt == _this))){
										HX_STACK_LINE(5367)
										{
											HX_STACK_LINE(5367)
											{
											}
											HX_STACK_LINE(5367)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
											HX_STACK_LINE(5367)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(5367)
											if (((pre == null()))){
												HX_STACK_LINE(5367)
												old = _this1->head;
												HX_STACK_LINE(5367)
												ret1 = old->next;
												HX_STACK_LINE(5367)
												_this1->head = ret1;
												HX_STACK_LINE(5367)
												if (((_this1->head == null()))){
													HX_STACK_LINE(5367)
													_this1->pushmod = true;
												}
											}
											else{
												HX_STACK_LINE(5367)
												old = pre->next;
												HX_STACK_LINE(5367)
												ret1 = old->next;
												HX_STACK_LINE(5367)
												pre->next = ret1;
												HX_STACK_LINE(5367)
												if (((ret1 == null()))){
													HX_STACK_LINE(5367)
													_this1->pushmod = true;
												}
											}
											HX_STACK_LINE(5367)
											{
											}
											HX_STACK_LINE(5367)
											{
												HX_STACK_LINE(5367)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
												HX_STACK_LINE(5367)
												{
												}
												HX_STACK_LINE(5367)
												o->elt = null();
												HX_STACK_LINE(5367)
												o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
												HX_STACK_LINE(5367)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
											}
											HX_STACK_LINE(5367)
											_this1->modified = true;
											HX_STACK_LINE(5367)
											(_this1->length)--;
											HX_STACK_LINE(5367)
											_this1->pushmod = true;
											HX_STACK_LINE(5367)
											ret1;
										}
										HX_STACK_LINE(5367)
										ret = true;
										HX_STACK_LINE(5367)
										break;
									}
									HX_STACK_LINE(5367)
									pre = cur;
									HX_STACK_LINE(5367)
									cur = cur->next;
								}
								HX_STACK_LINE(5367)
								ret;
							}
						}
						HX_STACK_LINE(5367)
						{
							HX_STACK_LINE(5367)
							::zpp_nape::util::ZNPList_ZPP_Arbiter _this1 = _this->b2->arbiters;		HX_STACK_VAR(_this1,"_this1");
							HX_STACK_LINE(5367)
							{
							}
							HX_STACK_LINE(5367)
							{
								HX_STACK_LINE(5367)
								{
								}
								HX_STACK_LINE(5367)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
								HX_STACK_LINE(5367)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this1->head;		HX_STACK_VAR(cur,"cur");
								HX_STACK_LINE(5367)
								bool ret = false;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(5367)
								while(((cur != null()))){
									HX_STACK_LINE(5367)
									if (((cur->elt == _this))){
										HX_STACK_LINE(5367)
										{
											HX_STACK_LINE(5367)
											{
											}
											HX_STACK_LINE(5367)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
											HX_STACK_LINE(5367)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(5367)
											if (((pre == null()))){
												HX_STACK_LINE(5367)
												old = _this1->head;
												HX_STACK_LINE(5367)
												ret1 = old->next;
												HX_STACK_LINE(5367)
												_this1->head = ret1;
												HX_STACK_LINE(5367)
												if (((_this1->head == null()))){
													HX_STACK_LINE(5367)
													_this1->pushmod = true;
												}
											}
											else{
												HX_STACK_LINE(5367)
												old = pre->next;
												HX_STACK_LINE(5367)
												ret1 = old->next;
												HX_STACK_LINE(5367)
												pre->next = ret1;
												HX_STACK_LINE(5367)
												if (((ret1 == null()))){
													HX_STACK_LINE(5367)
													_this1->pushmod = true;
												}
											}
											HX_STACK_LINE(5367)
											{
											}
											HX_STACK_LINE(5367)
											{
												HX_STACK_LINE(5367)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
												HX_STACK_LINE(5367)
												{
												}
												HX_STACK_LINE(5367)
												o->elt = null();
												HX_STACK_LINE(5367)
												o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
												HX_STACK_LINE(5367)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
											}
											HX_STACK_LINE(5367)
											_this1->modified = true;
											HX_STACK_LINE(5367)
											(_this1->length)--;
											HX_STACK_LINE(5367)
											_this1->pushmod = true;
											HX_STACK_LINE(5367)
											ret1;
										}
										HX_STACK_LINE(5367)
										ret = true;
										HX_STACK_LINE(5367)
										break;
									}
									HX_STACK_LINE(5367)
									pre = cur;
									HX_STACK_LINE(5367)
									cur = cur->next;
								}
								HX_STACK_LINE(5367)
								ret;
							}
						}
						HX_STACK_LINE(5367)
						if (((_this->pair != null()))){
							HX_STACK_LINE(5367)
							_this->pair->arb = null();
							HX_STACK_LINE(5367)
							_this->pair = null();
						}
					}
					HX_STACK_LINE(5367)
					_this->b1 = _this->b2 = null();
					HX_STACK_LINE(5367)
					_this->active = false;
					HX_STACK_LINE(5367)
					_this->intchange = false;
				}
				HX_STACK_LINE(5367)
				{
					HX_STACK_LINE(5367)
					::zpp_nape::dynamics::ZPP_SensorArbiter o = _this;		HX_STACK_VAR(o,"o");
					HX_STACK_LINE(5367)
					{
					}
					HX_STACK_LINE(5367)
					o->next = ::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool;
					HX_STACK_LINE(5367)
					::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool = o;
				}
			}
			else{
				HX_STACK_LINE(5368)
				if (((arb->type == ::zpp_nape::dynamics::ZPP_Arbiter_obj::FLUID))){
					HX_STACK_LINE(5368)
					::zpp_nape::dynamics::ZPP_FluidArbiter _this = arb->fluidarb;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(5368)
					{
						HX_STACK_LINE(5368)
						{
						}
						HX_STACK_LINE(5368)
						{
						}
						HX_STACK_LINE(5368)
						{
						}
						HX_STACK_LINE(5368)
						{
						}
						HX_STACK_LINE(5368)
						if ((!(_this->cleared))){
							HX_STACK_LINE(5368)
							{
								HX_STACK_LINE(5368)
								::zpp_nape::util::ZNPList_ZPP_Arbiter _this1 = _this->b1->arbiters;		HX_STACK_VAR(_this1,"_this1");
								HX_STACK_LINE(5368)
								{
								}
								HX_STACK_LINE(5368)
								{
									HX_STACK_LINE(5368)
									{
									}
									HX_STACK_LINE(5368)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
									HX_STACK_LINE(5368)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this1->head;		HX_STACK_VAR(cur,"cur");
									HX_STACK_LINE(5368)
									bool ret = false;		HX_STACK_VAR(ret,"ret");
									HX_STACK_LINE(5368)
									while(((cur != null()))){
										HX_STACK_LINE(5368)
										if (((cur->elt == _this))){
											HX_STACK_LINE(5368)
											{
												HX_STACK_LINE(5368)
												{
												}
												HX_STACK_LINE(5368)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
												HX_STACK_LINE(5368)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(5368)
												if (((pre == null()))){
													HX_STACK_LINE(5368)
													old = _this1->head;
													HX_STACK_LINE(5368)
													ret1 = old->next;
													HX_STACK_LINE(5368)
													_this1->head = ret1;
													HX_STACK_LINE(5368)
													if (((_this1->head == null()))){
														HX_STACK_LINE(5368)
														_this1->pushmod = true;
													}
												}
												else{
													HX_STACK_LINE(5368)
													old = pre->next;
													HX_STACK_LINE(5368)
													ret1 = old->next;
													HX_STACK_LINE(5368)
													pre->next = ret1;
													HX_STACK_LINE(5368)
													if (((ret1 == null()))){
														HX_STACK_LINE(5368)
														_this1->pushmod = true;
													}
												}
												HX_STACK_LINE(5368)
												{
												}
												HX_STACK_LINE(5368)
												{
													HX_STACK_LINE(5368)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
													HX_STACK_LINE(5368)
													{
													}
													HX_STACK_LINE(5368)
													o->elt = null();
													HX_STACK_LINE(5368)
													o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
													HX_STACK_LINE(5368)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
												}
												HX_STACK_LINE(5368)
												_this1->modified = true;
												HX_STACK_LINE(5368)
												(_this1->length)--;
												HX_STACK_LINE(5368)
												_this1->pushmod = true;
												HX_STACK_LINE(5368)
												ret1;
											}
											HX_STACK_LINE(5368)
											ret = true;
											HX_STACK_LINE(5368)
											break;
										}
										HX_STACK_LINE(5368)
										pre = cur;
										HX_STACK_LINE(5368)
										cur = cur->next;
									}
									HX_STACK_LINE(5368)
									ret;
								}
							}
							HX_STACK_LINE(5368)
							{
								HX_STACK_LINE(5368)
								::zpp_nape::util::ZNPList_ZPP_Arbiter _this1 = _this->b2->arbiters;		HX_STACK_VAR(_this1,"_this1");
								HX_STACK_LINE(5368)
								{
								}
								HX_STACK_LINE(5368)
								{
									HX_STACK_LINE(5368)
									{
									}
									HX_STACK_LINE(5368)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
									HX_STACK_LINE(5368)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this1->head;		HX_STACK_VAR(cur,"cur");
									HX_STACK_LINE(5368)
									bool ret = false;		HX_STACK_VAR(ret,"ret");
									HX_STACK_LINE(5368)
									while(((cur != null()))){
										HX_STACK_LINE(5368)
										if (((cur->elt == _this))){
											HX_STACK_LINE(5368)
											{
												HX_STACK_LINE(5368)
												{
												}
												HX_STACK_LINE(5368)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
												HX_STACK_LINE(5368)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(5368)
												if (((pre == null()))){
													HX_STACK_LINE(5368)
													old = _this1->head;
													HX_STACK_LINE(5368)
													ret1 = old->next;
													HX_STACK_LINE(5368)
													_this1->head = ret1;
													HX_STACK_LINE(5368)
													if (((_this1->head == null()))){
														HX_STACK_LINE(5368)
														_this1->pushmod = true;
													}
												}
												else{
													HX_STACK_LINE(5368)
													old = pre->next;
													HX_STACK_LINE(5368)
													ret1 = old->next;
													HX_STACK_LINE(5368)
													pre->next = ret1;
													HX_STACK_LINE(5368)
													if (((ret1 == null()))){
														HX_STACK_LINE(5368)
														_this1->pushmod = true;
													}
												}
												HX_STACK_LINE(5368)
												{
												}
												HX_STACK_LINE(5368)
												{
													HX_STACK_LINE(5368)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
													HX_STACK_LINE(5368)
													{
													}
													HX_STACK_LINE(5368)
													o->elt = null();
													HX_STACK_LINE(5368)
													o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
													HX_STACK_LINE(5368)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
												}
												HX_STACK_LINE(5368)
												_this1->modified = true;
												HX_STACK_LINE(5368)
												(_this1->length)--;
												HX_STACK_LINE(5368)
												_this1->pushmod = true;
												HX_STACK_LINE(5368)
												ret1;
											}
											HX_STACK_LINE(5368)
											ret = true;
											HX_STACK_LINE(5368)
											break;
										}
										HX_STACK_LINE(5368)
										pre = cur;
										HX_STACK_LINE(5368)
										cur = cur->next;
									}
									HX_STACK_LINE(5368)
									ret;
								}
							}
							HX_STACK_LINE(5368)
							if (((_this->pair != null()))){
								HX_STACK_LINE(5368)
								_this->pair->arb = null();
								HX_STACK_LINE(5368)
								_this->pair = null();
							}
						}
						HX_STACK_LINE(5368)
						_this->b1 = _this->b2 = null();
						HX_STACK_LINE(5368)
						_this->active = false;
						HX_STACK_LINE(5368)
						_this->intchange = false;
					}
					HX_STACK_LINE(5368)
					{
						HX_STACK_LINE(5368)
						::zpp_nape::dynamics::ZPP_FluidArbiter o = _this;		HX_STACK_VAR(o,"o");
						HX_STACK_LINE(5368)
						{
						}
						HX_STACK_LINE(5368)
						o->next = ::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool;
						HX_STACK_LINE(5368)
						::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool = o;
					}
					HX_STACK_LINE(5368)
					_this->pre_dt = -1.0;
				}
				else{
					HX_STACK_LINE(5369)
					::zpp_nape::dynamics::ZPP_ColArbiter _this = arb->colarb;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(5369)
					{
						HX_STACK_LINE(5369)
						{
						}
						HX_STACK_LINE(5369)
						{
						}
						HX_STACK_LINE(5369)
						{
						}
						HX_STACK_LINE(5369)
						{
						}
						HX_STACK_LINE(5369)
						if ((!(_this->cleared))){
							HX_STACK_LINE(5369)
							{
								HX_STACK_LINE(5369)
								::zpp_nape::util::ZNPList_ZPP_Arbiter _this1 = _this->b1->arbiters;		HX_STACK_VAR(_this1,"_this1");
								HX_STACK_LINE(5369)
								{
								}
								HX_STACK_LINE(5369)
								{
									HX_STACK_LINE(5369)
									{
									}
									HX_STACK_LINE(5369)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
									HX_STACK_LINE(5369)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this1->head;		HX_STACK_VAR(cur,"cur");
									HX_STACK_LINE(5369)
									bool ret = false;		HX_STACK_VAR(ret,"ret");
									HX_STACK_LINE(5369)
									while(((cur != null()))){
										HX_STACK_LINE(5369)
										if (((cur->elt == _this))){
											HX_STACK_LINE(5369)
											{
												HX_STACK_LINE(5369)
												{
												}
												HX_STACK_LINE(5369)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
												HX_STACK_LINE(5369)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(5369)
												if (((pre == null()))){
													HX_STACK_LINE(5369)
													old = _this1->head;
													HX_STACK_LINE(5369)
													ret1 = old->next;
													HX_STACK_LINE(5369)
													_this1->head = ret1;
													HX_STACK_LINE(5369)
													if (((_this1->head == null()))){
														HX_STACK_LINE(5369)
														_this1->pushmod = true;
													}
												}
												else{
													HX_STACK_LINE(5369)
													old = pre->next;
													HX_STACK_LINE(5369)
													ret1 = old->next;
													HX_STACK_LINE(5369)
													pre->next = ret1;
													HX_STACK_LINE(5369)
													if (((ret1 == null()))){
														HX_STACK_LINE(5369)
														_this1->pushmod = true;
													}
												}
												HX_STACK_LINE(5369)
												{
												}
												HX_STACK_LINE(5369)
												{
													HX_STACK_LINE(5369)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
													HX_STACK_LINE(5369)
													{
													}
													HX_STACK_LINE(5369)
													o->elt = null();
													HX_STACK_LINE(5369)
													o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
													HX_STACK_LINE(5369)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
												}
												HX_STACK_LINE(5369)
												_this1->modified = true;
												HX_STACK_LINE(5369)
												(_this1->length)--;
												HX_STACK_LINE(5369)
												_this1->pushmod = true;
												HX_STACK_LINE(5369)
												ret1;
											}
											HX_STACK_LINE(5369)
											ret = true;
											HX_STACK_LINE(5369)
											break;
										}
										HX_STACK_LINE(5369)
										pre = cur;
										HX_STACK_LINE(5369)
										cur = cur->next;
									}
									HX_STACK_LINE(5369)
									ret;
								}
							}
							HX_STACK_LINE(5369)
							{
								HX_STACK_LINE(5369)
								::zpp_nape::util::ZNPList_ZPP_Arbiter _this1 = _this->b2->arbiters;		HX_STACK_VAR(_this1,"_this1");
								HX_STACK_LINE(5369)
								{
								}
								HX_STACK_LINE(5369)
								{
									HX_STACK_LINE(5369)
									{
									}
									HX_STACK_LINE(5369)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
									HX_STACK_LINE(5369)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this1->head;		HX_STACK_VAR(cur,"cur");
									HX_STACK_LINE(5369)
									bool ret = false;		HX_STACK_VAR(ret,"ret");
									HX_STACK_LINE(5369)
									while(((cur != null()))){
										HX_STACK_LINE(5369)
										if (((cur->elt == _this))){
											HX_STACK_LINE(5369)
											{
												HX_STACK_LINE(5369)
												{
												}
												HX_STACK_LINE(5369)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
												HX_STACK_LINE(5369)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(5369)
												if (((pre == null()))){
													HX_STACK_LINE(5369)
													old = _this1->head;
													HX_STACK_LINE(5369)
													ret1 = old->next;
													HX_STACK_LINE(5369)
													_this1->head = ret1;
													HX_STACK_LINE(5369)
													if (((_this1->head == null()))){
														HX_STACK_LINE(5369)
														_this1->pushmod = true;
													}
												}
												else{
													HX_STACK_LINE(5369)
													old = pre->next;
													HX_STACK_LINE(5369)
													ret1 = old->next;
													HX_STACK_LINE(5369)
													pre->next = ret1;
													HX_STACK_LINE(5369)
													if (((ret1 == null()))){
														HX_STACK_LINE(5369)
														_this1->pushmod = true;
													}
												}
												HX_STACK_LINE(5369)
												{
												}
												HX_STACK_LINE(5369)
												{
													HX_STACK_LINE(5369)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
													HX_STACK_LINE(5369)
													{
													}
													HX_STACK_LINE(5369)
													o->elt = null();
													HX_STACK_LINE(5369)
													o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
													HX_STACK_LINE(5369)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
												}
												HX_STACK_LINE(5369)
												_this1->modified = true;
												HX_STACK_LINE(5369)
												(_this1->length)--;
												HX_STACK_LINE(5369)
												_this1->pushmod = true;
												HX_STACK_LINE(5369)
												ret1;
											}
											HX_STACK_LINE(5369)
											ret = true;
											HX_STACK_LINE(5369)
											break;
										}
										HX_STACK_LINE(5369)
										pre = cur;
										HX_STACK_LINE(5369)
										cur = cur->next;
									}
									HX_STACK_LINE(5369)
									ret;
								}
							}
							HX_STACK_LINE(5369)
							if (((_this->pair != null()))){
								HX_STACK_LINE(5369)
								_this->pair->arb = null();
								HX_STACK_LINE(5369)
								_this->pair = null();
							}
						}
						HX_STACK_LINE(5369)
						_this->b1 = _this->b2 = null();
						HX_STACK_LINE(5369)
						_this->active = false;
						HX_STACK_LINE(5369)
						_this->intchange = false;
					}
					HX_STACK_LINE(5369)
					while((!(((_this->contacts->next == null()))))){
						HX_STACK_LINE(5369)
						{
							struct _Function_6_1{
								inline static ::zpp_nape::dynamics::ZPP_Contact Block( ::zpp_nape::dynamics::ZPP_ColArbiter &_this){
									HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5369);
									{
										HX_STACK_LINE(5369)
										::zpp_nape::dynamics::ZPP_Contact _this1 = _this->contacts;		HX_STACK_VAR(_this1,"_this1");
										HX_STACK_LINE(5369)
										{
										}
										HX_STACK_LINE(5369)
										::zpp_nape::dynamics::ZPP_Contact ret = _this1->next;		HX_STACK_VAR(ret,"ret");
										HX_STACK_LINE(5369)
										_this1->pop();
										HX_STACK_LINE(5369)
										return ret;
									}
									return null();
								}
							};
							HX_STACK_LINE(5369)
							::zpp_nape::dynamics::ZPP_Contact o = _Function_6_1::Block(_this);		HX_STACK_VAR(o,"o");
							HX_STACK_LINE(5369)
							{
							}
							HX_STACK_LINE(5369)
							o->arbiter = null();
							HX_STACK_LINE(5369)
							o->next = ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool;
							HX_STACK_LINE(5369)
							::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool = o;
						}
						HX_STACK_LINE(5369)
						{
							HX_STACK_LINE(5369)
							::zpp_nape::dynamics::ZPP_IContact _this1 = _this->innards;		HX_STACK_VAR(_this1,"_this1");
							HX_STACK_LINE(5369)
							{
							}
							HX_STACK_LINE(5369)
							::zpp_nape::dynamics::ZPP_IContact ret = _this1->next;		HX_STACK_VAR(ret,"ret");
							HX_STACK_LINE(5369)
							_this1->next = ret->next;
							HX_STACK_LINE(5369)
							ret->_inuse = false;
							HX_STACK_LINE(5369)
							{
							}
							HX_STACK_LINE(5369)
							if (((_this1->next == null()))){
								HX_STACK_LINE(5369)
								_this1->pushmod = true;
							}
							HX_STACK_LINE(5369)
							_this1->modified = true;
							HX_STACK_LINE(5369)
							(_this1->length)--;
						}
					}
					HX_STACK_LINE(5369)
					{
						HX_STACK_LINE(5369)
						::zpp_nape::dynamics::ZPP_ColArbiter o = _this;		HX_STACK_VAR(o,"o");
						HX_STACK_LINE(5369)
						{
						}
						HX_STACK_LINE(5369)
						{
							HX_STACK_LINE(5369)
							{
							}
							HX_STACK_LINE(5369)
							{
							}
							HX_STACK_LINE(5369)
							o->userdef_dyn_fric = false;
							HX_STACK_LINE(5369)
							o->userdef_stat_fric = false;
							HX_STACK_LINE(5369)
							o->userdef_restitution = false;
							HX_STACK_LINE(5369)
							o->userdef_rfric = false;
							HX_STACK_LINE(5369)
							o->__ref_edge1 = o->__ref_edge2 = null();
						}
						HX_STACK_LINE(5369)
						o->next = ::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool;
						HX_STACK_LINE(5369)
						::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool = o;
					}
					HX_STACK_LINE(5369)
					_this->pre_dt = -1.0;
				}
			}
			HX_STACK_LINE(5370)
			return true;
		}
		HX_STACK_LINE(5372)
		bool pact = arb->active;		HX_STACK_VAR(pact,"pact");
		HX_STACK_LINE(5373)
		arb->active = arb->presentable = (arb->up_stamp == this->stamp);
		HX_STACK_LINE(5374)
		if (((((int(arb->immState) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT))) != (int)0))){
			HX_STACK_LINE(5374)
			if (((bool(arb->active) && bool((arb->type != ::zpp_nape::dynamics::ZPP_Arbiter_obj::SENSOR))))){
				HX_STACK_LINE(5375)
				if (((arb->colarb != null()))){
					struct _Function_4_1{
						inline static bool Block( ::zpp_nape::dynamics::ZPP_Arbiter &arb,Float &dt){
							HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5377);
							{
								HX_STACK_LINE(5377)
								::zpp_nape::dynamics::ZPP_ColArbiter _this = arb->colarb;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(5377)
								if ((_this->invalidated)){
									HX_STACK_LINE(5377)
									_this->invalidated = false;
									HX_STACK_LINE(5377)
									{
										HX_STACK_LINE(5377)
										if ((!(_this->userdef_restitution))){
											HX_STACK_LINE(5377)
											if (((bool((_this->s1->material->elasticity <= ::Math_obj::NEGATIVE_INFINITY)) || bool((_this->s2->material->elasticity <= ::Math_obj::NEGATIVE_INFINITY))))){
												HX_STACK_LINE(5377)
												_this->restitution = (int)0;
											}
											else{
												HX_STACK_LINE(5377)
												if (((bool((_this->s1->material->elasticity >= ::Math_obj::POSITIVE_INFINITY)) || bool((_this->s2->material->elasticity >= ::Math_obj::POSITIVE_INFINITY))))){
													HX_STACK_LINE(5377)
													_this->restitution = (int)1;
												}
												else{
													HX_STACK_LINE(5377)
													_this->restitution = (Float(((_this->s1->material->elasticity + _this->s2->material->elasticity))) / Float((int)2));
												}
											}
											HX_STACK_LINE(5377)
											if (((_this->restitution < (int)0))){
												HX_STACK_LINE(5377)
												_this->restitution = (int)0;
											}
											HX_STACK_LINE(5377)
											if (((_this->restitution > (int)1))){
												HX_STACK_LINE(5377)
												_this->restitution = (int)1;
											}
										}
										HX_STACK_LINE(5377)
										if ((!(_this->userdef_dyn_fric))){
											struct _Function_8_1{
												inline static Float Block( ::zpp_nape::dynamics::ZPP_ColArbiter &_this){
													HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5377);
													{
														HX_STACK_LINE(5377)
														{
														}
														HX_STACK_LINE(5377)
														return ::Math_obj::sqrt((_this->s1->material->dynamicFriction * _this->s2->material->dynamicFriction));
													}
													return null();
												}
											};
											HX_STACK_LINE(5377)
											_this->dyn_fric = _Function_8_1::Block(_this);
										}
										HX_STACK_LINE(5377)
										if ((!(_this->userdef_stat_fric))){
											struct _Function_8_1{
												inline static Float Block( ::zpp_nape::dynamics::ZPP_ColArbiter &_this){
													HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5377);
													{
														HX_STACK_LINE(5377)
														{
														}
														HX_STACK_LINE(5377)
														return ::Math_obj::sqrt((_this->s1->material->staticFriction * _this->s2->material->staticFriction));
													}
													return null();
												}
											};
											HX_STACK_LINE(5377)
											_this->stat_fric = _Function_8_1::Block(_this);
										}
										HX_STACK_LINE(5377)
										if ((!(_this->userdef_rfric))){
											struct _Function_8_1{
												inline static Float Block( ::zpp_nape::dynamics::ZPP_ColArbiter &_this){
													HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5377);
													{
														HX_STACK_LINE(5377)
														{
														}
														HX_STACK_LINE(5377)
														return ::Math_obj::sqrt((_this->s1->material->rollingFriction * _this->s2->material->rollingFriction));
													}
													return null();
												}
											};
											HX_STACK_LINE(5377)
											_this->rfric = _Function_8_1::Block(_this);
										}
									}
								}
								HX_STACK_LINE(5377)
								if (((_this->pre_dt == -1.0))){
									HX_STACK_LINE(5377)
									_this->pre_dt = dt;
								}
								HX_STACK_LINE(5377)
								Float dtratio = (Float(dt) / Float(_this->pre_dt));		HX_STACK_VAR(dtratio,"dtratio");
								HX_STACK_LINE(5377)
								_this->pre_dt = dt;
								HX_STACK_LINE(5377)
								Float mass_sum = (_this->b1->smass + _this->b2->smass);		HX_STACK_VAR(mass_sum,"mass_sum");
								HX_STACK_LINE(5377)
								_this->hc2 = false;
								HX_STACK_LINE(5377)
								bool fst = true;		HX_STACK_VAR(fst,"fst");
								HX_STACK_LINE(5377)
								bool statType = (bool(!(((_this->b1->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC)))) || bool(!(((_this->b2->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC)))));		HX_STACK_VAR(statType,"statType");
								struct _Function_5_1{
									inline static Float Block( ::zpp_nape::dynamics::ZPP_ColArbiter &_this){
										HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5377);
										{
											HX_STACK_LINE(5377)
											return (  ((_this->continuous)) ? Float(::nape::Config_obj::contactContinuousStaticBiasCoef) : Float(::nape::Config_obj::contactStaticBiasCoef) );
										}
										return null();
									}
								};
								HX_STACK_LINE(5377)
								Float bias = (  ((statType)) ? Float(_Function_5_1::Block(_this)) : Float((  ((_this->continuous)) ? Float(::nape::Config_obj::contactContinuousBiasCoef) : Float(::nape::Config_obj::contactBiasCoef) )) );		HX_STACK_VAR(bias,"bias");
								HX_STACK_LINE(5377)
								_this->biasCoef = bias;
								HX_STACK_LINE(5377)
								_this->continuous = false;
								HX_STACK_LINE(5377)
								::zpp_nape::dynamics::ZPP_Contact pre = null();		HX_STACK_VAR(pre,"pre");
								HX_STACK_LINE(5377)
								::zpp_nape::dynamics::ZPP_IContact prei = null();		HX_STACK_VAR(prei,"prei");
								HX_STACK_LINE(5377)
								::zpp_nape::dynamics::ZPP_IContact cx_itei = _this->innards->next;		HX_STACK_VAR(cx_itei,"cx_itei");
								HX_STACK_LINE(5377)
								{
									HX_STACK_LINE(5377)
									::zpp_nape::dynamics::ZPP_Contact cx_ite = _this->contacts->next;		HX_STACK_VAR(cx_ite,"cx_ite");
									HX_STACK_LINE(5377)
									while(((cx_ite != null()))){
										HX_STACK_LINE(5377)
										::zpp_nape::dynamics::ZPP_Contact c = cx_ite;		HX_STACK_VAR(c,"c");
										HX_STACK_LINE(5377)
										{
											HX_STACK_LINE(5377)
											if ((((c->stamp + ::nape::Config_obj::arbiterExpirationDelay) < _this->stamp))){
												struct _Function_9_1{
													inline static ::zpp_nape::dynamics::ZPP_Contact Block( ::zpp_nape::dynamics::ZPP_ColArbiter &_this,::zpp_nape::dynamics::ZPP_Contact &pre){
														HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5377);
														{
															HX_STACK_LINE(5377)
															::zpp_nape::dynamics::ZPP_Contact _this1 = _this->contacts;		HX_STACK_VAR(_this1,"_this1");
															HX_STACK_LINE(5377)
															{
															}
															HX_STACK_LINE(5377)
															::zpp_nape::dynamics::ZPP_Contact old;		HX_STACK_VAR(old,"old");
															HX_STACK_LINE(5377)
															::zpp_nape::dynamics::ZPP_Contact ret;		HX_STACK_VAR(ret,"ret");
															HX_STACK_LINE(5377)
															if (((pre == null()))){
																HX_STACK_LINE(5377)
																old = _this1->next;
																HX_STACK_LINE(5377)
																ret = old->next;
																HX_STACK_LINE(5377)
																_this1->next = ret;
																HX_STACK_LINE(5377)
																if (((_this1->next == null()))){
																	HX_STACK_LINE(5377)
																	_this1->pushmod = true;
																}
															}
															else{
																HX_STACK_LINE(5377)
																old = pre->next;
																HX_STACK_LINE(5377)
																ret = old->next;
																HX_STACK_LINE(5377)
																pre->next = ret;
																HX_STACK_LINE(5377)
																if (((ret == null()))){
																	HX_STACK_LINE(5377)
																	_this1->pushmod = true;
																}
															}
															HX_STACK_LINE(5377)
															old->_inuse = false;
															HX_STACK_LINE(5377)
															{
															}
															HX_STACK_LINE(5377)
															_this1->modified = true;
															HX_STACK_LINE(5377)
															(_this1->length)--;
															HX_STACK_LINE(5377)
															_this1->pushmod = true;
															HX_STACK_LINE(5377)
															return ret;
														}
														return null();
													}
												};
												HX_STACK_LINE(5377)
												cx_ite = _Function_9_1::Block(_this,pre);
												struct _Function_9_2{
													inline static ::zpp_nape::dynamics::ZPP_IContact Block( ::zpp_nape::dynamics::ZPP_ColArbiter &_this,::zpp_nape::dynamics::ZPP_IContact &prei){
														HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5377);
														{
															HX_STACK_LINE(5377)
															::zpp_nape::dynamics::ZPP_IContact _this1 = _this->innards;		HX_STACK_VAR(_this1,"_this1");
															HX_STACK_LINE(5377)
															{
															}
															HX_STACK_LINE(5377)
															::zpp_nape::dynamics::ZPP_IContact old;		HX_STACK_VAR(old,"old");
															HX_STACK_LINE(5377)
															::zpp_nape::dynamics::ZPP_IContact ret;		HX_STACK_VAR(ret,"ret");
															HX_STACK_LINE(5377)
															if (((prei == null()))){
																HX_STACK_LINE(5377)
																old = _this1->next;
																HX_STACK_LINE(5377)
																ret = old->next;
																HX_STACK_LINE(5377)
																_this1->next = ret;
																HX_STACK_LINE(5377)
																if (((_this1->next == null()))){
																	HX_STACK_LINE(5377)
																	_this1->pushmod = true;
																}
															}
															else{
																HX_STACK_LINE(5377)
																old = prei->next;
																HX_STACK_LINE(5377)
																ret = old->next;
																HX_STACK_LINE(5377)
																prei->next = ret;
																HX_STACK_LINE(5377)
																if (((ret == null()))){
																	HX_STACK_LINE(5377)
																	_this1->pushmod = true;
																}
															}
															HX_STACK_LINE(5377)
															old->_inuse = false;
															HX_STACK_LINE(5377)
															{
															}
															HX_STACK_LINE(5377)
															_this1->modified = true;
															HX_STACK_LINE(5377)
															(_this1->length)--;
															HX_STACK_LINE(5377)
															_this1->pushmod = true;
															HX_STACK_LINE(5377)
															return ret;
														}
														return null();
													}
												};
												HX_STACK_LINE(5377)
												cx_itei = _Function_9_2::Block(_this,prei);
												HX_STACK_LINE(5377)
												{
													HX_STACK_LINE(5377)
													::zpp_nape::dynamics::ZPP_Contact o = c;		HX_STACK_VAR(o,"o");
													HX_STACK_LINE(5377)
													{
													}
													HX_STACK_LINE(5377)
													o->arbiter = null();
													HX_STACK_LINE(5377)
													o->next = ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool;
													HX_STACK_LINE(5377)
													::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool = o;
												}
												HX_STACK_LINE(5377)
												continue;
											}
											HX_STACK_LINE(5377)
											::zpp_nape::dynamics::ZPP_IContact ci = c->inner;		HX_STACK_VAR(ci,"ci");
											HX_STACK_LINE(5377)
											bool pact1 = c->active;		HX_STACK_VAR(pact1,"pact1");
											HX_STACK_LINE(5377)
											c->active = (c->stamp == _this->stamp);
											HX_STACK_LINE(5377)
											if ((c->active)){
												HX_STACK_LINE(5377)
												if ((fst)){
													HX_STACK_LINE(5377)
													fst = false;
													HX_STACK_LINE(5377)
													_this->c1 = ci;
													HX_STACK_LINE(5377)
													_this->oc1 = c;
												}
												else{
													HX_STACK_LINE(5377)
													_this->hc2 = true;
													HX_STACK_LINE(5377)
													_this->c2 = ci;
													HX_STACK_LINE(5377)
													_this->oc2 = c;
												}
												HX_STACK_LINE(5377)
												{
													HX_STACK_LINE(5377)
													ci->r2x = (c->px - _this->b2->posx);
													HX_STACK_LINE(5377)
													ci->r2y = (c->py - _this->b2->posy);
												}
												HX_STACK_LINE(5377)
												{
													HX_STACK_LINE(5377)
													ci->r1x = (c->px - _this->b1->posx);
													HX_STACK_LINE(5377)
													ci->r1y = (c->py - _this->b1->posy);
												}
												struct _Function_9_1{
													inline static Float Block( ::zpp_nape::dynamics::ZPP_IContact &ci,::zpp_nape::dynamics::ZPP_ColArbiter &_this){
														HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5377);
														{
															HX_STACK_LINE(5377)
															Float x = ((ci->r2x * _this->nx) + (ci->r2y * _this->ny));		HX_STACK_VAR(x,"x");
															HX_STACK_LINE(5377)
															{
															}
															HX_STACK_LINE(5377)
															return (x * x);
														}
														return null();
													}
												};
												HX_STACK_LINE(5377)
												Float kt = (mass_sum + (_this->b2->sinertia * _Function_9_1::Block(ci,_this)));		HX_STACK_VAR(kt,"kt");
												struct _Function_9_2{
													inline static Float Block( ::zpp_nape::dynamics::ZPP_IContact &ci,::zpp_nape::dynamics::ZPP_ColArbiter &_this){
														HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5377);
														{
															HX_STACK_LINE(5377)
															Float x = ((ci->r1x * _this->nx) + (ci->r1y * _this->ny));		HX_STACK_VAR(x,"x");
															HX_STACK_LINE(5377)
															{
															}
															HX_STACK_LINE(5377)
															return (x * x);
														}
														return null();
													}
												};
												HX_STACK_LINE(5377)
												hx::AddEq(kt,(_this->b1->sinertia * _Function_9_2::Block(ci,_this)));
												HX_STACK_LINE(5377)
												ci->tMass = (  (((kt < (::nape::Config_obj::epsilon * ::nape::Config_obj::epsilon)))) ? Float((int)0) : Float((Float(1.0) / Float(kt))) );
												struct _Function_9_3{
													inline static Float Block( ::zpp_nape::dynamics::ZPP_ColArbiter &_this,::zpp_nape::dynamics::ZPP_IContact &ci){
														HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5377);
														{
															HX_STACK_LINE(5377)
															Float x = ((_this->ny * ci->r2x) - (_this->nx * ci->r2y));		HX_STACK_VAR(x,"x");
															HX_STACK_LINE(5377)
															{
															}
															HX_STACK_LINE(5377)
															return (x * x);
														}
														return null();
													}
												};
												HX_STACK_LINE(5377)
												Float nt = (mass_sum + (_this->b2->sinertia * _Function_9_3::Block(_this,ci)));		HX_STACK_VAR(nt,"nt");
												struct _Function_9_4{
													inline static Float Block( ::zpp_nape::dynamics::ZPP_ColArbiter &_this,::zpp_nape::dynamics::ZPP_IContact &ci){
														HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5377);
														{
															HX_STACK_LINE(5377)
															Float x = ((_this->ny * ci->r1x) - (_this->nx * ci->r1y));		HX_STACK_VAR(x,"x");
															HX_STACK_LINE(5377)
															{
															}
															HX_STACK_LINE(5377)
															return (x * x);
														}
														return null();
													}
												};
												HX_STACK_LINE(5377)
												hx::AddEq(nt,(_this->b1->sinertia * _Function_9_4::Block(_this,ci)));
												HX_STACK_LINE(5377)
												ci->nMass = (  (((nt < (::nape::Config_obj::epsilon * ::nape::Config_obj::epsilon)))) ? Float((int)0) : Float((Float(1.0) / Float(nt))) );
												HX_STACK_LINE(5377)
												Float vrx = 0.0;		HX_STACK_VAR(vrx,"vrx");
												HX_STACK_LINE(5377)
												Float vry = 0.0;		HX_STACK_VAR(vry,"vry");
												HX_STACK_LINE(5377)
												{
													HX_STACK_LINE(5377)
													Float ang = (_this->b2->angvel + _this->b2->kinangvel);		HX_STACK_VAR(ang,"ang");
													HX_STACK_LINE(5377)
													vrx = ((_this->b2->velx + _this->b2->kinvelx) - (ci->r2y * ang));
													HX_STACK_LINE(5377)
													vry = ((_this->b2->vely + _this->b2->kinvely) + (ci->r2x * ang));
													HX_STACK_LINE(5377)
													ang = (_this->b1->angvel + _this->b1->kinangvel);
													HX_STACK_LINE(5377)
													hx::SubEq(vrx,((_this->b1->velx + _this->b1->kinvelx) - (ci->r1y * ang)));
													HX_STACK_LINE(5377)
													hx::SubEq(vry,((_this->b1->vely + _this->b1->kinvely) + (ci->r1x * ang)));
												}
												HX_STACK_LINE(5377)
												Float vdot = ((_this->nx * vrx) + (_this->ny * vry));		HX_STACK_VAR(vdot,"vdot");
												HX_STACK_LINE(5377)
												c->elasticity = _this->restitution;
												HX_STACK_LINE(5377)
												ci->bounce = (vdot * c->elasticity);
												HX_STACK_LINE(5377)
												if (((ci->bounce > -(::nape::Config_obj::elasticThreshold)))){
													HX_STACK_LINE(5377)
													ci->bounce = (int)0;
												}
												HX_STACK_LINE(5377)
												vdot = ((vry * _this->nx) - (vrx * _this->ny));
												HX_STACK_LINE(5377)
												Float thr = ::nape::Config_obj::staticFrictionThreshold;		HX_STACK_VAR(thr,"thr");
												HX_STACK_LINE(5377)
												if ((((vdot * vdot) > (thr * thr)))){
													HX_STACK_LINE(5377)
													ci->friction = _this->dyn_fric;
												}
												else{
													HX_STACK_LINE(5377)
													ci->friction = _this->stat_fric;
												}
												HX_STACK_LINE(5377)
												hx::MultEq(ci->jnAcc,dtratio);
												HX_STACK_LINE(5377)
												hx::MultEq(ci->jtAcc,dtratio);
											}
											HX_STACK_LINE(5377)
											if (((pact1 != c->active))){
												HX_STACK_LINE(5377)
												_this->contacts->modified = true;
											}
											HX_STACK_LINE(5377)
											pre = cx_ite;
											HX_STACK_LINE(5377)
											prei = cx_itei;
											HX_STACK_LINE(5377)
											cx_itei = cx_itei->next;
										}
										HX_STACK_LINE(5377)
										cx_ite = cx_ite->next;
									}
								}
								HX_STACK_LINE(5377)
								if ((_this->hc2)){
									HX_STACK_LINE(5377)
									_this->hpc2 = true;
									HX_STACK_LINE(5377)
									if ((_this->oc1->posOnly)){
										HX_STACK_LINE(5377)
										::zpp_nape::dynamics::ZPP_IContact tmp = _this->c1;		HX_STACK_VAR(tmp,"tmp");
										HX_STACK_LINE(5377)
										_this->c1 = _this->c2;
										HX_STACK_LINE(5377)
										_this->c2 = tmp;
										HX_STACK_LINE(5377)
										::zpp_nape::dynamics::ZPP_Contact tmp2 = _this->oc1;		HX_STACK_VAR(tmp2,"tmp2");
										HX_STACK_LINE(5377)
										_this->oc1 = _this->oc2;
										HX_STACK_LINE(5377)
										_this->oc2 = tmp2;
										HX_STACK_LINE(5377)
										_this->hc2 = false;
									}
									else{
										HX_STACK_LINE(5377)
										if ((_this->oc2->posOnly)){
											HX_STACK_LINE(5377)
											_this->hc2 = false;
										}
									}
									HX_STACK_LINE(5377)
									if ((_this->oc1->posOnly)){
										HX_STACK_LINE(5377)
										fst = true;
									}
								}
								else{
									HX_STACK_LINE(5377)
									_this->hpc2 = false;
								}
								HX_STACK_LINE(5377)
								hx::MultEq(_this->jrAcc,dtratio);
								HX_STACK_LINE(5377)
								if ((!(fst))){
									HX_STACK_LINE(5377)
									_this->rn1a = ((_this->ny * _this->c1->r1x) - (_this->nx * _this->c1->r1y));
									HX_STACK_LINE(5377)
									_this->rt1a = ((_this->c1->r1x * _this->nx) + (_this->c1->r1y * _this->ny));
									HX_STACK_LINE(5377)
									_this->rn1b = ((_this->ny * _this->c1->r2x) - (_this->nx * _this->c1->r2y));
									HX_STACK_LINE(5377)
									_this->rt1b = ((_this->c1->r2x * _this->nx) + (_this->c1->r2y * _this->ny));
									HX_STACK_LINE(5377)
									_this->k1x = ((_this->b2->kinvelx - (_this->c1->r2y * _this->b2->kinangvel)) - ((_this->b1->kinvelx - (_this->c1->r1y * _this->b1->kinangvel))));
									HX_STACK_LINE(5377)
									_this->k1y = ((_this->b2->kinvely + (_this->c1->r2x * _this->b2->kinangvel)) - ((_this->b1->kinvely + (_this->c1->r1x * _this->b1->kinangvel))));
								}
								HX_STACK_LINE(5377)
								if ((_this->hc2)){
									HX_STACK_LINE(5377)
									_this->rn2a = ((_this->ny * _this->c2->r1x) - (_this->nx * _this->c2->r1y));
									HX_STACK_LINE(5377)
									_this->rt2a = ((_this->c2->r1x * _this->nx) + (_this->c2->r1y * _this->ny));
									HX_STACK_LINE(5377)
									_this->rn2b = ((_this->ny * _this->c2->r2x) - (_this->nx * _this->c2->r2y));
									HX_STACK_LINE(5377)
									_this->rt2b = ((_this->c2->r2x * _this->nx) + (_this->c2->r2y * _this->ny));
									HX_STACK_LINE(5377)
									_this->k2x = ((_this->b2->kinvelx - (_this->c2->r2y * _this->b2->kinangvel)) - ((_this->b1->kinvelx - (_this->c2->r1y * _this->b1->kinangvel))));
									HX_STACK_LINE(5377)
									_this->k2y = ((_this->b2->kinvely + (_this->c2->r2x * _this->b2->kinangvel)) - ((_this->b1->kinvely + (_this->c2->r1x * _this->b1->kinangvel))));
									HX_STACK_LINE(5377)
									{
										HX_STACK_LINE(5377)
										_this->kMassa = ((mass_sum + ((_this->b1->sinertia * _this->rn1a) * _this->rn1a)) + ((_this->b2->sinertia * _this->rn1b) * _this->rn1b));
										HX_STACK_LINE(5377)
										_this->kMassb = ((mass_sum + ((_this->b1->sinertia * _this->rn1a) * _this->rn2a)) + ((_this->b2->sinertia * _this->rn1b) * _this->rn2b));
										HX_STACK_LINE(5377)
										_this->kMassc = ((mass_sum + ((_this->b1->sinertia * _this->rn2a) * _this->rn2a)) + ((_this->b2->sinertia * _this->rn2b) * _this->rn2b));
									}
									HX_STACK_LINE(5377)
									Float norm = (((_this->kMassa * _this->kMassa) + (((int)2 * _this->kMassb) * _this->kMassb)) + (_this->kMassc * _this->kMassc));		HX_STACK_VAR(norm,"norm");
									HX_STACK_LINE(5377)
									if (((norm < (::nape::Config_obj::illConditionedThreshold * (((_this->kMassa * _this->kMassc) - (_this->kMassb * _this->kMassb))))))){
										HX_STACK_LINE(5377)
										{
											HX_STACK_LINE(5377)
											_this->Ka = _this->kMassa;
											HX_STACK_LINE(5377)
											_this->Kb = _this->kMassb;
											HX_STACK_LINE(5377)
											_this->Kc = _this->kMassc;
										}
										HX_STACK_LINE(5377)
										{
											HX_STACK_LINE(5377)
											Float det = ((_this->kMassa * _this->kMassc) - (_this->kMassb * _this->kMassb));		HX_STACK_VAR(det,"det");
											HX_STACK_LINE(5377)
											if (((det != det))){
												HX_STACK_LINE(5377)
												_this->kMassa = _this->kMassb = _this->kMassc = (int)0;
												HX_STACK_LINE(5377)
												(int)3;
											}
											else{
												HX_STACK_LINE(5377)
												if (((det == (int)0))){
													HX_STACK_LINE(5377)
													int flag = (int)0;		HX_STACK_VAR(flag,"flag");
													HX_STACK_LINE(5377)
													if (((_this->kMassa != (int)0))){
														HX_STACK_LINE(5377)
														_this->kMassa = (Float((int)1) / Float(_this->kMassa));
													}
													else{
														HX_STACK_LINE(5377)
														_this->kMassa = (int)0;
														HX_STACK_LINE(5377)
														hx::OrEq(flag,(int)1);
													}
													HX_STACK_LINE(5377)
													if (((_this->kMassc != (int)0))){
														HX_STACK_LINE(5377)
														_this->kMassc = (Float((int)1) / Float(_this->kMassc));
													}
													else{
														HX_STACK_LINE(5377)
														_this->kMassc = (int)0;
														HX_STACK_LINE(5377)
														hx::OrEq(flag,(int)2);
													}
													HX_STACK_LINE(5377)
													_this->kMassb = (int)0;
													HX_STACK_LINE(5377)
													flag;
												}
												else{
													HX_STACK_LINE(5377)
													det = (Float((int)1) / Float(det));
													HX_STACK_LINE(5377)
													Float t = (_this->kMassc * det);		HX_STACK_VAR(t,"t");
													HX_STACK_LINE(5377)
													_this->kMassc = (_this->kMassa * det);
													HX_STACK_LINE(5377)
													_this->kMassa = t;
													HX_STACK_LINE(5377)
													hx::MultEq(_this->kMassb,-(det));
													HX_STACK_LINE(5377)
													(int)0;
												}
											}
										}
									}
									else{
										HX_STACK_LINE(5377)
										_this->hc2 = false;
										HX_STACK_LINE(5377)
										if (((_this->oc2->dist < _this->oc1->dist))){
											HX_STACK_LINE(5377)
											::zpp_nape::dynamics::ZPP_IContact t = _this->c1;		HX_STACK_VAR(t,"t");
											HX_STACK_LINE(5377)
											_this->c1 = _this->c2;
											HX_STACK_LINE(5377)
											_this->c2 = t;
										}
										HX_STACK_LINE(5377)
										_this->oc2->active = false;
										HX_STACK_LINE(5377)
										_this->contacts->modified = true;
									}
								}
								HX_STACK_LINE(5377)
								{
									HX_STACK_LINE(5377)
									_this->surfacex = _this->b2->svelx;
									HX_STACK_LINE(5377)
									_this->surfacey = _this->b2->svely;
									HX_STACK_LINE(5377)
									{
									}
									HX_STACK_LINE(5377)
									{
									}
								}
								HX_STACK_LINE(5377)
								{
									HX_STACK_LINE(5377)
									Float t = 1.0;		HX_STACK_VAR(t,"t");
									HX_STACK_LINE(5377)
									{
									}
									HX_STACK_LINE(5377)
									hx::AddEq(_this->surfacex,(_this->b1->svelx * t));
									HX_STACK_LINE(5377)
									hx::AddEq(_this->surfacey,(_this->b1->svely * t));
								}
								HX_STACK_LINE(5377)
								{
									HX_STACK_LINE(5377)
									_this->surfacex = -(_this->surfacex);
									HX_STACK_LINE(5377)
									_this->surfacey = -(_this->surfacey);
								}
								HX_STACK_LINE(5377)
								_this->rMass = (_this->b1->sinertia + _this->b2->sinertia);
								HX_STACK_LINE(5377)
								if (((_this->rMass != (int)0))){
									HX_STACK_LINE(5377)
									_this->rMass = (Float((int)1) / Float(_this->rMass));
								}
								HX_STACK_LINE(5377)
								return fst;
							}
							return null();
						}
					};
					HX_STACK_LINE(5376)
					if ((_Function_4_1::Block(arb,dt))){
						HX_STACK_LINE(5377)
						arb->active = false;
					}
				}
				else{
					HX_STACK_LINE(5381)
					::zpp_nape::dynamics::ZPP_FluidArbiter _this = arb->fluidarb;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(5381)
					if (((_this->pre_dt == -1.0))){
						HX_STACK_LINE(5381)
						_this->pre_dt = dt;
					}
					HX_STACK_LINE(5381)
					Float dtratio = (Float(dt) / Float(_this->pre_dt));		HX_STACK_VAR(dtratio,"dtratio");
					HX_STACK_LINE(5381)
					_this->pre_dt = dt;
					HX_STACK_LINE(5381)
					{
						HX_STACK_LINE(5381)
						_this->r1x = (_this->centroidx - _this->b1->posx);
						HX_STACK_LINE(5381)
						_this->r1y = (_this->centroidy - _this->b1->posy);
					}
					HX_STACK_LINE(5381)
					{
						HX_STACK_LINE(5381)
						_this->r2x = (_this->centroidx - _this->b2->posx);
						HX_STACK_LINE(5381)
						_this->r2y = (_this->centroidy - _this->b2->posy);
					}
					HX_STACK_LINE(5381)
					Float g1x = 0.0;		HX_STACK_VAR(g1x,"g1x");
					HX_STACK_LINE(5381)
					Float g1y = 0.0;		HX_STACK_VAR(g1y,"g1y");
					HX_STACK_LINE(5381)
					if (((bool(_this->ws1->fluidEnabled) && bool((_this->ws1->fluidProperties->wrap_gravity != null()))))){
						HX_STACK_LINE(5381)
						g1x = _this->ws1->fluidProperties->gravityx;
						HX_STACK_LINE(5381)
						g1y = _this->ws1->fluidProperties->gravityy;
						HX_STACK_LINE(5381)
						{
						}
						HX_STACK_LINE(5381)
						{
						}
					}
					else{
						HX_STACK_LINE(5381)
						g1x = this->gravityx;
						HX_STACK_LINE(5381)
						g1y = this->gravityy;
						HX_STACK_LINE(5381)
						{
						}
						HX_STACK_LINE(5381)
						{
						}
					}
					HX_STACK_LINE(5381)
					Float g2x = 0.0;		HX_STACK_VAR(g2x,"g2x");
					HX_STACK_LINE(5381)
					Float g2y = 0.0;		HX_STACK_VAR(g2y,"g2y");
					HX_STACK_LINE(5381)
					if (((bool(_this->ws2->fluidEnabled) && bool((_this->ws2->fluidProperties->wrap_gravity != null()))))){
						HX_STACK_LINE(5381)
						g2x = _this->ws2->fluidProperties->gravityx;
						HX_STACK_LINE(5381)
						g2y = _this->ws2->fluidProperties->gravityy;
						HX_STACK_LINE(5381)
						{
						}
						HX_STACK_LINE(5381)
						{
						}
					}
					else{
						HX_STACK_LINE(5381)
						g2x = this->gravityx;
						HX_STACK_LINE(5381)
						g2y = this->gravityy;
						HX_STACK_LINE(5381)
						{
						}
						HX_STACK_LINE(5381)
						{
						}
					}
					HX_STACK_LINE(5381)
					Float buoyx = (int)0;		HX_STACK_VAR(buoyx,"buoyx");
					HX_STACK_LINE(5381)
					Float buoyy = (int)0;		HX_STACK_VAR(buoyy,"buoyy");
					HX_STACK_LINE(5381)
					{
					}
					HX_STACK_LINE(5381)
					{
					}
					HX_STACK_LINE(5381)
					if (((bool(_this->ws1->fluidEnabled) && bool(_this->ws2->fluidEnabled)))){
						HX_STACK_LINE(5381)
						Float mass1 = (_this->overlap * _this->ws1->fluidProperties->density);		HX_STACK_VAR(mass1,"mass1");
						HX_STACK_LINE(5381)
						Float mass2 = (_this->overlap * _this->ws2->fluidProperties->density);		HX_STACK_VAR(mass2,"mass2");
						HX_STACK_LINE(5381)
						if (((mass1 > mass2))){
							HX_STACK_LINE(5381)
							Float t = (mass1 + mass2);		HX_STACK_VAR(t,"t");
							HX_STACK_LINE(5381)
							{
							}
							HX_STACK_LINE(5381)
							hx::SubEq(buoyx,(g1x * t));
							HX_STACK_LINE(5381)
							hx::SubEq(buoyy,(g1y * t));
						}
						else{
							HX_STACK_LINE(5381)
							if (((mass1 < mass2))){
								HX_STACK_LINE(5381)
								Float t = (mass1 + mass2);		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(5381)
								{
								}
								HX_STACK_LINE(5381)
								hx::AddEq(buoyx,(g2x * t));
								HX_STACK_LINE(5381)
								hx::AddEq(buoyy,(g2y * t));
							}
							else{
								HX_STACK_LINE(5381)
								Float gx = 0.0;		HX_STACK_VAR(gx,"gx");
								HX_STACK_LINE(5381)
								Float gy = 0.0;		HX_STACK_VAR(gy,"gy");
								HX_STACK_LINE(5381)
								{
									HX_STACK_LINE(5381)
									gx = (g1x + g2x);
									HX_STACK_LINE(5381)
									gy = (g1y + g2y);
								}
								HX_STACK_LINE(5381)
								{
									HX_STACK_LINE(5381)
									Float t = 0.5;		HX_STACK_VAR(t,"t");
									HX_STACK_LINE(5381)
									{
									}
									HX_STACK_LINE(5381)
									hx::MultEq(gx,t);
									HX_STACK_LINE(5381)
									hx::MultEq(gy,t);
								}
								HX_STACK_LINE(5381)
								if (((((_this->ws1->worldCOMx * gx) + (_this->ws1->worldCOMy * gy)) > ((_this->ws2->worldCOMx * gx) + (_this->ws2->worldCOMy * gy))))){
									HX_STACK_LINE(5381)
									Float t = (mass1 + mass2);		HX_STACK_VAR(t,"t");
									HX_STACK_LINE(5381)
									{
									}
									HX_STACK_LINE(5381)
									hx::SubEq(buoyx,(gx * t));
									HX_STACK_LINE(5381)
									hx::SubEq(buoyy,(gy * t));
								}
								else{
									HX_STACK_LINE(5381)
									Float t = (mass1 + mass2);		HX_STACK_VAR(t,"t");
									HX_STACK_LINE(5381)
									{
									}
									HX_STACK_LINE(5381)
									hx::AddEq(buoyx,(gx * t));
									HX_STACK_LINE(5381)
									hx::AddEq(buoyy,(gy * t));
								}
							}
						}
					}
					else{
						HX_STACK_LINE(5381)
						if ((_this->ws1->fluidEnabled)){
							HX_STACK_LINE(5381)
							Float mass = (_this->overlap * _this->ws1->fluidProperties->density);		HX_STACK_VAR(mass,"mass");
							HX_STACK_LINE(5381)
							{
								HX_STACK_LINE(5381)
								Float t = mass;		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(5381)
								{
								}
								HX_STACK_LINE(5381)
								hx::SubEq(buoyx,(g1x * t));
								HX_STACK_LINE(5381)
								hx::SubEq(buoyy,(g1y * t));
							}
						}
						else{
							HX_STACK_LINE(5381)
							if ((_this->ws2->fluidEnabled)){
								HX_STACK_LINE(5381)
								Float mass = (_this->overlap * _this->ws2->fluidProperties->density);		HX_STACK_VAR(mass,"mass");
								HX_STACK_LINE(5381)
								{
									HX_STACK_LINE(5381)
									Float t = mass;		HX_STACK_VAR(t,"t");
									HX_STACK_LINE(5381)
									{
									}
									HX_STACK_LINE(5381)
									hx::AddEq(buoyx,(g2x * t));
									HX_STACK_LINE(5381)
									hx::AddEq(buoyy,(g2y * t));
								}
							}
						}
					}
					HX_STACK_LINE(5381)
					{
						HX_STACK_LINE(5381)
						Float t = dt;		HX_STACK_VAR(t,"t");
						HX_STACK_LINE(5381)
						{
						}
						HX_STACK_LINE(5381)
						hx::MultEq(buoyx,t);
						HX_STACK_LINE(5381)
						hx::MultEq(buoyy,t);
					}
					HX_STACK_LINE(5381)
					{
						HX_STACK_LINE(5381)
						_this->buoyx = buoyx;
						HX_STACK_LINE(5381)
						_this->buoyy = buoyy;
						HX_STACK_LINE(5381)
						{
						}
						HX_STACK_LINE(5381)
						{
						}
					}
					HX_STACK_LINE(5381)
					if (((_this->b1->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC))){
						HX_STACK_LINE(5381)
						{
							HX_STACK_LINE(5381)
							Float t = _this->b1->imass;		HX_STACK_VAR(t,"t");
							HX_STACK_LINE(5381)
							{
							}
							HX_STACK_LINE(5381)
							hx::SubEq(_this->b1->velx,(buoyx * t));
							HX_STACK_LINE(5381)
							hx::SubEq(_this->b1->vely,(buoyy * t));
						}
						HX_STACK_LINE(5381)
						hx::SubEq(_this->b1->angvel,((((buoyy * _this->r1x) - (buoyx * _this->r1y))) * _this->b1->iinertia));
					}
					HX_STACK_LINE(5381)
					if (((_this->b2->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC))){
						HX_STACK_LINE(5381)
						{
							HX_STACK_LINE(5381)
							Float t = _this->b2->imass;		HX_STACK_VAR(t,"t");
							HX_STACK_LINE(5381)
							{
							}
							HX_STACK_LINE(5381)
							hx::AddEq(_this->b2->velx,(buoyx * t));
							HX_STACK_LINE(5381)
							hx::AddEq(_this->b2->vely,(buoyy * t));
						}
						HX_STACK_LINE(5381)
						hx::AddEq(_this->b2->angvel,((((buoyy * _this->r2x) - (buoyx * _this->r2y))) * _this->b2->iinertia));
					}
					HX_STACK_LINE(5381)
					if (((bool(((bool(!(_this->ws1->fluidEnabled)) || bool((_this->ws1->fluidProperties->viscosity == (int)0))))) && bool(((bool(!(_this->ws2->fluidEnabled)) || bool((_this->ws2->fluidProperties->viscosity == (int)0)))))))){
						HX_STACK_LINE(5381)
						_this->nodrag = true;
						HX_STACK_LINE(5381)
						{
							HX_STACK_LINE(5381)
							_this->dampx = (int)0;
							HX_STACK_LINE(5381)
							_this->dampy = (int)0;
							HX_STACK_LINE(5381)
							{
							}
							HX_STACK_LINE(5381)
							{
							}
						}
						HX_STACK_LINE(5381)
						_this->adamp = (int)0;
					}
					else{
						HX_STACK_LINE(5381)
						_this->nodrag = false;
						HX_STACK_LINE(5381)
						Float tViscosity = 0.0;		HX_STACK_VAR(tViscosity,"tViscosity");
						HX_STACK_LINE(5381)
						if ((_this->ws1->fluidEnabled)){
							HX_STACK_LINE(5381)
							_this->ws2->validate_angDrag();
							HX_STACK_LINE(5381)
							hx::AddEq(tViscosity,(Float(((_this->ws1->fluidProperties->viscosity * _this->ws2->angDrag) * _this->overlap)) / Float(_this->ws2->area)));
						}
						HX_STACK_LINE(5381)
						if ((_this->ws2->fluidEnabled)){
							HX_STACK_LINE(5381)
							_this->ws1->validate_angDrag();
							HX_STACK_LINE(5381)
							hx::AddEq(tViscosity,(Float(((_this->ws2->fluidProperties->viscosity * _this->ws1->angDrag) * _this->overlap)) / Float(_this->ws1->area)));
						}
						HX_STACK_LINE(5381)
						if (((tViscosity != (int)0))){
							HX_STACK_LINE(5381)
							Float iSum = (_this->b1->sinertia + _this->b2->sinertia);		HX_STACK_VAR(iSum,"iSum");
							HX_STACK_LINE(5381)
							if (((iSum != (int)0))){
								HX_STACK_LINE(5381)
								_this->wMass = (Float((int)1) / Float(iSum));
							}
							else{
								HX_STACK_LINE(5381)
								_this->wMass = 0.0;
							}
							HX_STACK_LINE(5381)
							Float biasCoef;		HX_STACK_VAR(biasCoef,"biasCoef");
							HX_STACK_LINE(5381)
							hx::MultEq(tViscosity,0.0004);
							struct _Function_6_1{
								inline static Float Block( Float &biasCoef,Float &tViscosity,::zpp_nape::dynamics::ZPP_FluidArbiter &_this,Float &dt){
									HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5381);
									{
										HX_STACK_LINE(5381)
										Float omega = (((int)2 * ::Math_obj::PI) * tViscosity);		HX_STACK_VAR(omega,"omega");
										HX_STACK_LINE(5381)
										_this->agamma = (Float((int)1) / Float((((dt * omega) * (((int)2 + (omega * dt)))))));
										HX_STACK_LINE(5381)
										Float ig = (Float((int)1) / Float((((int)1 + _this->agamma))));		HX_STACK_VAR(ig,"ig");
										HX_STACK_LINE(5381)
										biasCoef = (((dt * omega) * omega) * _this->agamma);
										HX_STACK_LINE(5381)
										hx::MultEq(_this->agamma,ig);
										HX_STACK_LINE(5381)
										return ig;
									}
									return null();
								}
							};
							HX_STACK_LINE(5381)
							hx::MultEq(_this->wMass,_Function_6_1::Block(biasCoef,tViscosity,_this,dt));
						}
						else{
							HX_STACK_LINE(5381)
							_this->wMass = 0.0;
							HX_STACK_LINE(5381)
							_this->agamma = 0.0;
						}
						HX_STACK_LINE(5381)
						Float vrnx = (((_this->b2->velx + _this->b2->kinvelx) - (_this->r2y * ((_this->b2->angvel + _this->b2->kinangvel)))) - (((_this->b1->velx + _this->b1->kinvelx) - (_this->r1y * ((_this->b2->angvel + _this->b2->kinangvel))))));		HX_STACK_VAR(vrnx,"vrnx");
						HX_STACK_LINE(5381)
						Float vrny = (((_this->b2->vely + _this->b2->kinvely) + (_this->r2x * ((_this->b2->angvel + _this->b2->kinangvel)))) - (((_this->b1->vely + _this->b1->kinvely) + (_this->r1x * ((_this->b1->angvel + _this->b1->kinangvel))))));		HX_STACK_VAR(vrny,"vrny");
						HX_STACK_LINE(5381)
						{
						}
						HX_STACK_LINE(5381)
						{
						}
						HX_STACK_LINE(5381)
						if (((((vrnx * vrnx) + (vrny * vrny)) < (::nape::Config_obj::epsilon * ::nape::Config_obj::epsilon)))){
						}
						else{
							HX_STACK_LINE(5381)
							{
								HX_STACK_LINE(5381)
								Float d = ((vrnx * vrnx) + (vrny * vrny));		HX_STACK_VAR(d,"d");
								HX_STACK_LINE(5381)
								{
								}
								struct _Function_7_1{
									inline static Float Block( Float &d){
										HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5381);
										{
											HX_STACK_LINE(5381)
											{
											}
											struct _Function_8_1{
												inline static Float Block( Float &d){
													HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5381);
													{
														HX_STACK_LINE(5381)
														{
														}
														HX_STACK_LINE(5381)
														return ::Math_obj::sqrt(d);
													}
													return null();
												}
											};
											HX_STACK_LINE(5381)
											return (Float(1.0) / Float(_Function_8_1::Block(d)));
										}
										return null();
									}
								};
								HX_STACK_LINE(5381)
								Float imag = _Function_7_1::Block(d);		HX_STACK_VAR(imag,"imag");
								HX_STACK_LINE(5381)
								{
									HX_STACK_LINE(5381)
									Float t = imag;		HX_STACK_VAR(t,"t");
									HX_STACK_LINE(5381)
									{
									}
									HX_STACK_LINE(5381)
									hx::MultEq(vrnx,t);
									HX_STACK_LINE(5381)
									hx::MultEq(vrny,t);
								}
							}
							HX_STACK_LINE(5381)
							{
								HX_STACK_LINE(5381)
								_this->nx = vrnx;
								HX_STACK_LINE(5381)
								_this->ny = vrny;
								HX_STACK_LINE(5381)
								{
								}
								HX_STACK_LINE(5381)
								{
								}
							}
						}
						HX_STACK_LINE(5381)
						Float tViscosity1 = 0.0;		HX_STACK_VAR(tViscosity1,"tViscosity1");
						HX_STACK_LINE(5381)
						if ((_this->ws1->fluidEnabled)){
							HX_STACK_LINE(5381)
							Float f = (Float((-(_this->ws1->fluidProperties->viscosity) * _this->overlap)) / Float(_this->ws2->area));		HX_STACK_VAR(f,"f");
							HX_STACK_LINE(5381)
							if (((_this->ws2->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE))){
								HX_STACK_LINE(5381)
								hx::SubEq(tViscosity1,(Float(((f * _this->ws2->circle->radius) * ::nape::Config_obj::fluidLinearDrag)) / Float(((((int)2 * _this->ws2->circle->radius) * ::Math_obj::PI)))));
							}
							else{
								HX_STACK_LINE(5381)
								::zpp_nape::shape::ZPP_Polygon poly = _this->ws2->polygon;		HX_STACK_VAR(poly,"poly");
								HX_STACK_LINE(5381)
								Float bord = 0.0;		HX_STACK_VAR(bord,"bord");
								HX_STACK_LINE(5381)
								Float acc = 0.0;		HX_STACK_VAR(acc,"acc");
								HX_STACK_LINE(5381)
								{
									HX_STACK_LINE(5381)
									::zpp_nape::util::ZNPNode_ZPP_Edge cx_ite = poly->edges->head;		HX_STACK_VAR(cx_ite,"cx_ite");
									HX_STACK_LINE(5381)
									while(((cx_ite != null()))){
										HX_STACK_LINE(5381)
										::zpp_nape::shape::ZPP_Edge ex = cx_ite->elt;		HX_STACK_VAR(ex,"ex");
										HX_STACK_LINE(5381)
										{
											HX_STACK_LINE(5381)
											hx::AddEq(bord,ex->length);
											HX_STACK_LINE(5381)
											Float fact = ((f * ex->length) * (((ex->gnormx * _this->nx) + (ex->gnormy * _this->ny))));		HX_STACK_VAR(fact,"fact");
											HX_STACK_LINE(5381)
											if (((fact > (int)0))){
												HX_STACK_LINE(5381)
												fact = hx::MultEq(fact,-(::nape::Config_obj::fluidVacuumDrag));
											}
											HX_STACK_LINE(5381)
											hx::SubEq(acc,((fact * 0.5) * ::nape::Config_obj::fluidLinearDrag));
										}
										HX_STACK_LINE(5381)
										cx_ite = cx_ite->next;
									}
								}
								HX_STACK_LINE(5381)
								hx::AddEq(tViscosity1,(Float(acc) / Float(bord)));
							}
						}
						HX_STACK_LINE(5381)
						if ((_this->ws2->fluidEnabled)){
							HX_STACK_LINE(5381)
							Float f = (Float((-(_this->ws2->fluidProperties->viscosity) * _this->overlap)) / Float(_this->ws1->area));		HX_STACK_VAR(f,"f");
							HX_STACK_LINE(5381)
							if (((_this->ws1->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE))){
								HX_STACK_LINE(5381)
								hx::SubEq(tViscosity1,(Float(((f * _this->ws1->circle->radius) * ::nape::Config_obj::fluidLinearDrag)) / Float(((((int)2 * _this->ws1->circle->radius) * ::Math_obj::PI)))));
							}
							else{
								HX_STACK_LINE(5381)
								::zpp_nape::shape::ZPP_Polygon poly = _this->ws1->polygon;		HX_STACK_VAR(poly,"poly");
								HX_STACK_LINE(5381)
								Float bord = 0.0;		HX_STACK_VAR(bord,"bord");
								HX_STACK_LINE(5381)
								Float acc = 0.0;		HX_STACK_VAR(acc,"acc");
								HX_STACK_LINE(5381)
								{
									HX_STACK_LINE(5381)
									::zpp_nape::util::ZNPNode_ZPP_Edge cx_ite = poly->edges->head;		HX_STACK_VAR(cx_ite,"cx_ite");
									HX_STACK_LINE(5381)
									while(((cx_ite != null()))){
										HX_STACK_LINE(5381)
										::zpp_nape::shape::ZPP_Edge ex = cx_ite->elt;		HX_STACK_VAR(ex,"ex");
										HX_STACK_LINE(5381)
										{
											HX_STACK_LINE(5381)
											hx::AddEq(bord,ex->length);
											HX_STACK_LINE(5381)
											Float fact = ((f * ex->length) * (((ex->gnormx * _this->nx) + (ex->gnormy * _this->ny))));		HX_STACK_VAR(fact,"fact");
											HX_STACK_LINE(5381)
											if (((fact > (int)0))){
												HX_STACK_LINE(5381)
												fact = hx::MultEq(fact,-(::nape::Config_obj::fluidVacuumDrag));
											}
											HX_STACK_LINE(5381)
											hx::SubEq(acc,((fact * 0.5) * ::nape::Config_obj::fluidLinearDrag));
										}
										HX_STACK_LINE(5381)
										cx_ite = cx_ite->next;
									}
								}
								HX_STACK_LINE(5381)
								hx::AddEq(tViscosity1,(Float(acc) / Float(bord)));
							}
						}
						HX_STACK_LINE(5381)
						if (((tViscosity1 != (int)0))){
							HX_STACK_LINE(5381)
							Float m = (_this->b1->smass + _this->b2->smass);		HX_STACK_VAR(m,"m");
							HX_STACK_LINE(5381)
							Float Ka = 0.0;		HX_STACK_VAR(Ka,"Ka");
							HX_STACK_LINE(5381)
							Float Kb = 0.0;		HX_STACK_VAR(Kb,"Kb");
							HX_STACK_LINE(5381)
							Float Kc = 0.0;		HX_STACK_VAR(Kc,"Kc");
							HX_STACK_LINE(5381)
							{
								HX_STACK_LINE(5381)
								Ka = m;
								HX_STACK_LINE(5381)
								Kb = (int)0;
								HX_STACK_LINE(5381)
								Kc = m;
							}
							HX_STACK_LINE(5381)
							if (((_this->b1->sinertia != (int)0))){
								HX_STACK_LINE(5381)
								Float X = (_this->r1x * _this->b1->sinertia);		HX_STACK_VAR(X,"X");
								HX_STACK_LINE(5381)
								Float Y = (_this->r1y * _this->b1->sinertia);		HX_STACK_VAR(Y,"Y");
								HX_STACK_LINE(5381)
								{
									HX_STACK_LINE(5381)
									hx::AddEq(Ka,(Y * _this->r1y));
									HX_STACK_LINE(5381)
									hx::AddEq(Kb,(-(Y) * _this->r1x));
									HX_STACK_LINE(5381)
									hx::AddEq(Kc,(X * _this->r1x));
								}
							}
							HX_STACK_LINE(5381)
							if (((_this->b2->sinertia != (int)0))){
								HX_STACK_LINE(5381)
								Float X = (_this->r2x * _this->b2->sinertia);		HX_STACK_VAR(X,"X");
								HX_STACK_LINE(5381)
								Float Y = (_this->r2y * _this->b2->sinertia);		HX_STACK_VAR(Y,"Y");
								HX_STACK_LINE(5381)
								{
									HX_STACK_LINE(5381)
									hx::AddEq(Ka,(Y * _this->r2y));
									HX_STACK_LINE(5381)
									hx::AddEq(Kb,(-(Y) * _this->r2x));
									HX_STACK_LINE(5381)
									hx::AddEq(Kc,(X * _this->r2x));
								}
							}
							HX_STACK_LINE(5381)
							{
								HX_STACK_LINE(5381)
								Float det = ((Ka * Kc) - (Kb * Kb));		HX_STACK_VAR(det,"det");
								HX_STACK_LINE(5381)
								if (((det != det))){
									HX_STACK_LINE(5381)
									Ka = Kb = Kc = (int)0;
									HX_STACK_LINE(5381)
									(int)3;
								}
								else{
									HX_STACK_LINE(5381)
									if (((det == (int)0))){
										HX_STACK_LINE(5381)
										int flag = (int)0;		HX_STACK_VAR(flag,"flag");
										HX_STACK_LINE(5381)
										if (((Ka != (int)0))){
											HX_STACK_LINE(5381)
											Ka = (Float((int)1) / Float(Ka));
										}
										else{
											HX_STACK_LINE(5381)
											Ka = (int)0;
											HX_STACK_LINE(5381)
											hx::OrEq(flag,(int)1);
										}
										HX_STACK_LINE(5381)
										if (((Kc != (int)0))){
											HX_STACK_LINE(5381)
											Kc = (Float((int)1) / Float(Kc));
										}
										else{
											HX_STACK_LINE(5381)
											Kc = (int)0;
											HX_STACK_LINE(5381)
											hx::OrEq(flag,(int)2);
										}
										HX_STACK_LINE(5381)
										Kb = (int)0;
										HX_STACK_LINE(5381)
										flag;
									}
									else{
										HX_STACK_LINE(5381)
										det = (Float((int)1) / Float(det));
										HX_STACK_LINE(5381)
										Float t = (Kc * det);		HX_STACK_VAR(t,"t");
										HX_STACK_LINE(5381)
										Kc = (Ka * det);
										HX_STACK_LINE(5381)
										Ka = t;
										HX_STACK_LINE(5381)
										hx::MultEq(Kb,-(det));
										HX_STACK_LINE(5381)
										(int)0;
									}
								}
							}
							HX_STACK_LINE(5381)
							{
								HX_STACK_LINE(5381)
								_this->vMassa = Ka;
								HX_STACK_LINE(5381)
								_this->vMassb = Kb;
								HX_STACK_LINE(5381)
								_this->vMassc = Kc;
							}
							HX_STACK_LINE(5381)
							Float biasCoef;		HX_STACK_VAR(biasCoef,"biasCoef");
							HX_STACK_LINE(5381)
							{
								struct _Function_7_1{
									inline static Float Block( Float &tViscosity1,Float &biasCoef,::zpp_nape::dynamics::ZPP_FluidArbiter &_this,Float &dt){
										HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5381);
										{
											HX_STACK_LINE(5381)
											Float omega = (((int)2 * ::Math_obj::PI) * tViscosity1);		HX_STACK_VAR(omega,"omega");
											HX_STACK_LINE(5381)
											_this->lgamma = (Float((int)1) / Float((((dt * omega) * (((int)2 + (omega * dt)))))));
											HX_STACK_LINE(5381)
											Float ig = (Float((int)1) / Float((((int)1 + _this->lgamma))));		HX_STACK_VAR(ig,"ig");
											HX_STACK_LINE(5381)
											biasCoef = (((dt * omega) * omega) * _this->lgamma);
											HX_STACK_LINE(5381)
											hx::MultEq(_this->lgamma,ig);
											HX_STACK_LINE(5381)
											return ig;
										}
										return null();
									}
								};
								HX_STACK_LINE(5381)
								Float X = _Function_7_1::Block(tViscosity1,biasCoef,_this,dt);		HX_STACK_VAR(X,"X");
								HX_STACK_LINE(5381)
								hx::MultEq(_this->vMassa,X);
								HX_STACK_LINE(5381)
								hx::MultEq(_this->vMassb,X);
								HX_STACK_LINE(5381)
								hx::MultEq(_this->vMassc,X);
							}
						}
						else{
							HX_STACK_LINE(5381)
							{
								HX_STACK_LINE(5381)
								_this->vMassa = (int)0;
								HX_STACK_LINE(5381)
								_this->vMassb = (int)0;
								HX_STACK_LINE(5381)
								_this->vMassc = (int)0;
							}
							HX_STACK_LINE(5381)
							_this->lgamma = 0.0;
						}
					}
					HX_STACK_LINE(5381)
					{
						HX_STACK_LINE(5381)
						Float t = dtratio;		HX_STACK_VAR(t,"t");
						HX_STACK_LINE(5381)
						{
						}
						HX_STACK_LINE(5381)
						hx::MultEq(_this->dampx,t);
						HX_STACK_LINE(5381)
						hx::MultEq(_this->dampy,t);
					}
					HX_STACK_LINE(5381)
					hx::MultEq(_this->adamp,dtratio);
				}
			}
		}
		else{
			HX_STACK_LINE(5384)
			if (((arb->colarb != null()))){
				struct _Function_3_1{
					inline static bool Block( ::zpp_nape::dynamics::ZPP_Arbiter &arb){
						HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5385);
						{
							HX_STACK_LINE(5385)
							::zpp_nape::dynamics::ZPP_ColArbiter _this = arb->colarb;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(5385)
							bool fst = true;		HX_STACK_VAR(fst,"fst");
							HX_STACK_LINE(5385)
							::zpp_nape::dynamics::ZPP_Contact pre = null();		HX_STACK_VAR(pre,"pre");
							HX_STACK_LINE(5385)
							::zpp_nape::dynamics::ZPP_IContact prei = null();		HX_STACK_VAR(prei,"prei");
							HX_STACK_LINE(5385)
							::zpp_nape::dynamics::ZPP_IContact cx_itei = _this->innards->next;		HX_STACK_VAR(cx_itei,"cx_itei");
							HX_STACK_LINE(5385)
							_this->hc2 = false;
							HX_STACK_LINE(5385)
							{
								HX_STACK_LINE(5385)
								::zpp_nape::dynamics::ZPP_Contact cx_ite = _this->contacts->next;		HX_STACK_VAR(cx_ite,"cx_ite");
								HX_STACK_LINE(5385)
								while(((cx_ite != null()))){
									HX_STACK_LINE(5385)
									::zpp_nape::dynamics::ZPP_Contact c = cx_ite;		HX_STACK_VAR(c,"c");
									HX_STACK_LINE(5385)
									{
										HX_STACK_LINE(5385)
										if ((((c->stamp + ::nape::Config_obj::arbiterExpirationDelay) < _this->stamp))){
											struct _Function_8_1{
												inline static ::zpp_nape::dynamics::ZPP_Contact Block( ::zpp_nape::dynamics::ZPP_ColArbiter &_this,::zpp_nape::dynamics::ZPP_Contact &pre){
													HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5385);
													{
														HX_STACK_LINE(5385)
														::zpp_nape::dynamics::ZPP_Contact _this1 = _this->contacts;		HX_STACK_VAR(_this1,"_this1");
														HX_STACK_LINE(5385)
														{
														}
														HX_STACK_LINE(5385)
														::zpp_nape::dynamics::ZPP_Contact old;		HX_STACK_VAR(old,"old");
														HX_STACK_LINE(5385)
														::zpp_nape::dynamics::ZPP_Contact ret;		HX_STACK_VAR(ret,"ret");
														HX_STACK_LINE(5385)
														if (((pre == null()))){
															HX_STACK_LINE(5385)
															old = _this1->next;
															HX_STACK_LINE(5385)
															ret = old->next;
															HX_STACK_LINE(5385)
															_this1->next = ret;
															HX_STACK_LINE(5385)
															if (((_this1->next == null()))){
																HX_STACK_LINE(5385)
																_this1->pushmod = true;
															}
														}
														else{
															HX_STACK_LINE(5385)
															old = pre->next;
															HX_STACK_LINE(5385)
															ret = old->next;
															HX_STACK_LINE(5385)
															pre->next = ret;
															HX_STACK_LINE(5385)
															if (((ret == null()))){
																HX_STACK_LINE(5385)
																_this1->pushmod = true;
															}
														}
														HX_STACK_LINE(5385)
														old->_inuse = false;
														HX_STACK_LINE(5385)
														{
														}
														HX_STACK_LINE(5385)
														_this1->modified = true;
														HX_STACK_LINE(5385)
														(_this1->length)--;
														HX_STACK_LINE(5385)
														_this1->pushmod = true;
														HX_STACK_LINE(5385)
														return ret;
													}
													return null();
												}
											};
											HX_STACK_LINE(5385)
											cx_ite = _Function_8_1::Block(_this,pre);
											struct _Function_8_2{
												inline static ::zpp_nape::dynamics::ZPP_IContact Block( ::zpp_nape::dynamics::ZPP_ColArbiter &_this,::zpp_nape::dynamics::ZPP_IContact &prei){
													HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",5385);
													{
														HX_STACK_LINE(5385)
														::zpp_nape::dynamics::ZPP_IContact _this1 = _this->innards;		HX_STACK_VAR(_this1,"_this1");
														HX_STACK_LINE(5385)
														{
														}
														HX_STACK_LINE(5385)
														::zpp_nape::dynamics::ZPP_IContact old;		HX_STACK_VAR(old,"old");
														HX_STACK_LINE(5385)
														::zpp_nape::dynamics::ZPP_IContact ret;		HX_STACK_VAR(ret,"ret");
														HX_STACK_LINE(5385)
														if (((prei == null()))){
															HX_STACK_LINE(5385)
															old = _this1->next;
															HX_STACK_LINE(5385)
															ret = old->next;
															HX_STACK_LINE(5385)
															_this1->next = ret;
															HX_STACK_LINE(5385)
															if (((_this1->next == null()))){
																HX_STACK_LINE(5385)
																_this1->pushmod = true;
															}
														}
														else{
															HX_STACK_LINE(5385)
															old = prei->next;
															HX_STACK_LINE(5385)
															ret = old->next;
															HX_STACK_LINE(5385)
															prei->next = ret;
															HX_STACK_LINE(5385)
															if (((ret == null()))){
																HX_STACK_LINE(5385)
																_this1->pushmod = true;
															}
														}
														HX_STACK_LINE(5385)
														old->_inuse = false;
														HX_STACK_LINE(5385)
														{
														}
														HX_STACK_LINE(5385)
														_this1->modified = true;
														HX_STACK_LINE(5385)
														(_this1->length)--;
														HX_STACK_LINE(5385)
														_this1->pushmod = true;
														HX_STACK_LINE(5385)
														return ret;
													}
													return null();
												}
											};
											HX_STACK_LINE(5385)
											cx_itei = _Function_8_2::Block(_this,prei);
											HX_STACK_LINE(5385)
											{
												HX_STACK_LINE(5385)
												::zpp_nape::dynamics::ZPP_Contact o = c;		HX_STACK_VAR(o,"o");
												HX_STACK_LINE(5385)
												{
												}
												HX_STACK_LINE(5385)
												o->arbiter = null();
												HX_STACK_LINE(5385)
												o->next = ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool;
												HX_STACK_LINE(5385)
												::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool = o;
											}
											HX_STACK_LINE(5385)
											continue;
										}
										HX_STACK_LINE(5385)
										::zpp_nape::dynamics::ZPP_IContact ci = c->inner;		HX_STACK_VAR(ci,"ci");
										HX_STACK_LINE(5385)
										bool pact1 = c->active;		HX_STACK_VAR(pact1,"pact1");
										HX_STACK_LINE(5385)
										c->active = (c->stamp == _this->stamp);
										HX_STACK_LINE(5385)
										if ((c->active)){
											HX_STACK_LINE(5385)
											if ((fst)){
												HX_STACK_LINE(5385)
												fst = false;
												HX_STACK_LINE(5385)
												_this->c1 = ci;
												HX_STACK_LINE(5385)
												_this->oc1 = c;
											}
											else{
												HX_STACK_LINE(5385)
												{
												}
												HX_STACK_LINE(5385)
												_this->hc2 = true;
												HX_STACK_LINE(5385)
												_this->c2 = ci;
												HX_STACK_LINE(5385)
												_this->oc2 = c;
											}
										}
										HX_STACK_LINE(5385)
										if (((pact1 != c->active))){
											HX_STACK_LINE(5385)
											_this->contacts->modified = true;
										}
										HX_STACK_LINE(5385)
										pre = cx_ite;
										HX_STACK_LINE(5385)
										prei = cx_itei;
										HX_STACK_LINE(5385)
										cx_itei = cx_itei->next;
									}
									HX_STACK_LINE(5385)
									cx_ite = cx_ite->next;
								}
							}
							HX_STACK_LINE(5385)
							if ((_this->hc2)){
								HX_STACK_LINE(5385)
								_this->hpc2 = true;
								HX_STACK_LINE(5385)
								if ((_this->oc1->posOnly)){
									HX_STACK_LINE(5385)
									::zpp_nape::dynamics::ZPP_IContact tmp = _this->c1;		HX_STACK_VAR(tmp,"tmp");
									HX_STACK_LINE(5385)
									_this->c1 = _this->c2;
									HX_STACK_LINE(5385)
									_this->c2 = tmp;
									HX_STACK_LINE(5385)
									::zpp_nape::dynamics::ZPP_Contact tmp2 = _this->oc1;		HX_STACK_VAR(tmp2,"tmp2");
									HX_STACK_LINE(5385)
									_this->oc1 = _this->oc2;
									HX_STACK_LINE(5385)
									_this->oc2 = tmp2;
									HX_STACK_LINE(5385)
									_this->hc2 = false;
								}
								else{
									HX_STACK_LINE(5385)
									if ((_this->oc2->posOnly)){
										HX_STACK_LINE(5385)
										_this->hc2 = false;
									}
								}
								HX_STACK_LINE(5385)
								if ((_this->oc1->posOnly)){
									HX_STACK_LINE(5385)
									fst = true;
								}
							}
							else{
								HX_STACK_LINE(5385)
								_this->hpc2 = false;
							}
							HX_STACK_LINE(5385)
							return fst;
						}
						return null();
					}
				};
				HX_STACK_LINE(5384)
				if ((_Function_3_1::Block(arb))){
					HX_STACK_LINE(5385)
					arb->active = false;
				}
			}
		}
		HX_STACK_LINE(5387)
		if (((pact != arb->active))){
			HX_STACK_LINE(5388)
			arb->b1->arbiters->modified = true;
			HX_STACK_LINE(5389)
			arb->b2->arbiters->modified = true;
			HX_STACK_LINE(5390)
			this->c_arbiters_true->modified = this->c_arbiters_false->modified = true;
			HX_STACK_LINE(5391)
			this->s_arbiters->modified = this->f_arbiters->modified = true;
		}
		HX_STACK_LINE(5393)
		return false;
	}
}


HX_DEFINE_DYNAMIC_FUNC3(ZPP_Space_obj,presteparb,return )

Void ZPP_Space_obj::updatePos( Float dt){
{
		HX_STACK_PUSH("ZPP_Space::updatePos","zpp_nape/space/Space.hx",5061);
		HX_STACK_THIS(this);
		HX_STACK_ARG(dt,"dt");
		HX_STACK_LINE(5062)
		Float MAX_VEL = (Float(((int)2 * ::Math_obj::PI)) / Float(dt));		HX_STACK_VAR(MAX_VEL,"MAX_VEL");
		HX_STACK_LINE(5063)
		{
			HX_STACK_LINE(5065)
			::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = this->live->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(5066)
			while(((cx_ite != null()))){
				HX_STACK_LINE(5067)
				::zpp_nape::phys::ZPP_Body cur = cx_ite->elt;		HX_STACK_VAR(cur,"cur");
				HX_STACK_LINE(5068)
				{
					HX_STACK_LINE(5069)
					{
						HX_STACK_LINE(5070)
						cur->pre_posx = cur->posx;
						HX_STACK_LINE(5071)
						cur->pre_posy = cur->posy;
						HX_STACK_LINE(5072)
						{
						}
						HX_STACK_LINE(5080)
						{
						}
					}
					HX_STACK_LINE(5089)
					cur->pre_rot = cur->rot;
					HX_STACK_LINE(5090)
					cur->sweepTime = (int)0;
					HX_STACK_LINE(5091)
					cur->sweep_angvel = hx::Mod(cur->angvel,MAX_VEL);
					HX_STACK_LINE(5092)
					{
						HX_STACK_LINE(5092)
						Float delta = (dt - cur->sweepTime);		HX_STACK_VAR(delta,"delta");
						HX_STACK_LINE(5092)
						if (((delta != (int)0))){
							HX_STACK_LINE(5092)
							{
							}
							HX_STACK_LINE(5092)
							cur->sweepTime = dt;
							HX_STACK_LINE(5092)
							{
								HX_STACK_LINE(5092)
								Float t = delta;		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(5092)
								{
								}
								HX_STACK_LINE(5092)
								hx::AddEq(cur->posx,(cur->velx * t));
								HX_STACK_LINE(5092)
								hx::AddEq(cur->posy,(cur->vely * t));
							}
							HX_STACK_LINE(5092)
							if (((cur->angvel != (int)0))){
								HX_STACK_LINE(5092)
								Float dr = (cur->sweep_angvel * delta);		HX_STACK_VAR(dr,"dr");
								HX_STACK_LINE(5092)
								hx::AddEq(cur->rot,dr);
								HX_STACK_LINE(5092)
								if ((((dr * dr) > 0.0001))){
									HX_STACK_LINE(5092)
									cur->axisx = ::Math_obj::sin(cur->rot);
									HX_STACK_LINE(5092)
									cur->axisy = ::Math_obj::cos(cur->rot);
									HX_STACK_LINE(5092)
									{
									}
									HX_STACK_LINE(5092)
									Dynamic();
								}
								else{
									HX_STACK_LINE(5092)
									Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
									HX_STACK_LINE(5092)
									Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
									HX_STACK_LINE(5092)
									Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
									HX_STACK_LINE(5092)
									Float nx = ((((p * cur->axisx) + (dr * cur->axisy))) * m);		HX_STACK_VAR(nx,"nx");
									HX_STACK_LINE(5092)
									cur->axisy = ((((p * cur->axisy) - (dr * cur->axisx))) * m);
									HX_STACK_LINE(5092)
									cur->axisx = nx;
								}
							}
						}
					}
					HX_STACK_LINE(5093)
					if ((!(cur->disableCCD))){
						HX_STACK_LINE(5094)
						Float linThreshold = (::nape::Config_obj::staticCCDLinearThreshold * cur->sweepRadius);		HX_STACK_VAR(linThreshold,"linThreshold");
						HX_STACK_LINE(5095)
						Float angThreshold = ::nape::Config_obj::staticCCDAngularThreshold;		HX_STACK_VAR(angThreshold,"angThreshold");
						HX_STACK_LINE(5096)
						if (((bool((bool(((((((cur->velx * cur->velx) + (cur->vely * cur->vely))) * dt) * dt) > (linThreshold * linThreshold))) || bool(((((cur->angvel * cur->angvel) * dt) * dt) > (angThreshold * angThreshold))))) || bool((cur->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC))))){
							HX_STACK_LINE(5097)
							Array< int > col = Array_obj< int >::__new().Add((int)65280).Add((int)65535).Add((int)255).Add((int)16711935).Add((int)65280).Add((int)65535).Add((int)255).Add((int)16711935);		HX_STACK_VAR(col,"col");
							HX_STACK_LINE(5098)
							Float angvel = cur->sweep_angvel;		HX_STACK_VAR(angvel,"angvel");
							HX_STACK_LINE(5099)
							if (((angvel < (int)0))){
								HX_STACK_LINE(5099)
								angvel = -(angvel);
							}
							HX_STACK_LINE(5100)
							Float iangvel = (Float((int)1) / Float(angvel));		HX_STACK_VAR(iangvel,"iangvel");
							HX_STACK_LINE(5101)
							{
								HX_STACK_LINE(5102)
								::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite1 = cur->shapes->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
								HX_STACK_LINE(5103)
								while(((cx_ite1 != null()))){
									HX_STACK_LINE(5104)
									::zpp_nape::shape::ZPP_Shape s = cx_ite1->elt;		HX_STACK_VAR(s,"s");
									HX_STACK_LINE(5105)
									{
										HX_STACK_LINE(5106)
										::zpp_nape::geom::ZPP_AABB aabb = s->aabb;		HX_STACK_VAR(aabb,"aabb");
										HX_STACK_LINE(5107)
										Float minx = aabb->minx;		HX_STACK_VAR(minx,"minx");
										HX_STACK_LINE(5108)
										Float miny = aabb->miny;		HX_STACK_VAR(miny,"miny");
										HX_STACK_LINE(5109)
										Float maxx = aabb->maxx;		HX_STACK_VAR(maxx,"maxx");
										HX_STACK_LINE(5110)
										Float maxy = aabb->maxy;		HX_STACK_VAR(maxy,"maxy");
										HX_STACK_LINE(5111)
										int count = ::Std_obj::_int((((angvel * dt) * s->sweepCoef) * ((Float((int)1) / Float((int)120)))));		HX_STACK_VAR(count,"count");
										HX_STACK_LINE(5112)
										if (((count > (int)8))){
											HX_STACK_LINE(5112)
											count = (int)8;
										}
										HX_STACK_LINE(5113)
										Float anginc = (Float((angvel * dt)) / Float(count));		HX_STACK_VAR(anginc,"anginc");
										HX_STACK_LINE(5114)
										{
											HX_STACK_LINE(5114)
											Float delta = (dt - cur->sweepTime);		HX_STACK_VAR(delta,"delta");
											HX_STACK_LINE(5114)
											if (((delta != (int)0))){
												HX_STACK_LINE(5114)
												{
												}
												HX_STACK_LINE(5114)
												cur->sweepTime = dt;
												HX_STACK_LINE(5114)
												{
													HX_STACK_LINE(5114)
													Float t = delta;		HX_STACK_VAR(t,"t");
													HX_STACK_LINE(5114)
													{
													}
													HX_STACK_LINE(5114)
													hx::AddEq(cur->posx,(cur->velx * t));
													HX_STACK_LINE(5114)
													hx::AddEq(cur->posy,(cur->vely * t));
												}
												HX_STACK_LINE(5114)
												if (((cur->angvel != (int)0))){
													HX_STACK_LINE(5114)
													Float dr = (cur->sweep_angvel * delta);		HX_STACK_VAR(dr,"dr");
													HX_STACK_LINE(5114)
													hx::AddEq(cur->rot,dr);
													HX_STACK_LINE(5114)
													if ((((dr * dr) > 0.0001))){
														HX_STACK_LINE(5114)
														cur->axisx = ::Math_obj::sin(cur->rot);
														HX_STACK_LINE(5114)
														cur->axisy = ::Math_obj::cos(cur->rot);
														HX_STACK_LINE(5114)
														{
														}
														HX_STACK_LINE(5114)
														Dynamic();
													}
													else{
														HX_STACK_LINE(5114)
														Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
														HX_STACK_LINE(5114)
														Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
														HX_STACK_LINE(5114)
														Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
														HX_STACK_LINE(5114)
														Float nx = ((((p * cur->axisx) + (dr * cur->axisy))) * m);		HX_STACK_VAR(nx,"nx");
														HX_STACK_LINE(5114)
														cur->axisy = ((((p * cur->axisy) - (dr * cur->axisx))) * m);
														HX_STACK_LINE(5114)
														cur->axisx = nx;
													}
												}
											}
										}
										HX_STACK_LINE(5115)
										if (((s->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE))){
											HX_STACK_LINE(5115)
											::zpp_nape::shape::ZPP_Circle _this = s->circle;		HX_STACK_VAR(_this,"_this");
											HX_STACK_LINE(5115)
											{
												HX_STACK_LINE(5115)
												_this->worldCOMx = (_this->body->posx + (((_this->body->axisy * _this->localCOMx) - (_this->body->axisx * _this->localCOMy))));
												HX_STACK_LINE(5115)
												_this->worldCOMy = (_this->body->posy + (((_this->localCOMx * _this->body->axisx) + (_this->localCOMy * _this->body->axisy))));
											}
											HX_STACK_LINE(5115)
											_this->aabb->minx = (_this->worldCOMx - _this->radius);
											HX_STACK_LINE(5115)
											_this->aabb->miny = (_this->worldCOMy - _this->radius);
											HX_STACK_LINE(5115)
											_this->aabb->maxx = (_this->worldCOMx + _this->radius);
											HX_STACK_LINE(5115)
											_this->aabb->maxy = (_this->worldCOMy + _this->radius);
										}
										else{
											HX_STACK_LINE(5115)
											::zpp_nape::shape::ZPP_Polygon _this = s->polygon;		HX_STACK_VAR(_this,"_this");
											HX_STACK_LINE(5115)
											::zpp_nape::geom::ZPP_Vec2 li = _this->lverts->next;		HX_STACK_VAR(li,"li");
											HX_STACK_LINE(5115)
											::zpp_nape::geom::ZPP_Vec2 p0 = _this->gverts->next;		HX_STACK_VAR(p0,"p0");
											HX_STACK_LINE(5115)
											::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
											HX_STACK_LINE(5115)
											li = li->next;
											HX_STACK_LINE(5115)
											{
												HX_STACK_LINE(5115)
												p0->x = (_this->body->posx + (((_this->body->axisy * l->x) - (_this->body->axisx * l->y))));
												HX_STACK_LINE(5115)
												p0->y = (_this->body->posy + (((l->x * _this->body->axisx) + (l->y * _this->body->axisy))));
											}
											HX_STACK_LINE(5115)
											{
												HX_STACK_LINE(5115)
												_this->aabb->minx = p0->x;
												HX_STACK_LINE(5115)
												_this->aabb->miny = p0->y;
												HX_STACK_LINE(5115)
												{
												}
												HX_STACK_LINE(5115)
												{
												}
											}
											HX_STACK_LINE(5115)
											{
												HX_STACK_LINE(5115)
												_this->aabb->maxx = p0->x;
												HX_STACK_LINE(5115)
												_this->aabb->maxy = p0->y;
												HX_STACK_LINE(5115)
												{
												}
												HX_STACK_LINE(5115)
												{
												}
											}
											HX_STACK_LINE(5115)
											{
												HX_STACK_LINE(5115)
												::zpp_nape::geom::ZPP_Vec2 cx_ite2 = _this->gverts->next->next;		HX_STACK_VAR(cx_ite2,"cx_ite2");
												HX_STACK_LINE(5115)
												while(((cx_ite2 != null()))){
													HX_STACK_LINE(5115)
													::zpp_nape::geom::ZPP_Vec2 p = cx_ite2;		HX_STACK_VAR(p,"p");
													HX_STACK_LINE(5115)
													{
														HX_STACK_LINE(5115)
														::zpp_nape::geom::ZPP_Vec2 l1 = li;		HX_STACK_VAR(l1,"l1");
														HX_STACK_LINE(5115)
														li = li->next;
														HX_STACK_LINE(5115)
														{
															HX_STACK_LINE(5115)
															p->x = (_this->body->posx + (((_this->body->axisy * l1->x) - (_this->body->axisx * l1->y))));
															HX_STACK_LINE(5115)
															p->y = (_this->body->posy + (((l1->x * _this->body->axisx) + (l1->y * _this->body->axisy))));
														}
														HX_STACK_LINE(5115)
														if (((p->x < _this->aabb->minx))){
															HX_STACK_LINE(5115)
															_this->aabb->minx = p->x;
														}
														HX_STACK_LINE(5115)
														if (((p->x > _this->aabb->maxx))){
															HX_STACK_LINE(5115)
															_this->aabb->maxx = p->x;
														}
														HX_STACK_LINE(5115)
														if (((p->y < _this->aabb->miny))){
															HX_STACK_LINE(5115)
															_this->aabb->miny = p->y;
														}
														HX_STACK_LINE(5115)
														if (((p->y > _this->aabb->maxy))){
															HX_STACK_LINE(5115)
															_this->aabb->maxy = p->y;
														}
													}
													HX_STACK_LINE(5115)
													cx_ite2 = cx_ite2->next;
												}
											}
										}
										HX_STACK_LINE(5116)
										if (((minx < aabb->minx))){
											HX_STACK_LINE(5116)
											aabb->minx = minx;
										}
										else{
											HX_STACK_LINE(5116)
											minx = aabb->minx;
										}
										HX_STACK_LINE(5117)
										if (((miny < aabb->miny))){
											HX_STACK_LINE(5117)
											aabb->miny = miny;
										}
										else{
											HX_STACK_LINE(5117)
											miny = aabb->miny;
										}
										HX_STACK_LINE(5118)
										if (((maxx > aabb->maxx))){
											HX_STACK_LINE(5118)
											aabb->maxx = maxx;
										}
										else{
											HX_STACK_LINE(5118)
											maxx = aabb->maxx;
										}
										HX_STACK_LINE(5119)
										if (((maxy > aabb->maxy))){
											HX_STACK_LINE(5119)
											aabb->maxy = maxy;
										}
										else{
											HX_STACK_LINE(5119)
											maxy = aabb->maxy;
										}
										HX_STACK_LINE(5120)
										{
											HX_STACK_LINE(5120)
											int _g = (int)1;		HX_STACK_VAR(_g,"_g");
											HX_STACK_LINE(5120)
											while(((_g < count))){
												HX_STACK_LINE(5120)
												int i = (_g)++;		HX_STACK_VAR(i,"i");
												HX_STACK_LINE(5121)
												{
													HX_STACK_LINE(5121)
													Float dt1 = ((anginc * i) * iangvel);		HX_STACK_VAR(dt1,"dt1");
													HX_STACK_LINE(5121)
													Float delta = (dt1 - cur->sweepTime);		HX_STACK_VAR(delta,"delta");
													HX_STACK_LINE(5121)
													if (((delta != (int)0))){
														HX_STACK_LINE(5121)
														{
														}
														HX_STACK_LINE(5121)
														cur->sweepTime = dt1;
														HX_STACK_LINE(5121)
														{
															HX_STACK_LINE(5121)
															Float t = delta;		HX_STACK_VAR(t,"t");
															HX_STACK_LINE(5121)
															{
															}
															HX_STACK_LINE(5121)
															hx::AddEq(cur->posx,(cur->velx * t));
															HX_STACK_LINE(5121)
															hx::AddEq(cur->posy,(cur->vely * t));
														}
														HX_STACK_LINE(5121)
														if (((cur->angvel != (int)0))){
															HX_STACK_LINE(5121)
															Float dr = (cur->sweep_angvel * delta);		HX_STACK_VAR(dr,"dr");
															HX_STACK_LINE(5121)
															hx::AddEq(cur->rot,dr);
															HX_STACK_LINE(5121)
															if ((((dr * dr) > 0.0001))){
																HX_STACK_LINE(5121)
																cur->axisx = ::Math_obj::sin(cur->rot);
																HX_STACK_LINE(5121)
																cur->axisy = ::Math_obj::cos(cur->rot);
																HX_STACK_LINE(5121)
																{
																}
																HX_STACK_LINE(5121)
																Dynamic();
															}
															else{
																HX_STACK_LINE(5121)
																Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
																HX_STACK_LINE(5121)
																Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
																HX_STACK_LINE(5121)
																Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
																HX_STACK_LINE(5121)
																Float nx = ((((p * cur->axisx) + (dr * cur->axisy))) * m);		HX_STACK_VAR(nx,"nx");
																HX_STACK_LINE(5121)
																cur->axisy = ((((p * cur->axisy) - (dr * cur->axisx))) * m);
																HX_STACK_LINE(5121)
																cur->axisx = nx;
															}
														}
													}
												}
												HX_STACK_LINE(5122)
												if (((s->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE))){
													HX_STACK_LINE(5122)
													::zpp_nape::shape::ZPP_Circle _this = s->circle;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(5122)
													{
														HX_STACK_LINE(5122)
														_this->worldCOMx = (_this->body->posx + (((_this->body->axisy * _this->localCOMx) - (_this->body->axisx * _this->localCOMy))));
														HX_STACK_LINE(5122)
														_this->worldCOMy = (_this->body->posy + (((_this->localCOMx * _this->body->axisx) + (_this->localCOMy * _this->body->axisy))));
													}
													HX_STACK_LINE(5122)
													_this->aabb->minx = (_this->worldCOMx - _this->radius);
													HX_STACK_LINE(5122)
													_this->aabb->miny = (_this->worldCOMy - _this->radius);
													HX_STACK_LINE(5122)
													_this->aabb->maxx = (_this->worldCOMx + _this->radius);
													HX_STACK_LINE(5122)
													_this->aabb->maxy = (_this->worldCOMy + _this->radius);
												}
												else{
													HX_STACK_LINE(5122)
													::zpp_nape::shape::ZPP_Polygon _this = s->polygon;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(5122)
													::zpp_nape::geom::ZPP_Vec2 li = _this->lverts->next;		HX_STACK_VAR(li,"li");
													HX_STACK_LINE(5122)
													::zpp_nape::geom::ZPP_Vec2 p0 = _this->gverts->next;		HX_STACK_VAR(p0,"p0");
													HX_STACK_LINE(5122)
													::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
													HX_STACK_LINE(5122)
													li = li->next;
													HX_STACK_LINE(5122)
													{
														HX_STACK_LINE(5122)
														p0->x = (_this->body->posx + (((_this->body->axisy * l->x) - (_this->body->axisx * l->y))));
														HX_STACK_LINE(5122)
														p0->y = (_this->body->posy + (((l->x * _this->body->axisx) + (l->y * _this->body->axisy))));
													}
													HX_STACK_LINE(5122)
													{
														HX_STACK_LINE(5122)
														_this->aabb->minx = p0->x;
														HX_STACK_LINE(5122)
														_this->aabb->miny = p0->y;
														HX_STACK_LINE(5122)
														{
														}
														HX_STACK_LINE(5122)
														{
														}
													}
													HX_STACK_LINE(5122)
													{
														HX_STACK_LINE(5122)
														_this->aabb->maxx = p0->x;
														HX_STACK_LINE(5122)
														_this->aabb->maxy = p0->y;
														HX_STACK_LINE(5122)
														{
														}
														HX_STACK_LINE(5122)
														{
														}
													}
													HX_STACK_LINE(5122)
													{
														HX_STACK_LINE(5122)
														::zpp_nape::geom::ZPP_Vec2 cx_ite2 = _this->gverts->next->next;		HX_STACK_VAR(cx_ite2,"cx_ite2");
														HX_STACK_LINE(5122)
														while(((cx_ite2 != null()))){
															HX_STACK_LINE(5122)
															::zpp_nape::geom::ZPP_Vec2 p = cx_ite2;		HX_STACK_VAR(p,"p");
															HX_STACK_LINE(5122)
															{
																HX_STACK_LINE(5122)
																::zpp_nape::geom::ZPP_Vec2 l1 = li;		HX_STACK_VAR(l1,"l1");
																HX_STACK_LINE(5122)
																li = li->next;
																HX_STACK_LINE(5122)
																{
																	HX_STACK_LINE(5122)
																	p->x = (_this->body->posx + (((_this->body->axisy * l1->x) - (_this->body->axisx * l1->y))));
																	HX_STACK_LINE(5122)
																	p->y = (_this->body->posy + (((l1->x * _this->body->axisx) + (l1->y * _this->body->axisy))));
																}
																HX_STACK_LINE(5122)
																if (((p->x < _this->aabb->minx))){
																	HX_STACK_LINE(5122)
																	_this->aabb->minx = p->x;
																}
																HX_STACK_LINE(5122)
																if (((p->x > _this->aabb->maxx))){
																	HX_STACK_LINE(5122)
																	_this->aabb->maxx = p->x;
																}
																HX_STACK_LINE(5122)
																if (((p->y < _this->aabb->miny))){
																	HX_STACK_LINE(5122)
																	_this->aabb->miny = p->y;
																}
																HX_STACK_LINE(5122)
																if (((p->y > _this->aabb->maxy))){
																	HX_STACK_LINE(5122)
																	_this->aabb->maxy = p->y;
																}
															}
															HX_STACK_LINE(5122)
															cx_ite2 = cx_ite2->next;
														}
													}
												}
												HX_STACK_LINE(5123)
												if (((minx < aabb->minx))){
													HX_STACK_LINE(5123)
													aabb->minx = minx;
												}
												else{
													HX_STACK_LINE(5123)
													minx = aabb->minx;
												}
												HX_STACK_LINE(5124)
												if (((miny < aabb->miny))){
													HX_STACK_LINE(5124)
													aabb->miny = miny;
												}
												else{
													HX_STACK_LINE(5124)
													miny = aabb->miny;
												}
												HX_STACK_LINE(5125)
												if (((maxx > aabb->maxx))){
													HX_STACK_LINE(5125)
													aabb->maxx = maxx;
												}
												else{
													HX_STACK_LINE(5125)
													maxx = aabb->maxx;
												}
												HX_STACK_LINE(5126)
												if (((maxy > aabb->maxy))){
													HX_STACK_LINE(5126)
													aabb->maxy = maxy;
												}
												else{
													HX_STACK_LINE(5126)
													maxy = aabb->maxy;
												}
											}
										}
										HX_STACK_LINE(5128)
										this->bphase->sync(s);
									}
									HX_STACK_LINE(5130)
									cx_ite1 = cx_ite1->next;
								}
							}
							HX_STACK_LINE(5133)
							cur->sweepFrozen = false;
							HX_STACK_LINE(5134)
							if (((bool((cur->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC)) && bool(cur->bulletEnabled)))){
								HX_STACK_LINE(5135)
								Float linThreshold2 = (::nape::Config_obj::bulletCCDLinearThreshold * cur->sweepRadius);		HX_STACK_VAR(linThreshold2,"linThreshold2");
								HX_STACK_LINE(5136)
								Float angThreshold2 = ::nape::Config_obj::bulletCCDAngularThreshold;		HX_STACK_VAR(angThreshold2,"angThreshold2");
								HX_STACK_LINE(5137)
								if (((bool(((((((cur->velx * cur->velx) + (cur->vely * cur->vely))) * dt) * dt) > (linThreshold2 * linThreshold2))) || bool(((((cur->angvel * cur->angvel) * dt) * dt) > (angThreshold2 * angThreshold2)))))){
									HX_STACK_LINE(5137)
									cur->bullet = true;
								}
							}
						}
						else{
							HX_STACK_LINE(5143)
							cur->sweepFrozen = true;
							HX_STACK_LINE(5144)
							cur->bullet = false;
						}
					}
					else{
						HX_STACK_LINE(5148)
						cur->sweepFrozen = true;
						HX_STACK_LINE(5149)
						cur->bullet = false;
					}
				}
				HX_STACK_LINE(5152)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(5156)
		{
			HX_STACK_LINE(5158)
			::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = this->kinematics->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(5159)
			while(((cx_ite != null()))){
				HX_STACK_LINE(5160)
				::zpp_nape::phys::ZPP_Body cur = cx_ite->elt;		HX_STACK_VAR(cur,"cur");
				HX_STACK_LINE(5161)
				{
					HX_STACK_LINE(5162)
					{
						HX_STACK_LINE(5163)
						cur->pre_posx = cur->posx;
						HX_STACK_LINE(5164)
						cur->pre_posy = cur->posy;
						HX_STACK_LINE(5165)
						{
						}
						HX_STACK_LINE(5173)
						{
						}
					}
					HX_STACK_LINE(5182)
					cur->pre_rot = cur->rot;
					HX_STACK_LINE(5183)
					cur->sweepTime = (int)0;
					HX_STACK_LINE(5184)
					cur->sweep_angvel = hx::Mod(cur->angvel,MAX_VEL);
					HX_STACK_LINE(5185)
					{
						HX_STACK_LINE(5185)
						Float delta = (dt - cur->sweepTime);		HX_STACK_VAR(delta,"delta");
						HX_STACK_LINE(5185)
						if (((delta != (int)0))){
							HX_STACK_LINE(5185)
							{
							}
							HX_STACK_LINE(5185)
							cur->sweepTime = dt;
							HX_STACK_LINE(5185)
							{
								HX_STACK_LINE(5185)
								Float t = delta;		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(5185)
								{
								}
								HX_STACK_LINE(5185)
								hx::AddEq(cur->posx,(cur->velx * t));
								HX_STACK_LINE(5185)
								hx::AddEq(cur->posy,(cur->vely * t));
							}
							HX_STACK_LINE(5185)
							if (((cur->angvel != (int)0))){
								HX_STACK_LINE(5185)
								Float dr = (cur->sweep_angvel * delta);		HX_STACK_VAR(dr,"dr");
								HX_STACK_LINE(5185)
								hx::AddEq(cur->rot,dr);
								HX_STACK_LINE(5185)
								if ((((dr * dr) > 0.0001))){
									HX_STACK_LINE(5185)
									cur->axisx = ::Math_obj::sin(cur->rot);
									HX_STACK_LINE(5185)
									cur->axisy = ::Math_obj::cos(cur->rot);
									HX_STACK_LINE(5185)
									{
									}
									HX_STACK_LINE(5185)
									Dynamic();
								}
								else{
									HX_STACK_LINE(5185)
									Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
									HX_STACK_LINE(5185)
									Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
									HX_STACK_LINE(5185)
									Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
									HX_STACK_LINE(5185)
									Float nx = ((((p * cur->axisx) + (dr * cur->axisy))) * m);		HX_STACK_VAR(nx,"nx");
									HX_STACK_LINE(5185)
									cur->axisy = ((((p * cur->axisy) - (dr * cur->axisx))) * m);
									HX_STACK_LINE(5185)
									cur->axisx = nx;
								}
							}
						}
					}
					HX_STACK_LINE(5186)
					if ((!(cur->disableCCD))){
						HX_STACK_LINE(5187)
						Float linThreshold = (::nape::Config_obj::staticCCDLinearThreshold * cur->sweepRadius);		HX_STACK_VAR(linThreshold,"linThreshold");
						HX_STACK_LINE(5188)
						Float angThreshold = ::nape::Config_obj::staticCCDAngularThreshold;		HX_STACK_VAR(angThreshold,"angThreshold");
						HX_STACK_LINE(5189)
						if (((bool((bool(((((((cur->velx * cur->velx) + (cur->vely * cur->vely))) * dt) * dt) > (linThreshold * linThreshold))) || bool(((((cur->angvel * cur->angvel) * dt) * dt) > (angThreshold * angThreshold))))) || bool((cur->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC))))){
							HX_STACK_LINE(5190)
							Array< int > col = Array_obj< int >::__new().Add((int)65280).Add((int)65535).Add((int)255).Add((int)16711935).Add((int)65280).Add((int)65535).Add((int)255).Add((int)16711935);		HX_STACK_VAR(col,"col");
							HX_STACK_LINE(5191)
							Float angvel = cur->sweep_angvel;		HX_STACK_VAR(angvel,"angvel");
							HX_STACK_LINE(5192)
							if (((angvel < (int)0))){
								HX_STACK_LINE(5192)
								angvel = -(angvel);
							}
							HX_STACK_LINE(5193)
							Float iangvel = (Float((int)1) / Float(angvel));		HX_STACK_VAR(iangvel,"iangvel");
							HX_STACK_LINE(5194)
							{
								HX_STACK_LINE(5195)
								::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite1 = cur->shapes->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
								HX_STACK_LINE(5196)
								while(((cx_ite1 != null()))){
									HX_STACK_LINE(5197)
									::zpp_nape::shape::ZPP_Shape s = cx_ite1->elt;		HX_STACK_VAR(s,"s");
									HX_STACK_LINE(5198)
									{
										HX_STACK_LINE(5199)
										::zpp_nape::geom::ZPP_AABB aabb = s->aabb;		HX_STACK_VAR(aabb,"aabb");
										HX_STACK_LINE(5200)
										Float minx = aabb->minx;		HX_STACK_VAR(minx,"minx");
										HX_STACK_LINE(5201)
										Float miny = aabb->miny;		HX_STACK_VAR(miny,"miny");
										HX_STACK_LINE(5202)
										Float maxx = aabb->maxx;		HX_STACK_VAR(maxx,"maxx");
										HX_STACK_LINE(5203)
										Float maxy = aabb->maxy;		HX_STACK_VAR(maxy,"maxy");
										HX_STACK_LINE(5204)
										int count = ::Std_obj::_int((((angvel * dt) * s->sweepCoef) * ((Float((int)1) / Float((int)120)))));		HX_STACK_VAR(count,"count");
										HX_STACK_LINE(5205)
										if (((count > (int)8))){
											HX_STACK_LINE(5205)
											count = (int)8;
										}
										HX_STACK_LINE(5206)
										Float anginc = (Float((angvel * dt)) / Float(count));		HX_STACK_VAR(anginc,"anginc");
										HX_STACK_LINE(5207)
										{
											HX_STACK_LINE(5207)
											Float delta = (dt - cur->sweepTime);		HX_STACK_VAR(delta,"delta");
											HX_STACK_LINE(5207)
											if (((delta != (int)0))){
												HX_STACK_LINE(5207)
												{
												}
												HX_STACK_LINE(5207)
												cur->sweepTime = dt;
												HX_STACK_LINE(5207)
												{
													HX_STACK_LINE(5207)
													Float t = delta;		HX_STACK_VAR(t,"t");
													HX_STACK_LINE(5207)
													{
													}
													HX_STACK_LINE(5207)
													hx::AddEq(cur->posx,(cur->velx * t));
													HX_STACK_LINE(5207)
													hx::AddEq(cur->posy,(cur->vely * t));
												}
												HX_STACK_LINE(5207)
												if (((cur->angvel != (int)0))){
													HX_STACK_LINE(5207)
													Float dr = (cur->sweep_angvel * delta);		HX_STACK_VAR(dr,"dr");
													HX_STACK_LINE(5207)
													hx::AddEq(cur->rot,dr);
													HX_STACK_LINE(5207)
													if ((((dr * dr) > 0.0001))){
														HX_STACK_LINE(5207)
														cur->axisx = ::Math_obj::sin(cur->rot);
														HX_STACK_LINE(5207)
														cur->axisy = ::Math_obj::cos(cur->rot);
														HX_STACK_LINE(5207)
														{
														}
														HX_STACK_LINE(5207)
														Dynamic();
													}
													else{
														HX_STACK_LINE(5207)
														Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
														HX_STACK_LINE(5207)
														Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
														HX_STACK_LINE(5207)
														Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
														HX_STACK_LINE(5207)
														Float nx = ((((p * cur->axisx) + (dr * cur->axisy))) * m);		HX_STACK_VAR(nx,"nx");
														HX_STACK_LINE(5207)
														cur->axisy = ((((p * cur->axisy) - (dr * cur->axisx))) * m);
														HX_STACK_LINE(5207)
														cur->axisx = nx;
													}
												}
											}
										}
										HX_STACK_LINE(5208)
										if (((s->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE))){
											HX_STACK_LINE(5208)
											::zpp_nape::shape::ZPP_Circle _this = s->circle;		HX_STACK_VAR(_this,"_this");
											HX_STACK_LINE(5208)
											{
												HX_STACK_LINE(5208)
												_this->worldCOMx = (_this->body->posx + (((_this->body->axisy * _this->localCOMx) - (_this->body->axisx * _this->localCOMy))));
												HX_STACK_LINE(5208)
												_this->worldCOMy = (_this->body->posy + (((_this->localCOMx * _this->body->axisx) + (_this->localCOMy * _this->body->axisy))));
											}
											HX_STACK_LINE(5208)
											_this->aabb->minx = (_this->worldCOMx - _this->radius);
											HX_STACK_LINE(5208)
											_this->aabb->miny = (_this->worldCOMy - _this->radius);
											HX_STACK_LINE(5208)
											_this->aabb->maxx = (_this->worldCOMx + _this->radius);
											HX_STACK_LINE(5208)
											_this->aabb->maxy = (_this->worldCOMy + _this->radius);
										}
										else{
											HX_STACK_LINE(5208)
											::zpp_nape::shape::ZPP_Polygon _this = s->polygon;		HX_STACK_VAR(_this,"_this");
											HX_STACK_LINE(5208)
											::zpp_nape::geom::ZPP_Vec2 li = _this->lverts->next;		HX_STACK_VAR(li,"li");
											HX_STACK_LINE(5208)
											::zpp_nape::geom::ZPP_Vec2 p0 = _this->gverts->next;		HX_STACK_VAR(p0,"p0");
											HX_STACK_LINE(5208)
											::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
											HX_STACK_LINE(5208)
											li = li->next;
											HX_STACK_LINE(5208)
											{
												HX_STACK_LINE(5208)
												p0->x = (_this->body->posx + (((_this->body->axisy * l->x) - (_this->body->axisx * l->y))));
												HX_STACK_LINE(5208)
												p0->y = (_this->body->posy + (((l->x * _this->body->axisx) + (l->y * _this->body->axisy))));
											}
											HX_STACK_LINE(5208)
											{
												HX_STACK_LINE(5208)
												_this->aabb->minx = p0->x;
												HX_STACK_LINE(5208)
												_this->aabb->miny = p0->y;
												HX_STACK_LINE(5208)
												{
												}
												HX_STACK_LINE(5208)
												{
												}
											}
											HX_STACK_LINE(5208)
											{
												HX_STACK_LINE(5208)
												_this->aabb->maxx = p0->x;
												HX_STACK_LINE(5208)
												_this->aabb->maxy = p0->y;
												HX_STACK_LINE(5208)
												{
												}
												HX_STACK_LINE(5208)
												{
												}
											}
											HX_STACK_LINE(5208)
											{
												HX_STACK_LINE(5208)
												::zpp_nape::geom::ZPP_Vec2 cx_ite2 = _this->gverts->next->next;		HX_STACK_VAR(cx_ite2,"cx_ite2");
												HX_STACK_LINE(5208)
												while(((cx_ite2 != null()))){
													HX_STACK_LINE(5208)
													::zpp_nape::geom::ZPP_Vec2 p = cx_ite2;		HX_STACK_VAR(p,"p");
													HX_STACK_LINE(5208)
													{
														HX_STACK_LINE(5208)
														::zpp_nape::geom::ZPP_Vec2 l1 = li;		HX_STACK_VAR(l1,"l1");
														HX_STACK_LINE(5208)
														li = li->next;
														HX_STACK_LINE(5208)
														{
															HX_STACK_LINE(5208)
															p->x = (_this->body->posx + (((_this->body->axisy * l1->x) - (_this->body->axisx * l1->y))));
															HX_STACK_LINE(5208)
															p->y = (_this->body->posy + (((l1->x * _this->body->axisx) + (l1->y * _this->body->axisy))));
														}
														HX_STACK_LINE(5208)
														if (((p->x < _this->aabb->minx))){
															HX_STACK_LINE(5208)
															_this->aabb->minx = p->x;
														}
														HX_STACK_LINE(5208)
														if (((p->x > _this->aabb->maxx))){
															HX_STACK_LINE(5208)
															_this->aabb->maxx = p->x;
														}
														HX_STACK_LINE(5208)
														if (((p->y < _this->aabb->miny))){
															HX_STACK_LINE(5208)
															_this->aabb->miny = p->y;
														}
														HX_STACK_LINE(5208)
														if (((p->y > _this->aabb->maxy))){
															HX_STACK_LINE(5208)
															_this->aabb->maxy = p->y;
														}
													}
													HX_STACK_LINE(5208)
													cx_ite2 = cx_ite2->next;
												}
											}
										}
										HX_STACK_LINE(5209)
										if (((minx < aabb->minx))){
											HX_STACK_LINE(5209)
											aabb->minx = minx;
										}
										else{
											HX_STACK_LINE(5209)
											minx = aabb->minx;
										}
										HX_STACK_LINE(5210)
										if (((miny < aabb->miny))){
											HX_STACK_LINE(5210)
											aabb->miny = miny;
										}
										else{
											HX_STACK_LINE(5210)
											miny = aabb->miny;
										}
										HX_STACK_LINE(5211)
										if (((maxx > aabb->maxx))){
											HX_STACK_LINE(5211)
											aabb->maxx = maxx;
										}
										else{
											HX_STACK_LINE(5211)
											maxx = aabb->maxx;
										}
										HX_STACK_LINE(5212)
										if (((maxy > aabb->maxy))){
											HX_STACK_LINE(5212)
											aabb->maxy = maxy;
										}
										else{
											HX_STACK_LINE(5212)
											maxy = aabb->maxy;
										}
										HX_STACK_LINE(5213)
										{
											HX_STACK_LINE(5213)
											int _g = (int)1;		HX_STACK_VAR(_g,"_g");
											HX_STACK_LINE(5213)
											while(((_g < count))){
												HX_STACK_LINE(5213)
												int i = (_g)++;		HX_STACK_VAR(i,"i");
												HX_STACK_LINE(5214)
												{
													HX_STACK_LINE(5214)
													Float dt1 = ((anginc * i) * iangvel);		HX_STACK_VAR(dt1,"dt1");
													HX_STACK_LINE(5214)
													Float delta = (dt1 - cur->sweepTime);		HX_STACK_VAR(delta,"delta");
													HX_STACK_LINE(5214)
													if (((delta != (int)0))){
														HX_STACK_LINE(5214)
														{
														}
														HX_STACK_LINE(5214)
														cur->sweepTime = dt1;
														HX_STACK_LINE(5214)
														{
															HX_STACK_LINE(5214)
															Float t = delta;		HX_STACK_VAR(t,"t");
															HX_STACK_LINE(5214)
															{
															}
															HX_STACK_LINE(5214)
															hx::AddEq(cur->posx,(cur->velx * t));
															HX_STACK_LINE(5214)
															hx::AddEq(cur->posy,(cur->vely * t));
														}
														HX_STACK_LINE(5214)
														if (((cur->angvel != (int)0))){
															HX_STACK_LINE(5214)
															Float dr = (cur->sweep_angvel * delta);		HX_STACK_VAR(dr,"dr");
															HX_STACK_LINE(5214)
															hx::AddEq(cur->rot,dr);
															HX_STACK_LINE(5214)
															if ((((dr * dr) > 0.0001))){
																HX_STACK_LINE(5214)
																cur->axisx = ::Math_obj::sin(cur->rot);
																HX_STACK_LINE(5214)
																cur->axisy = ::Math_obj::cos(cur->rot);
																HX_STACK_LINE(5214)
																{
																}
																HX_STACK_LINE(5214)
																Dynamic();
															}
															else{
																HX_STACK_LINE(5214)
																Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
																HX_STACK_LINE(5214)
																Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
																HX_STACK_LINE(5214)
																Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
																HX_STACK_LINE(5214)
																Float nx = ((((p * cur->axisx) + (dr * cur->axisy))) * m);		HX_STACK_VAR(nx,"nx");
																HX_STACK_LINE(5214)
																cur->axisy = ((((p * cur->axisy) - (dr * cur->axisx))) * m);
																HX_STACK_LINE(5214)
																cur->axisx = nx;
															}
														}
													}
												}
												HX_STACK_LINE(5215)
												if (((s->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE))){
													HX_STACK_LINE(5215)
													::zpp_nape::shape::ZPP_Circle _this = s->circle;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(5215)
													{
														HX_STACK_LINE(5215)
														_this->worldCOMx = (_this->body->posx + (((_this->body->axisy * _this->localCOMx) - (_this->body->axisx * _this->localCOMy))));
														HX_STACK_LINE(5215)
														_this->worldCOMy = (_this->body->posy + (((_this->localCOMx * _this->body->axisx) + (_this->localCOMy * _this->body->axisy))));
													}
													HX_STACK_LINE(5215)
													_this->aabb->minx = (_this->worldCOMx - _this->radius);
													HX_STACK_LINE(5215)
													_this->aabb->miny = (_this->worldCOMy - _this->radius);
													HX_STACK_LINE(5215)
													_this->aabb->maxx = (_this->worldCOMx + _this->radius);
													HX_STACK_LINE(5215)
													_this->aabb->maxy = (_this->worldCOMy + _this->radius);
												}
												else{
													HX_STACK_LINE(5215)
													::zpp_nape::shape::ZPP_Polygon _this = s->polygon;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(5215)
													::zpp_nape::geom::ZPP_Vec2 li = _this->lverts->next;		HX_STACK_VAR(li,"li");
													HX_STACK_LINE(5215)
													::zpp_nape::geom::ZPP_Vec2 p0 = _this->gverts->next;		HX_STACK_VAR(p0,"p0");
													HX_STACK_LINE(5215)
													::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
													HX_STACK_LINE(5215)
													li = li->next;
													HX_STACK_LINE(5215)
													{
														HX_STACK_LINE(5215)
														p0->x = (_this->body->posx + (((_this->body->axisy * l->x) - (_this->body->axisx * l->y))));
														HX_STACK_LINE(5215)
														p0->y = (_this->body->posy + (((l->x * _this->body->axisx) + (l->y * _this->body->axisy))));
													}
													HX_STACK_LINE(5215)
													{
														HX_STACK_LINE(5215)
														_this->aabb->minx = p0->x;
														HX_STACK_LINE(5215)
														_this->aabb->miny = p0->y;
														HX_STACK_LINE(5215)
														{
														}
														HX_STACK_LINE(5215)
														{
														}
													}
													HX_STACK_LINE(5215)
													{
														HX_STACK_LINE(5215)
														_this->aabb->maxx = p0->x;
														HX_STACK_LINE(5215)
														_this->aabb->maxy = p0->y;
														HX_STACK_LINE(5215)
														{
														}
														HX_STACK_LINE(5215)
														{
														}
													}
													HX_STACK_LINE(5215)
													{
														HX_STACK_LINE(5215)
														::zpp_nape::geom::ZPP_Vec2 cx_ite2 = _this->gverts->next->next;		HX_STACK_VAR(cx_ite2,"cx_ite2");
														HX_STACK_LINE(5215)
														while(((cx_ite2 != null()))){
															HX_STACK_LINE(5215)
															::zpp_nape::geom::ZPP_Vec2 p = cx_ite2;		HX_STACK_VAR(p,"p");
															HX_STACK_LINE(5215)
															{
																HX_STACK_LINE(5215)
																::zpp_nape::geom::ZPP_Vec2 l1 = li;		HX_STACK_VAR(l1,"l1");
																HX_STACK_LINE(5215)
																li = li->next;
																HX_STACK_LINE(5215)
																{
																	HX_STACK_LINE(5215)
																	p->x = (_this->body->posx + (((_this->body->axisy * l1->x) - (_this->body->axisx * l1->y))));
																	HX_STACK_LINE(5215)
																	p->y = (_this->body->posy + (((l1->x * _this->body->axisx) + (l1->y * _this->body->axisy))));
																}
																HX_STACK_LINE(5215)
																if (((p->x < _this->aabb->minx))){
																	HX_STACK_LINE(5215)
																	_this->aabb->minx = p->x;
																}
																HX_STACK_LINE(5215)
																if (((p->x > _this->aabb->maxx))){
																	HX_STACK_LINE(5215)
																	_this->aabb->maxx = p->x;
																}
																HX_STACK_LINE(5215)
																if (((p->y < _this->aabb->miny))){
																	HX_STACK_LINE(5215)
																	_this->aabb->miny = p->y;
																}
																HX_STACK_LINE(5215)
																if (((p->y > _this->aabb->maxy))){
																	HX_STACK_LINE(5215)
																	_this->aabb->maxy = p->y;
																}
															}
															HX_STACK_LINE(5215)
															cx_ite2 = cx_ite2->next;
														}
													}
												}
												HX_STACK_LINE(5216)
												if (((minx < aabb->minx))){
													HX_STACK_LINE(5216)
													aabb->minx = minx;
												}
												else{
													HX_STACK_LINE(5216)
													minx = aabb->minx;
												}
												HX_STACK_LINE(5217)
												if (((miny < aabb->miny))){
													HX_STACK_LINE(5217)
													aabb->miny = miny;
												}
												else{
													HX_STACK_LINE(5217)
													miny = aabb->miny;
												}
												HX_STACK_LINE(5218)
												if (((maxx > aabb->maxx))){
													HX_STACK_LINE(5218)
													aabb->maxx = maxx;
												}
												else{
													HX_STACK_LINE(5218)
													maxx = aabb->maxx;
												}
												HX_STACK_LINE(5219)
												if (((maxy > aabb->maxy))){
													HX_STACK_LINE(5219)
													aabb->maxy = maxy;
												}
												else{
													HX_STACK_LINE(5219)
													maxy = aabb->maxy;
												}
											}
										}
										HX_STACK_LINE(5221)
										this->bphase->sync(s);
									}
									HX_STACK_LINE(5223)
									cx_ite1 = cx_ite1->next;
								}
							}
							HX_STACK_LINE(5226)
							cur->sweepFrozen = false;
							HX_STACK_LINE(5227)
							if (((bool((cur->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC)) && bool(cur->bulletEnabled)))){
								HX_STACK_LINE(5228)
								Float linThreshold2 = (::nape::Config_obj::bulletCCDLinearThreshold * cur->sweepRadius);		HX_STACK_VAR(linThreshold2,"linThreshold2");
								HX_STACK_LINE(5229)
								Float angThreshold2 = ::nape::Config_obj::bulletCCDAngularThreshold;		HX_STACK_VAR(angThreshold2,"angThreshold2");
								HX_STACK_LINE(5230)
								if (((bool(((((((cur->velx * cur->velx) + (cur->vely * cur->vely))) * dt) * dt) > (linThreshold2 * linThreshold2))) || bool(((((cur->angvel * cur->angvel) * dt) * dt) > (angThreshold2 * angThreshold2)))))){
									HX_STACK_LINE(5230)
									cur->bullet = true;
								}
							}
						}
						else{
							HX_STACK_LINE(5236)
							cur->sweepFrozen = true;
							HX_STACK_LINE(5237)
							cur->bullet = false;
						}
					}
					else{
						HX_STACK_LINE(5241)
						cur->sweepFrozen = true;
						HX_STACK_LINE(5242)
						cur->bullet = false;
					}
				}
				HX_STACK_LINE(5245)
				cx_ite = cx_ite->next;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,updatePos,(void))

Void ZPP_Space_obj::updateVel( Float dt){
{
		HX_STACK_PUSH("ZPP_Space::updateVel","zpp_nape/space/Space.hx",5031);
		HX_STACK_THIS(this);
		HX_STACK_ARG(dt,"dt");
		HX_STACK_LINE(5032)
		::zpp_nape::util::ZNPNode_ZPP_Body pre = null();		HX_STACK_VAR(pre,"pre");
		HX_STACK_LINE(5033)
		Float linDrag = ((int)1 - (dt * this->global_lin_drag));		HX_STACK_VAR(linDrag,"linDrag");
		HX_STACK_LINE(5034)
		Float angDrag = ((int)1 - (dt * this->global_ang_drag));		HX_STACK_VAR(angDrag,"angDrag");
		HX_STACK_LINE(5035)
		{
			HX_STACK_LINE(5036)
			::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = this->live->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(5037)
			while(((cx_ite != null()))){
				HX_STACK_LINE(5038)
				::zpp_nape::phys::ZPP_Body cur = cx_ite->elt;		HX_STACK_VAR(cur,"cur");
				HX_STACK_LINE(5039)
				{
					HX_STACK_LINE(5040)
					if (((cur->smass != 0.0))){
						HX_STACK_LINE(5041)
						Float time = (dt * cur->imass);		HX_STACK_VAR(time,"time");
						HX_STACK_LINE(5042)
						cur->velx = ((linDrag * cur->velx) + (((cur->forcex + (this->gravityx * cur->gravMass))) * time));
						HX_STACK_LINE(5043)
						cur->vely = ((linDrag * cur->vely) + (((cur->forcey + (this->gravityy * cur->gravMass))) * time));
					}
					HX_STACK_LINE(5045)
					if (((cur->sinertia != 0.0))){
						HX_STACK_LINE(5046)
						Float dpx = 0.0;		HX_STACK_VAR(dpx,"dpx");
						HX_STACK_LINE(5047)
						Float dpy = 0.0;		HX_STACK_VAR(dpy,"dpy");
						HX_STACK_LINE(5048)
						{
							HX_STACK_LINE(5049)
							dpx = (cur->worldCOMx - cur->posx);
							HX_STACK_LINE(5050)
							dpy = (cur->worldCOMy - cur->posy);
						}
						HX_STACK_LINE(5052)
						Float torque = (cur->torque + ((((this->gravityy * dpx) - (this->gravityx * dpy))) * cur->gravMass));		HX_STACK_VAR(torque,"torque");
						HX_STACK_LINE(5053)
						cur->angvel = ((angDrag * cur->angvel) + ((torque * dt) * cur->iinertia));
					}
					HX_STACK_LINE(5055)
					pre = cx_ite;
				}
				HX_STACK_LINE(5057)
				cx_ite = cx_ite->next;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,updateVel,(void))

Void ZPP_Space_obj::validation( ){
{
		HX_STACK_PUSH("ZPP_Space::validation","zpp_nape/space/Space.hx",4839);
		HX_STACK_THIS(this);
		HX_STACK_LINE(4840)
		{
			HX_STACK_LINE(4840)
			::zpp_nape::space::ZPP_CbSetManager _this = this->cbsets;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(4840)
			{
				HX_STACK_LINE(4840)
				{
				}
				HX_STACK_LINE(4840)
				if ((!(_this->cbsets->empty()))){
					HX_STACK_LINE(4840)
					::zpp_nape::util::ZPP_Set_ZPP_CbSet set_ite = _this->cbsets->parent;		HX_STACK_VAR(set_ite,"set_ite");
					HX_STACK_LINE(4840)
					while(((set_ite->prev != null()))){
						HX_STACK_LINE(4840)
						set_ite = set_ite->prev;
					}
					HX_STACK_LINE(4840)
					while(((set_ite != null()))){
						HX_STACK_LINE(4840)
						::zpp_nape::callbacks::ZPP_CbSet cb = set_ite->data;		HX_STACK_VAR(cb,"cb");
						HX_STACK_LINE(4840)
						cb->validate();
						HX_STACK_LINE(4840)
						if (((set_ite->next != null()))){
							HX_STACK_LINE(4840)
							set_ite = set_ite->next;
							HX_STACK_LINE(4840)
							while(((set_ite->prev != null()))){
								HX_STACK_LINE(4840)
								set_ite = set_ite->prev;
							}
						}
						else{
							HX_STACK_LINE(4840)
							while(((bool((set_ite->parent != null())) && bool((set_ite == set_ite->parent->next))))){
								HX_STACK_LINE(4840)
								set_ite = set_ite->parent;
							}
							HX_STACK_LINE(4840)
							set_ite = set_ite->parent;
						}
					}
				}
			}
		}
		HX_STACK_LINE(4841)
		{
			HX_STACK_LINE(4843)
			::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = this->live->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(4844)
			while(((cx_ite != null()))){
				HX_STACK_LINE(4845)
				::zpp_nape::phys::ZPP_Body cur = cx_ite->elt;		HX_STACK_VAR(cur,"cur");
				HX_STACK_LINE(4846)
				{
					HX_STACK_LINE(4847)
					cur->sweepRadius = (int)0;
					HX_STACK_LINE(4848)
					{
						HX_STACK_LINE(4849)
						::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite1 = cur->shapes->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
						HX_STACK_LINE(4850)
						while(((cx_ite1 != null()))){
							HX_STACK_LINE(4851)
							::zpp_nape::shape::ZPP_Shape s = cx_ite1->elt;		HX_STACK_VAR(s,"s");
							HX_STACK_LINE(4852)
							{
								HX_STACK_LINE(4853)
								if (((s->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_POLYGON))){
									HX_STACK_LINE(4854)
									{
										HX_STACK_LINE(4854)
										::zpp_nape::shape::ZPP_Polygon _this = s->polygon;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(4854)
										if ((_this->zip_sanitation)){
											HX_STACK_LINE(4854)
											_this->zip_sanitation = false;
											HX_STACK_LINE(4854)
											_this->splice_collinear_real();
										}
									}
									HX_STACK_LINE(4856)
									::nape::shape::ValidationResult res = s->polygon->valid();		HX_STACK_VAR(res,"res");
									struct _Function_8_1{
										inline static ::nape::shape::ValidationResult Block( ){
											HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",4857);
											{
												HX_STACK_LINE(4857)
												if (((::zpp_nape::util::ZPP_Flags_obj::ValidationResult_VALID == null()))){
													HX_STACK_LINE(4857)
													::zpp_nape::util::ZPP_Flags_obj::internal = true;
													HX_STACK_LINE(4857)
													::zpp_nape::util::ZPP_Flags_obj::ValidationResult_VALID = ::nape::shape::ValidationResult_obj::__new();
													HX_STACK_LINE(4857)
													::zpp_nape::util::ZPP_Flags_obj::internal = false;
												}
												HX_STACK_LINE(4857)
												return ::zpp_nape::util::ZPP_Flags_obj::ValidationResult_VALID;
											}
											return null();
										}
									};
									HX_STACK_LINE(4857)
									if (((res != _Function_8_1::Block()))){
										HX_STACK_LINE(4857)
										hx::Throw ((((HX_CSTRING("Error: Cannot simulate with an invalid Polygon : ") + s->polygon->outer->toString()) + HX_CSTRING(" is invalid : ")) + res->toString()));
									}
									HX_STACK_LINE(4861)
									{
										HX_STACK_LINE(4861)
										::zpp_nape::shape::ZPP_Polygon _this = s->polygon;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(4861)
										if ((_this->zip_gaxi)){
											HX_STACK_LINE(4861)
											if (((_this->body != null()))){
												HX_STACK_LINE(4861)
												_this->zip_gaxi = false;
												HX_STACK_LINE(4861)
												_this->validate_laxi();
												HX_STACK_LINE(4861)
												{
													HX_STACK_LINE(4861)
													::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
													HX_STACK_LINE(4861)
													if ((_this1->zip_axis)){
														HX_STACK_LINE(4861)
														_this1->zip_axis = false;
														HX_STACK_LINE(4861)
														{
															HX_STACK_LINE(4861)
															_this1->axisx = ::Math_obj::sin(_this1->rot);
															HX_STACK_LINE(4861)
															_this1->axisy = ::Math_obj::cos(_this1->rot);
															HX_STACK_LINE(4861)
															{
															}
															HX_STACK_LINE(4861)
															Dynamic();
														}
													}
												}
												HX_STACK_LINE(4861)
												if ((_this->zip_gverts)){
													HX_STACK_LINE(4861)
													if (((_this->body != null()))){
														HX_STACK_LINE(4861)
														_this->zip_gverts = false;
														HX_STACK_LINE(4861)
														_this->validate_lverts();
														HX_STACK_LINE(4861)
														{
															HX_STACK_LINE(4861)
															::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
															HX_STACK_LINE(4861)
															if ((_this1->zip_axis)){
																HX_STACK_LINE(4861)
																_this1->zip_axis = false;
																HX_STACK_LINE(4861)
																{
																	HX_STACK_LINE(4861)
																	_this1->axisx = ::Math_obj::sin(_this1->rot);
																	HX_STACK_LINE(4861)
																	_this1->axisy = ::Math_obj::cos(_this1->rot);
																	HX_STACK_LINE(4861)
																	{
																	}
																	HX_STACK_LINE(4861)
																	Dynamic();
																}
															}
														}
														HX_STACK_LINE(4861)
														::zpp_nape::geom::ZPP_Vec2 li = _this->lverts->next;		HX_STACK_VAR(li,"li");
														HX_STACK_LINE(4861)
														{
															HX_STACK_LINE(4861)
															::zpp_nape::geom::ZPP_Vec2 cx_ite2 = _this->gverts->next;		HX_STACK_VAR(cx_ite2,"cx_ite2");
															HX_STACK_LINE(4861)
															while(((cx_ite2 != null()))){
																HX_STACK_LINE(4861)
																::zpp_nape::geom::ZPP_Vec2 g = cx_ite2;		HX_STACK_VAR(g,"g");
																HX_STACK_LINE(4861)
																{
																	HX_STACK_LINE(4861)
																	::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
																	HX_STACK_LINE(4861)
																	li = li->next;
																	HX_STACK_LINE(4861)
																	{
																		HX_STACK_LINE(4861)
																		g->x = (_this->body->posx + (((_this->body->axisy * l->x) - (_this->body->axisx * l->y))));
																		HX_STACK_LINE(4861)
																		g->y = (_this->body->posy + (((l->x * _this->body->axisx) + (l->y * _this->body->axisy))));
																	}
																}
																HX_STACK_LINE(4861)
																cx_ite2 = cx_ite2->next;
															}
														}
													}
												}
												HX_STACK_LINE(4861)
												::zpp_nape::util::ZNPNode_ZPP_Edge ite = _this->edges->head;		HX_STACK_VAR(ite,"ite");
												HX_STACK_LINE(4861)
												{
													HX_STACK_LINE(4861)
													::zpp_nape::geom::ZPP_Vec2 cx_ite2 = _this->gverts->next;		HX_STACK_VAR(cx_ite2,"cx_ite2");
													HX_STACK_LINE(4861)
													::zpp_nape::geom::ZPP_Vec2 u = cx_ite2;		HX_STACK_VAR(u,"u");
													HX_STACK_LINE(4861)
													cx_ite2 = cx_ite2->next;
													HX_STACK_LINE(4861)
													while(((cx_ite2 != null()))){
														HX_STACK_LINE(4861)
														::zpp_nape::geom::ZPP_Vec2 v = cx_ite2;		HX_STACK_VAR(v,"v");
														HX_STACK_LINE(4861)
														{
															HX_STACK_LINE(4861)
															::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
															HX_STACK_LINE(4861)
															ite = ite->next;
															HX_STACK_LINE(4861)
															e->gp0 = u;
															HX_STACK_LINE(4861)
															e->gp1 = v;
															HX_STACK_LINE(4861)
															{
																HX_STACK_LINE(4861)
																e->gnormx = ((_this->body->axisy * e->lnormx) - (_this->body->axisx * e->lnormy));
																HX_STACK_LINE(4861)
																e->gnormy = ((e->lnormx * _this->body->axisx) + (e->lnormy * _this->body->axisy));
															}
															HX_STACK_LINE(4861)
															e->gprojection = (((_this->body->posx * e->gnormx) + (_this->body->posy * e->gnormy)) + e->lprojection);
															HX_STACK_LINE(4861)
															if (((e->wrap_gnorm != null()))){
																HX_STACK_LINE(4861)
																e->wrap_gnorm->zpp_inner->x = e->gnormx;
																HX_STACK_LINE(4861)
																e->wrap_gnorm->zpp_inner->y = e->gnormy;
																HX_STACK_LINE(4861)
																{
																}
																HX_STACK_LINE(4861)
																{
																}
															}
															HX_STACK_LINE(4861)
															e->tp0 = ((e->gp0->y * e->gnormx) - (e->gp0->x * e->gnormy));
															HX_STACK_LINE(4861)
															e->tp1 = ((e->gp1->y * e->gnormx) - (e->gp1->x * e->gnormy));
														}
														HX_STACK_LINE(4861)
														u = v;
														HX_STACK_LINE(4861)
														cx_ite2 = cx_ite2->next;
													}
													HX_STACK_LINE(4861)
													::zpp_nape::geom::ZPP_Vec2 v = _this->gverts->next;		HX_STACK_VAR(v,"v");
													HX_STACK_LINE(4861)
													{
														HX_STACK_LINE(4861)
														::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
														HX_STACK_LINE(4861)
														ite = ite->next;
														HX_STACK_LINE(4861)
														e->gp0 = u;
														HX_STACK_LINE(4861)
														e->gp1 = v;
														HX_STACK_LINE(4861)
														{
															HX_STACK_LINE(4861)
															e->gnormx = ((_this->body->axisy * e->lnormx) - (_this->body->axisx * e->lnormy));
															HX_STACK_LINE(4861)
															e->gnormy = ((e->lnormx * _this->body->axisx) + (e->lnormy * _this->body->axisy));
														}
														HX_STACK_LINE(4861)
														e->gprojection = (((_this->body->posx * e->gnormx) + (_this->body->posy * e->gnormy)) + e->lprojection);
														HX_STACK_LINE(4861)
														if (((e->wrap_gnorm != null()))){
															HX_STACK_LINE(4861)
															e->wrap_gnorm->zpp_inner->x = e->gnormx;
															HX_STACK_LINE(4861)
															e->wrap_gnorm->zpp_inner->y = e->gnormy;
															HX_STACK_LINE(4861)
															{
															}
															HX_STACK_LINE(4861)
															{
															}
														}
														HX_STACK_LINE(4861)
														e->tp0 = ((e->gp0->y * e->gnormx) - (e->gp0->x * e->gnormy));
														HX_STACK_LINE(4861)
														e->tp1 = ((e->gp1->y * e->gnormx) - (e->gp1->x * e->gnormy));
													}
												}
											}
										}
									}
								}
								HX_STACK_LINE(4863)
								s->validate_sweepRadius();
								HX_STACK_LINE(4864)
								if (((s->sweepRadius > cur->sweepRadius))){
									HX_STACK_LINE(4864)
									cur->sweepRadius = s->sweepRadius;
								}
							}
							HX_STACK_LINE(4866)
							cx_ite1 = cx_ite1->next;
						}
					}
					HX_STACK_LINE(4869)
					cur->validate_mass();
					HX_STACK_LINE(4870)
					cur->validate_inertia();
					HX_STACK_LINE(4871)
					if ((!(((cur->shapes->head == null()))))){
						HX_STACK_LINE(4872)
						{
							HX_STACK_LINE(4872)
							if (((cur->shapes->head == null()))){
								HX_STACK_LINE(4872)
								hx::Throw (HX_CSTRING("Error: Body bounds only makes sense if it contains shapes"));
							}
							HX_STACK_LINE(4872)
							if ((cur->zip_aabb)){
								HX_STACK_LINE(4872)
								cur->zip_aabb = false;
								HX_STACK_LINE(4872)
								{
									HX_STACK_LINE(4872)
									cur->aabb->minx = ::Math_obj::POSITIVE_INFINITY;
									HX_STACK_LINE(4872)
									cur->aabb->miny = ::Math_obj::POSITIVE_INFINITY;
									HX_STACK_LINE(4872)
									{
									}
									HX_STACK_LINE(4872)
									{
									}
								}
								HX_STACK_LINE(4872)
								{
									HX_STACK_LINE(4872)
									cur->aabb->maxx = ::Math_obj::NEGATIVE_INFINITY;
									HX_STACK_LINE(4872)
									cur->aabb->maxy = ::Math_obj::NEGATIVE_INFINITY;
									HX_STACK_LINE(4872)
									{
									}
									HX_STACK_LINE(4872)
									{
									}
								}
								HX_STACK_LINE(4872)
								{
									HX_STACK_LINE(4872)
									::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite1 = cur->shapes->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
									HX_STACK_LINE(4872)
									while(((cx_ite1 != null()))){
										HX_STACK_LINE(4872)
										::zpp_nape::shape::ZPP_Shape s = cx_ite1->elt;		HX_STACK_VAR(s,"s");
										HX_STACK_LINE(4872)
										{
											HX_STACK_LINE(4872)
											if ((s->zip_aabb)){
												HX_STACK_LINE(4872)
												if (((s->body != null()))){
													HX_STACK_LINE(4872)
													s->zip_aabb = false;
													HX_STACK_LINE(4872)
													if (((s->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE))){
														HX_STACK_LINE(4872)
														::zpp_nape::shape::ZPP_Circle _this = s->circle;		HX_STACK_VAR(_this,"_this");
														HX_STACK_LINE(4872)
														if ((_this->zip_worldCOM)){
															HX_STACK_LINE(4872)
															if (((_this->body != null()))){
																HX_STACK_LINE(4872)
																_this->zip_worldCOM = false;
																HX_STACK_LINE(4872)
																if ((_this->zip_localCOM)){
																	HX_STACK_LINE(4872)
																	_this->zip_localCOM = false;
																	HX_STACK_LINE(4872)
																	if (((_this->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_POLYGON))){
																		HX_STACK_LINE(4872)
																		::zpp_nape::shape::ZPP_Polygon _this1 = _this->polygon;		HX_STACK_VAR(_this1,"_this1");
																		HX_STACK_LINE(4872)
																		if (((_this1->lverts->next == null()))){
																			HX_STACK_LINE(4872)
																			hx::Throw (HX_CSTRING("Error: An empty polygon has no meaningful localCOM"));
																		}
																		HX_STACK_LINE(4872)
																		if (((_this1->lverts->next->next == null()))){
																			HX_STACK_LINE(4872)
																			_this1->localCOMx = _this1->lverts->next->x;
																			HX_STACK_LINE(4872)
																			_this1->localCOMy = _this1->lverts->next->y;
																			HX_STACK_LINE(4872)
																			{
																			}
																			HX_STACK_LINE(4872)
																			Dynamic();
																		}
																		else{
																			HX_STACK_LINE(4872)
																			if (((_this1->lverts->next->next->next == null()))){
																				HX_STACK_LINE(4872)
																				{
																					HX_STACK_LINE(4872)
																					_this1->localCOMx = _this1->lverts->next->x;
																					HX_STACK_LINE(4872)
																					_this1->localCOMy = _this1->lverts->next->y;
																					HX_STACK_LINE(4872)
																					{
																					}
																					HX_STACK_LINE(4872)
																					{
																					}
																				}
																				HX_STACK_LINE(4872)
																				{
																					HX_STACK_LINE(4872)
																					Float t = 1.0;		HX_STACK_VAR(t,"t");
																					HX_STACK_LINE(4872)
																					{
																					}
																					HX_STACK_LINE(4872)
																					hx::AddEq(_this1->localCOMx,(_this1->lverts->next->next->x * t));
																					HX_STACK_LINE(4872)
																					hx::AddEq(_this1->localCOMy,(_this1->lverts->next->next->y * t));
																				}
																				HX_STACK_LINE(4872)
																				{
																					HX_STACK_LINE(4872)
																					Float t = 0.5;		HX_STACK_VAR(t,"t");
																					HX_STACK_LINE(4872)
																					{
																					}
																					HX_STACK_LINE(4872)
																					hx::MultEq(_this1->localCOMx,t);
																					HX_STACK_LINE(4872)
																					hx::MultEq(_this1->localCOMy,t);
																				}
																			}
																			else{
																				HX_STACK_LINE(4872)
																				{
																					HX_STACK_LINE(4872)
																					_this1->localCOMx = (int)0;
																					HX_STACK_LINE(4872)
																					_this1->localCOMy = (int)0;
																					HX_STACK_LINE(4872)
																					{
																					}
																					HX_STACK_LINE(4872)
																					{
																					}
																				}
																				HX_STACK_LINE(4872)
																				Float area = 0.0;		HX_STACK_VAR(area,"area");
																				HX_STACK_LINE(4872)
																				{
																					HX_STACK_LINE(4872)
																					::zpp_nape::geom::ZPP_Vec2 cx_ite2 = _this1->lverts->next;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																					HX_STACK_LINE(4872)
																					::zpp_nape::geom::ZPP_Vec2 u = cx_ite2;		HX_STACK_VAR(u,"u");
																					HX_STACK_LINE(4872)
																					cx_ite2 = cx_ite2->next;
																					HX_STACK_LINE(4872)
																					::zpp_nape::geom::ZPP_Vec2 v = cx_ite2;		HX_STACK_VAR(v,"v");
																					HX_STACK_LINE(4872)
																					cx_ite2 = cx_ite2->next;
																					HX_STACK_LINE(4872)
																					while(((cx_ite2 != null()))){
																						HX_STACK_LINE(4872)
																						::zpp_nape::geom::ZPP_Vec2 w = cx_ite2;		HX_STACK_VAR(w,"w");
																						HX_STACK_LINE(4872)
																						{
																							HX_STACK_LINE(4872)
																							hx::AddEq(area,(v->x * ((w->y - u->y))));
																							HX_STACK_LINE(4872)
																							Float cf = ((w->y * v->x) - (w->x * v->y));		HX_STACK_VAR(cf,"cf");
																							HX_STACK_LINE(4872)
																							hx::AddEq(_this1->localCOMx,(((v->x + w->x)) * cf));
																							HX_STACK_LINE(4872)
																							hx::AddEq(_this1->localCOMy,(((v->y + w->y)) * cf));
																						}
																						HX_STACK_LINE(4872)
																						u = v;
																						HX_STACK_LINE(4872)
																						v = w;
																						HX_STACK_LINE(4872)
																						cx_ite2 = cx_ite2->next;
																					}
																					HX_STACK_LINE(4872)
																					cx_ite2 = _this1->lverts->next;
																					HX_STACK_LINE(4872)
																					::zpp_nape::geom::ZPP_Vec2 w = cx_ite2;		HX_STACK_VAR(w,"w");
																					HX_STACK_LINE(4872)
																					{
																						HX_STACK_LINE(4872)
																						hx::AddEq(area,(v->x * ((w->y - u->y))));
																						HX_STACK_LINE(4872)
																						Float cf = ((w->y * v->x) - (w->x * v->y));		HX_STACK_VAR(cf,"cf");
																						HX_STACK_LINE(4872)
																						hx::AddEq(_this1->localCOMx,(((v->x + w->x)) * cf));
																						HX_STACK_LINE(4872)
																						hx::AddEq(_this1->localCOMy,(((v->y + w->y)) * cf));
																					}
																					HX_STACK_LINE(4872)
																					u = v;
																					HX_STACK_LINE(4872)
																					v = w;
																					HX_STACK_LINE(4872)
																					cx_ite2 = cx_ite2->next;
																					HX_STACK_LINE(4872)
																					::zpp_nape::geom::ZPP_Vec2 w1 = cx_ite2;		HX_STACK_VAR(w1,"w1");
																					HX_STACK_LINE(4872)
																					{
																						HX_STACK_LINE(4872)
																						hx::AddEq(area,(v->x * ((w1->y - u->y))));
																						HX_STACK_LINE(4872)
																						Float cf = ((w1->y * v->x) - (w1->x * v->y));		HX_STACK_VAR(cf,"cf");
																						HX_STACK_LINE(4872)
																						hx::AddEq(_this1->localCOMx,(((v->x + w1->x)) * cf));
																						HX_STACK_LINE(4872)
																						hx::AddEq(_this1->localCOMy,(((v->y + w1->y)) * cf));
																					}
																				}
																				HX_STACK_LINE(4872)
																				area = (Float((int)1) / Float((((int)3 * area))));
																				HX_STACK_LINE(4872)
																				{
																					HX_STACK_LINE(4872)
																					Float t = area;		HX_STACK_VAR(t,"t");
																					HX_STACK_LINE(4872)
																					{
																					}
																					HX_STACK_LINE(4872)
																					hx::MultEq(_this1->localCOMx,t);
																					HX_STACK_LINE(4872)
																					hx::MultEq(_this1->localCOMy,t);
																				}
																			}
																		}
																	}
																}
																HX_STACK_LINE(4872)
																{
																	HX_STACK_LINE(4872)
																	::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
																	HX_STACK_LINE(4872)
																	if ((_this1->zip_axis)){
																		HX_STACK_LINE(4872)
																		_this1->zip_axis = false;
																		HX_STACK_LINE(4872)
																		{
																			HX_STACK_LINE(4872)
																			_this1->axisx = ::Math_obj::sin(_this1->rot);
																			HX_STACK_LINE(4872)
																			_this1->axisy = ::Math_obj::cos(_this1->rot);
																			HX_STACK_LINE(4872)
																			{
																			}
																			HX_STACK_LINE(4872)
																			Dynamic();
																		}
																	}
																}
																HX_STACK_LINE(4872)
																{
																	HX_STACK_LINE(4872)
																	_this->worldCOMx = (_this->body->posx + (((_this->body->axisy * _this->localCOMx) - (_this->body->axisx * _this->localCOMy))));
																	HX_STACK_LINE(4872)
																	_this->worldCOMy = (_this->body->posy + (((_this->localCOMx * _this->body->axisx) + (_this->localCOMy * _this->body->axisy))));
																}
															}
														}
														HX_STACK_LINE(4872)
														Float rx = _this->radius;		HX_STACK_VAR(rx,"rx");
														HX_STACK_LINE(4872)
														Float ry = _this->radius;		HX_STACK_VAR(ry,"ry");
														HX_STACK_LINE(4872)
														{
														}
														HX_STACK_LINE(4872)
														{
														}
														HX_STACK_LINE(4872)
														{
															HX_STACK_LINE(4872)
															_this->aabb->minx = (_this->worldCOMx - rx);
															HX_STACK_LINE(4872)
															_this->aabb->miny = (_this->worldCOMy - ry);
														}
														HX_STACK_LINE(4872)
														{
															HX_STACK_LINE(4872)
															_this->aabb->maxx = (_this->worldCOMx + rx);
															HX_STACK_LINE(4872)
															_this->aabb->maxy = (_this->worldCOMy + ry);
														}
													}
													else{
														HX_STACK_LINE(4872)
														::zpp_nape::shape::ZPP_Polygon _this = s->polygon;		HX_STACK_VAR(_this,"_this");
														HX_STACK_LINE(4872)
														if ((_this->zip_gverts)){
															HX_STACK_LINE(4872)
															if (((_this->body != null()))){
																HX_STACK_LINE(4872)
																_this->zip_gverts = false;
																HX_STACK_LINE(4872)
																_this->validate_lverts();
																HX_STACK_LINE(4872)
																{
																	HX_STACK_LINE(4872)
																	::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
																	HX_STACK_LINE(4872)
																	if ((_this1->zip_axis)){
																		HX_STACK_LINE(4872)
																		_this1->zip_axis = false;
																		HX_STACK_LINE(4872)
																		{
																			HX_STACK_LINE(4872)
																			_this1->axisx = ::Math_obj::sin(_this1->rot);
																			HX_STACK_LINE(4872)
																			_this1->axisy = ::Math_obj::cos(_this1->rot);
																			HX_STACK_LINE(4872)
																			{
																			}
																			HX_STACK_LINE(4872)
																			Dynamic();
																		}
																	}
																}
																HX_STACK_LINE(4872)
																::zpp_nape::geom::ZPP_Vec2 li = _this->lverts->next;		HX_STACK_VAR(li,"li");
																HX_STACK_LINE(4872)
																{
																	HX_STACK_LINE(4872)
																	::zpp_nape::geom::ZPP_Vec2 cx_ite2 = _this->gverts->next;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																	HX_STACK_LINE(4872)
																	while(((cx_ite2 != null()))){
																		HX_STACK_LINE(4872)
																		::zpp_nape::geom::ZPP_Vec2 g = cx_ite2;		HX_STACK_VAR(g,"g");
																		HX_STACK_LINE(4872)
																		{
																			HX_STACK_LINE(4872)
																			::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
																			HX_STACK_LINE(4872)
																			li = li->next;
																			HX_STACK_LINE(4872)
																			{
																				HX_STACK_LINE(4872)
																				g->x = (_this->body->posx + (((_this->body->axisy * l->x) - (_this->body->axisx * l->y))));
																				HX_STACK_LINE(4872)
																				g->y = (_this->body->posy + (((l->x * _this->body->axisx) + (l->y * _this->body->axisy))));
																			}
																		}
																		HX_STACK_LINE(4872)
																		cx_ite2 = cx_ite2->next;
																	}
																}
															}
														}
														HX_STACK_LINE(4872)
														if (((_this->lverts->next == null()))){
															HX_STACK_LINE(4872)
															hx::Throw (HX_CSTRING("Error: An empty polygon has no meaningful bounds"));
														}
														HX_STACK_LINE(4872)
														::zpp_nape::geom::ZPP_Vec2 p0 = _this->gverts->next;		HX_STACK_VAR(p0,"p0");
														HX_STACK_LINE(4872)
														{
															HX_STACK_LINE(4872)
															_this->aabb->minx = p0->x;
															HX_STACK_LINE(4872)
															_this->aabb->miny = p0->y;
															HX_STACK_LINE(4872)
															{
															}
															HX_STACK_LINE(4872)
															{
															}
														}
														HX_STACK_LINE(4872)
														{
															HX_STACK_LINE(4872)
															_this->aabb->maxx = p0->x;
															HX_STACK_LINE(4872)
															_this->aabb->maxy = p0->y;
															HX_STACK_LINE(4872)
															{
															}
															HX_STACK_LINE(4872)
															{
															}
														}
														HX_STACK_LINE(4872)
														{
															HX_STACK_LINE(4872)
															::zpp_nape::geom::ZPP_Vec2 cx_ite2 = _this->gverts->next->next;		HX_STACK_VAR(cx_ite2,"cx_ite2");
															HX_STACK_LINE(4872)
															while(((cx_ite2 != null()))){
																HX_STACK_LINE(4872)
																::zpp_nape::geom::ZPP_Vec2 p = cx_ite2;		HX_STACK_VAR(p,"p");
																HX_STACK_LINE(4872)
																{
																	HX_STACK_LINE(4872)
																	if (((p->x < _this->aabb->minx))){
																		HX_STACK_LINE(4872)
																		_this->aabb->minx = p->x;
																	}
																	HX_STACK_LINE(4872)
																	if (((p->x > _this->aabb->maxx))){
																		HX_STACK_LINE(4872)
																		_this->aabb->maxx = p->x;
																	}
																	HX_STACK_LINE(4872)
																	if (((p->y < _this->aabb->miny))){
																		HX_STACK_LINE(4872)
																		_this->aabb->miny = p->y;
																	}
																	HX_STACK_LINE(4872)
																	if (((p->y > _this->aabb->maxy))){
																		HX_STACK_LINE(4872)
																		_this->aabb->maxy = p->y;
																	}
																}
																HX_STACK_LINE(4872)
																cx_ite2 = cx_ite2->next;
															}
														}
													}
												}
											}
											HX_STACK_LINE(4872)
											{
												HX_STACK_LINE(4872)
												::zpp_nape::geom::ZPP_AABB _this = cur->aabb;		HX_STACK_VAR(_this,"_this");
												::zpp_nape::geom::ZPP_AABB x = s->aabb;		HX_STACK_VAR(x,"x");
												HX_STACK_LINE(4872)
												if (((x->minx < _this->minx))){
													HX_STACK_LINE(4872)
													_this->minx = x->minx;
												}
												HX_STACK_LINE(4872)
												if (((x->maxx > _this->maxx))){
													HX_STACK_LINE(4872)
													_this->maxx = x->maxx;
												}
												HX_STACK_LINE(4872)
												if (((x->miny < _this->miny))){
													HX_STACK_LINE(4872)
													_this->miny = x->miny;
												}
												HX_STACK_LINE(4872)
												if (((x->maxy > _this->maxy))){
													HX_STACK_LINE(4872)
													_this->maxy = x->maxy;
												}
											}
										}
										HX_STACK_LINE(4872)
										cx_ite1 = cx_ite1->next;
									}
								}
							}
						}
						HX_STACK_LINE(4873)
						cur->validate_worldCOM();
					}
					HX_STACK_LINE(4875)
					cur->validate_gravMass();
					HX_STACK_LINE(4876)
					if ((cur->zip_axis)){
						HX_STACK_LINE(4876)
						cur->zip_axis = false;
						HX_STACK_LINE(4876)
						{
							HX_STACK_LINE(4876)
							cur->axisx = ::Math_obj::sin(cur->rot);
							HX_STACK_LINE(4876)
							cur->axisy = ::Math_obj::cos(cur->rot);
							HX_STACK_LINE(4876)
							{
							}
							HX_STACK_LINE(4876)
							Dynamic();
						}
					}
					HX_STACK_LINE(4878)
					if (((bool((bool(!(cur->nomove)) && bool((cur->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC)))) && bool((cur->mass == (int)0))))){
						HX_STACK_LINE(4878)
						hx::Throw (HX_CSTRING("Error: Dynamic Body cannot be simulated with 0 mass unless allowMovement is false"));
					}
					HX_STACK_LINE(4881)
					if (((bool((bool(!(cur->norotate)) && bool((cur->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC)))) && bool((cur->inertia == (int)0))))){
						HX_STACK_LINE(4881)
						hx::Throw (HX_CSTRING("Error: Dynamic Body cannot be simulated with 0 inertia unless allowRotation is false"));
					}
					HX_STACK_LINE(4885)
					{
						HX_STACK_LINE(4886)
						if (((bool(cur->component->woken) && bool((cur->cbSet != null()))))){
							HX_STACK_LINE(4888)
							::zpp_nape::util::ZNPNode_ZPP_BodyListener cx_ite1 = cur->cbSet->bodylisteners->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
							HX_STACK_LINE(4889)
							while(((cx_ite1 != null()))){
								HX_STACK_LINE(4890)
								::zpp_nape::callbacks::ZPP_BodyListener i = cx_ite1->elt;		HX_STACK_VAR(i,"i");
								HX_STACK_LINE(4891)
								{
									HX_STACK_LINE(4892)
									if (((i->event != ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_WAKE))){
										HX_STACK_LINE(4893)
										cx_ite1 = cx_ite1->next;
										HX_STACK_LINE(4894)
										continue;
									}
									HX_STACK_LINE(4896)
									::zpp_nape::callbacks::ZPP_Callback cb = this->push_callback(i);		HX_STACK_VAR(cb,"cb");
									HX_STACK_LINE(4897)
									cb->event = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_WAKE;
									HX_STACK_LINE(4898)
									cb->body = cur;
								}
								HX_STACK_LINE(4900)
								cx_ite1 = cx_ite1->next;
							}
						}
						HX_STACK_LINE(4904)
						cur->component->woken = false;
					}
					HX_STACK_LINE(4906)
					{
						HX_STACK_LINE(4907)
						::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite1 = cur->shapes->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
						HX_STACK_LINE(4908)
						while(((cx_ite1 != null()))){
							HX_STACK_LINE(4909)
							::zpp_nape::shape::ZPP_Shape shape = cx_ite1->elt;		HX_STACK_VAR(shape,"shape");
							HX_STACK_LINE(4910)
							this->bphase->sync(shape);
							HX_STACK_LINE(4911)
							cx_ite1 = cx_ite1->next;
						}
					}
				}
				HX_STACK_LINE(4915)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(4919)
		{
			HX_STACK_LINE(4921)
			::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = this->kinematics->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(4922)
			while(((cx_ite != null()))){
				HX_STACK_LINE(4923)
				::zpp_nape::phys::ZPP_Body cur = cx_ite->elt;		HX_STACK_VAR(cur,"cur");
				HX_STACK_LINE(4924)
				{
					HX_STACK_LINE(4925)
					cur->sweepRadius = (int)0;
					HX_STACK_LINE(4926)
					{
						HX_STACK_LINE(4927)
						::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite1 = cur->shapes->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
						HX_STACK_LINE(4928)
						while(((cx_ite1 != null()))){
							HX_STACK_LINE(4929)
							::zpp_nape::shape::ZPP_Shape s = cx_ite1->elt;		HX_STACK_VAR(s,"s");
							HX_STACK_LINE(4930)
							{
								HX_STACK_LINE(4931)
								if (((s->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_POLYGON))){
									HX_STACK_LINE(4932)
									{
										HX_STACK_LINE(4932)
										::zpp_nape::shape::ZPP_Polygon _this = s->polygon;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(4932)
										if ((_this->zip_sanitation)){
											HX_STACK_LINE(4932)
											_this->zip_sanitation = false;
											HX_STACK_LINE(4932)
											_this->splice_collinear_real();
										}
									}
									HX_STACK_LINE(4934)
									::nape::shape::ValidationResult res = s->polygon->valid();		HX_STACK_VAR(res,"res");
									struct _Function_8_1{
										inline static ::nape::shape::ValidationResult Block( ){
											HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",4935);
											{
												HX_STACK_LINE(4935)
												if (((::zpp_nape::util::ZPP_Flags_obj::ValidationResult_VALID == null()))){
													HX_STACK_LINE(4935)
													::zpp_nape::util::ZPP_Flags_obj::internal = true;
													HX_STACK_LINE(4935)
													::zpp_nape::util::ZPP_Flags_obj::ValidationResult_VALID = ::nape::shape::ValidationResult_obj::__new();
													HX_STACK_LINE(4935)
													::zpp_nape::util::ZPP_Flags_obj::internal = false;
												}
												HX_STACK_LINE(4935)
												return ::zpp_nape::util::ZPP_Flags_obj::ValidationResult_VALID;
											}
											return null();
										}
									};
									HX_STACK_LINE(4935)
									if (((res != _Function_8_1::Block()))){
										HX_STACK_LINE(4935)
										hx::Throw ((((HX_CSTRING("Error: Cannot simulate with an invalid Polygon : ") + s->polygon->outer->toString()) + HX_CSTRING(" is invalid : ")) + res->toString()));
									}
									HX_STACK_LINE(4939)
									{
										HX_STACK_LINE(4939)
										::zpp_nape::shape::ZPP_Polygon _this = s->polygon;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(4939)
										if ((_this->zip_gaxi)){
											HX_STACK_LINE(4939)
											if (((_this->body != null()))){
												HX_STACK_LINE(4939)
												_this->zip_gaxi = false;
												HX_STACK_LINE(4939)
												_this->validate_laxi();
												HX_STACK_LINE(4939)
												{
													HX_STACK_LINE(4939)
													::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
													HX_STACK_LINE(4939)
													if ((_this1->zip_axis)){
														HX_STACK_LINE(4939)
														_this1->zip_axis = false;
														HX_STACK_LINE(4939)
														{
															HX_STACK_LINE(4939)
															_this1->axisx = ::Math_obj::sin(_this1->rot);
															HX_STACK_LINE(4939)
															_this1->axisy = ::Math_obj::cos(_this1->rot);
															HX_STACK_LINE(4939)
															{
															}
															HX_STACK_LINE(4939)
															Dynamic();
														}
													}
												}
												HX_STACK_LINE(4939)
												if ((_this->zip_gverts)){
													HX_STACK_LINE(4939)
													if (((_this->body != null()))){
														HX_STACK_LINE(4939)
														_this->zip_gverts = false;
														HX_STACK_LINE(4939)
														_this->validate_lverts();
														HX_STACK_LINE(4939)
														{
															HX_STACK_LINE(4939)
															::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
															HX_STACK_LINE(4939)
															if ((_this1->zip_axis)){
																HX_STACK_LINE(4939)
																_this1->zip_axis = false;
																HX_STACK_LINE(4939)
																{
																	HX_STACK_LINE(4939)
																	_this1->axisx = ::Math_obj::sin(_this1->rot);
																	HX_STACK_LINE(4939)
																	_this1->axisy = ::Math_obj::cos(_this1->rot);
																	HX_STACK_LINE(4939)
																	{
																	}
																	HX_STACK_LINE(4939)
																	Dynamic();
																}
															}
														}
														HX_STACK_LINE(4939)
														::zpp_nape::geom::ZPP_Vec2 li = _this->lverts->next;		HX_STACK_VAR(li,"li");
														HX_STACK_LINE(4939)
														{
															HX_STACK_LINE(4939)
															::zpp_nape::geom::ZPP_Vec2 cx_ite2 = _this->gverts->next;		HX_STACK_VAR(cx_ite2,"cx_ite2");
															HX_STACK_LINE(4939)
															while(((cx_ite2 != null()))){
																HX_STACK_LINE(4939)
																::zpp_nape::geom::ZPP_Vec2 g = cx_ite2;		HX_STACK_VAR(g,"g");
																HX_STACK_LINE(4939)
																{
																	HX_STACK_LINE(4939)
																	::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
																	HX_STACK_LINE(4939)
																	li = li->next;
																	HX_STACK_LINE(4939)
																	{
																		HX_STACK_LINE(4939)
																		g->x = (_this->body->posx + (((_this->body->axisy * l->x) - (_this->body->axisx * l->y))));
																		HX_STACK_LINE(4939)
																		g->y = (_this->body->posy + (((l->x * _this->body->axisx) + (l->y * _this->body->axisy))));
																	}
																}
																HX_STACK_LINE(4939)
																cx_ite2 = cx_ite2->next;
															}
														}
													}
												}
												HX_STACK_LINE(4939)
												::zpp_nape::util::ZNPNode_ZPP_Edge ite = _this->edges->head;		HX_STACK_VAR(ite,"ite");
												HX_STACK_LINE(4939)
												{
													HX_STACK_LINE(4939)
													::zpp_nape::geom::ZPP_Vec2 cx_ite2 = _this->gverts->next;		HX_STACK_VAR(cx_ite2,"cx_ite2");
													HX_STACK_LINE(4939)
													::zpp_nape::geom::ZPP_Vec2 u = cx_ite2;		HX_STACK_VAR(u,"u");
													HX_STACK_LINE(4939)
													cx_ite2 = cx_ite2->next;
													HX_STACK_LINE(4939)
													while(((cx_ite2 != null()))){
														HX_STACK_LINE(4939)
														::zpp_nape::geom::ZPP_Vec2 v = cx_ite2;		HX_STACK_VAR(v,"v");
														HX_STACK_LINE(4939)
														{
															HX_STACK_LINE(4939)
															::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
															HX_STACK_LINE(4939)
															ite = ite->next;
															HX_STACK_LINE(4939)
															e->gp0 = u;
															HX_STACK_LINE(4939)
															e->gp1 = v;
															HX_STACK_LINE(4939)
															{
																HX_STACK_LINE(4939)
																e->gnormx = ((_this->body->axisy * e->lnormx) - (_this->body->axisx * e->lnormy));
																HX_STACK_LINE(4939)
																e->gnormy = ((e->lnormx * _this->body->axisx) + (e->lnormy * _this->body->axisy));
															}
															HX_STACK_LINE(4939)
															e->gprojection = (((_this->body->posx * e->gnormx) + (_this->body->posy * e->gnormy)) + e->lprojection);
															HX_STACK_LINE(4939)
															if (((e->wrap_gnorm != null()))){
																HX_STACK_LINE(4939)
																e->wrap_gnorm->zpp_inner->x = e->gnormx;
																HX_STACK_LINE(4939)
																e->wrap_gnorm->zpp_inner->y = e->gnormy;
																HX_STACK_LINE(4939)
																{
																}
																HX_STACK_LINE(4939)
																{
																}
															}
															HX_STACK_LINE(4939)
															e->tp0 = ((e->gp0->y * e->gnormx) - (e->gp0->x * e->gnormy));
															HX_STACK_LINE(4939)
															e->tp1 = ((e->gp1->y * e->gnormx) - (e->gp1->x * e->gnormy));
														}
														HX_STACK_LINE(4939)
														u = v;
														HX_STACK_LINE(4939)
														cx_ite2 = cx_ite2->next;
													}
													HX_STACK_LINE(4939)
													::zpp_nape::geom::ZPP_Vec2 v = _this->gverts->next;		HX_STACK_VAR(v,"v");
													HX_STACK_LINE(4939)
													{
														HX_STACK_LINE(4939)
														::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
														HX_STACK_LINE(4939)
														ite = ite->next;
														HX_STACK_LINE(4939)
														e->gp0 = u;
														HX_STACK_LINE(4939)
														e->gp1 = v;
														HX_STACK_LINE(4939)
														{
															HX_STACK_LINE(4939)
															e->gnormx = ((_this->body->axisy * e->lnormx) - (_this->body->axisx * e->lnormy));
															HX_STACK_LINE(4939)
															e->gnormy = ((e->lnormx * _this->body->axisx) + (e->lnormy * _this->body->axisy));
														}
														HX_STACK_LINE(4939)
														e->gprojection = (((_this->body->posx * e->gnormx) + (_this->body->posy * e->gnormy)) + e->lprojection);
														HX_STACK_LINE(4939)
														if (((e->wrap_gnorm != null()))){
															HX_STACK_LINE(4939)
															e->wrap_gnorm->zpp_inner->x = e->gnormx;
															HX_STACK_LINE(4939)
															e->wrap_gnorm->zpp_inner->y = e->gnormy;
															HX_STACK_LINE(4939)
															{
															}
															HX_STACK_LINE(4939)
															{
															}
														}
														HX_STACK_LINE(4939)
														e->tp0 = ((e->gp0->y * e->gnormx) - (e->gp0->x * e->gnormy));
														HX_STACK_LINE(4939)
														e->tp1 = ((e->gp1->y * e->gnormx) - (e->gp1->x * e->gnormy));
													}
												}
											}
										}
									}
								}
								HX_STACK_LINE(4941)
								s->validate_sweepRadius();
								HX_STACK_LINE(4942)
								if (((s->sweepRadius > cur->sweepRadius))){
									HX_STACK_LINE(4942)
									cur->sweepRadius = s->sweepRadius;
								}
							}
							HX_STACK_LINE(4944)
							cx_ite1 = cx_ite1->next;
						}
					}
					HX_STACK_LINE(4947)
					cur->validate_mass();
					HX_STACK_LINE(4948)
					cur->validate_inertia();
					HX_STACK_LINE(4949)
					if ((!(((cur->shapes->head == null()))))){
						HX_STACK_LINE(4950)
						{
							HX_STACK_LINE(4950)
							if (((cur->shapes->head == null()))){
								HX_STACK_LINE(4950)
								hx::Throw (HX_CSTRING("Error: Body bounds only makes sense if it contains shapes"));
							}
							HX_STACK_LINE(4950)
							if ((cur->zip_aabb)){
								HX_STACK_LINE(4950)
								cur->zip_aabb = false;
								HX_STACK_LINE(4950)
								{
									HX_STACK_LINE(4950)
									cur->aabb->minx = ::Math_obj::POSITIVE_INFINITY;
									HX_STACK_LINE(4950)
									cur->aabb->miny = ::Math_obj::POSITIVE_INFINITY;
									HX_STACK_LINE(4950)
									{
									}
									HX_STACK_LINE(4950)
									{
									}
								}
								HX_STACK_LINE(4950)
								{
									HX_STACK_LINE(4950)
									cur->aabb->maxx = ::Math_obj::NEGATIVE_INFINITY;
									HX_STACK_LINE(4950)
									cur->aabb->maxy = ::Math_obj::NEGATIVE_INFINITY;
									HX_STACK_LINE(4950)
									{
									}
									HX_STACK_LINE(4950)
									{
									}
								}
								HX_STACK_LINE(4950)
								{
									HX_STACK_LINE(4950)
									::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite1 = cur->shapes->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
									HX_STACK_LINE(4950)
									while(((cx_ite1 != null()))){
										HX_STACK_LINE(4950)
										::zpp_nape::shape::ZPP_Shape s = cx_ite1->elt;		HX_STACK_VAR(s,"s");
										HX_STACK_LINE(4950)
										{
											HX_STACK_LINE(4950)
											if ((s->zip_aabb)){
												HX_STACK_LINE(4950)
												if (((s->body != null()))){
													HX_STACK_LINE(4950)
													s->zip_aabb = false;
													HX_STACK_LINE(4950)
													if (((s->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE))){
														HX_STACK_LINE(4950)
														::zpp_nape::shape::ZPP_Circle _this = s->circle;		HX_STACK_VAR(_this,"_this");
														HX_STACK_LINE(4950)
														if ((_this->zip_worldCOM)){
															HX_STACK_LINE(4950)
															if (((_this->body != null()))){
																HX_STACK_LINE(4950)
																_this->zip_worldCOM = false;
																HX_STACK_LINE(4950)
																if ((_this->zip_localCOM)){
																	HX_STACK_LINE(4950)
																	_this->zip_localCOM = false;
																	HX_STACK_LINE(4950)
																	if (((_this->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_POLYGON))){
																		HX_STACK_LINE(4950)
																		::zpp_nape::shape::ZPP_Polygon _this1 = _this->polygon;		HX_STACK_VAR(_this1,"_this1");
																		HX_STACK_LINE(4950)
																		if (((_this1->lverts->next == null()))){
																			HX_STACK_LINE(4950)
																			hx::Throw (HX_CSTRING("Error: An empty polygon has no meaningful localCOM"));
																		}
																		HX_STACK_LINE(4950)
																		if (((_this1->lverts->next->next == null()))){
																			HX_STACK_LINE(4950)
																			_this1->localCOMx = _this1->lverts->next->x;
																			HX_STACK_LINE(4950)
																			_this1->localCOMy = _this1->lverts->next->y;
																			HX_STACK_LINE(4950)
																			{
																			}
																			HX_STACK_LINE(4950)
																			Dynamic();
																		}
																		else{
																			HX_STACK_LINE(4950)
																			if (((_this1->lverts->next->next->next == null()))){
																				HX_STACK_LINE(4950)
																				{
																					HX_STACK_LINE(4950)
																					_this1->localCOMx = _this1->lverts->next->x;
																					HX_STACK_LINE(4950)
																					_this1->localCOMy = _this1->lverts->next->y;
																					HX_STACK_LINE(4950)
																					{
																					}
																					HX_STACK_LINE(4950)
																					{
																					}
																				}
																				HX_STACK_LINE(4950)
																				{
																					HX_STACK_LINE(4950)
																					Float t = 1.0;		HX_STACK_VAR(t,"t");
																					HX_STACK_LINE(4950)
																					{
																					}
																					HX_STACK_LINE(4950)
																					hx::AddEq(_this1->localCOMx,(_this1->lverts->next->next->x * t));
																					HX_STACK_LINE(4950)
																					hx::AddEq(_this1->localCOMy,(_this1->lverts->next->next->y * t));
																				}
																				HX_STACK_LINE(4950)
																				{
																					HX_STACK_LINE(4950)
																					Float t = 0.5;		HX_STACK_VAR(t,"t");
																					HX_STACK_LINE(4950)
																					{
																					}
																					HX_STACK_LINE(4950)
																					hx::MultEq(_this1->localCOMx,t);
																					HX_STACK_LINE(4950)
																					hx::MultEq(_this1->localCOMy,t);
																				}
																			}
																			else{
																				HX_STACK_LINE(4950)
																				{
																					HX_STACK_LINE(4950)
																					_this1->localCOMx = (int)0;
																					HX_STACK_LINE(4950)
																					_this1->localCOMy = (int)0;
																					HX_STACK_LINE(4950)
																					{
																					}
																					HX_STACK_LINE(4950)
																					{
																					}
																				}
																				HX_STACK_LINE(4950)
																				Float area = 0.0;		HX_STACK_VAR(area,"area");
																				HX_STACK_LINE(4950)
																				{
																					HX_STACK_LINE(4950)
																					::zpp_nape::geom::ZPP_Vec2 cx_ite2 = _this1->lverts->next;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																					HX_STACK_LINE(4950)
																					::zpp_nape::geom::ZPP_Vec2 u = cx_ite2;		HX_STACK_VAR(u,"u");
																					HX_STACK_LINE(4950)
																					cx_ite2 = cx_ite2->next;
																					HX_STACK_LINE(4950)
																					::zpp_nape::geom::ZPP_Vec2 v = cx_ite2;		HX_STACK_VAR(v,"v");
																					HX_STACK_LINE(4950)
																					cx_ite2 = cx_ite2->next;
																					HX_STACK_LINE(4950)
																					while(((cx_ite2 != null()))){
																						HX_STACK_LINE(4950)
																						::zpp_nape::geom::ZPP_Vec2 w = cx_ite2;		HX_STACK_VAR(w,"w");
																						HX_STACK_LINE(4950)
																						{
																							HX_STACK_LINE(4950)
																							hx::AddEq(area,(v->x * ((w->y - u->y))));
																							HX_STACK_LINE(4950)
																							Float cf = ((w->y * v->x) - (w->x * v->y));		HX_STACK_VAR(cf,"cf");
																							HX_STACK_LINE(4950)
																							hx::AddEq(_this1->localCOMx,(((v->x + w->x)) * cf));
																							HX_STACK_LINE(4950)
																							hx::AddEq(_this1->localCOMy,(((v->y + w->y)) * cf));
																						}
																						HX_STACK_LINE(4950)
																						u = v;
																						HX_STACK_LINE(4950)
																						v = w;
																						HX_STACK_LINE(4950)
																						cx_ite2 = cx_ite2->next;
																					}
																					HX_STACK_LINE(4950)
																					cx_ite2 = _this1->lverts->next;
																					HX_STACK_LINE(4950)
																					::zpp_nape::geom::ZPP_Vec2 w = cx_ite2;		HX_STACK_VAR(w,"w");
																					HX_STACK_LINE(4950)
																					{
																						HX_STACK_LINE(4950)
																						hx::AddEq(area,(v->x * ((w->y - u->y))));
																						HX_STACK_LINE(4950)
																						Float cf = ((w->y * v->x) - (w->x * v->y));		HX_STACK_VAR(cf,"cf");
																						HX_STACK_LINE(4950)
																						hx::AddEq(_this1->localCOMx,(((v->x + w->x)) * cf));
																						HX_STACK_LINE(4950)
																						hx::AddEq(_this1->localCOMy,(((v->y + w->y)) * cf));
																					}
																					HX_STACK_LINE(4950)
																					u = v;
																					HX_STACK_LINE(4950)
																					v = w;
																					HX_STACK_LINE(4950)
																					cx_ite2 = cx_ite2->next;
																					HX_STACK_LINE(4950)
																					::zpp_nape::geom::ZPP_Vec2 w1 = cx_ite2;		HX_STACK_VAR(w1,"w1");
																					HX_STACK_LINE(4950)
																					{
																						HX_STACK_LINE(4950)
																						hx::AddEq(area,(v->x * ((w1->y - u->y))));
																						HX_STACK_LINE(4950)
																						Float cf = ((w1->y * v->x) - (w1->x * v->y));		HX_STACK_VAR(cf,"cf");
																						HX_STACK_LINE(4950)
																						hx::AddEq(_this1->localCOMx,(((v->x + w1->x)) * cf));
																						HX_STACK_LINE(4950)
																						hx::AddEq(_this1->localCOMy,(((v->y + w1->y)) * cf));
																					}
																				}
																				HX_STACK_LINE(4950)
																				area = (Float((int)1) / Float((((int)3 * area))));
																				HX_STACK_LINE(4950)
																				{
																					HX_STACK_LINE(4950)
																					Float t = area;		HX_STACK_VAR(t,"t");
																					HX_STACK_LINE(4950)
																					{
																					}
																					HX_STACK_LINE(4950)
																					hx::MultEq(_this1->localCOMx,t);
																					HX_STACK_LINE(4950)
																					hx::MultEq(_this1->localCOMy,t);
																				}
																			}
																		}
																	}
																}
																HX_STACK_LINE(4950)
																{
																	HX_STACK_LINE(4950)
																	::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
																	HX_STACK_LINE(4950)
																	if ((_this1->zip_axis)){
																		HX_STACK_LINE(4950)
																		_this1->zip_axis = false;
																		HX_STACK_LINE(4950)
																		{
																			HX_STACK_LINE(4950)
																			_this1->axisx = ::Math_obj::sin(_this1->rot);
																			HX_STACK_LINE(4950)
																			_this1->axisy = ::Math_obj::cos(_this1->rot);
																			HX_STACK_LINE(4950)
																			{
																			}
																			HX_STACK_LINE(4950)
																			Dynamic();
																		}
																	}
																}
																HX_STACK_LINE(4950)
																{
																	HX_STACK_LINE(4950)
																	_this->worldCOMx = (_this->body->posx + (((_this->body->axisy * _this->localCOMx) - (_this->body->axisx * _this->localCOMy))));
																	HX_STACK_LINE(4950)
																	_this->worldCOMy = (_this->body->posy + (((_this->localCOMx * _this->body->axisx) + (_this->localCOMy * _this->body->axisy))));
																}
															}
														}
														HX_STACK_LINE(4950)
														Float rx = _this->radius;		HX_STACK_VAR(rx,"rx");
														HX_STACK_LINE(4950)
														Float ry = _this->radius;		HX_STACK_VAR(ry,"ry");
														HX_STACK_LINE(4950)
														{
														}
														HX_STACK_LINE(4950)
														{
														}
														HX_STACK_LINE(4950)
														{
															HX_STACK_LINE(4950)
															_this->aabb->minx = (_this->worldCOMx - rx);
															HX_STACK_LINE(4950)
															_this->aabb->miny = (_this->worldCOMy - ry);
														}
														HX_STACK_LINE(4950)
														{
															HX_STACK_LINE(4950)
															_this->aabb->maxx = (_this->worldCOMx + rx);
															HX_STACK_LINE(4950)
															_this->aabb->maxy = (_this->worldCOMy + ry);
														}
													}
													else{
														HX_STACK_LINE(4950)
														::zpp_nape::shape::ZPP_Polygon _this = s->polygon;		HX_STACK_VAR(_this,"_this");
														HX_STACK_LINE(4950)
														if ((_this->zip_gverts)){
															HX_STACK_LINE(4950)
															if (((_this->body != null()))){
																HX_STACK_LINE(4950)
																_this->zip_gverts = false;
																HX_STACK_LINE(4950)
																_this->validate_lverts();
																HX_STACK_LINE(4950)
																{
																	HX_STACK_LINE(4950)
																	::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
																	HX_STACK_LINE(4950)
																	if ((_this1->zip_axis)){
																		HX_STACK_LINE(4950)
																		_this1->zip_axis = false;
																		HX_STACK_LINE(4950)
																		{
																			HX_STACK_LINE(4950)
																			_this1->axisx = ::Math_obj::sin(_this1->rot);
																			HX_STACK_LINE(4950)
																			_this1->axisy = ::Math_obj::cos(_this1->rot);
																			HX_STACK_LINE(4950)
																			{
																			}
																			HX_STACK_LINE(4950)
																			Dynamic();
																		}
																	}
																}
																HX_STACK_LINE(4950)
																::zpp_nape::geom::ZPP_Vec2 li = _this->lverts->next;		HX_STACK_VAR(li,"li");
																HX_STACK_LINE(4950)
																{
																	HX_STACK_LINE(4950)
																	::zpp_nape::geom::ZPP_Vec2 cx_ite2 = _this->gverts->next;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																	HX_STACK_LINE(4950)
																	while(((cx_ite2 != null()))){
																		HX_STACK_LINE(4950)
																		::zpp_nape::geom::ZPP_Vec2 g = cx_ite2;		HX_STACK_VAR(g,"g");
																		HX_STACK_LINE(4950)
																		{
																			HX_STACK_LINE(4950)
																			::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
																			HX_STACK_LINE(4950)
																			li = li->next;
																			HX_STACK_LINE(4950)
																			{
																				HX_STACK_LINE(4950)
																				g->x = (_this->body->posx + (((_this->body->axisy * l->x) - (_this->body->axisx * l->y))));
																				HX_STACK_LINE(4950)
																				g->y = (_this->body->posy + (((l->x * _this->body->axisx) + (l->y * _this->body->axisy))));
																			}
																		}
																		HX_STACK_LINE(4950)
																		cx_ite2 = cx_ite2->next;
																	}
																}
															}
														}
														HX_STACK_LINE(4950)
														if (((_this->lverts->next == null()))){
															HX_STACK_LINE(4950)
															hx::Throw (HX_CSTRING("Error: An empty polygon has no meaningful bounds"));
														}
														HX_STACK_LINE(4950)
														::zpp_nape::geom::ZPP_Vec2 p0 = _this->gverts->next;		HX_STACK_VAR(p0,"p0");
														HX_STACK_LINE(4950)
														{
															HX_STACK_LINE(4950)
															_this->aabb->minx = p0->x;
															HX_STACK_LINE(4950)
															_this->aabb->miny = p0->y;
															HX_STACK_LINE(4950)
															{
															}
															HX_STACK_LINE(4950)
															{
															}
														}
														HX_STACK_LINE(4950)
														{
															HX_STACK_LINE(4950)
															_this->aabb->maxx = p0->x;
															HX_STACK_LINE(4950)
															_this->aabb->maxy = p0->y;
															HX_STACK_LINE(4950)
															{
															}
															HX_STACK_LINE(4950)
															{
															}
														}
														HX_STACK_LINE(4950)
														{
															HX_STACK_LINE(4950)
															::zpp_nape::geom::ZPP_Vec2 cx_ite2 = _this->gverts->next->next;		HX_STACK_VAR(cx_ite2,"cx_ite2");
															HX_STACK_LINE(4950)
															while(((cx_ite2 != null()))){
																HX_STACK_LINE(4950)
																::zpp_nape::geom::ZPP_Vec2 p = cx_ite2;		HX_STACK_VAR(p,"p");
																HX_STACK_LINE(4950)
																{
																	HX_STACK_LINE(4950)
																	if (((p->x < _this->aabb->minx))){
																		HX_STACK_LINE(4950)
																		_this->aabb->minx = p->x;
																	}
																	HX_STACK_LINE(4950)
																	if (((p->x > _this->aabb->maxx))){
																		HX_STACK_LINE(4950)
																		_this->aabb->maxx = p->x;
																	}
																	HX_STACK_LINE(4950)
																	if (((p->y < _this->aabb->miny))){
																		HX_STACK_LINE(4950)
																		_this->aabb->miny = p->y;
																	}
																	HX_STACK_LINE(4950)
																	if (((p->y > _this->aabb->maxy))){
																		HX_STACK_LINE(4950)
																		_this->aabb->maxy = p->y;
																	}
																}
																HX_STACK_LINE(4950)
																cx_ite2 = cx_ite2->next;
															}
														}
													}
												}
											}
											HX_STACK_LINE(4950)
											{
												HX_STACK_LINE(4950)
												::zpp_nape::geom::ZPP_AABB _this = cur->aabb;		HX_STACK_VAR(_this,"_this");
												::zpp_nape::geom::ZPP_AABB x = s->aabb;		HX_STACK_VAR(x,"x");
												HX_STACK_LINE(4950)
												if (((x->minx < _this->minx))){
													HX_STACK_LINE(4950)
													_this->minx = x->minx;
												}
												HX_STACK_LINE(4950)
												if (((x->maxx > _this->maxx))){
													HX_STACK_LINE(4950)
													_this->maxx = x->maxx;
												}
												HX_STACK_LINE(4950)
												if (((x->miny < _this->miny))){
													HX_STACK_LINE(4950)
													_this->miny = x->miny;
												}
												HX_STACK_LINE(4950)
												if (((x->maxy > _this->maxy))){
													HX_STACK_LINE(4950)
													_this->maxy = x->maxy;
												}
											}
										}
										HX_STACK_LINE(4950)
										cx_ite1 = cx_ite1->next;
									}
								}
							}
						}
						HX_STACK_LINE(4951)
						cur->validate_worldCOM();
					}
					HX_STACK_LINE(4953)
					cur->validate_gravMass();
					HX_STACK_LINE(4954)
					if ((cur->zip_axis)){
						HX_STACK_LINE(4954)
						cur->zip_axis = false;
						HX_STACK_LINE(4954)
						{
							HX_STACK_LINE(4954)
							cur->axisx = ::Math_obj::sin(cur->rot);
							HX_STACK_LINE(4954)
							cur->axisy = ::Math_obj::cos(cur->rot);
							HX_STACK_LINE(4954)
							{
							}
							HX_STACK_LINE(4954)
							Dynamic();
						}
					}
					HX_STACK_LINE(4956)
					if (((bool((bool(!(cur->nomove)) && bool((cur->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC)))) && bool((cur->mass == (int)0))))){
						HX_STACK_LINE(4956)
						hx::Throw (HX_CSTRING("Error: Dynamic Body cannot be simulated with 0 mass unless allowMovement is false"));
					}
					HX_STACK_LINE(4959)
					if (((bool((bool(!(cur->norotate)) && bool((cur->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC)))) && bool((cur->inertia == (int)0))))){
						HX_STACK_LINE(4959)
						hx::Throw (HX_CSTRING("Error: Dynamic Body cannot be simulated with 0 inertia unless allowRotation is false"));
					}
					HX_STACK_LINE(4963)
					{
					}
					HX_STACK_LINE(4984)
					{
						HX_STACK_LINE(4985)
						::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite1 = cur->shapes->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
						HX_STACK_LINE(4986)
						while(((cx_ite1 != null()))){
							HX_STACK_LINE(4987)
							::zpp_nape::shape::ZPP_Shape shape = cx_ite1->elt;		HX_STACK_VAR(shape,"shape");
							HX_STACK_LINE(4988)
							this->bphase->sync(shape);
							HX_STACK_LINE(4989)
							cx_ite1 = cx_ite1->next;
						}
					}
				}
				HX_STACK_LINE(4993)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(4997)
		{
			HX_STACK_LINE(4998)
			::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = this->live_constraints->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(4999)
			while(((cx_ite != null()))){
				HX_STACK_LINE(5000)
				::zpp_nape::constraint::ZPP_Constraint con = cx_ite->elt;		HX_STACK_VAR(con,"con");
				HX_STACK_LINE(5001)
				if ((con->active)){
					HX_STACK_LINE(5004)
					con->validate();
					HX_STACK_LINE(5006)
					if (((bool(con->component->woken) && bool((con->cbSet != null()))))){
						HX_STACK_LINE(5008)
						::zpp_nape::util::ZNPNode_ZPP_ConstraintListener cx_ite1 = con->cbSet->conlisteners->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
						HX_STACK_LINE(5009)
						while(((cx_ite1 != null()))){
							HX_STACK_LINE(5010)
							::zpp_nape::callbacks::ZPP_ConstraintListener i = cx_ite1->elt;		HX_STACK_VAR(i,"i");
							HX_STACK_LINE(5011)
							{
								HX_STACK_LINE(5012)
								if (((i->event != ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_WAKE))){
									HX_STACK_LINE(5013)
									cx_ite1 = cx_ite1->next;
									HX_STACK_LINE(5014)
									continue;
								}
								HX_STACK_LINE(5016)
								::zpp_nape::callbacks::ZPP_Callback cb = this->push_callback(i);		HX_STACK_VAR(cb,"cb");
								HX_STACK_LINE(5017)
								cb->event = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_WAKE;
								HX_STACK_LINE(5018)
								cb->constraint = con;
							}
							HX_STACK_LINE(5020)
							cx_ite1 = cx_ite1->next;
						}
					}
					HX_STACK_LINE(5024)
					con->component->woken = false;
				}
				HX_STACK_LINE(5027)
				cx_ite = cx_ite->next;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Space_obj,validation,(void))

Void ZPP_Space_obj::static_validation( ::zpp_nape::phys::ZPP_Body body){
{
		HX_STACK_PUSH("ZPP_Space::static_validation","zpp_nape/space/Space.hx",4809);
		HX_STACK_THIS(this);
		HX_STACK_ARG(body,"body");
		HX_STACK_LINE(4810)
		if ((!(((body->shapes->head == null()))))){
			HX_STACK_LINE(4811)
			if (((body->shapes->head == null()))){
				HX_STACK_LINE(4811)
				hx::Throw (HX_CSTRING("Error: Body bounds only makes sense if it contains shapes"));
			}
			HX_STACK_LINE(4811)
			if ((body->zip_aabb)){
				HX_STACK_LINE(4811)
				body->zip_aabb = false;
				HX_STACK_LINE(4811)
				{
					HX_STACK_LINE(4811)
					body->aabb->minx = ::Math_obj::POSITIVE_INFINITY;
					HX_STACK_LINE(4811)
					body->aabb->miny = ::Math_obj::POSITIVE_INFINITY;
					HX_STACK_LINE(4811)
					{
					}
					HX_STACK_LINE(4811)
					{
					}
				}
				HX_STACK_LINE(4811)
				{
					HX_STACK_LINE(4811)
					body->aabb->maxx = ::Math_obj::NEGATIVE_INFINITY;
					HX_STACK_LINE(4811)
					body->aabb->maxy = ::Math_obj::NEGATIVE_INFINITY;
					HX_STACK_LINE(4811)
					{
					}
					HX_STACK_LINE(4811)
					{
					}
				}
				HX_STACK_LINE(4811)
				{
					HX_STACK_LINE(4811)
					::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite = body->shapes->head;		HX_STACK_VAR(cx_ite,"cx_ite");
					HX_STACK_LINE(4811)
					while(((cx_ite != null()))){
						HX_STACK_LINE(4811)
						::zpp_nape::shape::ZPP_Shape s = cx_ite->elt;		HX_STACK_VAR(s,"s");
						HX_STACK_LINE(4811)
						{
							HX_STACK_LINE(4811)
							if ((s->zip_aabb)){
								HX_STACK_LINE(4811)
								if (((s->body != null()))){
									HX_STACK_LINE(4811)
									s->zip_aabb = false;
									HX_STACK_LINE(4811)
									if (((s->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE))){
										HX_STACK_LINE(4811)
										::zpp_nape::shape::ZPP_Circle _this = s->circle;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(4811)
										if ((_this->zip_worldCOM)){
											HX_STACK_LINE(4811)
											if (((_this->body != null()))){
												HX_STACK_LINE(4811)
												_this->zip_worldCOM = false;
												HX_STACK_LINE(4811)
												if ((_this->zip_localCOM)){
													HX_STACK_LINE(4811)
													_this->zip_localCOM = false;
													HX_STACK_LINE(4811)
													if (((_this->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_POLYGON))){
														HX_STACK_LINE(4811)
														::zpp_nape::shape::ZPP_Polygon _this1 = _this->polygon;		HX_STACK_VAR(_this1,"_this1");
														HX_STACK_LINE(4811)
														if (((_this1->lverts->next == null()))){
															HX_STACK_LINE(4811)
															hx::Throw (HX_CSTRING("Error: An empty polygon has no meaningful localCOM"));
														}
														HX_STACK_LINE(4811)
														if (((_this1->lverts->next->next == null()))){
															HX_STACK_LINE(4811)
															_this1->localCOMx = _this1->lverts->next->x;
															HX_STACK_LINE(4811)
															_this1->localCOMy = _this1->lverts->next->y;
															HX_STACK_LINE(4811)
															{
															}
															HX_STACK_LINE(4811)
															Dynamic();
														}
														else{
															HX_STACK_LINE(4811)
															if (((_this1->lverts->next->next->next == null()))){
																HX_STACK_LINE(4811)
																{
																	HX_STACK_LINE(4811)
																	_this1->localCOMx = _this1->lverts->next->x;
																	HX_STACK_LINE(4811)
																	_this1->localCOMy = _this1->lverts->next->y;
																	HX_STACK_LINE(4811)
																	{
																	}
																	HX_STACK_LINE(4811)
																	{
																	}
																}
																HX_STACK_LINE(4811)
																{
																	HX_STACK_LINE(4811)
																	Float t = 1.0;		HX_STACK_VAR(t,"t");
																	HX_STACK_LINE(4811)
																	{
																	}
																	HX_STACK_LINE(4811)
																	hx::AddEq(_this1->localCOMx,(_this1->lverts->next->next->x * t));
																	HX_STACK_LINE(4811)
																	hx::AddEq(_this1->localCOMy,(_this1->lverts->next->next->y * t));
																}
																HX_STACK_LINE(4811)
																{
																	HX_STACK_LINE(4811)
																	Float t = 0.5;		HX_STACK_VAR(t,"t");
																	HX_STACK_LINE(4811)
																	{
																	}
																	HX_STACK_LINE(4811)
																	hx::MultEq(_this1->localCOMx,t);
																	HX_STACK_LINE(4811)
																	hx::MultEq(_this1->localCOMy,t);
																}
															}
															else{
																HX_STACK_LINE(4811)
																{
																	HX_STACK_LINE(4811)
																	_this1->localCOMx = (int)0;
																	HX_STACK_LINE(4811)
																	_this1->localCOMy = (int)0;
																	HX_STACK_LINE(4811)
																	{
																	}
																	HX_STACK_LINE(4811)
																	{
																	}
																}
																HX_STACK_LINE(4811)
																Float area = 0.0;		HX_STACK_VAR(area,"area");
																HX_STACK_LINE(4811)
																{
																	HX_STACK_LINE(4811)
																	::zpp_nape::geom::ZPP_Vec2 cx_ite1 = _this1->lverts->next;		HX_STACK_VAR(cx_ite1,"cx_ite1");
																	HX_STACK_LINE(4811)
																	::zpp_nape::geom::ZPP_Vec2 u = cx_ite1;		HX_STACK_VAR(u,"u");
																	HX_STACK_LINE(4811)
																	cx_ite1 = cx_ite1->next;
																	HX_STACK_LINE(4811)
																	::zpp_nape::geom::ZPP_Vec2 v = cx_ite1;		HX_STACK_VAR(v,"v");
																	HX_STACK_LINE(4811)
																	cx_ite1 = cx_ite1->next;
																	HX_STACK_LINE(4811)
																	while(((cx_ite1 != null()))){
																		HX_STACK_LINE(4811)
																		::zpp_nape::geom::ZPP_Vec2 w = cx_ite1;		HX_STACK_VAR(w,"w");
																		HX_STACK_LINE(4811)
																		{
																			HX_STACK_LINE(4811)
																			hx::AddEq(area,(v->x * ((w->y - u->y))));
																			HX_STACK_LINE(4811)
																			Float cf = ((w->y * v->x) - (w->x * v->y));		HX_STACK_VAR(cf,"cf");
																			HX_STACK_LINE(4811)
																			hx::AddEq(_this1->localCOMx,(((v->x + w->x)) * cf));
																			HX_STACK_LINE(4811)
																			hx::AddEq(_this1->localCOMy,(((v->y + w->y)) * cf));
																		}
																		HX_STACK_LINE(4811)
																		u = v;
																		HX_STACK_LINE(4811)
																		v = w;
																		HX_STACK_LINE(4811)
																		cx_ite1 = cx_ite1->next;
																	}
																	HX_STACK_LINE(4811)
																	cx_ite1 = _this1->lverts->next;
																	HX_STACK_LINE(4811)
																	::zpp_nape::geom::ZPP_Vec2 w = cx_ite1;		HX_STACK_VAR(w,"w");
																	HX_STACK_LINE(4811)
																	{
																		HX_STACK_LINE(4811)
																		hx::AddEq(area,(v->x * ((w->y - u->y))));
																		HX_STACK_LINE(4811)
																		Float cf = ((w->y * v->x) - (w->x * v->y));		HX_STACK_VAR(cf,"cf");
																		HX_STACK_LINE(4811)
																		hx::AddEq(_this1->localCOMx,(((v->x + w->x)) * cf));
																		HX_STACK_LINE(4811)
																		hx::AddEq(_this1->localCOMy,(((v->y + w->y)) * cf));
																	}
																	HX_STACK_LINE(4811)
																	u = v;
																	HX_STACK_LINE(4811)
																	v = w;
																	HX_STACK_LINE(4811)
																	cx_ite1 = cx_ite1->next;
																	HX_STACK_LINE(4811)
																	::zpp_nape::geom::ZPP_Vec2 w1 = cx_ite1;		HX_STACK_VAR(w1,"w1");
																	HX_STACK_LINE(4811)
																	{
																		HX_STACK_LINE(4811)
																		hx::AddEq(area,(v->x * ((w1->y - u->y))));
																		HX_STACK_LINE(4811)
																		Float cf = ((w1->y * v->x) - (w1->x * v->y));		HX_STACK_VAR(cf,"cf");
																		HX_STACK_LINE(4811)
																		hx::AddEq(_this1->localCOMx,(((v->x + w1->x)) * cf));
																		HX_STACK_LINE(4811)
																		hx::AddEq(_this1->localCOMy,(((v->y + w1->y)) * cf));
																	}
																}
																HX_STACK_LINE(4811)
																area = (Float((int)1) / Float((((int)3 * area))));
																HX_STACK_LINE(4811)
																{
																	HX_STACK_LINE(4811)
																	Float t = area;		HX_STACK_VAR(t,"t");
																	HX_STACK_LINE(4811)
																	{
																	}
																	HX_STACK_LINE(4811)
																	hx::MultEq(_this1->localCOMx,t);
																	HX_STACK_LINE(4811)
																	hx::MultEq(_this1->localCOMy,t);
																}
															}
														}
													}
												}
												HX_STACK_LINE(4811)
												{
													HX_STACK_LINE(4811)
													::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
													HX_STACK_LINE(4811)
													if ((_this1->zip_axis)){
														HX_STACK_LINE(4811)
														_this1->zip_axis = false;
														HX_STACK_LINE(4811)
														{
															HX_STACK_LINE(4811)
															_this1->axisx = ::Math_obj::sin(_this1->rot);
															HX_STACK_LINE(4811)
															_this1->axisy = ::Math_obj::cos(_this1->rot);
															HX_STACK_LINE(4811)
															{
															}
															HX_STACK_LINE(4811)
															Dynamic();
														}
													}
												}
												HX_STACK_LINE(4811)
												{
													HX_STACK_LINE(4811)
													_this->worldCOMx = (_this->body->posx + (((_this->body->axisy * _this->localCOMx) - (_this->body->axisx * _this->localCOMy))));
													HX_STACK_LINE(4811)
													_this->worldCOMy = (_this->body->posy + (((_this->localCOMx * _this->body->axisx) + (_this->localCOMy * _this->body->axisy))));
												}
											}
										}
										HX_STACK_LINE(4811)
										Float rx = _this->radius;		HX_STACK_VAR(rx,"rx");
										HX_STACK_LINE(4811)
										Float ry = _this->radius;		HX_STACK_VAR(ry,"ry");
										HX_STACK_LINE(4811)
										{
										}
										HX_STACK_LINE(4811)
										{
										}
										HX_STACK_LINE(4811)
										{
											HX_STACK_LINE(4811)
											_this->aabb->minx = (_this->worldCOMx - rx);
											HX_STACK_LINE(4811)
											_this->aabb->miny = (_this->worldCOMy - ry);
										}
										HX_STACK_LINE(4811)
										{
											HX_STACK_LINE(4811)
											_this->aabb->maxx = (_this->worldCOMx + rx);
											HX_STACK_LINE(4811)
											_this->aabb->maxy = (_this->worldCOMy + ry);
										}
									}
									else{
										HX_STACK_LINE(4811)
										::zpp_nape::shape::ZPP_Polygon _this = s->polygon;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(4811)
										if ((_this->zip_gverts)){
											HX_STACK_LINE(4811)
											if (((_this->body != null()))){
												HX_STACK_LINE(4811)
												_this->zip_gverts = false;
												HX_STACK_LINE(4811)
												_this->validate_lverts();
												HX_STACK_LINE(4811)
												{
													HX_STACK_LINE(4811)
													::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
													HX_STACK_LINE(4811)
													if ((_this1->zip_axis)){
														HX_STACK_LINE(4811)
														_this1->zip_axis = false;
														HX_STACK_LINE(4811)
														{
															HX_STACK_LINE(4811)
															_this1->axisx = ::Math_obj::sin(_this1->rot);
															HX_STACK_LINE(4811)
															_this1->axisy = ::Math_obj::cos(_this1->rot);
															HX_STACK_LINE(4811)
															{
															}
															HX_STACK_LINE(4811)
															Dynamic();
														}
													}
												}
												HX_STACK_LINE(4811)
												::zpp_nape::geom::ZPP_Vec2 li = _this->lverts->next;		HX_STACK_VAR(li,"li");
												HX_STACK_LINE(4811)
												{
													HX_STACK_LINE(4811)
													::zpp_nape::geom::ZPP_Vec2 cx_ite1 = _this->gverts->next;		HX_STACK_VAR(cx_ite1,"cx_ite1");
													HX_STACK_LINE(4811)
													while(((cx_ite1 != null()))){
														HX_STACK_LINE(4811)
														::zpp_nape::geom::ZPP_Vec2 g = cx_ite1;		HX_STACK_VAR(g,"g");
														HX_STACK_LINE(4811)
														{
															HX_STACK_LINE(4811)
															::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
															HX_STACK_LINE(4811)
															li = li->next;
															HX_STACK_LINE(4811)
															{
																HX_STACK_LINE(4811)
																g->x = (_this->body->posx + (((_this->body->axisy * l->x) - (_this->body->axisx * l->y))));
																HX_STACK_LINE(4811)
																g->y = (_this->body->posy + (((l->x * _this->body->axisx) + (l->y * _this->body->axisy))));
															}
														}
														HX_STACK_LINE(4811)
														cx_ite1 = cx_ite1->next;
													}
												}
											}
										}
										HX_STACK_LINE(4811)
										if (((_this->lverts->next == null()))){
											HX_STACK_LINE(4811)
											hx::Throw (HX_CSTRING("Error: An empty polygon has no meaningful bounds"));
										}
										HX_STACK_LINE(4811)
										::zpp_nape::geom::ZPP_Vec2 p0 = _this->gverts->next;		HX_STACK_VAR(p0,"p0");
										HX_STACK_LINE(4811)
										{
											HX_STACK_LINE(4811)
											_this->aabb->minx = p0->x;
											HX_STACK_LINE(4811)
											_this->aabb->miny = p0->y;
											HX_STACK_LINE(4811)
											{
											}
											HX_STACK_LINE(4811)
											{
											}
										}
										HX_STACK_LINE(4811)
										{
											HX_STACK_LINE(4811)
											_this->aabb->maxx = p0->x;
											HX_STACK_LINE(4811)
											_this->aabb->maxy = p0->y;
											HX_STACK_LINE(4811)
											{
											}
											HX_STACK_LINE(4811)
											{
											}
										}
										HX_STACK_LINE(4811)
										{
											HX_STACK_LINE(4811)
											::zpp_nape::geom::ZPP_Vec2 cx_ite1 = _this->gverts->next->next;		HX_STACK_VAR(cx_ite1,"cx_ite1");
											HX_STACK_LINE(4811)
											while(((cx_ite1 != null()))){
												HX_STACK_LINE(4811)
												::zpp_nape::geom::ZPP_Vec2 p = cx_ite1;		HX_STACK_VAR(p,"p");
												HX_STACK_LINE(4811)
												{
													HX_STACK_LINE(4811)
													if (((p->x < _this->aabb->minx))){
														HX_STACK_LINE(4811)
														_this->aabb->minx = p->x;
													}
													HX_STACK_LINE(4811)
													if (((p->x > _this->aabb->maxx))){
														HX_STACK_LINE(4811)
														_this->aabb->maxx = p->x;
													}
													HX_STACK_LINE(4811)
													if (((p->y < _this->aabb->miny))){
														HX_STACK_LINE(4811)
														_this->aabb->miny = p->y;
													}
													HX_STACK_LINE(4811)
													if (((p->y > _this->aabb->maxy))){
														HX_STACK_LINE(4811)
														_this->aabb->maxy = p->y;
													}
												}
												HX_STACK_LINE(4811)
												cx_ite1 = cx_ite1->next;
											}
										}
									}
								}
							}
							HX_STACK_LINE(4811)
							{
								HX_STACK_LINE(4811)
								::zpp_nape::geom::ZPP_AABB _this = body->aabb;		HX_STACK_VAR(_this,"_this");
								::zpp_nape::geom::ZPP_AABB x = s->aabb;		HX_STACK_VAR(x,"x");
								HX_STACK_LINE(4811)
								if (((x->minx < _this->minx))){
									HX_STACK_LINE(4811)
									_this->minx = x->minx;
								}
								HX_STACK_LINE(4811)
								if (((x->maxx > _this->maxx))){
									HX_STACK_LINE(4811)
									_this->maxx = x->maxx;
								}
								HX_STACK_LINE(4811)
								if (((x->miny < _this->miny))){
									HX_STACK_LINE(4811)
									_this->miny = x->miny;
								}
								HX_STACK_LINE(4811)
								if (((x->maxy > _this->maxy))){
									HX_STACK_LINE(4811)
									_this->maxy = x->maxy;
								}
							}
						}
						HX_STACK_LINE(4811)
						cx_ite = cx_ite->next;
					}
				}
			}
		}
		HX_STACK_LINE(4813)
		body->validate_mass();
		HX_STACK_LINE(4814)
		body->validate_inertia();
		HX_STACK_LINE(4816)
		if (((bool((bool((body->velx != (int)0)) || bool((body->vely != (int)0)))) || bool((body->angvel != (int)0))))){
			HX_STACK_LINE(4816)
			hx::Throw (HX_CSTRING("Error: Static body cannot have any real velocity, only kinematic or surface velocities"));
		}
		HX_STACK_LINE(4818)
		{
			HX_STACK_LINE(4819)
			::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite = body->shapes->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(4820)
			while(((cx_ite != null()))){
				HX_STACK_LINE(4821)
				::zpp_nape::shape::ZPP_Shape s = cx_ite->elt;		HX_STACK_VAR(s,"s");
				HX_STACK_LINE(4822)
				if (((s->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_POLYGON))){
					HX_STACK_LINE(4824)
					{
						HX_STACK_LINE(4824)
						::zpp_nape::shape::ZPP_Polygon _this = s->polygon;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(4824)
						if ((_this->zip_sanitation)){
							HX_STACK_LINE(4824)
							_this->zip_sanitation = false;
							HX_STACK_LINE(4824)
							_this->splice_collinear_real();
						}
					}
					HX_STACK_LINE(4826)
					::nape::shape::ValidationResult res = s->polygon->valid();		HX_STACK_VAR(res,"res");
					struct _Function_4_1{
						inline static ::nape::shape::ValidationResult Block( ){
							HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",4827);
							{
								HX_STACK_LINE(4827)
								if (((::zpp_nape::util::ZPP_Flags_obj::ValidationResult_VALID == null()))){
									HX_STACK_LINE(4827)
									::zpp_nape::util::ZPP_Flags_obj::internal = true;
									HX_STACK_LINE(4827)
									::zpp_nape::util::ZPP_Flags_obj::ValidationResult_VALID = ::nape::shape::ValidationResult_obj::__new();
									HX_STACK_LINE(4827)
									::zpp_nape::util::ZPP_Flags_obj::internal = false;
								}
								HX_STACK_LINE(4827)
								return ::zpp_nape::util::ZPP_Flags_obj::ValidationResult_VALID;
							}
							return null();
						}
					};
					HX_STACK_LINE(4827)
					if (((res != _Function_4_1::Block()))){
						HX_STACK_LINE(4827)
						hx::Throw ((((HX_CSTRING("Error: Cannot simulate with an invalid Polygon : ") + s->polygon->outer->toString()) + HX_CSTRING(" is invalid : ")) + res->toString()));
					}
					HX_STACK_LINE(4831)
					{
						HX_STACK_LINE(4831)
						::zpp_nape::shape::ZPP_Polygon _this = s->polygon;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(4831)
						if ((_this->zip_gaxi)){
							HX_STACK_LINE(4831)
							if (((_this->body != null()))){
								HX_STACK_LINE(4831)
								_this->zip_gaxi = false;
								HX_STACK_LINE(4831)
								_this->validate_laxi();
								HX_STACK_LINE(4831)
								{
									HX_STACK_LINE(4831)
									::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
									HX_STACK_LINE(4831)
									if ((_this1->zip_axis)){
										HX_STACK_LINE(4831)
										_this1->zip_axis = false;
										HX_STACK_LINE(4831)
										{
											HX_STACK_LINE(4831)
											_this1->axisx = ::Math_obj::sin(_this1->rot);
											HX_STACK_LINE(4831)
											_this1->axisy = ::Math_obj::cos(_this1->rot);
											HX_STACK_LINE(4831)
											{
											}
											HX_STACK_LINE(4831)
											Dynamic();
										}
									}
								}
								HX_STACK_LINE(4831)
								if ((_this->zip_gverts)){
									HX_STACK_LINE(4831)
									if (((_this->body != null()))){
										HX_STACK_LINE(4831)
										_this->zip_gverts = false;
										HX_STACK_LINE(4831)
										_this->validate_lverts();
										HX_STACK_LINE(4831)
										{
											HX_STACK_LINE(4831)
											::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
											HX_STACK_LINE(4831)
											if ((_this1->zip_axis)){
												HX_STACK_LINE(4831)
												_this1->zip_axis = false;
												HX_STACK_LINE(4831)
												{
													HX_STACK_LINE(4831)
													_this1->axisx = ::Math_obj::sin(_this1->rot);
													HX_STACK_LINE(4831)
													_this1->axisy = ::Math_obj::cos(_this1->rot);
													HX_STACK_LINE(4831)
													{
													}
													HX_STACK_LINE(4831)
													Dynamic();
												}
											}
										}
										HX_STACK_LINE(4831)
										::zpp_nape::geom::ZPP_Vec2 li = _this->lverts->next;		HX_STACK_VAR(li,"li");
										HX_STACK_LINE(4831)
										{
											HX_STACK_LINE(4831)
											::zpp_nape::geom::ZPP_Vec2 cx_ite1 = _this->gverts->next;		HX_STACK_VAR(cx_ite1,"cx_ite1");
											HX_STACK_LINE(4831)
											while(((cx_ite1 != null()))){
												HX_STACK_LINE(4831)
												::zpp_nape::geom::ZPP_Vec2 g = cx_ite1;		HX_STACK_VAR(g,"g");
												HX_STACK_LINE(4831)
												{
													HX_STACK_LINE(4831)
													::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
													HX_STACK_LINE(4831)
													li = li->next;
													HX_STACK_LINE(4831)
													{
														HX_STACK_LINE(4831)
														g->x = (_this->body->posx + (((_this->body->axisy * l->x) - (_this->body->axisx * l->y))));
														HX_STACK_LINE(4831)
														g->y = (_this->body->posy + (((l->x * _this->body->axisx) + (l->y * _this->body->axisy))));
													}
												}
												HX_STACK_LINE(4831)
												cx_ite1 = cx_ite1->next;
											}
										}
									}
								}
								HX_STACK_LINE(4831)
								::zpp_nape::util::ZNPNode_ZPP_Edge ite = _this->edges->head;		HX_STACK_VAR(ite,"ite");
								HX_STACK_LINE(4831)
								{
									HX_STACK_LINE(4831)
									::zpp_nape::geom::ZPP_Vec2 cx_ite1 = _this->gverts->next;		HX_STACK_VAR(cx_ite1,"cx_ite1");
									HX_STACK_LINE(4831)
									::zpp_nape::geom::ZPP_Vec2 u = cx_ite1;		HX_STACK_VAR(u,"u");
									HX_STACK_LINE(4831)
									cx_ite1 = cx_ite1->next;
									HX_STACK_LINE(4831)
									while(((cx_ite1 != null()))){
										HX_STACK_LINE(4831)
										::zpp_nape::geom::ZPP_Vec2 v = cx_ite1;		HX_STACK_VAR(v,"v");
										HX_STACK_LINE(4831)
										{
											HX_STACK_LINE(4831)
											::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
											HX_STACK_LINE(4831)
											ite = ite->next;
											HX_STACK_LINE(4831)
											e->gp0 = u;
											HX_STACK_LINE(4831)
											e->gp1 = v;
											HX_STACK_LINE(4831)
											{
												HX_STACK_LINE(4831)
												e->gnormx = ((_this->body->axisy * e->lnormx) - (_this->body->axisx * e->lnormy));
												HX_STACK_LINE(4831)
												e->gnormy = ((e->lnormx * _this->body->axisx) + (e->lnormy * _this->body->axisy));
											}
											HX_STACK_LINE(4831)
											e->gprojection = (((_this->body->posx * e->gnormx) + (_this->body->posy * e->gnormy)) + e->lprojection);
											HX_STACK_LINE(4831)
											if (((e->wrap_gnorm != null()))){
												HX_STACK_LINE(4831)
												e->wrap_gnorm->zpp_inner->x = e->gnormx;
												HX_STACK_LINE(4831)
												e->wrap_gnorm->zpp_inner->y = e->gnormy;
												HX_STACK_LINE(4831)
												{
												}
												HX_STACK_LINE(4831)
												{
												}
											}
											HX_STACK_LINE(4831)
											e->tp0 = ((e->gp0->y * e->gnormx) - (e->gp0->x * e->gnormy));
											HX_STACK_LINE(4831)
											e->tp1 = ((e->gp1->y * e->gnormx) - (e->gp1->x * e->gnormy));
										}
										HX_STACK_LINE(4831)
										u = v;
										HX_STACK_LINE(4831)
										cx_ite1 = cx_ite1->next;
									}
									HX_STACK_LINE(4831)
									::zpp_nape::geom::ZPP_Vec2 v = _this->gverts->next;		HX_STACK_VAR(v,"v");
									HX_STACK_LINE(4831)
									{
										HX_STACK_LINE(4831)
										::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
										HX_STACK_LINE(4831)
										ite = ite->next;
										HX_STACK_LINE(4831)
										e->gp0 = u;
										HX_STACK_LINE(4831)
										e->gp1 = v;
										HX_STACK_LINE(4831)
										{
											HX_STACK_LINE(4831)
											e->gnormx = ((_this->body->axisy * e->lnormx) - (_this->body->axisx * e->lnormy));
											HX_STACK_LINE(4831)
											e->gnormy = ((e->lnormx * _this->body->axisx) + (e->lnormy * _this->body->axisy));
										}
										HX_STACK_LINE(4831)
										e->gprojection = (((_this->body->posx * e->gnormx) + (_this->body->posy * e->gnormy)) + e->lprojection);
										HX_STACK_LINE(4831)
										if (((e->wrap_gnorm != null()))){
											HX_STACK_LINE(4831)
											e->wrap_gnorm->zpp_inner->x = e->gnormx;
											HX_STACK_LINE(4831)
											e->wrap_gnorm->zpp_inner->y = e->gnormy;
											HX_STACK_LINE(4831)
											{
											}
											HX_STACK_LINE(4831)
											{
											}
										}
										HX_STACK_LINE(4831)
										e->tp0 = ((e->gp0->y * e->gnormx) - (e->gp0->x * e->gnormy));
										HX_STACK_LINE(4831)
										e->tp1 = ((e->gp1->y * e->gnormx) - (e->gp1->x * e->gnormy));
									}
								}
							}
						}
					}
				}
				HX_STACK_LINE(4834)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(4837)
		body->sweepFrozen = true;
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,static_validation,(void))

Void ZPP_Space_obj::sleepArbiters( ){
{
		HX_STACK_PUSH("ZPP_Space::sleepArbiters","zpp_nape/space/Space.hx",4660);
		HX_STACK_THIS(this);
		HX_STACK_LINE(4661)
		{
			HX_STACK_LINE(4662)
			::zpp_nape::util::ZNPNode_ZPP_ColArbiter pre = null();		HX_STACK_VAR(pre,"pre");
			HX_STACK_LINE(4663)
			::zpp_nape::util::ZNPList_ZPP_ColArbiter arbs = this->c_arbiters_true;		HX_STACK_VAR(arbs,"arbs");
			HX_STACK_LINE(4664)
			::zpp_nape::util::ZNPNode_ZPP_ColArbiter arbite = arbs->head;		HX_STACK_VAR(arbite,"arbite");
			HX_STACK_LINE(4665)
			bool fst = (this->c_arbiters_false != null());		HX_STACK_VAR(fst,"fst");
			HX_STACK_LINE(4666)
			if (((bool(fst) && bool((arbite == null()))))){
				HX_STACK_LINE(4668)
				fst = false;
				HX_STACK_LINE(4669)
				arbite = this->c_arbiters_false->head;
				HX_STACK_LINE(4670)
				arbs = this->c_arbiters_false;
				HX_STACK_LINE(4671)
				pre = null();
			}
			HX_STACK_LINE(4674)
			while(((arbite != null()))){
				HX_STACK_LINE(4675)
				::zpp_nape::dynamics::ZPP_ColArbiter arb = arbite->elt;		HX_STACK_VAR(arb,"arb");
				HX_STACK_LINE(4676)
				{
				}
				HX_STACK_LINE(4684)
				if (((bool(arb->b1->component->sleeping) && bool(arb->b2->component->sleeping)))){
					HX_STACK_LINE(4685)
					arb->sleep_stamp = this->stamp;
					HX_STACK_LINE(4686)
					arb->sleeping = true;
					struct _Function_4_1{
						inline static ::zpp_nape::util::ZNPNode_ZPP_ColArbiter Block( ::zpp_nape::util::ZNPNode_ZPP_ColArbiter &pre,::zpp_nape::util::ZNPList_ZPP_ColArbiter &arbs){
							HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",4687);
							{
								HX_STACK_LINE(4687)
								{
								}
								HX_STACK_LINE(4687)
								::zpp_nape::util::ZNPNode_ZPP_ColArbiter old;		HX_STACK_VAR(old,"old");
								HX_STACK_LINE(4687)
								::zpp_nape::util::ZNPNode_ZPP_ColArbiter ret;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(4687)
								if (((pre == null()))){
									HX_STACK_LINE(4687)
									old = arbs->head;
									HX_STACK_LINE(4687)
									ret = old->next;
									HX_STACK_LINE(4687)
									arbs->head = ret;
									HX_STACK_LINE(4687)
									if (((arbs->head == null()))){
										HX_STACK_LINE(4687)
										arbs->pushmod = true;
									}
								}
								else{
									HX_STACK_LINE(4687)
									old = pre->next;
									HX_STACK_LINE(4687)
									ret = old->next;
									HX_STACK_LINE(4687)
									pre->next = ret;
									HX_STACK_LINE(4687)
									if (((ret == null()))){
										HX_STACK_LINE(4687)
										arbs->pushmod = true;
									}
								}
								HX_STACK_LINE(4687)
								{
								}
								HX_STACK_LINE(4687)
								{
									HX_STACK_LINE(4687)
									::zpp_nape::util::ZNPNode_ZPP_ColArbiter o = old;		HX_STACK_VAR(o,"o");
									HX_STACK_LINE(4687)
									{
									}
									HX_STACK_LINE(4687)
									o->elt = null();
									HX_STACK_LINE(4687)
									o->next = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;
									HX_STACK_LINE(4687)
									::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool = o;
								}
								HX_STACK_LINE(4687)
								arbs->modified = true;
								HX_STACK_LINE(4687)
								(arbs->length)--;
								HX_STACK_LINE(4687)
								arbs->pushmod = true;
								HX_STACK_LINE(4687)
								return ret;
							}
							return null();
						}
					};
					HX_STACK_LINE(4687)
					arbite = _Function_4_1::Block(pre,arbs);
					HX_STACK_LINE(4688)
					if (((bool(fst) && bool((arbite == null()))))){
						HX_STACK_LINE(4690)
						fst = false;
						HX_STACK_LINE(4691)
						arbite = this->c_arbiters_false->head;
						HX_STACK_LINE(4692)
						arbs = this->c_arbiters_false;
						HX_STACK_LINE(4693)
						pre = null();
					}
					HX_STACK_LINE(4696)
					continue;
				}
				HX_STACK_LINE(4698)
				pre = arbite;
				HX_STACK_LINE(4699)
				arbite = arbite->next;
				HX_STACK_LINE(4700)
				if (((bool(fst) && bool((arbite == null()))))){
					HX_STACK_LINE(4702)
					fst = false;
					HX_STACK_LINE(4703)
					arbite = this->c_arbiters_false->head;
					HX_STACK_LINE(4704)
					arbs = this->c_arbiters_false;
					HX_STACK_LINE(4705)
					pre = null();
				}
			}
		}
		HX_STACK_LINE(4710)
		{
			HX_STACK_LINE(4711)
			::zpp_nape::util::ZNPNode_ZPP_FluidArbiter pre = null();		HX_STACK_VAR(pre,"pre");
			HX_STACK_LINE(4712)
			::zpp_nape::util::ZNPList_ZPP_FluidArbiter arbs = this->f_arbiters;		HX_STACK_VAR(arbs,"arbs");
			HX_STACK_LINE(4713)
			::zpp_nape::util::ZNPNode_ZPP_FluidArbiter arbite = arbs->head;		HX_STACK_VAR(arbite,"arbite");
			HX_STACK_LINE(4714)
			bool fst = false;		HX_STACK_VAR(fst,"fst");
			HX_STACK_LINE(4715)
			if (((bool(fst) && bool((arbite == null()))))){
				HX_STACK_LINE(4717)
				fst = false;
				HX_STACK_LINE(4718)
				arbite = Dynamic()();
				HX_STACK_LINE(4719)
				arbs = null();
				HX_STACK_LINE(4720)
				pre = null();
			}
			HX_STACK_LINE(4723)
			while(((arbite != null()))){
				HX_STACK_LINE(4724)
				::zpp_nape::dynamics::ZPP_FluidArbiter arb = arbite->elt;		HX_STACK_VAR(arb,"arb");
				HX_STACK_LINE(4725)
				{
				}
				HX_STACK_LINE(4733)
				if (((bool(arb->b1->component->sleeping) && bool(arb->b2->component->sleeping)))){
					HX_STACK_LINE(4734)
					arb->sleep_stamp = this->stamp;
					HX_STACK_LINE(4735)
					arb->sleeping = true;
					struct _Function_4_1{
						inline static ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter Block( ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter &pre,::zpp_nape::util::ZNPList_ZPP_FluidArbiter &arbs){
							HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",4736);
							{
								HX_STACK_LINE(4736)
								{
								}
								HX_STACK_LINE(4736)
								::zpp_nape::util::ZNPNode_ZPP_FluidArbiter old;		HX_STACK_VAR(old,"old");
								HX_STACK_LINE(4736)
								::zpp_nape::util::ZNPNode_ZPP_FluidArbiter ret;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(4736)
								if (((pre == null()))){
									HX_STACK_LINE(4736)
									old = arbs->head;
									HX_STACK_LINE(4736)
									ret = old->next;
									HX_STACK_LINE(4736)
									arbs->head = ret;
									HX_STACK_LINE(4736)
									if (((arbs->head == null()))){
										HX_STACK_LINE(4736)
										arbs->pushmod = true;
									}
								}
								else{
									HX_STACK_LINE(4736)
									old = pre->next;
									HX_STACK_LINE(4736)
									ret = old->next;
									HX_STACK_LINE(4736)
									pre->next = ret;
									HX_STACK_LINE(4736)
									if (((ret == null()))){
										HX_STACK_LINE(4736)
										arbs->pushmod = true;
									}
								}
								HX_STACK_LINE(4736)
								{
								}
								HX_STACK_LINE(4736)
								{
									HX_STACK_LINE(4736)
									::zpp_nape::util::ZNPNode_ZPP_FluidArbiter o = old;		HX_STACK_VAR(o,"o");
									HX_STACK_LINE(4736)
									{
									}
									HX_STACK_LINE(4736)
									o->elt = null();
									HX_STACK_LINE(4736)
									o->next = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool;
									HX_STACK_LINE(4736)
									::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool = o;
								}
								HX_STACK_LINE(4736)
								arbs->modified = true;
								HX_STACK_LINE(4736)
								(arbs->length)--;
								HX_STACK_LINE(4736)
								arbs->pushmod = true;
								HX_STACK_LINE(4736)
								return ret;
							}
							return null();
						}
					};
					HX_STACK_LINE(4736)
					arbite = _Function_4_1::Block(pre,arbs);
					HX_STACK_LINE(4737)
					if (((bool(fst) && bool((arbite == null()))))){
						HX_STACK_LINE(4739)
						fst = false;
						HX_STACK_LINE(4740)
						arbite = Dynamic()();
						HX_STACK_LINE(4741)
						arbs = null();
						HX_STACK_LINE(4742)
						pre = null();
					}
					HX_STACK_LINE(4745)
					continue;
				}
				HX_STACK_LINE(4747)
				pre = arbite;
				HX_STACK_LINE(4748)
				arbite = arbite->next;
				HX_STACK_LINE(4749)
				if (((bool(fst) && bool((arbite == null()))))){
					HX_STACK_LINE(4751)
					fst = false;
					HX_STACK_LINE(4752)
					arbite = Dynamic()();
					HX_STACK_LINE(4753)
					arbs = null();
					HX_STACK_LINE(4754)
					pre = null();
				}
			}
		}
		HX_STACK_LINE(4759)
		{
			HX_STACK_LINE(4760)
			::zpp_nape::util::ZNPNode_ZPP_SensorArbiter pre = null();		HX_STACK_VAR(pre,"pre");
			HX_STACK_LINE(4761)
			::zpp_nape::util::ZNPList_ZPP_SensorArbiter arbs = this->s_arbiters;		HX_STACK_VAR(arbs,"arbs");
			HX_STACK_LINE(4762)
			::zpp_nape::util::ZNPNode_ZPP_SensorArbiter arbite = arbs->head;		HX_STACK_VAR(arbite,"arbite");
			HX_STACK_LINE(4763)
			bool fst = false;		HX_STACK_VAR(fst,"fst");
			HX_STACK_LINE(4764)
			if (((bool(fst) && bool((arbite == null()))))){
				HX_STACK_LINE(4766)
				fst = false;
				HX_STACK_LINE(4767)
				arbite = Dynamic()();
				HX_STACK_LINE(4768)
				arbs = null();
				HX_STACK_LINE(4769)
				pre = null();
			}
			HX_STACK_LINE(4772)
			while(((arbite != null()))){
				HX_STACK_LINE(4773)
				::zpp_nape::dynamics::ZPP_SensorArbiter arb = arbite->elt;		HX_STACK_VAR(arb,"arb");
				HX_STACK_LINE(4774)
				{
				}
				HX_STACK_LINE(4782)
				if (((bool(arb->b1->component->sleeping) && bool(arb->b2->component->sleeping)))){
					HX_STACK_LINE(4783)
					arb->sleep_stamp = this->stamp;
					HX_STACK_LINE(4784)
					arb->sleeping = true;
					struct _Function_4_1{
						inline static ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter Block( ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter &pre,::zpp_nape::util::ZNPList_ZPP_SensorArbiter &arbs){
							HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",4785);
							{
								HX_STACK_LINE(4785)
								{
								}
								HX_STACK_LINE(4785)
								::zpp_nape::util::ZNPNode_ZPP_SensorArbiter old;		HX_STACK_VAR(old,"old");
								HX_STACK_LINE(4785)
								::zpp_nape::util::ZNPNode_ZPP_SensorArbiter ret;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(4785)
								if (((pre == null()))){
									HX_STACK_LINE(4785)
									old = arbs->head;
									HX_STACK_LINE(4785)
									ret = old->next;
									HX_STACK_LINE(4785)
									arbs->head = ret;
									HX_STACK_LINE(4785)
									if (((arbs->head == null()))){
										HX_STACK_LINE(4785)
										arbs->pushmod = true;
									}
								}
								else{
									HX_STACK_LINE(4785)
									old = pre->next;
									HX_STACK_LINE(4785)
									ret = old->next;
									HX_STACK_LINE(4785)
									pre->next = ret;
									HX_STACK_LINE(4785)
									if (((ret == null()))){
										HX_STACK_LINE(4785)
										arbs->pushmod = true;
									}
								}
								HX_STACK_LINE(4785)
								{
								}
								HX_STACK_LINE(4785)
								{
									HX_STACK_LINE(4785)
									::zpp_nape::util::ZNPNode_ZPP_SensorArbiter o = old;		HX_STACK_VAR(o,"o");
									HX_STACK_LINE(4785)
									{
									}
									HX_STACK_LINE(4785)
									o->elt = null();
									HX_STACK_LINE(4785)
									o->next = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool;
									HX_STACK_LINE(4785)
									::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool = o;
								}
								HX_STACK_LINE(4785)
								arbs->modified = true;
								HX_STACK_LINE(4785)
								(arbs->length)--;
								HX_STACK_LINE(4785)
								arbs->pushmod = true;
								HX_STACK_LINE(4785)
								return ret;
							}
							return null();
						}
					};
					HX_STACK_LINE(4785)
					arbite = _Function_4_1::Block(pre,arbs);
					HX_STACK_LINE(4786)
					if (((bool(fst) && bool((arbite == null()))))){
						HX_STACK_LINE(4788)
						fst = false;
						HX_STACK_LINE(4789)
						arbite = Dynamic()();
						HX_STACK_LINE(4790)
						arbs = null();
						HX_STACK_LINE(4791)
						pre = null();
					}
					HX_STACK_LINE(4794)
					continue;
				}
				HX_STACK_LINE(4796)
				pre = arbite;
				HX_STACK_LINE(4797)
				arbite = arbite->next;
				HX_STACK_LINE(4798)
				if (((bool(fst) && bool((arbite == null()))))){
					HX_STACK_LINE(4800)
					fst = false;
					HX_STACK_LINE(4801)
					arbite = Dynamic()();
					HX_STACK_LINE(4802)
					arbs = null();
					HX_STACK_LINE(4803)
					pre = null();
				}
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Space_obj,sleepArbiters,(void))

Void ZPP_Space_obj::doForests( Float dt){
{
		HX_STACK_PUSH("ZPP_Space::doForests","zpp_nape/space/Space.hx",4370);
		HX_STACK_THIS(this);
		HX_STACK_ARG(dt,"dt");
		HX_STACK_LINE(4371)
		{
			HX_STACK_LINE(4372)
			::zpp_nape::util::ZNPNode_ZPP_ColArbiter cx_ite = this->c_arbiters_false->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(4373)
			while(((cx_ite != null()))){
				HX_STACK_LINE(4374)
				::zpp_nape::dynamics::ZPP_ColArbiter arb = cx_ite->elt;		HX_STACK_VAR(arb,"arb");
				HX_STACK_LINE(4375)
				if (((bool((bool(!(arb->cleared)) && bool((arb->up_stamp == this->stamp)))) && bool((((int(arb->immState) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT))) != (int)0))))){
					HX_STACK_LINE(4376)
					if (((bool((arb->b1->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC)) && bool((arb->b2->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC))))){
						struct _Function_5_1{
							inline static ::zpp_nape::space::ZPP_Component Block( ::zpp_nape::dynamics::ZPP_ColArbiter &arb){
								HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",4380);
								{
									HX_STACK_LINE(4381)
									::zpp_nape::space::ZPP_Component obj = arb->b1->component;		HX_STACK_VAR(obj,"obj");
									HX_STACK_LINE(4382)
									::zpp_nape::space::ZPP_Component stack = null();		HX_STACK_VAR(stack,"stack");
									HX_STACK_LINE(4383)
									while(((obj != obj->parent))){
										HX_STACK_LINE(4384)
										::zpp_nape::space::ZPP_Component nxt = obj->parent;		HX_STACK_VAR(nxt,"nxt");
										HX_STACK_LINE(4385)
										obj->parent = stack;
										HX_STACK_LINE(4386)
										stack = obj;
										HX_STACK_LINE(4387)
										obj = nxt;
									}
									HX_STACK_LINE(4389)
									while(((stack != null()))){
										HX_STACK_LINE(4390)
										::zpp_nape::space::ZPP_Component nxt = stack->parent;		HX_STACK_VAR(nxt,"nxt");
										HX_STACK_LINE(4391)
										stack->parent = obj;
										HX_STACK_LINE(4392)
										stack = nxt;
									}
									HX_STACK_LINE(4394)
									return obj;
								}
								return null();
							}
						};
						HX_STACK_LINE(4378)
						::zpp_nape::space::ZPP_Component xr = (  (((arb->b1->component == arb->b1->component->parent))) ? ::zpp_nape::space::ZPP_Component(arb->b1->component) : ::zpp_nape::space::ZPP_Component(_Function_5_1::Block(arb)) );		HX_STACK_VAR(xr,"xr");
						struct _Function_5_2{
							inline static ::zpp_nape::space::ZPP_Component Block( ::zpp_nape::dynamics::ZPP_ColArbiter &arb){
								HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",4399);
								{
									HX_STACK_LINE(4400)
									::zpp_nape::space::ZPP_Component obj = arb->b2->component;		HX_STACK_VAR(obj,"obj");
									HX_STACK_LINE(4401)
									::zpp_nape::space::ZPP_Component stack = null();		HX_STACK_VAR(stack,"stack");
									HX_STACK_LINE(4402)
									while(((obj != obj->parent))){
										HX_STACK_LINE(4403)
										::zpp_nape::space::ZPP_Component nxt = obj->parent;		HX_STACK_VAR(nxt,"nxt");
										HX_STACK_LINE(4404)
										obj->parent = stack;
										HX_STACK_LINE(4405)
										stack = obj;
										HX_STACK_LINE(4406)
										obj = nxt;
									}
									HX_STACK_LINE(4408)
									while(((stack != null()))){
										HX_STACK_LINE(4409)
										::zpp_nape::space::ZPP_Component nxt = stack->parent;		HX_STACK_VAR(nxt,"nxt");
										HX_STACK_LINE(4410)
										stack->parent = obj;
										HX_STACK_LINE(4411)
										stack = nxt;
									}
									HX_STACK_LINE(4413)
									return obj;
								}
								return null();
							}
						};
						HX_STACK_LINE(4397)
						::zpp_nape::space::ZPP_Component yr = (  (((arb->b2->component == arb->b2->component->parent))) ? ::zpp_nape::space::ZPP_Component(arb->b2->component) : ::zpp_nape::space::ZPP_Component(_Function_5_2::Block(arb)) );		HX_STACK_VAR(yr,"yr");
						HX_STACK_LINE(4416)
						if (((xr != yr))){
							HX_STACK_LINE(4416)
							if (((xr->rank < yr->rank))){
								HX_STACK_LINE(4417)
								xr->parent = yr;
							}
							else{
								HX_STACK_LINE(4418)
								if (((xr->rank > yr->rank))){
									HX_STACK_LINE(4418)
									yr->parent = xr;
								}
								else{
									HX_STACK_LINE(4420)
									yr->parent = xr;
									HX_STACK_LINE(4421)
									(xr->rank)++;
								}
							}
						}
					}
				}
				HX_STACK_LINE(4427)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(4430)
		{
			HX_STACK_LINE(4431)
			::zpp_nape::util::ZNPNode_ZPP_FluidArbiter cx_ite = this->f_arbiters->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(4432)
			while(((cx_ite != null()))){
				HX_STACK_LINE(4433)
				::zpp_nape::dynamics::ZPP_FluidArbiter arb = cx_ite->elt;		HX_STACK_VAR(arb,"arb");
				HX_STACK_LINE(4434)
				if (((bool((bool(!(arb->cleared)) && bool((arb->up_stamp == this->stamp)))) && bool((((int(arb->immState) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT))) != (int)0))))){
					HX_STACK_LINE(4435)
					if (((bool((arb->b1->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC)) && bool((arb->b2->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC))))){
						struct _Function_5_1{
							inline static ::zpp_nape::space::ZPP_Component Block( ::zpp_nape::dynamics::ZPP_FluidArbiter &arb){
								HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",4439);
								{
									HX_STACK_LINE(4440)
									::zpp_nape::space::ZPP_Component obj = arb->b1->component;		HX_STACK_VAR(obj,"obj");
									HX_STACK_LINE(4441)
									::zpp_nape::space::ZPP_Component stack = null();		HX_STACK_VAR(stack,"stack");
									HX_STACK_LINE(4442)
									while(((obj != obj->parent))){
										HX_STACK_LINE(4443)
										::zpp_nape::space::ZPP_Component nxt = obj->parent;		HX_STACK_VAR(nxt,"nxt");
										HX_STACK_LINE(4444)
										obj->parent = stack;
										HX_STACK_LINE(4445)
										stack = obj;
										HX_STACK_LINE(4446)
										obj = nxt;
									}
									HX_STACK_LINE(4448)
									while(((stack != null()))){
										HX_STACK_LINE(4449)
										::zpp_nape::space::ZPP_Component nxt = stack->parent;		HX_STACK_VAR(nxt,"nxt");
										HX_STACK_LINE(4450)
										stack->parent = obj;
										HX_STACK_LINE(4451)
										stack = nxt;
									}
									HX_STACK_LINE(4453)
									return obj;
								}
								return null();
							}
						};
						HX_STACK_LINE(4437)
						::zpp_nape::space::ZPP_Component xr = (  (((arb->b1->component == arb->b1->component->parent))) ? ::zpp_nape::space::ZPP_Component(arb->b1->component) : ::zpp_nape::space::ZPP_Component(_Function_5_1::Block(arb)) );		HX_STACK_VAR(xr,"xr");
						struct _Function_5_2{
							inline static ::zpp_nape::space::ZPP_Component Block( ::zpp_nape::dynamics::ZPP_FluidArbiter &arb){
								HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",4458);
								{
									HX_STACK_LINE(4459)
									::zpp_nape::space::ZPP_Component obj = arb->b2->component;		HX_STACK_VAR(obj,"obj");
									HX_STACK_LINE(4460)
									::zpp_nape::space::ZPP_Component stack = null();		HX_STACK_VAR(stack,"stack");
									HX_STACK_LINE(4461)
									while(((obj != obj->parent))){
										HX_STACK_LINE(4462)
										::zpp_nape::space::ZPP_Component nxt = obj->parent;		HX_STACK_VAR(nxt,"nxt");
										HX_STACK_LINE(4463)
										obj->parent = stack;
										HX_STACK_LINE(4464)
										stack = obj;
										HX_STACK_LINE(4465)
										obj = nxt;
									}
									HX_STACK_LINE(4467)
									while(((stack != null()))){
										HX_STACK_LINE(4468)
										::zpp_nape::space::ZPP_Component nxt = stack->parent;		HX_STACK_VAR(nxt,"nxt");
										HX_STACK_LINE(4469)
										stack->parent = obj;
										HX_STACK_LINE(4470)
										stack = nxt;
									}
									HX_STACK_LINE(4472)
									return obj;
								}
								return null();
							}
						};
						HX_STACK_LINE(4456)
						::zpp_nape::space::ZPP_Component yr = (  (((arb->b2->component == arb->b2->component->parent))) ? ::zpp_nape::space::ZPP_Component(arb->b2->component) : ::zpp_nape::space::ZPP_Component(_Function_5_2::Block(arb)) );		HX_STACK_VAR(yr,"yr");
						HX_STACK_LINE(4475)
						if (((xr != yr))){
							HX_STACK_LINE(4475)
							if (((xr->rank < yr->rank))){
								HX_STACK_LINE(4476)
								xr->parent = yr;
							}
							else{
								HX_STACK_LINE(4477)
								if (((xr->rank > yr->rank))){
									HX_STACK_LINE(4477)
									yr->parent = xr;
								}
								else{
									HX_STACK_LINE(4479)
									yr->parent = xr;
									HX_STACK_LINE(4480)
									(xr->rank)++;
								}
							}
						}
					}
				}
				HX_STACK_LINE(4486)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(4489)
		{
			HX_STACK_LINE(4490)
			::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = this->live_constraints->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(4491)
			while(((cx_ite != null()))){
				HX_STACK_LINE(4492)
				::zpp_nape::constraint::ZPP_Constraint con = cx_ite->elt;		HX_STACK_VAR(con,"con");
				HX_STACK_LINE(4493)
				con->forest();
				HX_STACK_LINE(4494)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(4497)
		while((!(((this->live->head == null()))))){
			struct _Function_2_1{
				inline static ::zpp_nape::phys::ZPP_Body Block( ::zpp_nape::space::ZPP_Space_obj *__this){
					HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",4498);
					{
						HX_STACK_LINE(4498)
						::zpp_nape::util::ZNPList_ZPP_Body _this = __this->live;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(4498)
						{
						}
						HX_STACK_LINE(4498)
						::zpp_nape::phys::ZPP_Body ret = _this->head->elt;		HX_STACK_VAR(ret,"ret");
						HX_STACK_LINE(4498)
						_this->pop();
						HX_STACK_LINE(4498)
						return ret;
					}
					return null();
				}
			};
			HX_STACK_LINE(4498)
			::zpp_nape::phys::ZPP_Body o = _Function_2_1::Block(this);		HX_STACK_VAR(o,"o");
			HX_STACK_LINE(4499)
			::zpp_nape::space::ZPP_Component oc = o->component;		HX_STACK_VAR(oc,"oc");
			struct _Function_2_2{
				inline static ::zpp_nape::space::ZPP_Component Block( ::zpp_nape::space::ZPP_Component &oc){
					HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",4502);
					{
						HX_STACK_LINE(4503)
						::zpp_nape::space::ZPP_Component obj = oc;		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(4504)
						::zpp_nape::space::ZPP_Component stack = null();		HX_STACK_VAR(stack,"stack");
						HX_STACK_LINE(4505)
						while(((obj != obj->parent))){
							HX_STACK_LINE(4506)
							::zpp_nape::space::ZPP_Component nxt = obj->parent;		HX_STACK_VAR(nxt,"nxt");
							HX_STACK_LINE(4507)
							obj->parent = stack;
							HX_STACK_LINE(4508)
							stack = obj;
							HX_STACK_LINE(4509)
							obj = nxt;
						}
						HX_STACK_LINE(4511)
						while(((stack != null()))){
							HX_STACK_LINE(4512)
							::zpp_nape::space::ZPP_Component nxt = stack->parent;		HX_STACK_VAR(nxt,"nxt");
							HX_STACK_LINE(4513)
							stack->parent = obj;
							HX_STACK_LINE(4514)
							stack = nxt;
						}
						HX_STACK_LINE(4516)
						return obj;
					}
					return null();
				}
			};
			HX_STACK_LINE(4500)
			::zpp_nape::space::ZPP_Component root = (  (((oc == oc->parent))) ? ::zpp_nape::space::ZPP_Component(oc) : ::zpp_nape::space::ZPP_Component(_Function_2_2::Block(oc)) );		HX_STACK_VAR(root,"root");
			HX_STACK_LINE(4519)
			if (((root->island == null()))){
				HX_STACK_LINE(4520)
				{
					HX_STACK_LINE(4521)
					if (((::zpp_nape::space::ZPP_Island_obj::zpp_pool == null()))){
						HX_STACK_LINE(4521)
						root->island = ::zpp_nape::space::ZPP_Island_obj::__new();
					}
					else{
						HX_STACK_LINE(4528)
						root->island = ::zpp_nape::space::ZPP_Island_obj::zpp_pool;
						HX_STACK_LINE(4529)
						::zpp_nape::space::ZPP_Island_obj::zpp_pool = root->island->next;
						HX_STACK_LINE(4530)
						root->island->next = null();
					}
					HX_STACK_LINE(4535)
					root->island->waket = (int)0;
				}
				HX_STACK_LINE(4537)
				{
					HX_STACK_LINE(4537)
					::zpp_nape::space::ZPP_Island _this = this->islands;		HX_STACK_VAR(_this,"_this");
					::zpp_nape::space::ZPP_Island o1 = root->island;		HX_STACK_VAR(o1,"o1");
					HX_STACK_LINE(4537)
					{
					}
					struct _Function_4_1{
						inline static ::zpp_nape::space::ZPP_Island Block( ::zpp_nape::space::ZPP_Island &o1){
							HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",4537);
							{
								HX_STACK_LINE(4537)
								o1->_inuse = true;
								HX_STACK_LINE(4537)
								return o1;
							}
							return null();
						}
					};
					HX_STACK_LINE(4537)
					::zpp_nape::space::ZPP_Island temp = _Function_4_1::Block(o1);		HX_STACK_VAR(temp,"temp");
					HX_STACK_LINE(4537)
					temp->next = _this->next;
					HX_STACK_LINE(4537)
					_this->next = temp;
					HX_STACK_LINE(4537)
					_this->modified = true;
					HX_STACK_LINE(4537)
					(_this->length)++;
					HX_STACK_LINE(4537)
					o1;
				}
				HX_STACK_LINE(4538)
				root->island->sleep = true;
			}
			HX_STACK_LINE(4540)
			oc->island = root->island;
			HX_STACK_LINE(4541)
			{
				HX_STACK_LINE(4541)
				::zpp_nape::util::ZNPList_ZPP_Component _this = oc->island->comps;		HX_STACK_VAR(_this,"_this");
				HX_STACK_LINE(4541)
				{
				}
				struct _Function_3_1{
					inline static ::zpp_nape::util::ZNPNode_ZPP_Component Block( ::zpp_nape::space::ZPP_Component &oc){
						HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",4541);
						{
							HX_STACK_LINE(4541)
							::zpp_nape::util::ZNPNode_ZPP_Component ret;		HX_STACK_VAR(ret,"ret");
							HX_STACK_LINE(4541)
							{
								HX_STACK_LINE(4541)
								if (((::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool == null()))){
									HX_STACK_LINE(4541)
									ret = ::zpp_nape::util::ZNPNode_ZPP_Component_obj::__new();
								}
								else{
									HX_STACK_LINE(4541)
									ret = ::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool;
									HX_STACK_LINE(4541)
									::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool = ret->next;
									HX_STACK_LINE(4541)
									ret->next = null();
								}
								HX_STACK_LINE(4541)
								Dynamic();
							}
							HX_STACK_LINE(4541)
							ret->elt = oc;
							HX_STACK_LINE(4541)
							return ret;
						}
						return null();
					}
				};
				HX_STACK_LINE(4541)
				::zpp_nape::util::ZNPNode_ZPP_Component temp = _Function_3_1::Block(oc);		HX_STACK_VAR(temp,"temp");
				HX_STACK_LINE(4541)
				temp->next = _this->head;
				HX_STACK_LINE(4541)
				_this->head = temp;
				HX_STACK_LINE(4541)
				_this->modified = true;
				HX_STACK_LINE(4541)
				(_this->length)++;
				HX_STACK_LINE(4541)
				oc;
			}
			HX_STACK_LINE(4542)
			bool rest = o->atRest(dt);		HX_STACK_VAR(rest,"rest");
			HX_STACK_LINE(4543)
			oc->island->sleep = (bool(oc->island->sleep) && bool(rest));
			HX_STACK_LINE(4544)
			if (((oc->waket > oc->island->waket))){
				HX_STACK_LINE(4544)
				oc->island->waket = oc->waket;
			}
		}
		HX_STACK_LINE(4546)
		while((!(((this->live_constraints->head == null()))))){
			struct _Function_2_1{
				inline static ::zpp_nape::constraint::ZPP_Constraint Block( ::zpp_nape::space::ZPP_Space_obj *__this){
					HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",4547);
					{
						HX_STACK_LINE(4547)
						::zpp_nape::util::ZNPList_ZPP_Constraint _this = __this->live_constraints;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(4547)
						{
						}
						HX_STACK_LINE(4547)
						::zpp_nape::constraint::ZPP_Constraint ret = _this->head->elt;		HX_STACK_VAR(ret,"ret");
						HX_STACK_LINE(4547)
						_this->pop();
						HX_STACK_LINE(4547)
						return ret;
					}
					return null();
				}
			};
			HX_STACK_LINE(4547)
			::zpp_nape::constraint::ZPP_Constraint o = _Function_2_1::Block(this);		HX_STACK_VAR(o,"o");
			HX_STACK_LINE(4548)
			::zpp_nape::space::ZPP_Component oc = o->component;		HX_STACK_VAR(oc,"oc");
			struct _Function_2_2{
				inline static ::zpp_nape::space::ZPP_Component Block( ::zpp_nape::space::ZPP_Component &oc){
					HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",4551);
					{
						HX_STACK_LINE(4552)
						::zpp_nape::space::ZPP_Component obj = oc;		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(4553)
						::zpp_nape::space::ZPP_Component stack = null();		HX_STACK_VAR(stack,"stack");
						HX_STACK_LINE(4554)
						while(((obj != obj->parent))){
							HX_STACK_LINE(4555)
							::zpp_nape::space::ZPP_Component nxt = obj->parent;		HX_STACK_VAR(nxt,"nxt");
							HX_STACK_LINE(4556)
							obj->parent = stack;
							HX_STACK_LINE(4557)
							stack = obj;
							HX_STACK_LINE(4558)
							obj = nxt;
						}
						HX_STACK_LINE(4560)
						while(((stack != null()))){
							HX_STACK_LINE(4561)
							::zpp_nape::space::ZPP_Component nxt = stack->parent;		HX_STACK_VAR(nxt,"nxt");
							HX_STACK_LINE(4562)
							stack->parent = obj;
							HX_STACK_LINE(4563)
							stack = nxt;
						}
						HX_STACK_LINE(4565)
						return obj;
					}
					return null();
				}
			};
			HX_STACK_LINE(4549)
			::zpp_nape::space::ZPP_Component root = (  (((oc == oc->parent))) ? ::zpp_nape::space::ZPP_Component(oc) : ::zpp_nape::space::ZPP_Component(_Function_2_2::Block(oc)) );		HX_STACK_VAR(root,"root");
			HX_STACK_LINE(4568)
			{
			}
			HX_STACK_LINE(4576)
			oc->island = root->island;
			HX_STACK_LINE(4577)
			{
				HX_STACK_LINE(4577)
				::zpp_nape::util::ZNPList_ZPP_Component _this = oc->island->comps;		HX_STACK_VAR(_this,"_this");
				HX_STACK_LINE(4577)
				{
				}
				struct _Function_3_1{
					inline static ::zpp_nape::util::ZNPNode_ZPP_Component Block( ::zpp_nape::space::ZPP_Component &oc){
						HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",4577);
						{
							HX_STACK_LINE(4577)
							::zpp_nape::util::ZNPNode_ZPP_Component ret;		HX_STACK_VAR(ret,"ret");
							HX_STACK_LINE(4577)
							{
								HX_STACK_LINE(4577)
								if (((::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool == null()))){
									HX_STACK_LINE(4577)
									ret = ::zpp_nape::util::ZNPNode_ZPP_Component_obj::__new();
								}
								else{
									HX_STACK_LINE(4577)
									ret = ::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool;
									HX_STACK_LINE(4577)
									::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool = ret->next;
									HX_STACK_LINE(4577)
									ret->next = null();
								}
								HX_STACK_LINE(4577)
								Dynamic();
							}
							HX_STACK_LINE(4577)
							ret->elt = oc;
							HX_STACK_LINE(4577)
							return ret;
						}
						return null();
					}
				};
				HX_STACK_LINE(4577)
				::zpp_nape::util::ZNPNode_ZPP_Component temp = _Function_3_1::Block(oc);		HX_STACK_VAR(temp,"temp");
				HX_STACK_LINE(4577)
				temp->next = _this->head;
				HX_STACK_LINE(4577)
				_this->head = temp;
				HX_STACK_LINE(4577)
				_this->modified = true;
				HX_STACK_LINE(4577)
				(_this->length)++;
				HX_STACK_LINE(4577)
				oc;
			}
			HX_STACK_LINE(4578)
			if (((oc->waket > oc->island->waket))){
				HX_STACK_LINE(4578)
				oc->island->waket = oc->waket;
			}
		}
		HX_STACK_LINE(4580)
		while((!(((this->islands->next == null()))))){
			struct _Function_2_1{
				inline static ::zpp_nape::space::ZPP_Island Block( ::zpp_nape::space::ZPP_Space_obj *__this){
					HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",4581);
					{
						HX_STACK_LINE(4581)
						::zpp_nape::space::ZPP_Island _this = __this->islands;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(4581)
						{
						}
						HX_STACK_LINE(4581)
						::zpp_nape::space::ZPP_Island ret = _this->next;		HX_STACK_VAR(ret,"ret");
						HX_STACK_LINE(4581)
						_this->pop();
						HX_STACK_LINE(4581)
						return ret;
					}
					return null();
				}
			};
			HX_STACK_LINE(4581)
			::zpp_nape::space::ZPP_Island i = _Function_2_1::Block(this);		HX_STACK_VAR(i,"i");
			HX_STACK_LINE(4582)
			if ((i->sleep)){
				HX_STACK_LINE(4584)
				::zpp_nape::util::ZNPNode_ZPP_Component cx_ite = i->comps->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(4585)
				while(((cx_ite != null()))){
					HX_STACK_LINE(4586)
					::zpp_nape::space::ZPP_Component c = cx_ite->elt;		HX_STACK_VAR(c,"c");
					HX_STACK_LINE(4587)
					if ((c->isBody)){
						HX_STACK_LINE(4589)
						::zpp_nape::phys::ZPP_Body b = c->body;		HX_STACK_VAR(b,"b");
						HX_STACK_LINE(4590)
						{
							HX_STACK_LINE(4591)
							b->velx = (int)0;
							HX_STACK_LINE(4592)
							b->vely = (int)0;
							HX_STACK_LINE(4593)
							{
							}
							HX_STACK_LINE(4601)
							{
							}
						}
						HX_STACK_LINE(4610)
						b->angvel = (int)0;
						HX_STACK_LINE(4611)
						c->sleeping = true;
						HX_STACK_LINE(4612)
						{
							HX_STACK_LINE(4613)
							::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite1 = b->shapes->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
							HX_STACK_LINE(4614)
							while(((cx_ite1 != null()))){
								HX_STACK_LINE(4615)
								::zpp_nape::shape::ZPP_Shape shape = cx_ite1->elt;		HX_STACK_VAR(shape,"shape");
								HX_STACK_LINE(4616)
								this->bphase->sync(shape);
								HX_STACK_LINE(4617)
								cx_ite1 = cx_ite1->next;
							}
						}
						HX_STACK_LINE(4620)
						this->bodyCbSleep(b);
					}
					else{
						HX_STACK_LINE(4623)
						::zpp_nape::constraint::ZPP_Constraint con = c->constraint;		HX_STACK_VAR(con,"con");
						HX_STACK_LINE(4624)
						this->constraintCbSleep(con);
						HX_STACK_LINE(4625)
						c->sleeping = true;
					}
					HX_STACK_LINE(4628)
					cx_ite = cx_ite->next;
				}
			}
			else{
				HX_STACK_LINE(4633)
				while((!(((i->comps->head == null()))))){
					struct _Function_4_1{
						inline static ::zpp_nape::space::ZPP_Component Block( ::zpp_nape::space::ZPP_Island &i){
							HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",4634);
							{
								HX_STACK_LINE(4634)
								::zpp_nape::util::ZNPList_ZPP_Component _this = i->comps;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(4634)
								{
								}
								HX_STACK_LINE(4634)
								::zpp_nape::space::ZPP_Component ret = _this->head->elt;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(4634)
								_this->pop();
								HX_STACK_LINE(4634)
								return ret;
							}
							return null();
						}
					};
					HX_STACK_LINE(4634)
					::zpp_nape::space::ZPP_Component c = _Function_4_1::Block(i);		HX_STACK_VAR(c,"c");
					HX_STACK_LINE(4635)
					c->waket = i->waket;
					HX_STACK_LINE(4636)
					if ((c->isBody)){
						HX_STACK_LINE(4636)
						::zpp_nape::util::ZNPList_ZPP_Body _this = this->live;		HX_STACK_VAR(_this,"_this");
						::zpp_nape::phys::ZPP_Body o = c->body;		HX_STACK_VAR(o,"o");
						HX_STACK_LINE(4636)
						{
						}
						struct _Function_5_1{
							inline static ::zpp_nape::util::ZNPNode_ZPP_Body Block( ::zpp_nape::phys::ZPP_Body &o){
								HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",4636);
								{
									HX_STACK_LINE(4636)
									::zpp_nape::util::ZNPNode_ZPP_Body ret;		HX_STACK_VAR(ret,"ret");
									HX_STACK_LINE(4636)
									{
										HX_STACK_LINE(4636)
										if (((::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool == null()))){
											HX_STACK_LINE(4636)
											ret = ::zpp_nape::util::ZNPNode_ZPP_Body_obj::__new();
										}
										else{
											HX_STACK_LINE(4636)
											ret = ::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool;
											HX_STACK_LINE(4636)
											::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool = ret->next;
											HX_STACK_LINE(4636)
											ret->next = null();
										}
										HX_STACK_LINE(4636)
										Dynamic();
									}
									HX_STACK_LINE(4636)
									ret->elt = o;
									HX_STACK_LINE(4636)
									return ret;
								}
								return null();
							}
						};
						HX_STACK_LINE(4636)
						::zpp_nape::util::ZNPNode_ZPP_Body temp = _Function_5_1::Block(o);		HX_STACK_VAR(temp,"temp");
						HX_STACK_LINE(4636)
						temp->next = _this->head;
						HX_STACK_LINE(4636)
						_this->head = temp;
						HX_STACK_LINE(4636)
						_this->modified = true;
						HX_STACK_LINE(4636)
						(_this->length)++;
						HX_STACK_LINE(4636)
						o;
					}
					else{
						HX_STACK_LINE(4637)
						::zpp_nape::util::ZNPList_ZPP_Constraint _this = this->live_constraints;		HX_STACK_VAR(_this,"_this");
						::zpp_nape::constraint::ZPP_Constraint o = c->constraint;		HX_STACK_VAR(o,"o");
						HX_STACK_LINE(4637)
						{
						}
						struct _Function_5_1{
							inline static ::zpp_nape::util::ZNPNode_ZPP_Constraint Block( ::zpp_nape::constraint::ZPP_Constraint &o){
								HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",4637);
								{
									HX_STACK_LINE(4637)
									::zpp_nape::util::ZNPNode_ZPP_Constraint ret;		HX_STACK_VAR(ret,"ret");
									HX_STACK_LINE(4637)
									{
										HX_STACK_LINE(4637)
										if (((::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool == null()))){
											HX_STACK_LINE(4637)
											ret = ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::__new();
										}
										else{
											HX_STACK_LINE(4637)
											ret = ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool;
											HX_STACK_LINE(4637)
											::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool = ret->next;
											HX_STACK_LINE(4637)
											ret->next = null();
										}
										HX_STACK_LINE(4637)
										Dynamic();
									}
									HX_STACK_LINE(4637)
									ret->elt = o;
									HX_STACK_LINE(4637)
									return ret;
								}
								return null();
							}
						};
						HX_STACK_LINE(4637)
						::zpp_nape::util::ZNPNode_ZPP_Constraint temp = _Function_5_1::Block(o);		HX_STACK_VAR(temp,"temp");
						HX_STACK_LINE(4637)
						temp->next = _this->head;
						HX_STACK_LINE(4637)
						_this->head = temp;
						HX_STACK_LINE(4637)
						_this->modified = true;
						HX_STACK_LINE(4637)
						(_this->length)++;
						HX_STACK_LINE(4637)
						o;
					}
					HX_STACK_LINE(4638)
					{
						HX_STACK_LINE(4638)
						c->sleeping = false;
						HX_STACK_LINE(4638)
						c->island = null();
						HX_STACK_LINE(4638)
						c->parent = c;
						HX_STACK_LINE(4638)
						c->rank = (int)0;
					}
				}
				HX_STACK_LINE(4640)
				{
					HX_STACK_LINE(4641)
					::zpp_nape::space::ZPP_Island o = i;		HX_STACK_VAR(o,"o");
					HX_STACK_LINE(4642)
					{
					}
					HX_STACK_LINE(4651)
					o->next = ::zpp_nape::space::ZPP_Island_obj::zpp_pool;
					HX_STACK_LINE(4652)
					::zpp_nape::space::ZPP_Island_obj::zpp_pool = o;
				}
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,doForests,(void))

bool ZPP_Space_obj::wake_constraint( ::zpp_nape::constraint::ZPP_Constraint con,hx::Null< bool >  __o_fst){
bool fst = __o_fst.Default(false);
	HX_STACK_PUSH("ZPP_Space::wake_constraint","zpp_nape/space/Space.hx",4327);
	HX_STACK_THIS(this);
	HX_STACK_ARG(con,"con");
	HX_STACK_ARG(fst,"fst");
{
		HX_STACK_LINE(4328)
		{
		}
		HX_STACK_LINE(4336)
		if ((con->active)){
			HX_STACK_LINE(4337)
			{
			}
			HX_STACK_LINE(4345)
			con->component->waket = (this->stamp + ((  ((this->midstep)) ? int((int)0) : int((int)1) )));
			HX_STACK_LINE(4346)
			if ((con->component->sleeping)){
				HX_STACK_LINE(4347)
				if (((con->component->island == null()))){
					HX_STACK_LINE(4348)
					con->component->sleeping = false;
					HX_STACK_LINE(4349)
					{
						HX_STACK_LINE(4349)
						::zpp_nape::util::ZNPList_ZPP_Constraint _this = this->live_constraints;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(4349)
						{
						}
						struct _Function_5_1{
							inline static ::zpp_nape::util::ZNPNode_ZPP_Constraint Block( ::zpp_nape::constraint::ZPP_Constraint &con){
								HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",4349);
								{
									HX_STACK_LINE(4349)
									::zpp_nape::util::ZNPNode_ZPP_Constraint ret;		HX_STACK_VAR(ret,"ret");
									HX_STACK_LINE(4349)
									{
										HX_STACK_LINE(4349)
										if (((::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool == null()))){
											HX_STACK_LINE(4349)
											ret = ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::__new();
										}
										else{
											HX_STACK_LINE(4349)
											ret = ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool;
											HX_STACK_LINE(4349)
											::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool = ret->next;
											HX_STACK_LINE(4349)
											ret->next = null();
										}
										HX_STACK_LINE(4349)
										Dynamic();
									}
									HX_STACK_LINE(4349)
									ret->elt = con;
									HX_STACK_LINE(4349)
									return ret;
								}
								return null();
							}
						};
						HX_STACK_LINE(4349)
						::zpp_nape::util::ZNPNode_ZPP_Constraint temp = _Function_5_1::Block(con);		HX_STACK_VAR(temp,"temp");
						HX_STACK_LINE(4349)
						temp->next = _this->head;
						HX_STACK_LINE(4349)
						_this->head = temp;
						HX_STACK_LINE(4349)
						_this->modified = true;
						HX_STACK_LINE(4349)
						(_this->length)++;
						HX_STACK_LINE(4349)
						con;
					}
					HX_STACK_LINE(4350)
					con->wake_connected();
					HX_STACK_LINE(4351)
					if ((!(fst))){
						HX_STACK_LINE(4351)
						this->constraintCbWake(con);
					}
				}
				else{
					HX_STACK_LINE(4353)
					this->wakeIsland(con->component->island);
				}
				HX_STACK_LINE(4356)
				{
				}
				HX_STACK_LINE(4364)
				return true;
			}
			else{
				HX_STACK_LINE(4366)
				return false;
			}
		}
		else{
			HX_STACK_LINE(4368)
			return false;
		}
		HX_STACK_LINE(4336)
		return false;
	}
}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,wake_constraint,return )

Void ZPP_Space_obj::really_wake( ::zpp_nape::phys::ZPP_Body o,hx::Null< bool >  __o_fst){
bool fst = __o_fst.Default(false);
	HX_STACK_PUSH("ZPP_Space::really_wake","zpp_nape/space/Space.hx",4220);
	HX_STACK_THIS(this);
	HX_STACK_ARG(o,"o");
	HX_STACK_ARG(fst,"fst");
{
		HX_STACK_LINE(4221)
		if (((o->component->island == null()))){
			HX_STACK_LINE(4222)
			o->component->sleeping = false;
			HX_STACK_LINE(4223)
			if (((bool((o->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC)) || bool((o->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_STATIC))))){
				HX_STACK_LINE(4223)
				::zpp_nape::util::ZNPList_ZPP_Body _this = this->staticsleep;		HX_STACK_VAR(_this,"_this");
				HX_STACK_LINE(4223)
				{
				}
				struct _Function_3_1{
					inline static ::zpp_nape::util::ZNPNode_ZPP_Body Block( ::zpp_nape::phys::ZPP_Body &o){
						HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",4223);
						{
							HX_STACK_LINE(4223)
							::zpp_nape::util::ZNPNode_ZPP_Body ret;		HX_STACK_VAR(ret,"ret");
							HX_STACK_LINE(4223)
							{
								HX_STACK_LINE(4223)
								if (((::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool == null()))){
									HX_STACK_LINE(4223)
									ret = ::zpp_nape::util::ZNPNode_ZPP_Body_obj::__new();
								}
								else{
									HX_STACK_LINE(4223)
									ret = ::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool;
									HX_STACK_LINE(4223)
									::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool = ret->next;
									HX_STACK_LINE(4223)
									ret->next = null();
								}
								HX_STACK_LINE(4223)
								Dynamic();
							}
							HX_STACK_LINE(4223)
							ret->elt = o;
							HX_STACK_LINE(4223)
							return ret;
						}
						return null();
					}
				};
				HX_STACK_LINE(4223)
				::zpp_nape::util::ZNPNode_ZPP_Body temp = _Function_3_1::Block(o);		HX_STACK_VAR(temp,"temp");
				HX_STACK_LINE(4223)
				temp->next = _this->head;
				HX_STACK_LINE(4223)
				_this->head = temp;
				HX_STACK_LINE(4223)
				_this->modified = true;
				HX_STACK_LINE(4223)
				(_this->length)++;
				HX_STACK_LINE(4223)
				o;
			}
			else{
				HX_STACK_LINE(4224)
				::zpp_nape::util::ZNPList_ZPP_Body _this = this->live;		HX_STACK_VAR(_this,"_this");
				HX_STACK_LINE(4224)
				{
				}
				struct _Function_3_1{
					inline static ::zpp_nape::util::ZNPNode_ZPP_Body Block( ::zpp_nape::phys::ZPP_Body &o){
						HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",4224);
						{
							HX_STACK_LINE(4224)
							::zpp_nape::util::ZNPNode_ZPP_Body ret;		HX_STACK_VAR(ret,"ret");
							HX_STACK_LINE(4224)
							{
								HX_STACK_LINE(4224)
								if (((::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool == null()))){
									HX_STACK_LINE(4224)
									ret = ::zpp_nape::util::ZNPNode_ZPP_Body_obj::__new();
								}
								else{
									HX_STACK_LINE(4224)
									ret = ::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool;
									HX_STACK_LINE(4224)
									::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool = ret->next;
									HX_STACK_LINE(4224)
									ret->next = null();
								}
								HX_STACK_LINE(4224)
								Dynamic();
							}
							HX_STACK_LINE(4224)
							ret->elt = o;
							HX_STACK_LINE(4224)
							return ret;
						}
						return null();
					}
				};
				HX_STACK_LINE(4224)
				::zpp_nape::util::ZNPNode_ZPP_Body temp = _Function_3_1::Block(o);		HX_STACK_VAR(temp,"temp");
				HX_STACK_LINE(4224)
				temp->next = _this->head;
				HX_STACK_LINE(4224)
				_this->head = temp;
				HX_STACK_LINE(4224)
				_this->modified = true;
				HX_STACK_LINE(4224)
				(_this->length)++;
				HX_STACK_LINE(4224)
				o;
			}
			HX_STACK_LINE(4225)
			{
				HX_STACK_LINE(4226)
				::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = o->constraints->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(4227)
				while(((cx_ite != null()))){
					HX_STACK_LINE(4228)
					::zpp_nape::constraint::ZPP_Constraint con = cx_ite->elt;		HX_STACK_VAR(con,"con");
					HX_STACK_LINE(4229)
					if (((con->space == hx::ObjectPtr<OBJ_>(this)))){
						HX_STACK_LINE(4229)
						this->wake_constraint(con,null());
					}
					HX_STACK_LINE(4230)
					cx_ite = cx_ite->next;
				}
			}
			HX_STACK_LINE(4233)
			{
				HX_STACK_LINE(4234)
				::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite = o->arbiters->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(4235)
				while(((cx_ite != null()))){
					HX_STACK_LINE(4236)
					::zpp_nape::dynamics::ZPP_Arbiter arb = cx_ite->elt;		HX_STACK_VAR(arb,"arb");
					HX_STACK_LINE(4237)
					{
						HX_STACK_LINE(4238)
						if ((arb->sleeping)){
							HX_STACK_LINE(4239)
							arb->sleeping = false;
							HX_STACK_LINE(4240)
							hx::AddEq(arb->up_stamp,((this->stamp + ((  ((this->midstep)) ? int((int)0) : int((int)1) ))) - arb->sleep_stamp));
							HX_STACK_LINE(4241)
							if (((arb->type == ::zpp_nape::dynamics::ZPP_Arbiter_obj::COL))){
								HX_STACK_LINE(4242)
								::zpp_nape::dynamics::ZPP_ColArbiter carb = arb->colarb;		HX_STACK_VAR(carb,"carb");
								HX_STACK_LINE(4243)
								if ((carb->stat)){
									HX_STACK_LINE(4243)
									::zpp_nape::util::ZNPList_ZPP_ColArbiter _this = this->c_arbiters_true;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(4243)
									{
									}
									struct _Function_8_1{
										inline static ::zpp_nape::util::ZNPNode_ZPP_ColArbiter Block( ::zpp_nape::dynamics::ZPP_ColArbiter &carb){
											HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",4243);
											{
												HX_STACK_LINE(4243)
												::zpp_nape::util::ZNPNode_ZPP_ColArbiter ret;		HX_STACK_VAR(ret,"ret");
												HX_STACK_LINE(4243)
												{
													HX_STACK_LINE(4243)
													if (((::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool == null()))){
														HX_STACK_LINE(4243)
														ret = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::__new();
													}
													else{
														HX_STACK_LINE(4243)
														ret = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;
														HX_STACK_LINE(4243)
														::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool = ret->next;
														HX_STACK_LINE(4243)
														ret->next = null();
													}
													HX_STACK_LINE(4243)
													Dynamic();
												}
												HX_STACK_LINE(4243)
												ret->elt = carb;
												HX_STACK_LINE(4243)
												return ret;
											}
											return null();
										}
									};
									HX_STACK_LINE(4243)
									::zpp_nape::util::ZNPNode_ZPP_ColArbiter temp = _Function_8_1::Block(carb);		HX_STACK_VAR(temp,"temp");
									HX_STACK_LINE(4243)
									temp->next = _this->head;
									HX_STACK_LINE(4243)
									_this->head = temp;
									HX_STACK_LINE(4243)
									_this->modified = true;
									HX_STACK_LINE(4243)
									(_this->length)++;
									HX_STACK_LINE(4243)
									carb;
								}
								else{
									HX_STACK_LINE(4244)
									::zpp_nape::util::ZNPList_ZPP_ColArbiter _this = this->c_arbiters_false;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(4244)
									{
									}
									struct _Function_8_1{
										inline static ::zpp_nape::util::ZNPNode_ZPP_ColArbiter Block( ::zpp_nape::dynamics::ZPP_ColArbiter &carb){
											HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",4244);
											{
												HX_STACK_LINE(4244)
												::zpp_nape::util::ZNPNode_ZPP_ColArbiter ret;		HX_STACK_VAR(ret,"ret");
												HX_STACK_LINE(4244)
												{
													HX_STACK_LINE(4244)
													if (((::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool == null()))){
														HX_STACK_LINE(4244)
														ret = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::__new();
													}
													else{
														HX_STACK_LINE(4244)
														ret = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;
														HX_STACK_LINE(4244)
														::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool = ret->next;
														HX_STACK_LINE(4244)
														ret->next = null();
													}
													HX_STACK_LINE(4244)
													Dynamic();
												}
												HX_STACK_LINE(4244)
												ret->elt = carb;
												HX_STACK_LINE(4244)
												return ret;
											}
											return null();
										}
									};
									HX_STACK_LINE(4244)
									::zpp_nape::util::ZNPNode_ZPP_ColArbiter temp = _Function_8_1::Block(carb);		HX_STACK_VAR(temp,"temp");
									HX_STACK_LINE(4244)
									temp->next = _this->head;
									HX_STACK_LINE(4244)
									_this->head = temp;
									HX_STACK_LINE(4244)
									_this->modified = true;
									HX_STACK_LINE(4244)
									(_this->length)++;
									HX_STACK_LINE(4244)
									carb;
								}
							}
							else{
								HX_STACK_LINE(4246)
								if (((arb->type == ::zpp_nape::dynamics::ZPP_Arbiter_obj::FLUID))){
									HX_STACK_LINE(4246)
									::zpp_nape::util::ZNPList_ZPP_FluidArbiter _this = this->f_arbiters;		HX_STACK_VAR(_this,"_this");
									::zpp_nape::dynamics::ZPP_FluidArbiter o1 = arb->fluidarb;		HX_STACK_VAR(o1,"o1");
									HX_STACK_LINE(4246)
									{
									}
									struct _Function_8_1{
										inline static ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter Block( ::zpp_nape::dynamics::ZPP_FluidArbiter &o1){
											HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",4246);
											{
												HX_STACK_LINE(4246)
												::zpp_nape::util::ZNPNode_ZPP_FluidArbiter ret;		HX_STACK_VAR(ret,"ret");
												HX_STACK_LINE(4246)
												{
													HX_STACK_LINE(4246)
													if (((::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool == null()))){
														HX_STACK_LINE(4246)
														ret = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::__new();
													}
													else{
														HX_STACK_LINE(4246)
														ret = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool;
														HX_STACK_LINE(4246)
														::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool = ret->next;
														HX_STACK_LINE(4246)
														ret->next = null();
													}
													HX_STACK_LINE(4246)
													Dynamic();
												}
												HX_STACK_LINE(4246)
												ret->elt = o1;
												HX_STACK_LINE(4246)
												return ret;
											}
											return null();
										}
									};
									HX_STACK_LINE(4246)
									::zpp_nape::util::ZNPNode_ZPP_FluidArbiter temp = _Function_8_1::Block(o1);		HX_STACK_VAR(temp,"temp");
									HX_STACK_LINE(4246)
									temp->next = _this->head;
									HX_STACK_LINE(4246)
									_this->head = temp;
									HX_STACK_LINE(4246)
									_this->modified = true;
									HX_STACK_LINE(4246)
									(_this->length)++;
									HX_STACK_LINE(4246)
									o1;
								}
								else{
									HX_STACK_LINE(4247)
									::zpp_nape::util::ZNPList_ZPP_SensorArbiter _this = this->s_arbiters;		HX_STACK_VAR(_this,"_this");
									::zpp_nape::dynamics::ZPP_SensorArbiter o1 = arb->sensorarb;		HX_STACK_VAR(o1,"o1");
									HX_STACK_LINE(4247)
									{
									}
									struct _Function_8_1{
										inline static ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter Block( ::zpp_nape::dynamics::ZPP_SensorArbiter &o1){
											HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",4247);
											{
												HX_STACK_LINE(4247)
												::zpp_nape::util::ZNPNode_ZPP_SensorArbiter ret;		HX_STACK_VAR(ret,"ret");
												HX_STACK_LINE(4247)
												{
													HX_STACK_LINE(4247)
													if (((::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool == null()))){
														HX_STACK_LINE(4247)
														ret = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::__new();
													}
													else{
														HX_STACK_LINE(4247)
														ret = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool;
														HX_STACK_LINE(4247)
														::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool = ret->next;
														HX_STACK_LINE(4247)
														ret->next = null();
													}
													HX_STACK_LINE(4247)
													Dynamic();
												}
												HX_STACK_LINE(4247)
												ret->elt = o1;
												HX_STACK_LINE(4247)
												return ret;
											}
											return null();
										}
									};
									HX_STACK_LINE(4247)
									::zpp_nape::util::ZNPNode_ZPP_SensorArbiter temp = _Function_8_1::Block(o1);		HX_STACK_VAR(temp,"temp");
									HX_STACK_LINE(4247)
									temp->next = _this->head;
									HX_STACK_LINE(4247)
									_this->head = temp;
									HX_STACK_LINE(4247)
									_this->modified = true;
									HX_STACK_LINE(4247)
									(_this->length)++;
									HX_STACK_LINE(4247)
									o1;
								}
							}
						}
						HX_STACK_LINE(4249)
						if (((bool((bool((bool((arb->type != ::zpp_nape::dynamics::ZPP_Arbiter_obj::SENSOR)) && bool(!(arb->cleared)))) && bool((arb->up_stamp >= this->stamp)))) && bool((((int(arb->immState) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT))) != (int)0))))){
							HX_STACK_LINE(4250)
							if (((bool((arb->b1->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC)) && bool(arb->b1->component->sleeping)))){
								HX_STACK_LINE(4251)
								::zpp_nape::phys::ZPP_Body o1 = arb->b1;		HX_STACK_VAR(o1,"o1");
								HX_STACK_LINE(4252)
								{
								}
								HX_STACK_LINE(4260)
								if ((!(o1->world))){
									HX_STACK_LINE(4261)
									{
									}
									HX_STACK_LINE(4269)
									o1->component->waket = (this->stamp + ((  ((this->midstep)) ? int((int)0) : int((int)1) )));
									HX_STACK_LINE(4270)
									if ((o1->component->sleeping)){
										HX_STACK_LINE(4270)
										this->really_wake(o1,false);
									}
								}
							}
							HX_STACK_LINE(4275)
							if (((bool((arb->b2->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC)) && bool(arb->b2->component->sleeping)))){
								HX_STACK_LINE(4276)
								::zpp_nape::phys::ZPP_Body o1 = arb->b2;		HX_STACK_VAR(o1,"o1");
								HX_STACK_LINE(4277)
								{
								}
								HX_STACK_LINE(4285)
								if ((!(o1->world))){
									HX_STACK_LINE(4286)
									{
									}
									HX_STACK_LINE(4294)
									o1->component->waket = (this->stamp + ((  ((this->midstep)) ? int((int)0) : int((int)1) )));
									HX_STACK_LINE(4295)
									if ((o1->component->sleeping)){
										HX_STACK_LINE(4295)
										this->really_wake(o1,false);
									}
								}
							}
						}
					}
					HX_STACK_LINE(4302)
					cx_ite = cx_ite->next;
				}
			}
			HX_STACK_LINE(4305)
			if (((bool(!(fst)) && bool((o->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC))))){
				HX_STACK_LINE(4305)
				this->bodyCbWake(o);
			}
			HX_STACK_LINE(4306)
			if (((bool((bool(!(fst)) && bool(!(this->bphase->is_sweep)))) && bool(!(((o->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_STATIC))))))){
				HX_STACK_LINE(4307)
				::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite = o->shapes->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(4308)
				while(((cx_ite != null()))){
					HX_STACK_LINE(4309)
					::zpp_nape::shape::ZPP_Shape shape = cx_ite->elt;		HX_STACK_VAR(shape,"shape");
					HX_STACK_LINE(4310)
					if (((shape->node != null()))){
						HX_STACK_LINE(4310)
						this->bphase->sync(shape);
					}
					HX_STACK_LINE(4311)
					cx_ite = cx_ite->next;
				}
			}
		}
		else{
			HX_STACK_LINE(4315)
			this->wakeIsland(o->component->island);
		}
		HX_STACK_LINE(4318)
		{
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,really_wake,(void))

Void ZPP_Space_obj::non_inlined_wake( ::zpp_nape::phys::ZPP_Body o,hx::Null< bool >  __o_fst){
bool fst = __o_fst.Default(false);
	HX_STACK_PUSH("ZPP_Space::non_inlined_wake","zpp_nape/space/Space.hx",4193);
	HX_STACK_THIS(this);
	HX_STACK_ARG(o,"o");
	HX_STACK_ARG(fst,"fst");
{
		HX_STACK_LINE(4195)
		::zpp_nape::phys::ZPP_Body o1 = o;		HX_STACK_VAR(o1,"o1");
		HX_STACK_LINE(4196)
		{
		}
		HX_STACK_LINE(4204)
		if ((!(o1->world))){
			HX_STACK_LINE(4205)
			{
			}
			HX_STACK_LINE(4213)
			o1->component->waket = (this->stamp + ((  ((this->midstep)) ? int((int)0) : int((int)1) )));
			HX_STACK_LINE(4214)
			if ((o1->component->sleeping)){
				HX_STACK_LINE(4214)
				this->really_wake(o1,fst);
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,non_inlined_wake,(void))

Void ZPP_Space_obj::wakeIsland( ::zpp_nape::space::ZPP_Island i){
{
		HX_STACK_PUSH("ZPP_Space::wakeIsland","zpp_nape/space/Space.hx",4090);
		HX_STACK_THIS(this);
		HX_STACK_ARG(i,"i");
		HX_STACK_LINE(4091)
		{
		}
		HX_STACK_LINE(4099)
		while((!(((i->comps->head == null()))))){
			HX_STACK_LINE(4100)
			::zpp_nape::space::ZPP_Component c = i->comps->pop_unsafe();		HX_STACK_VAR(c,"c");
			HX_STACK_LINE(4101)
			{
			}
			HX_STACK_LINE(4109)
			c->waket = (this->stamp + ((  ((this->midstep)) ? int((int)0) : int((int)1) )));
			HX_STACK_LINE(4110)
			if ((c->isBody)){
				HX_STACK_LINE(4111)
				::zpp_nape::phys::ZPP_Body b = c->body;		HX_STACK_VAR(b,"b");
				HX_STACK_LINE(4112)
				{
				}
				HX_STACK_LINE(4120)
				{
				}
				HX_STACK_LINE(4128)
				this->live->add(b);
				HX_STACK_LINE(4129)
				{
					HX_STACK_LINE(4130)
					::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite = b->arbiters->head;		HX_STACK_VAR(cx_ite,"cx_ite");
					HX_STACK_LINE(4131)
					while(((cx_ite != null()))){
						HX_STACK_LINE(4132)
						::zpp_nape::dynamics::ZPP_Arbiter arb = cx_ite->elt;		HX_STACK_VAR(arb,"arb");
						HX_STACK_LINE(4133)
						if ((arb->sleeping)){
							HX_STACK_LINE(4135)
							arb->sleeping = false;
							HX_STACK_LINE(4136)
							hx::AddEq(arb->up_stamp,(this->stamp - arb->sleep_stamp));
							HX_STACK_LINE(4137)
							if (((arb->type == ::zpp_nape::dynamics::ZPP_Arbiter_obj::COL))){
								HX_STACK_LINE(4138)
								::zpp_nape::dynamics::ZPP_ColArbiter carb = arb->colarb;		HX_STACK_VAR(carb,"carb");
								HX_STACK_LINE(4139)
								if ((carb->stat)){
									HX_STACK_LINE(4139)
									::zpp_nape::util::ZNPList_ZPP_ColArbiter _this = this->c_arbiters_true;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(4139)
									{
									}
									struct _Function_8_1{
										inline static ::zpp_nape::util::ZNPNode_ZPP_ColArbiter Block( ::zpp_nape::dynamics::ZPP_ColArbiter &carb){
											HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",4139);
											{
												HX_STACK_LINE(4139)
												::zpp_nape::util::ZNPNode_ZPP_ColArbiter ret;		HX_STACK_VAR(ret,"ret");
												HX_STACK_LINE(4139)
												{
													HX_STACK_LINE(4139)
													if (((::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool == null()))){
														HX_STACK_LINE(4139)
														ret = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::__new();
													}
													else{
														HX_STACK_LINE(4139)
														ret = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;
														HX_STACK_LINE(4139)
														::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool = ret->next;
														HX_STACK_LINE(4139)
														ret->next = null();
													}
													HX_STACK_LINE(4139)
													Dynamic();
												}
												HX_STACK_LINE(4139)
												ret->elt = carb;
												HX_STACK_LINE(4139)
												return ret;
											}
											return null();
										}
									};
									HX_STACK_LINE(4139)
									::zpp_nape::util::ZNPNode_ZPP_ColArbiter temp = _Function_8_1::Block(carb);		HX_STACK_VAR(temp,"temp");
									HX_STACK_LINE(4139)
									temp->next = _this->head;
									HX_STACK_LINE(4139)
									_this->head = temp;
									HX_STACK_LINE(4139)
									_this->modified = true;
									HX_STACK_LINE(4139)
									(_this->length)++;
									HX_STACK_LINE(4139)
									carb;
								}
								else{
									HX_STACK_LINE(4140)
									::zpp_nape::util::ZNPList_ZPP_ColArbiter _this = this->c_arbiters_false;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(4140)
									{
									}
									struct _Function_8_1{
										inline static ::zpp_nape::util::ZNPNode_ZPP_ColArbiter Block( ::zpp_nape::dynamics::ZPP_ColArbiter &carb){
											HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",4140);
											{
												HX_STACK_LINE(4140)
												::zpp_nape::util::ZNPNode_ZPP_ColArbiter ret;		HX_STACK_VAR(ret,"ret");
												HX_STACK_LINE(4140)
												{
													HX_STACK_LINE(4140)
													if (((::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool == null()))){
														HX_STACK_LINE(4140)
														ret = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::__new();
													}
													else{
														HX_STACK_LINE(4140)
														ret = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;
														HX_STACK_LINE(4140)
														::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool = ret->next;
														HX_STACK_LINE(4140)
														ret->next = null();
													}
													HX_STACK_LINE(4140)
													Dynamic();
												}
												HX_STACK_LINE(4140)
												ret->elt = carb;
												HX_STACK_LINE(4140)
												return ret;
											}
											return null();
										}
									};
									HX_STACK_LINE(4140)
									::zpp_nape::util::ZNPNode_ZPP_ColArbiter temp = _Function_8_1::Block(carb);		HX_STACK_VAR(temp,"temp");
									HX_STACK_LINE(4140)
									temp->next = _this->head;
									HX_STACK_LINE(4140)
									_this->head = temp;
									HX_STACK_LINE(4140)
									_this->modified = true;
									HX_STACK_LINE(4140)
									(_this->length)++;
									HX_STACK_LINE(4140)
									carb;
								}
							}
							else{
								HX_STACK_LINE(4142)
								if (((arb->type == ::zpp_nape::dynamics::ZPP_Arbiter_obj::FLUID))){
									HX_STACK_LINE(4142)
									::zpp_nape::util::ZNPList_ZPP_FluidArbiter _this = this->f_arbiters;		HX_STACK_VAR(_this,"_this");
									::zpp_nape::dynamics::ZPP_FluidArbiter o = arb->fluidarb;		HX_STACK_VAR(o,"o");
									HX_STACK_LINE(4142)
									{
									}
									struct _Function_8_1{
										inline static ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter Block( ::zpp_nape::dynamics::ZPP_FluidArbiter &o){
											HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",4142);
											{
												HX_STACK_LINE(4142)
												::zpp_nape::util::ZNPNode_ZPP_FluidArbiter ret;		HX_STACK_VAR(ret,"ret");
												HX_STACK_LINE(4142)
												{
													HX_STACK_LINE(4142)
													if (((::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool == null()))){
														HX_STACK_LINE(4142)
														ret = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::__new();
													}
													else{
														HX_STACK_LINE(4142)
														ret = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool;
														HX_STACK_LINE(4142)
														::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool = ret->next;
														HX_STACK_LINE(4142)
														ret->next = null();
													}
													HX_STACK_LINE(4142)
													Dynamic();
												}
												HX_STACK_LINE(4142)
												ret->elt = o;
												HX_STACK_LINE(4142)
												return ret;
											}
											return null();
										}
									};
									HX_STACK_LINE(4142)
									::zpp_nape::util::ZNPNode_ZPP_FluidArbiter temp = _Function_8_1::Block(o);		HX_STACK_VAR(temp,"temp");
									HX_STACK_LINE(4142)
									temp->next = _this->head;
									HX_STACK_LINE(4142)
									_this->head = temp;
									HX_STACK_LINE(4142)
									_this->modified = true;
									HX_STACK_LINE(4142)
									(_this->length)++;
									HX_STACK_LINE(4142)
									o;
								}
								else{
									HX_STACK_LINE(4143)
									::zpp_nape::util::ZNPList_ZPP_SensorArbiter _this = this->s_arbiters;		HX_STACK_VAR(_this,"_this");
									::zpp_nape::dynamics::ZPP_SensorArbiter o = arb->sensorarb;		HX_STACK_VAR(o,"o");
									HX_STACK_LINE(4143)
									{
									}
									struct _Function_8_1{
										inline static ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter Block( ::zpp_nape::dynamics::ZPP_SensorArbiter &o){
											HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",4143);
											{
												HX_STACK_LINE(4143)
												::zpp_nape::util::ZNPNode_ZPP_SensorArbiter ret;		HX_STACK_VAR(ret,"ret");
												HX_STACK_LINE(4143)
												{
													HX_STACK_LINE(4143)
													if (((::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool == null()))){
														HX_STACK_LINE(4143)
														ret = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::__new();
													}
													else{
														HX_STACK_LINE(4143)
														ret = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool;
														HX_STACK_LINE(4143)
														::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool = ret->next;
														HX_STACK_LINE(4143)
														ret->next = null();
													}
													HX_STACK_LINE(4143)
													Dynamic();
												}
												HX_STACK_LINE(4143)
												ret->elt = o;
												HX_STACK_LINE(4143)
												return ret;
											}
											return null();
										}
									};
									HX_STACK_LINE(4143)
									::zpp_nape::util::ZNPNode_ZPP_SensorArbiter temp = _Function_8_1::Block(o);		HX_STACK_VAR(temp,"temp");
									HX_STACK_LINE(4143)
									temp->next = _this->head;
									HX_STACK_LINE(4143)
									_this->head = temp;
									HX_STACK_LINE(4143)
									_this->modified = true;
									HX_STACK_LINE(4143)
									(_this->length)++;
									HX_STACK_LINE(4143)
									o;
								}
							}
						}
						HX_STACK_LINE(4146)
						cx_ite = cx_ite->next;
					}
				}
				HX_STACK_LINE(4149)
				this->bodyCbWake(b);
				HX_STACK_LINE(4150)
				{
					HX_STACK_LINE(4150)
					c->sleeping = false;
					HX_STACK_LINE(4150)
					c->island = null();
					HX_STACK_LINE(4150)
					c->parent = c;
					HX_STACK_LINE(4150)
					c->rank = (int)0;
				}
				HX_STACK_LINE(4151)
				if ((!(((b->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_STATIC))))){
					HX_STACK_LINE(4152)
					::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite = b->shapes->head;		HX_STACK_VAR(cx_ite,"cx_ite");
					HX_STACK_LINE(4153)
					while(((cx_ite != null()))){
						HX_STACK_LINE(4154)
						::zpp_nape::shape::ZPP_Shape shape = cx_ite->elt;		HX_STACK_VAR(shape,"shape");
						HX_STACK_LINE(4155)
						if (((shape->node != null()))){
							HX_STACK_LINE(4155)
							this->bphase->sync(shape);
						}
						HX_STACK_LINE(4156)
						cx_ite = cx_ite->next;
					}
				}
			}
			else{
				HX_STACK_LINE(4161)
				::zpp_nape::constraint::ZPP_Constraint con = c->constraint;		HX_STACK_VAR(con,"con");
				HX_STACK_LINE(4162)
				{
				}
				HX_STACK_LINE(4170)
				{
					HX_STACK_LINE(4170)
					::zpp_nape::util::ZNPList_ZPP_Constraint _this = this->live_constraints;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(4170)
					{
					}
					struct _Function_4_1{
						inline static ::zpp_nape::util::ZNPNode_ZPP_Constraint Block( ::zpp_nape::constraint::ZPP_Constraint &con){
							HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",4170);
							{
								HX_STACK_LINE(4170)
								::zpp_nape::util::ZNPNode_ZPP_Constraint ret;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(4170)
								{
									HX_STACK_LINE(4170)
									if (((::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool == null()))){
										HX_STACK_LINE(4170)
										ret = ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::__new();
									}
									else{
										HX_STACK_LINE(4170)
										ret = ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool;
										HX_STACK_LINE(4170)
										::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool = ret->next;
										HX_STACK_LINE(4170)
										ret->next = null();
									}
									HX_STACK_LINE(4170)
									Dynamic();
								}
								HX_STACK_LINE(4170)
								ret->elt = con;
								HX_STACK_LINE(4170)
								return ret;
							}
							return null();
						}
					};
					HX_STACK_LINE(4170)
					::zpp_nape::util::ZNPNode_ZPP_Constraint temp = _Function_4_1::Block(con);		HX_STACK_VAR(temp,"temp");
					HX_STACK_LINE(4170)
					temp->next = _this->head;
					HX_STACK_LINE(4170)
					_this->head = temp;
					HX_STACK_LINE(4170)
					_this->modified = true;
					HX_STACK_LINE(4170)
					(_this->length)++;
					HX_STACK_LINE(4170)
					con;
				}
				HX_STACK_LINE(4171)
				this->constraintCbWake(con);
				HX_STACK_LINE(4172)
				{
					HX_STACK_LINE(4172)
					c->sleeping = false;
					HX_STACK_LINE(4172)
					c->island = null();
					HX_STACK_LINE(4172)
					c->parent = c;
					HX_STACK_LINE(4172)
					c->rank = (int)0;
				}
			}
		}
		HX_STACK_LINE(4175)
		{
			HX_STACK_LINE(4176)
			::zpp_nape::space::ZPP_Island o = i;		HX_STACK_VAR(o,"o");
			HX_STACK_LINE(4177)
			{
			}
			HX_STACK_LINE(4186)
			o->next = ::zpp_nape::space::ZPP_Island_obj::zpp_pool;
			HX_STACK_LINE(4187)
			::zpp_nape::space::ZPP_Island_obj::zpp_pool = o;
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,wakeIsland,(void))

Void ZPP_Space_obj::wakeCompound( ::zpp_nape::phys::ZPP_Compound x){
{
		HX_STACK_PUSH("ZPP_Space::wakeCompound","zpp_nape/space/Space.hx",4040);
		HX_STACK_THIS(this);
		HX_STACK_ARG(x,"x");
		HX_STACK_LINE(4041)
		{
			HX_STACK_LINE(4042)
			::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = x->bodies->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(4043)
			while(((cx_ite != null()))){
				HX_STACK_LINE(4044)
				::zpp_nape::phys::ZPP_Body y = cx_ite->elt;		HX_STACK_VAR(y,"y");
				HX_STACK_LINE(4045)
				{
					HX_STACK_LINE(4046)
					::zpp_nape::phys::ZPP_Body o = y;		HX_STACK_VAR(o,"o");
					HX_STACK_LINE(4047)
					{
					}
					HX_STACK_LINE(4055)
					if ((!(o->world))){
						HX_STACK_LINE(4056)
						{
						}
						HX_STACK_LINE(4064)
						o->component->waket = (this->stamp + ((  ((this->midstep)) ? int((int)0) : int((int)1) )));
						HX_STACK_LINE(4065)
						if ((o->component->sleeping)){
							HX_STACK_LINE(4065)
							this->really_wake(o,false);
						}
					}
				}
				HX_STACK_LINE(4070)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(4073)
		{
			HX_STACK_LINE(4074)
			::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = x->constraints->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(4075)
			while(((cx_ite != null()))){
				HX_STACK_LINE(4076)
				::zpp_nape::constraint::ZPP_Constraint i = cx_ite->elt;		HX_STACK_VAR(i,"i");
				HX_STACK_LINE(4077)
				this->wake_constraint(i,null());
				HX_STACK_LINE(4078)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(4081)
		{
			HX_STACK_LINE(4082)
			::zpp_nape::util::ZNPNode_ZPP_Compound cx_ite = x->compounds->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(4083)
			while(((cx_ite != null()))){
				HX_STACK_LINE(4084)
				::zpp_nape::phys::ZPP_Compound i = cx_ite->elt;		HX_STACK_VAR(i,"i");
				HX_STACK_LINE(4085)
				this->wakeCompound(i);
				HX_STACK_LINE(4086)
				cx_ite = cx_ite->next;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,wakeCompound,(void))

Void ZPP_Space_obj::freshInteractorType( ::zpp_nape::phys::ZPP_Interactor intx,::zpp_nape::phys::ZPP_Interactor me){
{
		HX_STACK_PUSH("ZPP_Space::freshInteractorType","zpp_nape/space/Space.hx",3952);
		HX_STACK_THIS(this);
		HX_STACK_ARG(intx,"intx");
		HX_STACK_ARG(me,"me");
		HX_STACK_LINE(3953)
		if (((me == null()))){
			HX_STACK_LINE(3953)
			me = intx;
		}
		HX_STACK_LINE(3954)
		if (((intx->icompound != null()))){
			HX_STACK_LINE(3955)
			::zpp_nape::phys::ZPP_Compound comp = intx->icompound;		HX_STACK_VAR(comp,"comp");
			HX_STACK_LINE(3956)
			{
				HX_STACK_LINE(3957)
				::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = comp->bodies->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(3958)
				while(((cx_ite != null()))){
					HX_STACK_LINE(3959)
					::zpp_nape::phys::ZPP_Body body = cx_ite->elt;		HX_STACK_VAR(body,"body");
					HX_STACK_LINE(3960)
					this->freshInteractorType(body,me);
					HX_STACK_LINE(3961)
					cx_ite = cx_ite->next;
				}
			}
			HX_STACK_LINE(3964)
			{
				HX_STACK_LINE(3965)
				::zpp_nape::util::ZNPNode_ZPP_Compound cx_ite = comp->compounds->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(3966)
				while(((cx_ite != null()))){
					HX_STACK_LINE(3967)
					::zpp_nape::phys::ZPP_Compound comp1 = cx_ite->elt;		HX_STACK_VAR(comp1,"comp1");
					HX_STACK_LINE(3968)
					this->freshInteractorType(comp1,me);
					HX_STACK_LINE(3969)
					cx_ite = cx_ite->next;
				}
			}
		}
		else{
			HX_STACK_LINE(3974)
			::zpp_nape::phys::ZPP_Body xbody = (  (((intx->ibody != null()))) ? ::zpp_nape::phys::ZPP_Body(intx->ibody) : ::zpp_nape::phys::ZPP_Body(intx->ishape->body) );		HX_STACK_VAR(xbody,"xbody");
			HX_STACK_LINE(3975)
			::zpp_nape::shape::ZPP_Shape xshp = (  (((intx->ishape != null()))) ? ::zpp_nape::shape::ZPP_Shape(intx->ishape) : ::zpp_nape::shape::ZPP_Shape(null()) );		HX_STACK_VAR(xshp,"xshp");
			HX_STACK_LINE(3976)
			{
				HX_STACK_LINE(3977)
				::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite = xbody->arbiters->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(3978)
				while(((cx_ite != null()))){
					HX_STACK_LINE(3979)
					::zpp_nape::dynamics::ZPP_Arbiter xarb = cx_ite->elt;		HX_STACK_VAR(xarb,"xarb");
					HX_STACK_LINE(3980)
					{
						HX_STACK_LINE(3981)
						if ((!(xarb->presentable))){
							HX_STACK_LINE(3982)
							cx_ite = cx_ite->next;
							HX_STACK_LINE(3983)
							continue;
						}
						HX_STACK_LINE(3985)
						if (((bool((xshp != null())) && bool(!(((bool((xarb->ws1 == xshp)) || bool((xarb->ws2 == xshp))))))))){
							HX_STACK_LINE(3986)
							cx_ite = cx_ite->next;
							HX_STACK_LINE(3987)
							continue;
						}
						HX_STACK_LINE(3989)
						this->MRCA_chains(xarb->ws1,xarb->ws2);
						HX_STACK_LINE(3990)
						{
							HX_STACK_LINE(3991)
							::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite1 = this->mrca1->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
							HX_STACK_LINE(3992)
							while(((cx_ite1 != null()))){
								HX_STACK_LINE(3993)
								::zpp_nape::phys::ZPP_Interactor i1 = cx_ite1->elt;		HX_STACK_VAR(i1,"i1");
								HX_STACK_LINE(3994)
								{
									HX_STACK_LINE(3996)
									::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite2 = this->mrca2->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
									HX_STACK_LINE(3997)
									while(((cx_ite2 != null()))){
										HX_STACK_LINE(3998)
										::zpp_nape::phys::ZPP_Interactor i2 = cx_ite2->elt;		HX_STACK_VAR(i2,"i2");
										HX_STACK_LINE(3999)
										{
											HX_STACK_LINE(4000)
											if (((bool((i1 != me)) && bool((i2 != me))))){
												HX_STACK_LINE(4001)
												cx_ite2 = cx_ite2->next;
												HX_STACK_LINE(4002)
												continue;
											}
											HX_STACK_LINE(4004)
											::zpp_nape::callbacks::ZPP_CbSet cb1 = i1->cbSet;		HX_STACK_VAR(cb1,"cb1");
											HX_STACK_LINE(4005)
											::zpp_nape::callbacks::ZPP_CbSet cb2 = i2->cbSet;		HX_STACK_VAR(cb2,"cb2");
											HX_STACK_LINE(4006)
											{
											}
											HX_STACK_LINE(4014)
											cb1->validate();
											HX_STACK_LINE(4015)
											cb2->validate();
											struct _Function_10_1{
												inline static bool Block( ::zpp_nape::callbacks::ZPP_CbSet &cb1,::zpp_nape::callbacks::ZPP_CbSet &cb2){
													HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",4016);
													{
														HX_STACK_LINE(4016)
														{
														}
														struct _Function_11_1{
															inline static ::zpp_nape::callbacks::ZPP_CbSetPair Block( ::zpp_nape::callbacks::ZPP_CbSet &cb1,::zpp_nape::callbacks::ZPP_CbSet &cb2){
																HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",4016);
																{
																	HX_STACK_LINE(4016)
																	::zpp_nape::callbacks::ZPP_CbSetPair ret = null();		HX_STACK_VAR(ret,"ret");
																	HX_STACK_LINE(4016)
																	::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs = (  (((cb1->cbpairs->length < cb2->cbpairs->length))) ? ::zpp_nape::util::ZNPList_ZPP_CbSetPair(cb1->cbpairs) : ::zpp_nape::util::ZNPList_ZPP_CbSetPair(cb2->cbpairs) );		HX_STACK_VAR(pairs,"pairs");
																	HX_STACK_LINE(4016)
																	{
																		HX_STACK_LINE(4016)
																		::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite3 = pairs->head;		HX_STACK_VAR(cx_ite3,"cx_ite3");
																		HX_STACK_LINE(4016)
																		while(((cx_ite3 != null()))){
																			HX_STACK_LINE(4016)
																			::zpp_nape::callbacks::ZPP_CbSetPair p = cx_ite3->elt;		HX_STACK_VAR(p,"p");
																			HX_STACK_LINE(4016)
																			if (((bool((bool((p->a == cb1)) && bool((p->b == cb2)))) || bool((bool((p->a == cb2)) && bool((p->b == cb1))))))){
																				HX_STACK_LINE(4016)
																				ret = p;
																				HX_STACK_LINE(4016)
																				break;
																			}
																			HX_STACK_LINE(4016)
																			cx_ite3 = cx_ite3->next;
																		}
																	}
																	HX_STACK_LINE(4016)
																	if (((ret == null()))){
																		struct _Function_13_1{
																			inline static ::zpp_nape::callbacks::ZPP_CbSetPair Block( ::zpp_nape::callbacks::ZPP_CbSet &cb1,::zpp_nape::callbacks::ZPP_CbSet &cb2){
																				HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",4016);
																				{
																					HX_STACK_LINE(4016)
																					::zpp_nape::callbacks::ZPP_CbSetPair ret1;		HX_STACK_VAR(ret1,"ret1");
																					HX_STACK_LINE(4016)
																					{
																						HX_STACK_LINE(4016)
																						if (((::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool == null()))){
																							HX_STACK_LINE(4016)
																							ret1 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__new();
																						}
																						else{
																							HX_STACK_LINE(4016)
																							ret1 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
																							HX_STACK_LINE(4016)
																							::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret1->next;
																							HX_STACK_LINE(4016)
																							ret1->next = null();
																						}
																						HX_STACK_LINE(4016)
																						ret1->zip_listeners = true;
																					}
																					HX_STACK_LINE(4016)
																					if ((::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(cb1,cb2))){
																						HX_STACK_LINE(4016)
																						ret1->a = cb1;
																						HX_STACK_LINE(4016)
																						ret1->b = cb2;
																					}
																					else{
																						HX_STACK_LINE(4016)
																						ret1->a = cb2;
																						HX_STACK_LINE(4016)
																						ret1->b = cb1;
																					}
																					HX_STACK_LINE(4016)
																					return ret1;
																				}
																				return null();
																			}
																		};
																		HX_STACK_LINE(4016)
																		ret = _Function_13_1::Block(cb1,cb2);
																		HX_STACK_LINE(4016)
																		cb1->cbpairs->add(ret);
																		HX_STACK_LINE(4016)
																		if (((cb2 != cb1))){
																			HX_STACK_LINE(4016)
																			cb2->cbpairs->add(ret);
																		}
																	}
																	HX_STACK_LINE(4016)
																	if ((ret->zip_listeners)){
																		HX_STACK_LINE(4016)
																		ret->zip_listeners = false;
																		HX_STACK_LINE(4016)
																		ret->__validate();
																	}
																	HX_STACK_LINE(4016)
																	return ret;
																}
																return null();
															}
														};
														HX_STACK_LINE(4016)
														return ((_Function_11_1::Block(cb1,cb2))->listeners->head == null());
													}
													return null();
												}
											};
											HX_STACK_LINE(4016)
											if ((!(_Function_10_1::Block(cb1,cb2)))){
												HX_STACK_LINE(4017)
												::zpp_nape::space::ZPP_CallbackSet callbackset = ::zpp_nape::phys::ZPP_Interactor_obj::get(i1,i2);		HX_STACK_VAR(callbackset,"callbackset");
												HX_STACK_LINE(4018)
												if (((callbackset == null()))){
													HX_STACK_LINE(4019)
													callbackset = ::zpp_nape::space::ZPP_CallbackSet_obj::get(i1,i2);
													HX_STACK_LINE(4020)
													this->add_callbackset(callbackset);
												}
												struct _Function_11_1{
													inline static bool Block( ::zpp_nape::space::ZPP_CallbackSet &callbackset,::zpp_nape::dynamics::ZPP_Arbiter &xarb){
														HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",4022);
														{
															HX_STACK_LINE(4022)
															{
															}
															HX_STACK_LINE(4022)
															bool ret;		HX_STACK_VAR(ret,"ret");
															HX_STACK_LINE(4022)
															{
																HX_STACK_LINE(4022)
																ret = false;
																HX_STACK_LINE(4022)
																{
																	HX_STACK_LINE(4022)
																	::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite3 = callbackset->arbiters->head;		HX_STACK_VAR(cx_ite3,"cx_ite3");
																	HX_STACK_LINE(4022)
																	while(((cx_ite3 != null()))){
																		HX_STACK_LINE(4022)
																		::zpp_nape::dynamics::ZPP_Arbiter npite = cx_ite3->elt;		HX_STACK_VAR(npite,"npite");
																		HX_STACK_LINE(4022)
																		if (((npite == xarb))){
																			HX_STACK_LINE(4022)
																			ret = true;
																			HX_STACK_LINE(4022)
																			break;
																		}
																		HX_STACK_LINE(4022)
																		cx_ite3 = cx_ite3->next;
																	}
																}
															}
															HX_STACK_LINE(4022)
															return ret;
														}
														return null();
													}
												};
												struct _Function_11_2{
													inline static bool Block( ::zpp_nape::space::ZPP_CallbackSet &callbackset,::zpp_nape::dynamics::ZPP_Arbiter &xarb){
														HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",4022);
														{
															HX_STACK_LINE(4022)
															{
																HX_STACK_LINE(4022)
																::zpp_nape::util::ZNPList_ZPP_Arbiter _this = callbackset->arbiters;		HX_STACK_VAR(_this,"_this");
																HX_STACK_LINE(4022)
																{
																}
																struct _Function_13_1{
																	inline static ::zpp_nape::util::ZNPNode_ZPP_Arbiter Block( ::zpp_nape::dynamics::ZPP_Arbiter &xarb){
																		HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",4022);
																		{
																			HX_STACK_LINE(4022)
																			::zpp_nape::util::ZNPNode_ZPP_Arbiter ret;		HX_STACK_VAR(ret,"ret");
																			HX_STACK_LINE(4022)
																			{
																				HX_STACK_LINE(4022)
																				if (((::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool == null()))){
																					HX_STACK_LINE(4022)
																					ret = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__new();
																				}
																				else{
																					HX_STACK_LINE(4022)
																					ret = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
																					HX_STACK_LINE(4022)
																					::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret->next;
																					HX_STACK_LINE(4022)
																					ret->next = null();
																				}
																				HX_STACK_LINE(4022)
																				Dynamic();
																			}
																			HX_STACK_LINE(4022)
																			ret->elt = xarb;
																			HX_STACK_LINE(4022)
																			return ret;
																		}
																		return null();
																	}
																};
																HX_STACK_LINE(4022)
																::zpp_nape::util::ZNPNode_ZPP_Arbiter temp = _Function_13_1::Block(xarb);		HX_STACK_VAR(temp,"temp");
																HX_STACK_LINE(4022)
																temp->next = _this->head;
																HX_STACK_LINE(4022)
																_this->head = temp;
																HX_STACK_LINE(4022)
																_this->modified = true;
																HX_STACK_LINE(4022)
																(_this->length)++;
																HX_STACK_LINE(4022)
																xarb;
															}
															HX_STACK_LINE(4022)
															return true;
														}
														return null();
													}
												};
												HX_STACK_LINE(4022)
												if (((  ((!(_Function_11_1::Block(callbackset,xarb)))) ? bool(_Function_11_2::Block(callbackset,xarb)) : bool(false) ))){
													HX_STACK_LINE(4022)
													(xarb->present)++;
												}
											}
										}
										HX_STACK_LINE(4027)
										cx_ite2 = cx_ite2->next;
									}
								}
								HX_STACK_LINE(4031)
								cx_ite1 = cx_ite1->next;
							}
						}
					}
					HX_STACK_LINE(4035)
					cx_ite = cx_ite->next;
				}
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,freshInteractorType,(void))

Void ZPP_Space_obj::freshListenerType( ::zpp_nape::callbacks::ZPP_CbSet cb1,::zpp_nape::callbacks::ZPP_CbSet cb2){
{
		HX_STACK_PUSH("ZPP_Space::freshListenerType","zpp_nape/space/Space.hx",3855);
		HX_STACK_THIS(this);
		HX_STACK_ARG(cb1,"cb1");
		HX_STACK_ARG(cb2,"cb2");
		HX_STACK_LINE(3856)
		::zpp_nape::util::ZNPList_ZPP_Interactor stack = ::zpp_nape::util::ZNPList_ZPP_Interactor_obj::__new();		HX_STACK_VAR(stack,"stack");
		HX_STACK_LINE(3857)
		{
			HX_STACK_LINE(3858)
			::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite = cb1->interactors->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(3859)
			while(((cx_ite != null()))){
				HX_STACK_LINE(3860)
				::zpp_nape::phys::ZPP_Interactor i = cx_ite->elt;		HX_STACK_VAR(i,"i");
				HX_STACK_LINE(3861)
				stack->add(i);
				HX_STACK_LINE(3862)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(3865)
		if (((cb1 != cb2))){
			HX_STACK_LINE(3866)
			::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite = cb2->interactors->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(3867)
			while(((cx_ite != null()))){
				HX_STACK_LINE(3868)
				::zpp_nape::phys::ZPP_Interactor i = cx_ite->elt;		HX_STACK_VAR(i,"i");
				HX_STACK_LINE(3869)
				stack->add(i);
				HX_STACK_LINE(3870)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(3873)
		while((!(((stack->head == null()))))){
			HX_STACK_LINE(3874)
			::zpp_nape::phys::ZPP_Interactor intx = stack->pop_unsafe();		HX_STACK_VAR(intx,"intx");
			HX_STACK_LINE(3875)
			if (((intx->icompound != null()))){
				HX_STACK_LINE(3876)
				::zpp_nape::phys::ZPP_Compound comp = intx->icompound;		HX_STACK_VAR(comp,"comp");
				HX_STACK_LINE(3877)
				{
					HX_STACK_LINE(3878)
					::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = comp->bodies->head;		HX_STACK_VAR(cx_ite,"cx_ite");
					HX_STACK_LINE(3879)
					while(((cx_ite != null()))){
						HX_STACK_LINE(3880)
						::zpp_nape::phys::ZPP_Body i = cx_ite->elt;		HX_STACK_VAR(i,"i");
						HX_STACK_LINE(3881)
						stack->add(i);
						HX_STACK_LINE(3882)
						cx_ite = cx_ite->next;
					}
				}
				HX_STACK_LINE(3885)
				{
					HX_STACK_LINE(3886)
					::zpp_nape::util::ZNPNode_ZPP_Compound cx_ite = comp->compounds->head;		HX_STACK_VAR(cx_ite,"cx_ite");
					HX_STACK_LINE(3887)
					while(((cx_ite != null()))){
						HX_STACK_LINE(3888)
						::zpp_nape::phys::ZPP_Compound i = cx_ite->elt;		HX_STACK_VAR(i,"i");
						HX_STACK_LINE(3889)
						stack->add(i);
						HX_STACK_LINE(3890)
						cx_ite = cx_ite->next;
					}
				}
			}
			else{
				HX_STACK_LINE(3895)
				::zpp_nape::phys::ZPP_Body xbody = (  (((intx->ibody != null()))) ? ::zpp_nape::phys::ZPP_Body(intx->ibody) : ::zpp_nape::phys::ZPP_Body(intx->ishape->body) );		HX_STACK_VAR(xbody,"xbody");
				HX_STACK_LINE(3896)
				::zpp_nape::shape::ZPP_Shape xshp = (  (((intx->ishape != null()))) ? ::zpp_nape::shape::ZPP_Shape(intx->ishape) : ::zpp_nape::shape::ZPP_Shape(null()) );		HX_STACK_VAR(xshp,"xshp");
				HX_STACK_LINE(3897)
				{
					HX_STACK_LINE(3898)
					::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite = xbody->arbiters->head;		HX_STACK_VAR(cx_ite,"cx_ite");
					HX_STACK_LINE(3899)
					while(((cx_ite != null()))){
						HX_STACK_LINE(3900)
						::zpp_nape::dynamics::ZPP_Arbiter xarb = cx_ite->elt;		HX_STACK_VAR(xarb,"xarb");
						HX_STACK_LINE(3901)
						{
							HX_STACK_LINE(3902)
							if ((!(xarb->presentable))){
								HX_STACK_LINE(3903)
								cx_ite = cx_ite->next;
								HX_STACK_LINE(3904)
								continue;
							}
							HX_STACK_LINE(3906)
							if (((bool((xshp != null())) && bool(!(((bool((xarb->ws1 == xshp)) || bool((xarb->ws2 == xshp))))))))){
								HX_STACK_LINE(3907)
								cx_ite = cx_ite->next;
								HX_STACK_LINE(3908)
								continue;
							}
							HX_STACK_LINE(3910)
							this->MRCA_chains(xarb->ws1,xarb->ws2);
							HX_STACK_LINE(3911)
							{
								HX_STACK_LINE(3912)
								::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite1 = this->mrca1->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
								HX_STACK_LINE(3913)
								while(((cx_ite1 != null()))){
									HX_STACK_LINE(3914)
									::zpp_nape::phys::ZPP_Interactor i1 = cx_ite1->elt;		HX_STACK_VAR(i1,"i1");
									HX_STACK_LINE(3915)
									{
										HX_STACK_LINE(3916)
										if (((bool((i1->cbSet != cb1)) && bool((i1->cbSet != cb2))))){
											HX_STACK_LINE(3917)
											cx_ite1 = cx_ite1->next;
											HX_STACK_LINE(3918)
											continue;
										}
										HX_STACK_LINE(3920)
										{
											HX_STACK_LINE(3921)
											::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite2 = this->mrca2->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
											HX_STACK_LINE(3922)
											while(((cx_ite2 != null()))){
												HX_STACK_LINE(3923)
												::zpp_nape::phys::ZPP_Interactor i2 = cx_ite2->elt;		HX_STACK_VAR(i2,"i2");
												HX_STACK_LINE(3924)
												{
													HX_STACK_LINE(3925)
													if (((bool((bool((i1->cbSet == cb1)) && bool((i2->cbSet != cb2)))) || bool((bool((i1->cbSet == cb2)) && bool((i2->cbSet != cb1))))))){
														HX_STACK_LINE(3926)
														cx_ite2 = cx_ite2->next;
														HX_STACK_LINE(3927)
														continue;
													}
													HX_STACK_LINE(3929)
													::zpp_nape::space::ZPP_CallbackSet callbackset = ::zpp_nape::phys::ZPP_Interactor_obj::get(i1,i2);		HX_STACK_VAR(callbackset,"callbackset");
													HX_STACK_LINE(3930)
													if (((callbackset == null()))){
														HX_STACK_LINE(3931)
														callbackset = ::zpp_nape::space::ZPP_CallbackSet_obj::get(i1,i2);
														HX_STACK_LINE(3932)
														this->add_callbackset(callbackset);
													}
													struct _Function_12_1{
														inline static bool Block( ::zpp_nape::space::ZPP_CallbackSet &callbackset,::zpp_nape::dynamics::ZPP_Arbiter &xarb){
															HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",3934);
															{
																HX_STACK_LINE(3934)
																{
																}
																HX_STACK_LINE(3934)
																bool ret;		HX_STACK_VAR(ret,"ret");
																HX_STACK_LINE(3934)
																{
																	HX_STACK_LINE(3934)
																	ret = false;
																	HX_STACK_LINE(3934)
																	{
																		HX_STACK_LINE(3934)
																		::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite3 = callbackset->arbiters->head;		HX_STACK_VAR(cx_ite3,"cx_ite3");
																		HX_STACK_LINE(3934)
																		while(((cx_ite3 != null()))){
																			HX_STACK_LINE(3934)
																			::zpp_nape::dynamics::ZPP_Arbiter npite = cx_ite3->elt;		HX_STACK_VAR(npite,"npite");
																			HX_STACK_LINE(3934)
																			if (((npite == xarb))){
																				HX_STACK_LINE(3934)
																				ret = true;
																				HX_STACK_LINE(3934)
																				break;
																			}
																			HX_STACK_LINE(3934)
																			cx_ite3 = cx_ite3->next;
																		}
																	}
																}
																HX_STACK_LINE(3934)
																return ret;
															}
															return null();
														}
													};
													struct _Function_12_2{
														inline static bool Block( ::zpp_nape::space::ZPP_CallbackSet &callbackset,::zpp_nape::dynamics::ZPP_Arbiter &xarb){
															HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",3934);
															{
																HX_STACK_LINE(3934)
																{
																	HX_STACK_LINE(3934)
																	::zpp_nape::util::ZNPList_ZPP_Arbiter _this = callbackset->arbiters;		HX_STACK_VAR(_this,"_this");
																	HX_STACK_LINE(3934)
																	{
																	}
																	struct _Function_14_1{
																		inline static ::zpp_nape::util::ZNPNode_ZPP_Arbiter Block( ::zpp_nape::dynamics::ZPP_Arbiter &xarb){
																			HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",3934);
																			{
																				HX_STACK_LINE(3934)
																				::zpp_nape::util::ZNPNode_ZPP_Arbiter ret;		HX_STACK_VAR(ret,"ret");
																				HX_STACK_LINE(3934)
																				{
																					HX_STACK_LINE(3934)
																					if (((::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool == null()))){
																						HX_STACK_LINE(3934)
																						ret = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__new();
																					}
																					else{
																						HX_STACK_LINE(3934)
																						ret = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
																						HX_STACK_LINE(3934)
																						::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret->next;
																						HX_STACK_LINE(3934)
																						ret->next = null();
																					}
																					HX_STACK_LINE(3934)
																					Dynamic();
																				}
																				HX_STACK_LINE(3934)
																				ret->elt = xarb;
																				HX_STACK_LINE(3934)
																				return ret;
																			}
																			return null();
																		}
																	};
																	HX_STACK_LINE(3934)
																	::zpp_nape::util::ZNPNode_ZPP_Arbiter temp = _Function_14_1::Block(xarb);		HX_STACK_VAR(temp,"temp");
																	HX_STACK_LINE(3934)
																	temp->next = _this->head;
																	HX_STACK_LINE(3934)
																	_this->head = temp;
																	HX_STACK_LINE(3934)
																	_this->modified = true;
																	HX_STACK_LINE(3934)
																	(_this->length)++;
																	HX_STACK_LINE(3934)
																	xarb;
																}
																HX_STACK_LINE(3934)
																return true;
															}
															return null();
														}
													};
													HX_STACK_LINE(3934)
													if (((  ((!(_Function_12_1::Block(callbackset,xarb)))) ? bool(_Function_12_2::Block(callbackset,xarb)) : bool(false) ))){
														HX_STACK_LINE(3934)
														(xarb->present)++;
													}
												}
												HX_STACK_LINE(3938)
												cx_ite2 = cx_ite2->next;
											}
										}
									}
									HX_STACK_LINE(3942)
									cx_ite1 = cx_ite1->next;
								}
							}
						}
						HX_STACK_LINE(3946)
						cx_ite = cx_ite->next;
					}
				}
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,freshListenerType,(void))

Void ZPP_Space_obj::nullInteractorType( ::zpp_nape::phys::ZPP_Interactor intx,::zpp_nape::phys::ZPP_Interactor me){
{
		HX_STACK_PUSH("ZPP_Space::nullInteractorType","zpp_nape/space/Space.hx",3773);
		HX_STACK_THIS(this);
		HX_STACK_ARG(intx,"intx");
		HX_STACK_ARG(me,"me");
		HX_STACK_LINE(3774)
		if (((me == null()))){
			HX_STACK_LINE(3774)
			me = intx;
		}
		HX_STACK_LINE(3775)
		if (((intx->icompound != null()))){
			HX_STACK_LINE(3776)
			::zpp_nape::phys::ZPP_Compound comp = intx->icompound;		HX_STACK_VAR(comp,"comp");
			HX_STACK_LINE(3777)
			{
				HX_STACK_LINE(3778)
				::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = comp->bodies->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(3779)
				while(((cx_ite != null()))){
					HX_STACK_LINE(3780)
					::zpp_nape::phys::ZPP_Body body = cx_ite->elt;		HX_STACK_VAR(body,"body");
					HX_STACK_LINE(3781)
					this->nullInteractorType(body,me);
					HX_STACK_LINE(3782)
					cx_ite = cx_ite->next;
				}
			}
			HX_STACK_LINE(3785)
			{
				HX_STACK_LINE(3786)
				::zpp_nape::util::ZNPNode_ZPP_Compound cx_ite = comp->compounds->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(3787)
				while(((cx_ite != null()))){
					HX_STACK_LINE(3788)
					::zpp_nape::phys::ZPP_Compound comp1 = cx_ite->elt;		HX_STACK_VAR(comp1,"comp1");
					HX_STACK_LINE(3789)
					this->nullInteractorType(comp1,me);
					HX_STACK_LINE(3790)
					cx_ite = cx_ite->next;
				}
			}
		}
		else{
			HX_STACK_LINE(3795)
			::zpp_nape::phys::ZPP_Body xbody = (  (((intx->ibody != null()))) ? ::zpp_nape::phys::ZPP_Body(intx->ibody) : ::zpp_nape::phys::ZPP_Body(intx->ishape->body) );		HX_STACK_VAR(xbody,"xbody");
			HX_STACK_LINE(3796)
			::zpp_nape::shape::ZPP_Shape xshp = (  (((intx->ishape != null()))) ? ::zpp_nape::shape::ZPP_Shape(intx->ishape) : ::zpp_nape::shape::ZPP_Shape(null()) );		HX_STACK_VAR(xshp,"xshp");
			HX_STACK_LINE(3797)
			{
				HX_STACK_LINE(3798)
				::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite = xbody->arbiters->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(3799)
				while(((cx_ite != null()))){
					HX_STACK_LINE(3800)
					::zpp_nape::dynamics::ZPP_Arbiter xarb = cx_ite->elt;		HX_STACK_VAR(xarb,"xarb");
					HX_STACK_LINE(3801)
					{
						HX_STACK_LINE(3802)
						if (((xarb->present == (int)0))){
							HX_STACK_LINE(3803)
							cx_ite = cx_ite->next;
							HX_STACK_LINE(3804)
							continue;
						}
						HX_STACK_LINE(3806)
						if (((bool((xshp != null())) && bool(!(((bool((xarb->ws1 == xshp)) || bool((xarb->ws2 == xshp))))))))){
							HX_STACK_LINE(3807)
							cx_ite = cx_ite->next;
							HX_STACK_LINE(3808)
							continue;
						}
						HX_STACK_LINE(3810)
						this->MRCA_chains(xarb->ws1,xarb->ws2);
						HX_STACK_LINE(3811)
						{
							HX_STACK_LINE(3812)
							::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite1 = this->mrca1->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
							HX_STACK_LINE(3813)
							while(((cx_ite1 != null()))){
								HX_STACK_LINE(3814)
								::zpp_nape::phys::ZPP_Interactor i1 = cx_ite1->elt;		HX_STACK_VAR(i1,"i1");
								HX_STACK_LINE(3815)
								{
									HX_STACK_LINE(3817)
									::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite2 = this->mrca2->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
									HX_STACK_LINE(3818)
									while(((cx_ite2 != null()))){
										HX_STACK_LINE(3819)
										::zpp_nape::phys::ZPP_Interactor i2 = cx_ite2->elt;		HX_STACK_VAR(i2,"i2");
										HX_STACK_LINE(3820)
										{
											HX_STACK_LINE(3821)
											if (((bool((i1 != me)) && bool((i2 != me))))){
												HX_STACK_LINE(3822)
												cx_ite2 = cx_ite2->next;
												HX_STACK_LINE(3823)
												continue;
											}
											HX_STACK_LINE(3825)
											::zpp_nape::space::ZPP_CallbackSet callbackset = ::zpp_nape::phys::ZPP_Interactor_obj::get(i1,i2);		HX_STACK_VAR(callbackset,"callbackset");
											HX_STACK_LINE(3826)
											if (((callbackset != null()))){
												HX_STACK_LINE(3827)
												(xarb->present)--;
												HX_STACK_LINE(3828)
												{
												}
												HX_STACK_LINE(3836)
												callbackset->remove_arb(xarb);
												HX_STACK_LINE(3837)
												if (((callbackset->arbiters->head == null()))){
													HX_STACK_LINE(3837)
													this->remove_callbackset(callbackset);
												}
											}
										}
										HX_STACK_LINE(3842)
										cx_ite2 = cx_ite2->next;
									}
								}
								HX_STACK_LINE(3846)
								cx_ite1 = cx_ite1->next;
							}
						}
					}
					HX_STACK_LINE(3850)
					cx_ite = cx_ite->next;
				}
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,nullInteractorType,(void))

Void ZPP_Space_obj::nullListenerType( ::zpp_nape::callbacks::ZPP_CbSet cb1,::zpp_nape::callbacks::ZPP_CbSet cb2){
{
		HX_STACK_PUSH("ZPP_Space::nullListenerType","zpp_nape/space/Space.hx",3664);
		HX_STACK_THIS(this);
		HX_STACK_ARG(cb1,"cb1");
		HX_STACK_ARG(cb2,"cb2");
		HX_STACK_LINE(3665)
		::zpp_nape::util::ZNPList_ZPP_Interactor stack = ::zpp_nape::util::ZNPList_ZPP_Interactor_obj::__new();		HX_STACK_VAR(stack,"stack");
		HX_STACK_LINE(3666)
		{
			HX_STACK_LINE(3667)
			::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite = cb1->interactors->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(3668)
			while(((cx_ite != null()))){
				HX_STACK_LINE(3669)
				::zpp_nape::phys::ZPP_Interactor i = cx_ite->elt;		HX_STACK_VAR(i,"i");
				HX_STACK_LINE(3670)
				stack->add(i);
				HX_STACK_LINE(3671)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(3674)
		if (((cb1 != cb2))){
			HX_STACK_LINE(3675)
			::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite = cb2->interactors->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(3676)
			while(((cx_ite != null()))){
				HX_STACK_LINE(3677)
				::zpp_nape::phys::ZPP_Interactor i = cx_ite->elt;		HX_STACK_VAR(i,"i");
				HX_STACK_LINE(3678)
				stack->add(i);
				HX_STACK_LINE(3679)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(3682)
		while((!(((stack->head == null()))))){
			HX_STACK_LINE(3683)
			::zpp_nape::phys::ZPP_Interactor intx = stack->pop_unsafe();		HX_STACK_VAR(intx,"intx");
			HX_STACK_LINE(3684)
			if (((intx->icompound != null()))){
				HX_STACK_LINE(3685)
				::zpp_nape::phys::ZPP_Compound comp = intx->icompound;		HX_STACK_VAR(comp,"comp");
				HX_STACK_LINE(3686)
				{
					HX_STACK_LINE(3687)
					::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = comp->bodies->head;		HX_STACK_VAR(cx_ite,"cx_ite");
					HX_STACK_LINE(3688)
					while(((cx_ite != null()))){
						HX_STACK_LINE(3689)
						::zpp_nape::phys::ZPP_Body i = cx_ite->elt;		HX_STACK_VAR(i,"i");
						HX_STACK_LINE(3690)
						stack->add(i);
						HX_STACK_LINE(3691)
						cx_ite = cx_ite->next;
					}
				}
				HX_STACK_LINE(3694)
				{
					HX_STACK_LINE(3695)
					::zpp_nape::util::ZNPNode_ZPP_Compound cx_ite = comp->compounds->head;		HX_STACK_VAR(cx_ite,"cx_ite");
					HX_STACK_LINE(3696)
					while(((cx_ite != null()))){
						HX_STACK_LINE(3697)
						::zpp_nape::phys::ZPP_Compound i = cx_ite->elt;		HX_STACK_VAR(i,"i");
						HX_STACK_LINE(3698)
						stack->add(i);
						HX_STACK_LINE(3699)
						cx_ite = cx_ite->next;
					}
				}
			}
			else{
				HX_STACK_LINE(3704)
				::zpp_nape::phys::ZPP_Body xbody = (  (((intx->ibody != null()))) ? ::zpp_nape::phys::ZPP_Body(intx->ibody) : ::zpp_nape::phys::ZPP_Body(intx->ishape->body) );		HX_STACK_VAR(xbody,"xbody");
				HX_STACK_LINE(3705)
				::zpp_nape::shape::ZPP_Shape xshp = (  (((intx->ishape != null()))) ? ::zpp_nape::shape::ZPP_Shape(intx->ishape) : ::zpp_nape::shape::ZPP_Shape(null()) );		HX_STACK_VAR(xshp,"xshp");
				HX_STACK_LINE(3706)
				{
					HX_STACK_LINE(3707)
					::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite = xbody->arbiters->head;		HX_STACK_VAR(cx_ite,"cx_ite");
					HX_STACK_LINE(3708)
					while(((cx_ite != null()))){
						HX_STACK_LINE(3709)
						::zpp_nape::dynamics::ZPP_Arbiter xarb = cx_ite->elt;		HX_STACK_VAR(xarb,"xarb");
						HX_STACK_LINE(3710)
						{
							HX_STACK_LINE(3711)
							if (((xarb->present == (int)0))){
								HX_STACK_LINE(3712)
								cx_ite = cx_ite->next;
								HX_STACK_LINE(3713)
								continue;
							}
							HX_STACK_LINE(3715)
							if (((bool((xshp != null())) && bool(!(((bool((xarb->ws1 == xshp)) || bool((xarb->ws2 == xshp))))))))){
								HX_STACK_LINE(3716)
								cx_ite = cx_ite->next;
								HX_STACK_LINE(3717)
								continue;
							}
							HX_STACK_LINE(3719)
							this->MRCA_chains(xarb->ws1,xarb->ws2);
							HX_STACK_LINE(3720)
							{
								HX_STACK_LINE(3721)
								::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite1 = this->mrca1->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
								HX_STACK_LINE(3722)
								while(((cx_ite1 != null()))){
									HX_STACK_LINE(3723)
									::zpp_nape::phys::ZPP_Interactor i1 = cx_ite1->elt;		HX_STACK_VAR(i1,"i1");
									HX_STACK_LINE(3724)
									{
										HX_STACK_LINE(3725)
										if (((bool((i1->cbSet != cb1)) && bool((i1->cbSet != cb2))))){
											HX_STACK_LINE(3726)
											cx_ite1 = cx_ite1->next;
											HX_STACK_LINE(3727)
											continue;
										}
										HX_STACK_LINE(3729)
										{
											HX_STACK_LINE(3730)
											::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite2 = this->mrca2->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
											HX_STACK_LINE(3731)
											while(((cx_ite2 != null()))){
												HX_STACK_LINE(3732)
												::zpp_nape::phys::ZPP_Interactor i2 = cx_ite2->elt;		HX_STACK_VAR(i2,"i2");
												HX_STACK_LINE(3733)
												{
													HX_STACK_LINE(3734)
													if (((bool((bool((i1->cbSet == cb1)) && bool((i2->cbSet != cb2)))) || bool((bool((i1->cbSet == cb2)) && bool((i2->cbSet != cb1))))))){
														HX_STACK_LINE(3735)
														cx_ite2 = cx_ite2->next;
														HX_STACK_LINE(3736)
														continue;
													}
													HX_STACK_LINE(3738)
													::zpp_nape::space::ZPP_CallbackSet callbackset = ::zpp_nape::phys::ZPP_Interactor_obj::get(i1,i2);		HX_STACK_VAR(callbackset,"callbackset");
													HX_STACK_LINE(3739)
													if (((callbackset != null()))){
														HX_STACK_LINE(3740)
														while((!(((callbackset->arbiters->head == null()))))){
															HX_STACK_LINE(3742)
															::zpp_nape::dynamics::ZPP_Arbiter arb = callbackset->arbiters->pop_unsafe();		HX_STACK_VAR(arb,"arb");
															HX_STACK_LINE(3743)
															{
																HX_STACK_LINE(3744)
																(arb->present)--;
																HX_STACK_LINE(3745)
																{
																}
															}
														}
														HX_STACK_LINE(3756)
														this->remove_callbackset(callbackset);
													}
												}
												HX_STACK_LINE(3759)
												cx_ite2 = cx_ite2->next;
											}
										}
									}
									HX_STACK_LINE(3763)
									cx_ite1 = cx_ite1->next;
								}
							}
						}
						HX_STACK_LINE(3767)
						cx_ite = cx_ite->next;
					}
				}
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,nullListenerType,(void))

Void ZPP_Space_obj::constraintCbBreak( ::zpp_nape::constraint::ZPP_Constraint con){
{
		HX_STACK_PUSH("ZPP_Space::constraintCbBreak","zpp_nape/space/Space.hx",3644);
		HX_STACK_THIS(this);
		HX_STACK_ARG(con,"con");
		HX_STACK_LINE(3644)
		if (((con->cbSet != null()))){
			HX_STACK_LINE(3647)
			::zpp_nape::util::ZNPNode_ZPP_ConstraintListener cx_ite = con->cbSet->conlisteners->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(3648)
			while(((cx_ite != null()))){
				HX_STACK_LINE(3649)
				::zpp_nape::callbacks::ZPP_ConstraintListener i = cx_ite->elt;		HX_STACK_VAR(i,"i");
				HX_STACK_LINE(3650)
				{
					HX_STACK_LINE(3651)
					if (((i->event != ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_BREAK))){
						HX_STACK_LINE(3652)
						cx_ite = cx_ite->next;
						HX_STACK_LINE(3653)
						continue;
					}
					HX_STACK_LINE(3655)
					::zpp_nape::callbacks::ZPP_Callback cb = this->push_callback(i);		HX_STACK_VAR(cb,"cb");
					HX_STACK_LINE(3656)
					cb->event = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_BREAK;
					HX_STACK_LINE(3657)
					cb->constraint = con;
				}
				HX_STACK_LINE(3659)
				cx_ite = cx_ite->next;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,constraintCbBreak,(void))

Void ZPP_Space_obj::constraintCbSleep( ::zpp_nape::constraint::ZPP_Constraint con){
{
		HX_STACK_PUSH("ZPP_Space::constraintCbSleep","zpp_nape/space/Space.hx",3624);
		HX_STACK_THIS(this);
		HX_STACK_ARG(con,"con");
		HX_STACK_LINE(3624)
		if (((con->cbSet != null()))){
			HX_STACK_LINE(3627)
			::zpp_nape::util::ZNPNode_ZPP_ConstraintListener cx_ite = con->cbSet->conlisteners->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(3628)
			while(((cx_ite != null()))){
				HX_STACK_LINE(3629)
				::zpp_nape::callbacks::ZPP_ConstraintListener i = cx_ite->elt;		HX_STACK_VAR(i,"i");
				HX_STACK_LINE(3630)
				{
					HX_STACK_LINE(3631)
					if (((i->event != ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_SLEEP))){
						HX_STACK_LINE(3632)
						cx_ite = cx_ite->next;
						HX_STACK_LINE(3633)
						continue;
					}
					HX_STACK_LINE(3635)
					::zpp_nape::callbacks::ZPP_Callback cb = this->push_callback(i);		HX_STACK_VAR(cb,"cb");
					HX_STACK_LINE(3636)
					cb->event = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_SLEEP;
					HX_STACK_LINE(3637)
					cb->constraint = con;
				}
				HX_STACK_LINE(3639)
				cx_ite = cx_ite->next;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,constraintCbSleep,(void))

Void ZPP_Space_obj::constraintCbWake( ::zpp_nape::constraint::ZPP_Constraint con){
{
		HX_STACK_PUSH("ZPP_Space::constraintCbWake","zpp_nape/space/Space.hx",3601);
		HX_STACK_THIS(this);
		HX_STACK_ARG(con,"con");
		HX_STACK_LINE(3601)
		if (((con->cbSet != null()))){
			HX_STACK_LINE(3602)
			if ((this->midstep)){
				HX_STACK_LINE(3605)
				::zpp_nape::util::ZNPNode_ZPP_ConstraintListener cx_ite = con->cbSet->conlisteners->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(3606)
				while(((cx_ite != null()))){
					HX_STACK_LINE(3607)
					::zpp_nape::callbacks::ZPP_ConstraintListener i = cx_ite->elt;		HX_STACK_VAR(i,"i");
					HX_STACK_LINE(3608)
					{
						HX_STACK_LINE(3609)
						if (((i->event != ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_WAKE))){
							HX_STACK_LINE(3610)
							cx_ite = cx_ite->next;
							HX_STACK_LINE(3611)
							continue;
						}
						HX_STACK_LINE(3613)
						::zpp_nape::callbacks::ZPP_Callback cb = this->push_callback(i);		HX_STACK_VAR(cb,"cb");
						HX_STACK_LINE(3614)
						cb->event = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_WAKE;
						HX_STACK_LINE(3615)
						cb->constraint = con;
					}
					HX_STACK_LINE(3617)
					cx_ite = cx_ite->next;
				}
			}
			else{
				HX_STACK_LINE(3621)
				con->component->woken = true;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,constraintCbWake,(void))

Void ZPP_Space_obj::bodyCbSleep( ::zpp_nape::phys::ZPP_Body b){
{
		HX_STACK_PUSH("ZPP_Space::bodyCbSleep","zpp_nape/space/Space.hx",3581);
		HX_STACK_THIS(this);
		HX_STACK_ARG(b,"b");
		HX_STACK_LINE(3581)
		if (((bool((b->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC)) && bool((b->cbSet != null()))))){
			HX_STACK_LINE(3584)
			::zpp_nape::util::ZNPNode_ZPP_BodyListener cx_ite = b->cbSet->bodylisteners->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(3585)
			while(((cx_ite != null()))){
				HX_STACK_LINE(3586)
				::zpp_nape::callbacks::ZPP_BodyListener i = cx_ite->elt;		HX_STACK_VAR(i,"i");
				HX_STACK_LINE(3587)
				{
					HX_STACK_LINE(3588)
					if (((i->event != ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_SLEEP))){
						HX_STACK_LINE(3589)
						cx_ite = cx_ite->next;
						HX_STACK_LINE(3590)
						continue;
					}
					HX_STACK_LINE(3592)
					::zpp_nape::callbacks::ZPP_Callback cb = this->push_callback(i);		HX_STACK_VAR(cb,"cb");
					HX_STACK_LINE(3593)
					cb->event = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_SLEEP;
					HX_STACK_LINE(3594)
					cb->body = b;
				}
				HX_STACK_LINE(3596)
				cx_ite = cx_ite->next;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,bodyCbSleep,(void))

Void ZPP_Space_obj::bodyCbWake( ::zpp_nape::phys::ZPP_Body b){
{
		HX_STACK_PUSH("ZPP_Space::bodyCbWake","zpp_nape/space/Space.hx",3558);
		HX_STACK_THIS(this);
		HX_STACK_ARG(b,"b");
		HX_STACK_LINE(3558)
		if (((bool((b->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC)) && bool((b->cbSet != null()))))){
			HX_STACK_LINE(3559)
			if ((this->midstep)){
				HX_STACK_LINE(3562)
				::zpp_nape::util::ZNPNode_ZPP_BodyListener cx_ite = b->cbSet->bodylisteners->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(3563)
				while(((cx_ite != null()))){
					HX_STACK_LINE(3564)
					::zpp_nape::callbacks::ZPP_BodyListener i = cx_ite->elt;		HX_STACK_VAR(i,"i");
					HX_STACK_LINE(3565)
					{
						HX_STACK_LINE(3566)
						if (((i->event != ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_WAKE))){
							HX_STACK_LINE(3567)
							cx_ite = cx_ite->next;
							HX_STACK_LINE(3568)
							continue;
						}
						HX_STACK_LINE(3570)
						::zpp_nape::callbacks::ZPP_Callback cb = this->push_callback(i);		HX_STACK_VAR(cb,"cb");
						HX_STACK_LINE(3571)
						cb->event = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_WAKE;
						HX_STACK_LINE(3572)
						cb->body = b;
					}
					HX_STACK_LINE(3574)
					cx_ite = cx_ite->next;
				}
			}
			else{
				HX_STACK_LINE(3578)
				b->component->woken = true;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,bodyCbWake,(void))

::zpp_nape::dynamics::ZPP_Arbiter ZPP_Space_obj::continuousEvent( ::zpp_nape::shape::ZPP_Shape s1,::zpp_nape::shape::ZPP_Shape s2,bool stat,::zpp_nape::dynamics::ZPP_Arbiter in_arb,bool _){
	HX_STACK_PUSH("ZPP_Space::continuousEvent","zpp_nape/space/Space.hx",3472);
	HX_STACK_THIS(this);
	HX_STACK_ARG(s1,"s1");
	HX_STACK_ARG(s2,"s2");
	HX_STACK_ARG(stat,"stat");
	HX_STACK_ARG(in_arb,"in_arb");
	HX_STACK_ARG(_,"_");
	HX_STACK_LINE(3473)
	if (((bool(s1->body->sweepFrozen) && bool(s2->body->sweepFrozen)))){
		HX_STACK_LINE(3473)
		return in_arb;
	}
	HX_STACK_LINE(3474)
	if (((bool(s1->body->disableCCD) || bool(s2->body->disableCCD)))){
		HX_STACK_LINE(3474)
		return in_arb;
	}
	struct _Function_1_1{
		inline static int Block( ::zpp_nape::shape::ZPP_Shape &s1,::zpp_nape::shape::ZPP_Shape &s2){
			HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",3475);
			{
				HX_STACK_LINE(3475)
				::zpp_nape::phys::ZPP_Body b1 = s1->body;		HX_STACK_VAR(b1,"b1");
				::zpp_nape::phys::ZPP_Body b2 = s2->body;		HX_STACK_VAR(b2,"b2");
				HX_STACK_LINE(3475)
				{
				}
				HX_STACK_LINE(3475)
				{
				}
				HX_STACK_LINE(3475)
				bool con_ignore;		HX_STACK_VAR(con_ignore,"con_ignore");
				HX_STACK_LINE(3475)
				{
					HX_STACK_LINE(3475)
					con_ignore = false;
					HX_STACK_LINE(3475)
					{
						HX_STACK_LINE(3475)
						::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = b1->constraints->head;		HX_STACK_VAR(cx_ite,"cx_ite");
						HX_STACK_LINE(3475)
						while(((cx_ite != null()))){
							HX_STACK_LINE(3475)
							::zpp_nape::constraint::ZPP_Constraint con = cx_ite->elt;		HX_STACK_VAR(con,"con");
							HX_STACK_LINE(3475)
							if (((bool(con->ignore) && bool(con->pair_exists(b1->id,b2->id))))){
								HX_STACK_LINE(3475)
								con_ignore = true;
								HX_STACK_LINE(3475)
								break;
							}
							HX_STACK_LINE(3475)
							cx_ite = cx_ite->next;
						}
					}
				}
				struct _Function_2_1{
					inline static bool Block( ::zpp_nape::shape::ZPP_Shape &s1,::zpp_nape::shape::ZPP_Shape &s2){
						HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",3475);
						{
							struct _Function_3_1{
								inline static ::zpp_nape::dynamics::ZPP_InteractionGroup Block( ::zpp_nape::shape::ZPP_Shape &s1){
									HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",3475);
									{
										HX_STACK_LINE(3475)
										::zpp_nape::phys::ZPP_Interactor cur = s1;		HX_STACK_VAR(cur,"cur");
										HX_STACK_LINE(3475)
										while(((bool((cur != null())) && bool((cur->group == null()))))){
											HX_STACK_LINE(3475)
											if (((cur->ishape != null()))){
												HX_STACK_LINE(3475)
												cur = cur->ishape->body;
											}
											else{
												HX_STACK_LINE(3475)
												if (((cur->icompound != null()))){
													HX_STACK_LINE(3475)
													cur = cur->icompound->compound;
												}
												else{
													HX_STACK_LINE(3475)
													cur = cur->ibody->compound;
												}
											}
										}
										HX_STACK_LINE(3475)
										return (  (((cur == null()))) ? ::zpp_nape::dynamics::ZPP_InteractionGroup(null()) : ::zpp_nape::dynamics::ZPP_InteractionGroup(cur->group) );
									}
									return null();
								}
							};
							HX_STACK_LINE(3475)
							::zpp_nape::dynamics::ZPP_InteractionGroup g1 = _Function_3_1::Block(s1);		HX_STACK_VAR(g1,"g1");
							struct _Function_3_2{
								inline static bool Block( ::zpp_nape::shape::ZPP_Shape &s2,::zpp_nape::dynamics::ZPP_InteractionGroup &g1){
									HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",3475);
									{
										struct _Function_4_1{
											inline static ::zpp_nape::dynamics::ZPP_InteractionGroup Block( ::zpp_nape::shape::ZPP_Shape &s2){
												HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",3475);
												{
													HX_STACK_LINE(3475)
													::zpp_nape::phys::ZPP_Interactor cur = s2;		HX_STACK_VAR(cur,"cur");
													HX_STACK_LINE(3475)
													while(((bool((cur != null())) && bool((cur->group == null()))))){
														HX_STACK_LINE(3475)
														if (((cur->ishape != null()))){
															HX_STACK_LINE(3475)
															cur = cur->ishape->body;
														}
														else{
															HX_STACK_LINE(3475)
															if (((cur->icompound != null()))){
																HX_STACK_LINE(3475)
																cur = cur->icompound->compound;
															}
															else{
																HX_STACK_LINE(3475)
																cur = cur->ibody->compound;
															}
														}
													}
													HX_STACK_LINE(3475)
													return (  (((cur == null()))) ? ::zpp_nape::dynamics::ZPP_InteractionGroup(null()) : ::zpp_nape::dynamics::ZPP_InteractionGroup(cur->group) );
												}
												return null();
											}
										};
										HX_STACK_LINE(3475)
										::zpp_nape::dynamics::ZPP_InteractionGroup g2 = _Function_4_1::Block(s2);		HX_STACK_VAR(g2,"g2");
										struct _Function_4_2{
											inline static bool Block( ::zpp_nape::dynamics::ZPP_InteractionGroup &g1,::zpp_nape::dynamics::ZPP_InteractionGroup &g2){
												HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",3475);
												{
													HX_STACK_LINE(3475)
													bool ret = false;		HX_STACK_VAR(ret,"ret");
													HX_STACK_LINE(3475)
													while(((bool((g1 != null())) && bool((g2 != null()))))){
														HX_STACK_LINE(3475)
														if (((g1 == g2))){
															HX_STACK_LINE(3475)
															ret = g1->ignore;
															HX_STACK_LINE(3475)
															break;
														}
														HX_STACK_LINE(3475)
														if (((g1->depth < g2->depth))){
															HX_STACK_LINE(3475)
															g2 = g2->group;
														}
														else{
															HX_STACK_LINE(3475)
															g1 = g1->group;
														}
													}
													HX_STACK_LINE(3475)
													return ret;
												}
												return null();
											}
										};
										HX_STACK_LINE(3475)
										return (  (((g2 == null()))) ? bool(false) : bool(_Function_4_2::Block(g1,g2)) );
									}
									return null();
								}
							};
							HX_STACK_LINE(3475)
							return (  (((g1 == null()))) ? bool(false) : bool(_Function_3_2::Block(s2,g1)) );
						}
						return null();
					}
				};
				struct _Function_2_2{
					inline static int Block( ::zpp_nape::shape::ZPP_Shape &s1,::zpp_nape::phys::ZPP_Body &b2,::zpp_nape::shape::ZPP_Shape &s2,::zpp_nape::phys::ZPP_Body &b1){
						HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",3475);
						{
							struct _Function_3_1{
								inline static bool Block( ::zpp_nape::shape::ZPP_Shape &s1,::zpp_nape::shape::ZPP_Shape &s2){
									HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",3475);
									{
										HX_STACK_LINE(3475)
										::zpp_nape::dynamics::ZPP_InteractionFilter _this = s1->filter;		HX_STACK_VAR(_this,"_this");
										::zpp_nape::dynamics::ZPP_InteractionFilter x = s2->filter;		HX_STACK_VAR(x,"x");
										HX_STACK_LINE(3475)
										return (bool((((int(_this->sensorMask) & int(x->sensorGroup))) != (int)0)) && bool((((int(x->sensorMask) & int(_this->sensorGroup))) != (int)0)));
									}
									return null();
								}
							};
							struct _Function_3_2{
								inline static bool Block( ::zpp_nape::shape::ZPP_Shape &s1,::zpp_nape::shape::ZPP_Shape &s2){
									HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",3475);
									{
										HX_STACK_LINE(3475)
										::zpp_nape::dynamics::ZPP_InteractionFilter _this = s1->filter;		HX_STACK_VAR(_this,"_this");
										::zpp_nape::dynamics::ZPP_InteractionFilter x = s2->filter;		HX_STACK_VAR(x,"x");
										HX_STACK_LINE(3475)
										return (bool((((int(_this->fluidMask) & int(x->fluidGroup))) != (int)0)) && bool((((int(x->fluidMask) & int(_this->fluidGroup))) != (int)0)));
									}
									return null();
								}
							};
							struct _Function_3_3{
								inline static bool Block( ::zpp_nape::shape::ZPP_Shape &s1,::zpp_nape::shape::ZPP_Shape &s2){
									HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",3475);
									{
										HX_STACK_LINE(3475)
										::zpp_nape::dynamics::ZPP_InteractionFilter _this = s1->filter;		HX_STACK_VAR(_this,"_this");
										::zpp_nape::dynamics::ZPP_InteractionFilter x = s2->filter;		HX_STACK_VAR(x,"x");
										HX_STACK_LINE(3475)
										return (bool((((int(_this->collisionMask) & int(x->collisionGroup))) != (int)0)) && bool((((int(x->collisionMask) & int(_this->collisionGroup))) != (int)0)));
									}
									return null();
								}
							};
							HX_STACK_LINE(3475)
							return (  (((bool(((bool(s1->sensorEnabled) || bool(s2->sensorEnabled)))) && bool(_Function_3_1::Block(s1,s2))))) ? int((int)2) : int((  (((bool((bool(((bool(s1->fluidEnabled) || bool(s2->fluidEnabled)))) && bool(_Function_3_2::Block(s1,s2)))) && bool(!(((bool((bool((bool((b1->imass == (int)0)) && bool((b2->imass == (int)0)))) && bool((b1->iinertia == (int)0)))) && bool((b2->iinertia == (int)0))))))))) ? int((int)0) : int((  (((bool(_Function_3_3::Block(s1,s2)) && bool(!(((bool((bool((bool((b1->imass == (int)0)) && bool((b2->imass == (int)0)))) && bool((b1->iinertia == (int)0)))) && bool((b2->iinertia == (int)0))))))))) ? int((int)1) : int((int)-1) )) )) );
						}
						return null();
					}
				};
				HX_STACK_LINE(3475)
				return (  (((bool(!(con_ignore)) && bool(!(_Function_2_1::Block(s1,s2)))))) ? int(_Function_2_2::Block(s1,b2,s2,b1)) : int((int)-1) );
			}
			return null();
		}
	};
	HX_STACK_LINE(3475)
	if (((bool((bool((in_arb != null())) && bool((in_arb->colarb == null())))) || bool((_Function_1_1::Block(s1,s2) == (int)0))))){
		HX_STACK_LINE(3475)
		return in_arb;
	}
	HX_STACK_LINE(3478)
	::zpp_nape::phys::ZPP_Body b1 = s1->body;		HX_STACK_VAR(b1,"b1");
	HX_STACK_LINE(3479)
	::zpp_nape::phys::ZPP_Body b2 = s2->body;		HX_STACK_VAR(b2,"b2");
	HX_STACK_LINE(3480)
	if (((bool((bool(stat) || bool(b1->bullet))) || bool(b2->bullet)))){
		HX_STACK_LINE(3481)
		::zpp_nape::geom::ZPP_ToiEvent toi;		HX_STACK_VAR(toi,"toi");
		HX_STACK_LINE(3482)
		{
			HX_STACK_LINE(3483)
			if (((::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool == null()))){
				HX_STACK_LINE(3483)
				toi = ::zpp_nape::geom::ZPP_ToiEvent_obj::__new();
			}
			else{
				HX_STACK_LINE(3490)
				toi = ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool;
				HX_STACK_LINE(3491)
				::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool = toi->next;
				HX_STACK_LINE(3492)
				toi->next = null();
			}
			HX_STACK_LINE(3497)
			{
				HX_STACK_LINE(3497)
				toi->failed = false;
				HX_STACK_LINE(3497)
				toi->s1 = toi->s2 = null();
				HX_STACK_LINE(3497)
				toi->arbiter = null();
			}
		}
		HX_STACK_LINE(3499)
		bool kin = (bool((b1->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC)) || bool((b2->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC)));		HX_STACK_VAR(kin,"kin");
		HX_STACK_LINE(3500)
		if (((bool(stat) && bool(!(kin))))){
			HX_STACK_LINE(3501)
			if ((!(((s1->body->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC))))){
				HX_STACK_LINE(3502)
				toi->s2 = s1;
				HX_STACK_LINE(3503)
				toi->s1 = s2;
			}
			else{
				HX_STACK_LINE(3506)
				toi->s1 = s1;
				HX_STACK_LINE(3507)
				toi->s2 = s2;
			}
			HX_STACK_LINE(3509)
			toi->kinematic = false;
			HX_STACK_LINE(3510)
			::zpp_nape::geom::ZPP_SweepDistance_obj::staticSweep(toi,this->pre_dt,(int)0,::nape::Config_obj::collisionSlopCCD);
		}
		else{
			HX_STACK_LINE(3513)
			toi->s1 = s1;
			HX_STACK_LINE(3514)
			toi->s2 = s2;
			HX_STACK_LINE(3515)
			toi->kinematic = kin;
			HX_STACK_LINE(3516)
			if (((bool(toi->s1->body->sweepFrozen) || bool(toi->s2->body->sweepFrozen)))){
				HX_STACK_LINE(3517)
				if ((toi->s1->body->sweepFrozen)){
					HX_STACK_LINE(3518)
					::zpp_nape::shape::ZPP_Shape tmp = toi->s1;		HX_STACK_VAR(tmp,"tmp");
					HX_STACK_LINE(3519)
					toi->s1 = toi->s2;
					HX_STACK_LINE(3520)
					toi->s2 = tmp;
					HX_STACK_LINE(3521)
					toi->frozen1 = false;
					HX_STACK_LINE(3522)
					toi->frozen2 = true;
				}
				HX_STACK_LINE(3524)
				::zpp_nape::geom::ZPP_SweepDistance_obj::staticSweep(toi,this->pre_dt,(int)0,::nape::Config_obj::collisionSlopCCD);
			}
			else{
				HX_STACK_LINE(3526)
				::zpp_nape::geom::ZPP_SweepDistance_obj::dynamicSweep(toi,this->pre_dt,(int)0,::nape::Config_obj::collisionSlopCCD,null());
			}
		}
		HX_STACK_LINE(3530)
		if (((bool((bool(stat) && bool((toi->toi < (int)0)))) || bool(toi->failed)))){
			HX_STACK_LINE(3532)
			::zpp_nape::geom::ZPP_ToiEvent o = toi;		HX_STACK_VAR(o,"o");
			HX_STACK_LINE(3533)
			{
			}
			HX_STACK_LINE(3542)
			o->next = ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool;
			HX_STACK_LINE(3543)
			::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool = o;
		}
		else{
			HX_STACK_LINE(3550)
			this->toiEvents->add(toi);
			HX_STACK_LINE(3551)
			toi->frozen1 = toi->s1->body->sweepFrozen;
			HX_STACK_LINE(3552)
			toi->frozen2 = toi->s2->body->sweepFrozen;
			HX_STACK_LINE(3553)
			toi->arbiter = (  (((in_arb != null()))) ? ::zpp_nape::dynamics::ZPP_ColArbiter(in_arb->colarb) : ::zpp_nape::dynamics::ZPP_ColArbiter(null()) );
		}
	}
	HX_STACK_LINE(3556)
	return in_arb;
}


HX_DEFINE_DYNAMIC_FUNC5(ZPP_Space_obj,continuousEvent,return )

Void ZPP_Space_obj::continuousCollisions( Float deltaTime){
{
		HX_STACK_PUSH("ZPP_Space::continuousCollisions","zpp_nape/space/Space.hx",3262);
		HX_STACK_THIS(this);
		HX_STACK_ARG(deltaTime,"deltaTime");
		HX_STACK_LINE(3263)
		Float MAX_VEL = (Float(((int)2 * ::Math_obj::PI)) / Float(deltaTime));		HX_STACK_VAR(MAX_VEL,"MAX_VEL");
		HX_STACK_LINE(3264)
		this->bphase->broadphase(hx::ObjectPtr<OBJ_>(this),false);
		HX_STACK_LINE(3265)
		Float curTimeAlpha = 0.0;		HX_STACK_VAR(curTimeAlpha,"curTimeAlpha");
		HX_STACK_LINE(3266)
		while(((bool((curTimeAlpha < (int)1)) && bool(!(((this->toiEvents->head == null()))))))){
			HX_STACK_LINE(3267)
			::zpp_nape::geom::ZPP_ToiEvent minTOI = null();		HX_STACK_VAR(minTOI,"minTOI");
			HX_STACK_LINE(3268)
			Float minTime = 2.0;		HX_STACK_VAR(minTime,"minTime");
			HX_STACK_LINE(3269)
			bool minKinematic = false;		HX_STACK_VAR(minKinematic,"minKinematic");
			HX_STACK_LINE(3270)
			::zpp_nape::util::ZNPNode_ZPP_ToiEvent preMin = null();		HX_STACK_VAR(preMin,"preMin");
			HX_STACK_LINE(3271)
			::zpp_nape::util::ZNPNode_ZPP_ToiEvent pre = null();		HX_STACK_VAR(pre,"pre");
			HX_STACK_LINE(3272)
			{
				HX_STACK_LINE(3273)
				::zpp_nape::util::ZNPNode_ZPP_ToiEvent cx_ite = this->toiEvents->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(3274)
				while(((cx_ite != null()))){
					HX_STACK_LINE(3275)
					::zpp_nape::geom::ZPP_ToiEvent toi = cx_ite->elt;		HX_STACK_VAR(toi,"toi");
					HX_STACK_LINE(3276)
					{
						HX_STACK_LINE(3277)
						::zpp_nape::phys::ZPP_Body b1 = toi->s1->body;		HX_STACK_VAR(b1,"b1");
						HX_STACK_LINE(3278)
						::zpp_nape::phys::ZPP_Body b2 = toi->s2->body;		HX_STACK_VAR(b2,"b2");
						HX_STACK_LINE(3279)
						if (((bool(b1->sweepFrozen) && bool(b2->sweepFrozen)))){
							HX_STACK_LINE(3279)
							if (((bool((toi->toi != (int)0)) && bool(::zpp_nape::geom::ZPP_Collide_obj::testCollide_safe(toi->s1,toi->s2))))){
								HX_STACK_LINE(3280)
								toi->toi = (int)0;
							}
							else{
								HX_STACK_LINE(3284)
								cx_ite = this->toiEvents->erase(pre);
								HX_STACK_LINE(3285)
								{
									HX_STACK_LINE(3286)
									::zpp_nape::geom::ZPP_ToiEvent o = toi;		HX_STACK_VAR(o,"o");
									HX_STACK_LINE(3287)
									{
									}
									HX_STACK_LINE(3296)
									o->next = ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool;
									HX_STACK_LINE(3297)
									::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool = o;
								}
								HX_STACK_LINE(3302)
								continue;
							}
						}
						HX_STACK_LINE(3305)
						if (((bool((toi->frozen1 != b1->sweepFrozen)) || bool((toi->frozen2 != b2->sweepFrozen))))){
							HX_STACK_LINE(3305)
							if ((!(toi->kinematic))){
								HX_STACK_LINE(3307)
								toi->frozen1 = b1->sweepFrozen;
								HX_STACK_LINE(3308)
								toi->frozen2 = b2->sweepFrozen;
								HX_STACK_LINE(3309)
								if ((toi->frozen1)){
									HX_STACK_LINE(3310)
									::zpp_nape::shape::ZPP_Shape tmp = toi->s1;		HX_STACK_VAR(tmp,"tmp");
									HX_STACK_LINE(3311)
									toi->s1 = toi->s2;
									HX_STACK_LINE(3312)
									toi->s2 = tmp;
									HX_STACK_LINE(3313)
									toi->frozen1 = false;
									HX_STACK_LINE(3314)
									toi->frozen2 = true;
								}
								HX_STACK_LINE(3316)
								::zpp_nape::geom::ZPP_SweepDistance_obj::staticSweep(toi,deltaTime,(int)0,::nape::Config_obj::collisionSlopCCD);
								HX_STACK_LINE(3317)
								if (((toi->toi < (int)0))){
									HX_STACK_LINE(3318)
									cx_ite = this->toiEvents->erase(pre);
									HX_STACK_LINE(3319)
									{
										HX_STACK_LINE(3320)
										::zpp_nape::geom::ZPP_ToiEvent o = toi;		HX_STACK_VAR(o,"o");
										HX_STACK_LINE(3321)
										{
										}
										HX_STACK_LINE(3330)
										o->next = ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool;
										HX_STACK_LINE(3331)
										::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool = o;
									}
									HX_STACK_LINE(3336)
									continue;
								}
							}
							else{
								HX_STACK_LINE(3340)
								cx_ite = this->toiEvents->erase(pre);
								HX_STACK_LINE(3341)
								{
									HX_STACK_LINE(3342)
									::zpp_nape::geom::ZPP_ToiEvent o = toi;		HX_STACK_VAR(o,"o");
									HX_STACK_LINE(3343)
									{
									}
									HX_STACK_LINE(3352)
									o->next = ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool;
									HX_STACK_LINE(3353)
									::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool = o;
								}
								HX_STACK_LINE(3358)
								continue;
							}
						}
						HX_STACK_LINE(3361)
						if (((bool((toi->toi >= (int)0)) && bool(((bool((toi->toi < minTime)) || bool((bool(!(minKinematic)) && bool(toi->kinematic))))))))){
							HX_STACK_LINE(3362)
							minTOI = toi;
							HX_STACK_LINE(3363)
							minTime = toi->toi;
							HX_STACK_LINE(3364)
							minKinematic = toi->kinematic;
							HX_STACK_LINE(3365)
							preMin = pre;
						}
						HX_STACK_LINE(3367)
						pre = cx_ite;
					}
					HX_STACK_LINE(3369)
					cx_ite = cx_ite->next;
				}
			}
			HX_STACK_LINE(3372)
			if (((minTOI == null()))){
				HX_STACK_LINE(3372)
				break;
			}
			HX_STACK_LINE(3375)
			this->toiEvents->erase(preMin);
			HX_STACK_LINE(3376)
			curTimeAlpha = minTOI->toi;
			HX_STACK_LINE(3377)
			::zpp_nape::phys::ZPP_Body b1 = minTOI->s1->body;		HX_STACK_VAR(b1,"b1");
			HX_STACK_LINE(3378)
			::zpp_nape::phys::ZPP_Body b2 = minTOI->s2->body;		HX_STACK_VAR(b2,"b2");
			HX_STACK_LINE(3379)
			if ((!(b1->sweepFrozen))){
				HX_STACK_LINE(3380)
				{
					HX_STACK_LINE(3380)
					Float dt = (curTimeAlpha * deltaTime);		HX_STACK_VAR(dt,"dt");
					HX_STACK_LINE(3380)
					Float delta = (dt - b1->sweepTime);		HX_STACK_VAR(delta,"delta");
					HX_STACK_LINE(3380)
					if (((delta != (int)0))){
						HX_STACK_LINE(3380)
						{
						}
						HX_STACK_LINE(3380)
						b1->sweepTime = dt;
						HX_STACK_LINE(3380)
						{
							HX_STACK_LINE(3380)
							Float t = delta;		HX_STACK_VAR(t,"t");
							HX_STACK_LINE(3380)
							{
							}
							HX_STACK_LINE(3380)
							hx::AddEq(b1->posx,(b1->velx * t));
							HX_STACK_LINE(3380)
							hx::AddEq(b1->posy,(b1->vely * t));
						}
						HX_STACK_LINE(3380)
						if (((b1->angvel != (int)0))){
							HX_STACK_LINE(3380)
							Float dr = (b1->sweep_angvel * delta);		HX_STACK_VAR(dr,"dr");
							HX_STACK_LINE(3380)
							hx::AddEq(b1->rot,dr);
							HX_STACK_LINE(3380)
							if ((((dr * dr) > 0.0001))){
								HX_STACK_LINE(3380)
								b1->axisx = ::Math_obj::sin(b1->rot);
								HX_STACK_LINE(3380)
								b1->axisy = ::Math_obj::cos(b1->rot);
								HX_STACK_LINE(3380)
								{
								}
								HX_STACK_LINE(3380)
								Dynamic();
							}
							else{
								HX_STACK_LINE(3380)
								Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
								HX_STACK_LINE(3380)
								Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
								HX_STACK_LINE(3380)
								Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
								HX_STACK_LINE(3380)
								Float nx = ((((p * b1->axisx) + (dr * b1->axisy))) * m);		HX_STACK_VAR(nx,"nx");
								HX_STACK_LINE(3380)
								b1->axisy = ((((p * b1->axisy) - (dr * b1->axisx))) * m);
								HX_STACK_LINE(3380)
								b1->axisx = nx;
							}
						}
					}
				}
				HX_STACK_LINE(3381)
				{
					HX_STACK_LINE(3381)
					::zpp_nape::shape::ZPP_Shape s = minTOI->s1;		HX_STACK_VAR(s,"s");
					HX_STACK_LINE(3381)
					{
					}
					HX_STACK_LINE(3381)
					if (((s->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE))){
						HX_STACK_LINE(3381)
						s->worldCOMx = (b1->posx + (((b1->axisy * s->localCOMx) - (b1->axisx * s->localCOMy))));
						HX_STACK_LINE(3381)
						s->worldCOMy = (b1->posy + (((s->localCOMx * b1->axisx) + (s->localCOMy * b1->axisy))));
					}
					else{
						HX_STACK_LINE(3381)
						::zpp_nape::shape::ZPP_Polygon p = s->polygon;		HX_STACK_VAR(p,"p");
						HX_STACK_LINE(3381)
						::zpp_nape::geom::ZPP_Vec2 li = p->lverts->next;		HX_STACK_VAR(li,"li");
						HX_STACK_LINE(3381)
						{
							HX_STACK_LINE(3381)
							::zpp_nape::geom::ZPP_Vec2 cx_ite = p->gverts->next;		HX_STACK_VAR(cx_ite,"cx_ite");
							HX_STACK_LINE(3381)
							while(((cx_ite != null()))){
								HX_STACK_LINE(3381)
								::zpp_nape::geom::ZPP_Vec2 g = cx_ite;		HX_STACK_VAR(g,"g");
								HX_STACK_LINE(3381)
								{
									HX_STACK_LINE(3381)
									::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
									HX_STACK_LINE(3381)
									li = li->next;
									HX_STACK_LINE(3381)
									{
										HX_STACK_LINE(3381)
										g->x = (b1->posx + (((b1->axisy * l->x) - (b1->axisx * l->y))));
										HX_STACK_LINE(3381)
										g->y = (b1->posy + (((l->x * b1->axisx) + (l->y * b1->axisy))));
									}
								}
								HX_STACK_LINE(3381)
								cx_ite = cx_ite->next;
							}
						}
						HX_STACK_LINE(3381)
						::zpp_nape::util::ZNPNode_ZPP_Edge ite = p->edges->head;		HX_STACK_VAR(ite,"ite");
						HX_STACK_LINE(3381)
						{
							HX_STACK_LINE(3381)
							::zpp_nape::geom::ZPP_Vec2 cx_ite = p->gverts->next;		HX_STACK_VAR(cx_ite,"cx_ite");
							HX_STACK_LINE(3381)
							::zpp_nape::geom::ZPP_Vec2 u = cx_ite;		HX_STACK_VAR(u,"u");
							HX_STACK_LINE(3381)
							cx_ite = cx_ite->next;
							HX_STACK_LINE(3381)
							while(((cx_ite != null()))){
								HX_STACK_LINE(3381)
								::zpp_nape::geom::ZPP_Vec2 v = cx_ite;		HX_STACK_VAR(v,"v");
								HX_STACK_LINE(3381)
								{
									HX_STACK_LINE(3381)
									::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
									HX_STACK_LINE(3381)
									ite = ite->next;
									HX_STACK_LINE(3381)
									{
										HX_STACK_LINE(3381)
										e->gnormx = ((b1->axisy * e->lnormx) - (b1->axisx * e->lnormy));
										HX_STACK_LINE(3381)
										e->gnormy = ((e->lnormx * b1->axisx) + (e->lnormy * b1->axisy));
									}
									HX_STACK_LINE(3381)
									e->gprojection = (((b1->posx * e->gnormx) + (b1->posy * e->gnormy)) + e->lprojection);
									HX_STACK_LINE(3381)
									e->tp0 = ((u->y * e->gnormx) - (u->x * e->gnormy));
									HX_STACK_LINE(3381)
									e->tp1 = ((v->y * e->gnormx) - (v->x * e->gnormy));
								}
								HX_STACK_LINE(3381)
								u = v;
								HX_STACK_LINE(3381)
								cx_ite = cx_ite->next;
							}
							HX_STACK_LINE(3381)
							::zpp_nape::geom::ZPP_Vec2 v = p->gverts->next;		HX_STACK_VAR(v,"v");
							HX_STACK_LINE(3381)
							{
								HX_STACK_LINE(3381)
								::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
								HX_STACK_LINE(3381)
								ite = ite->next;
								HX_STACK_LINE(3381)
								{
									HX_STACK_LINE(3381)
									e->gnormx = ((b1->axisy * e->lnormx) - (b1->axisx * e->lnormy));
									HX_STACK_LINE(3381)
									e->gnormy = ((e->lnormx * b1->axisx) + (e->lnormy * b1->axisy));
								}
								HX_STACK_LINE(3381)
								e->gprojection = (((b1->posx * e->gnormx) + (b1->posy * e->gnormy)) + e->lprojection);
								HX_STACK_LINE(3381)
								e->tp0 = ((u->y * e->gnormx) - (u->x * e->gnormy));
								HX_STACK_LINE(3381)
								e->tp1 = ((v->y * e->gnormx) - (v->x * e->gnormy));
							}
						}
					}
				}
			}
			HX_STACK_LINE(3383)
			if ((!(b2->sweepFrozen))){
				HX_STACK_LINE(3384)
				{
					HX_STACK_LINE(3384)
					Float dt = (curTimeAlpha * deltaTime);		HX_STACK_VAR(dt,"dt");
					HX_STACK_LINE(3384)
					Float delta = (dt - b2->sweepTime);		HX_STACK_VAR(delta,"delta");
					HX_STACK_LINE(3384)
					if (((delta != (int)0))){
						HX_STACK_LINE(3384)
						{
						}
						HX_STACK_LINE(3384)
						b2->sweepTime = dt;
						HX_STACK_LINE(3384)
						{
							HX_STACK_LINE(3384)
							Float t = delta;		HX_STACK_VAR(t,"t");
							HX_STACK_LINE(3384)
							{
							}
							HX_STACK_LINE(3384)
							hx::AddEq(b2->posx,(b2->velx * t));
							HX_STACK_LINE(3384)
							hx::AddEq(b2->posy,(b2->vely * t));
						}
						HX_STACK_LINE(3384)
						if (((b2->angvel != (int)0))){
							HX_STACK_LINE(3384)
							Float dr = (b2->sweep_angvel * delta);		HX_STACK_VAR(dr,"dr");
							HX_STACK_LINE(3384)
							hx::AddEq(b2->rot,dr);
							HX_STACK_LINE(3384)
							if ((((dr * dr) > 0.0001))){
								HX_STACK_LINE(3384)
								b2->axisx = ::Math_obj::sin(b2->rot);
								HX_STACK_LINE(3384)
								b2->axisy = ::Math_obj::cos(b2->rot);
								HX_STACK_LINE(3384)
								{
								}
								HX_STACK_LINE(3384)
								Dynamic();
							}
							else{
								HX_STACK_LINE(3384)
								Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
								HX_STACK_LINE(3384)
								Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
								HX_STACK_LINE(3384)
								Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
								HX_STACK_LINE(3384)
								Float nx = ((((p * b2->axisx) + (dr * b2->axisy))) * m);		HX_STACK_VAR(nx,"nx");
								HX_STACK_LINE(3384)
								b2->axisy = ((((p * b2->axisy) - (dr * b2->axisx))) * m);
								HX_STACK_LINE(3384)
								b2->axisx = nx;
							}
						}
					}
				}
				HX_STACK_LINE(3385)
				{
					HX_STACK_LINE(3385)
					::zpp_nape::shape::ZPP_Shape s = minTOI->s2;		HX_STACK_VAR(s,"s");
					HX_STACK_LINE(3385)
					{
					}
					HX_STACK_LINE(3385)
					if (((s->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE))){
						HX_STACK_LINE(3385)
						s->worldCOMx = (b2->posx + (((b2->axisy * s->localCOMx) - (b2->axisx * s->localCOMy))));
						HX_STACK_LINE(3385)
						s->worldCOMy = (b2->posy + (((s->localCOMx * b2->axisx) + (s->localCOMy * b2->axisy))));
					}
					else{
						HX_STACK_LINE(3385)
						::zpp_nape::shape::ZPP_Polygon p = s->polygon;		HX_STACK_VAR(p,"p");
						HX_STACK_LINE(3385)
						::zpp_nape::geom::ZPP_Vec2 li = p->lverts->next;		HX_STACK_VAR(li,"li");
						HX_STACK_LINE(3385)
						{
							HX_STACK_LINE(3385)
							::zpp_nape::geom::ZPP_Vec2 cx_ite = p->gverts->next;		HX_STACK_VAR(cx_ite,"cx_ite");
							HX_STACK_LINE(3385)
							while(((cx_ite != null()))){
								HX_STACK_LINE(3385)
								::zpp_nape::geom::ZPP_Vec2 g = cx_ite;		HX_STACK_VAR(g,"g");
								HX_STACK_LINE(3385)
								{
									HX_STACK_LINE(3385)
									::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
									HX_STACK_LINE(3385)
									li = li->next;
									HX_STACK_LINE(3385)
									{
										HX_STACK_LINE(3385)
										g->x = (b2->posx + (((b2->axisy * l->x) - (b2->axisx * l->y))));
										HX_STACK_LINE(3385)
										g->y = (b2->posy + (((l->x * b2->axisx) + (l->y * b2->axisy))));
									}
								}
								HX_STACK_LINE(3385)
								cx_ite = cx_ite->next;
							}
						}
						HX_STACK_LINE(3385)
						::zpp_nape::util::ZNPNode_ZPP_Edge ite = p->edges->head;		HX_STACK_VAR(ite,"ite");
						HX_STACK_LINE(3385)
						{
							HX_STACK_LINE(3385)
							::zpp_nape::geom::ZPP_Vec2 cx_ite = p->gverts->next;		HX_STACK_VAR(cx_ite,"cx_ite");
							HX_STACK_LINE(3385)
							::zpp_nape::geom::ZPP_Vec2 u = cx_ite;		HX_STACK_VAR(u,"u");
							HX_STACK_LINE(3385)
							cx_ite = cx_ite->next;
							HX_STACK_LINE(3385)
							while(((cx_ite != null()))){
								HX_STACK_LINE(3385)
								::zpp_nape::geom::ZPP_Vec2 v = cx_ite;		HX_STACK_VAR(v,"v");
								HX_STACK_LINE(3385)
								{
									HX_STACK_LINE(3385)
									::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
									HX_STACK_LINE(3385)
									ite = ite->next;
									HX_STACK_LINE(3385)
									{
										HX_STACK_LINE(3385)
										e->gnormx = ((b2->axisy * e->lnormx) - (b2->axisx * e->lnormy));
										HX_STACK_LINE(3385)
										e->gnormy = ((e->lnormx * b2->axisx) + (e->lnormy * b2->axisy));
									}
									HX_STACK_LINE(3385)
									e->gprojection = (((b2->posx * e->gnormx) + (b2->posy * e->gnormy)) + e->lprojection);
									HX_STACK_LINE(3385)
									e->tp0 = ((u->y * e->gnormx) - (u->x * e->gnormy));
									HX_STACK_LINE(3385)
									e->tp1 = ((v->y * e->gnormx) - (v->x * e->gnormy));
								}
								HX_STACK_LINE(3385)
								u = v;
								HX_STACK_LINE(3385)
								cx_ite = cx_ite->next;
							}
							HX_STACK_LINE(3385)
							::zpp_nape::geom::ZPP_Vec2 v = p->gverts->next;		HX_STACK_VAR(v,"v");
							HX_STACK_LINE(3385)
							{
								HX_STACK_LINE(3385)
								::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
								HX_STACK_LINE(3385)
								ite = ite->next;
								HX_STACK_LINE(3385)
								{
									HX_STACK_LINE(3385)
									e->gnormx = ((b2->axisy * e->lnormx) - (b2->axisx * e->lnormy));
									HX_STACK_LINE(3385)
									e->gnormy = ((e->lnormx * b2->axisx) + (e->lnormy * b2->axisy));
								}
								HX_STACK_LINE(3385)
								e->gprojection = (((b2->posx * e->gnormx) + (b2->posy * e->gnormy)) + e->lprojection);
								HX_STACK_LINE(3385)
								e->tp0 = ((u->y * e->gnormx) - (u->x * e->gnormy));
								HX_STACK_LINE(3385)
								e->tp1 = ((v->y * e->gnormx) - (v->x * e->gnormy));
							}
						}
					}
				}
			}
			HX_STACK_LINE(3387)
			bool wasnull = (minTOI->arbiter == null());		HX_STACK_VAR(wasnull,"wasnull");
			HX_STACK_LINE(3388)
			::zpp_nape::dynamics::ZPP_Arbiter arb = this->narrowPhase(minTOI->s1,minTOI->s2,true,minTOI->arbiter,true);		HX_STACK_VAR(arb,"arb");
			HX_STACK_LINE(3389)
			if (((arb == null()))){
				HX_STACK_LINE(3389)
				if (((bool((minTOI->arbiter != null())) && bool((minTOI->arbiter->pair != null()))))){
					HX_STACK_LINE(3391)
					minTOI->arbiter->pair->arb = null();
					HX_STACK_LINE(3392)
					minTOI->arbiter->pair = null();
				}
			}
			else{
				HX_STACK_LINE(3395)
				if ((!(this->presteparb(arb,deltaTime,true)))){
					HX_STACK_LINE(3396)
					if (((bool((arb->type == ::zpp_nape::dynamics::ZPP_Arbiter_obj::COL)) && bool(((bool(arb->active) && bool((((int(arb->immState) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT))) != (int)0)))))))){
						HX_STACK_LINE(3398)
						{
							HX_STACK_LINE(3398)
							::zpp_nape::dynamics::ZPP_ColArbiter _this = arb->colarb;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(3398)
							{
								HX_STACK_LINE(3398)
								Float jx = ((_this->nx * _this->c1->jnAcc) - (_this->ny * _this->c1->jtAcc));		HX_STACK_VAR(jx,"jx");
								HX_STACK_LINE(3398)
								Float jy = ((_this->ny * _this->c1->jnAcc) + (_this->nx * _this->c1->jtAcc));		HX_STACK_VAR(jy,"jy");
								HX_STACK_LINE(3398)
								{
									HX_STACK_LINE(3398)
									Float t = _this->b1->imass;		HX_STACK_VAR(t,"t");
									HX_STACK_LINE(3398)
									{
									}
									HX_STACK_LINE(3398)
									hx::SubEq(_this->b1->velx,(jx * t));
									HX_STACK_LINE(3398)
									hx::SubEq(_this->b1->vely,(jy * t));
								}
								HX_STACK_LINE(3398)
								hx::SubEq(_this->b1->angvel,(_this->b1->iinertia * (((jy * _this->c1->r1x) - (jx * _this->c1->r1y)))));
								HX_STACK_LINE(3398)
								{
									HX_STACK_LINE(3398)
									Float t = _this->b2->imass;		HX_STACK_VAR(t,"t");
									HX_STACK_LINE(3398)
									{
									}
									HX_STACK_LINE(3398)
									hx::AddEq(_this->b2->velx,(jx * t));
									HX_STACK_LINE(3398)
									hx::AddEq(_this->b2->vely,(jy * t));
								}
								HX_STACK_LINE(3398)
								hx::AddEq(_this->b2->angvel,(_this->b2->iinertia * (((jy * _this->c1->r2x) - (jx * _this->c1->r2y)))));
							}
							HX_STACK_LINE(3398)
							if ((_this->hc2)){
								HX_STACK_LINE(3398)
								Float jx = ((_this->nx * _this->c2->jnAcc) - (_this->ny * _this->c2->jtAcc));		HX_STACK_VAR(jx,"jx");
								HX_STACK_LINE(3398)
								Float jy = ((_this->ny * _this->c2->jnAcc) + (_this->nx * _this->c2->jtAcc));		HX_STACK_VAR(jy,"jy");
								HX_STACK_LINE(3398)
								{
									HX_STACK_LINE(3398)
									Float t = _this->b1->imass;		HX_STACK_VAR(t,"t");
									HX_STACK_LINE(3398)
									{
									}
									HX_STACK_LINE(3398)
									hx::SubEq(_this->b1->velx,(jx * t));
									HX_STACK_LINE(3398)
									hx::SubEq(_this->b1->vely,(jy * t));
								}
								HX_STACK_LINE(3398)
								hx::SubEq(_this->b1->angvel,(_this->b1->iinertia * (((jy * _this->c2->r1x) - (jx * _this->c2->r1y)))));
								HX_STACK_LINE(3398)
								{
									HX_STACK_LINE(3398)
									Float t = _this->b2->imass;		HX_STACK_VAR(t,"t");
									HX_STACK_LINE(3398)
									{
									}
									HX_STACK_LINE(3398)
									hx::AddEq(_this->b2->velx,(jx * t));
									HX_STACK_LINE(3398)
									hx::AddEq(_this->b2->vely,(jy * t));
								}
								HX_STACK_LINE(3398)
								hx::AddEq(_this->b2->angvel,(_this->b2->iinertia * (((jy * _this->c2->r2x) - (jx * _this->c2->r2y)))));
							}
							HX_STACK_LINE(3398)
							hx::AddEq(_this->b2->angvel,(_this->jrAcc * _this->b2->iinertia));
							HX_STACK_LINE(3398)
							hx::SubEq(_this->b1->angvel,(_this->jrAcc * _this->b1->iinertia));
						}
						HX_STACK_LINE(3399)
						{
							HX_STACK_LINE(3399)
							::zpp_nape::dynamics::ZPP_ColArbiter _this = arb->colarb;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(3399)
							Float jx;		HX_STACK_VAR(jx,"jx");
							HX_STACK_LINE(3399)
							Float jy;		HX_STACK_VAR(jy,"jy");
							HX_STACK_LINE(3399)
							Float j;		HX_STACK_VAR(j,"j");
							HX_STACK_LINE(3399)
							Float jMax;		HX_STACK_VAR(jMax,"jMax");
							HX_STACK_LINE(3399)
							Float jOld;		HX_STACK_VAR(jOld,"jOld");
							HX_STACK_LINE(3399)
							Float cjAcc;		HX_STACK_VAR(cjAcc,"cjAcc");
							HX_STACK_LINE(3399)
							Float v1x = (((_this->k1x + _this->b2->velx) - (_this->c1->r2y * _this->b2->angvel)) - ((_this->b1->velx - (_this->c1->r1y * _this->b1->angvel))));		HX_STACK_VAR(v1x,"v1x");
							HX_STACK_LINE(3399)
							Float v1y = (((_this->k1y + _this->b2->vely) + (_this->c1->r2x * _this->b2->angvel)) - ((_this->b1->vely + (_this->c1->r1x * _this->b1->angvel))));		HX_STACK_VAR(v1y,"v1y");
							HX_STACK_LINE(3399)
							j = (((((v1y * _this->nx) - (v1x * _this->ny)) + _this->surfacex)) * _this->c1->tMass);
							HX_STACK_LINE(3399)
							jMax = (_this->c1->friction * _this->c1->jnAcc);
							HX_STACK_LINE(3399)
							jOld = _this->c1->jtAcc;
							HX_STACK_LINE(3399)
							cjAcc = (jOld - j);
							HX_STACK_LINE(3399)
							if (((cjAcc > jMax))){
								HX_STACK_LINE(3399)
								cjAcc = jMax;
							}
							else{
								HX_STACK_LINE(3399)
								if (((cjAcc < -(jMax)))){
									HX_STACK_LINE(3399)
									cjAcc = -(jMax);
								}
							}
							HX_STACK_LINE(3399)
							j = (cjAcc - jOld);
							HX_STACK_LINE(3399)
							_this->c1->jtAcc = cjAcc;
							HX_STACK_LINE(3399)
							jx = (-(_this->ny) * j);
							HX_STACK_LINE(3399)
							jy = (_this->nx * j);
							HX_STACK_LINE(3399)
							hx::AddEq(_this->b2->velx,(jx * _this->b2->imass));
							HX_STACK_LINE(3399)
							hx::AddEq(_this->b2->vely,(jy * _this->b2->imass));
							HX_STACK_LINE(3399)
							hx::SubEq(_this->b1->velx,(jx * _this->b1->imass));
							HX_STACK_LINE(3399)
							hx::SubEq(_this->b1->vely,(jy * _this->b1->imass));
							HX_STACK_LINE(3399)
							hx::AddEq(_this->b2->angvel,((_this->rt1b * j) * _this->b2->iinertia));
							HX_STACK_LINE(3399)
							hx::SubEq(_this->b1->angvel,((_this->rt1a * j) * _this->b1->iinertia));
							HX_STACK_LINE(3399)
							if ((_this->hc2)){
								HX_STACK_LINE(3399)
								Float v2x = (((_this->k2x + _this->b2->velx) - (_this->c2->r2y * _this->b2->angvel)) - ((_this->b1->velx - (_this->c2->r1y * _this->b1->angvel))));		HX_STACK_VAR(v2x,"v2x");
								HX_STACK_LINE(3399)
								Float v2y = (((_this->k2y + _this->b2->vely) + (_this->c2->r2x * _this->b2->angvel)) - ((_this->b1->vely + (_this->c2->r1x * _this->b1->angvel))));		HX_STACK_VAR(v2y,"v2y");
								HX_STACK_LINE(3399)
								j = (((((v2y * _this->nx) - (v2x * _this->ny)) + _this->surfacex)) * _this->c2->tMass);
								HX_STACK_LINE(3399)
								jMax = (_this->c2->friction * _this->c2->jnAcc);
								HX_STACK_LINE(3399)
								jOld = _this->c2->jtAcc;
								HX_STACK_LINE(3399)
								cjAcc = (jOld - j);
								HX_STACK_LINE(3399)
								if (((cjAcc > jMax))){
									HX_STACK_LINE(3399)
									cjAcc = jMax;
								}
								else{
									HX_STACK_LINE(3399)
									if (((cjAcc < -(jMax)))){
										HX_STACK_LINE(3399)
										cjAcc = -(jMax);
									}
								}
								HX_STACK_LINE(3399)
								j = (cjAcc - jOld);
								HX_STACK_LINE(3399)
								_this->c2->jtAcc = cjAcc;
								HX_STACK_LINE(3399)
								jx = (-(_this->ny) * j);
								HX_STACK_LINE(3399)
								jy = (_this->nx * j);
								HX_STACK_LINE(3399)
								hx::AddEq(_this->b2->velx,(jx * _this->b2->imass));
								HX_STACK_LINE(3399)
								hx::AddEq(_this->b2->vely,(jy * _this->b2->imass));
								HX_STACK_LINE(3399)
								hx::SubEq(_this->b1->velx,(jx * _this->b1->imass));
								HX_STACK_LINE(3399)
								hx::SubEq(_this->b1->vely,(jy * _this->b1->imass));
								HX_STACK_LINE(3399)
								hx::AddEq(_this->b2->angvel,((_this->rt2b * j) * _this->b2->iinertia));
								HX_STACK_LINE(3399)
								hx::SubEq(_this->b1->angvel,((_this->rt2a * j) * _this->b1->iinertia));
								HX_STACK_LINE(3399)
								v1x = (((_this->k1x + _this->b2->velx) - (_this->c1->r2y * _this->b2->angvel)) - ((_this->b1->velx - (_this->c1->r1y * _this->b1->angvel))));
								HX_STACK_LINE(3399)
								v1y = (((_this->k1y + _this->b2->vely) + (_this->c1->r2x * _this->b2->angvel)) - ((_this->b1->vely + (_this->c1->r1x * _this->b1->angvel))));
								HX_STACK_LINE(3399)
								v2x = (((_this->k2x + _this->b2->velx) - (_this->c2->r2y * _this->b2->angvel)) - ((_this->b1->velx - (_this->c2->r1y * _this->b1->angvel))));
								HX_STACK_LINE(3399)
								v2y = (((_this->k2y + _this->b2->vely) + (_this->c2->r2x * _this->b2->angvel)) - ((_this->b1->vely + (_this->c2->r1x * _this->b1->angvel))));
								HX_STACK_LINE(3399)
								Float ax = _this->c1->jnAcc;		HX_STACK_VAR(ax,"ax");
								HX_STACK_LINE(3399)
								Float ay = _this->c2->jnAcc;		HX_STACK_VAR(ay,"ay");
								HX_STACK_LINE(3399)
								{
								}
								HX_STACK_LINE(3399)
								{
								}
								HX_STACK_LINE(3399)
								Float jnx = (((((v1x * _this->nx) + (v1y * _this->ny)) + _this->surfacey) + _this->c1->bounce) - (((_this->Ka * ax) + (_this->Kb * ay))));		HX_STACK_VAR(jnx,"jnx");
								HX_STACK_LINE(3399)
								Float jny = (((((v2x * _this->nx) + (v2y * _this->ny)) + _this->surfacey) + _this->c2->bounce) - (((_this->Kb * ax) + (_this->Kc * ay))));		HX_STACK_VAR(jny,"jny");
								HX_STACK_LINE(3399)
								Float xx = -((((_this->kMassa * jnx) + (_this->kMassb * jny))));		HX_STACK_VAR(xx,"xx");
								HX_STACK_LINE(3399)
								Float xy = -((((_this->kMassb * jnx) + (_this->kMassc * jny))));		HX_STACK_VAR(xy,"xy");
								HX_STACK_LINE(3399)
								if (((bool((xx >= (int)0)) && bool((xy >= (int)0))))){
									HX_STACK_LINE(3399)
									{
										HX_STACK_LINE(3399)
										jnx = (xx - ax);
										HX_STACK_LINE(3399)
										jny = (xy - ay);
									}
									HX_STACK_LINE(3399)
									_this->c1->jnAcc = xx;
									HX_STACK_LINE(3399)
									_this->c2->jnAcc = xy;
								}
								else{
									HX_STACK_LINE(3399)
									xx = (-(_this->c1->nMass) * jnx);
									HX_STACK_LINE(3399)
									if (((bool((xx >= (int)0)) && bool((((_this->Kb * xx) + jny) >= (int)0))))){
										HX_STACK_LINE(3399)
										jnx = (xx - ax);
										HX_STACK_LINE(3399)
										jny = -(ay);
										HX_STACK_LINE(3399)
										_this->c1->jnAcc = xx;
										HX_STACK_LINE(3399)
										_this->c2->jnAcc = (int)0;
									}
									else{
										HX_STACK_LINE(3399)
										xy = (-(_this->c2->nMass) * jny);
										HX_STACK_LINE(3399)
										if (((bool((xy >= (int)0)) && bool((((_this->Kb * xy) + jnx) >= (int)0))))){
											HX_STACK_LINE(3399)
											jnx = -(ax);
											HX_STACK_LINE(3399)
											jny = (xy - ay);
											HX_STACK_LINE(3399)
											_this->c1->jnAcc = (int)0;
											HX_STACK_LINE(3399)
											_this->c2->jnAcc = xy;
										}
										else{
											HX_STACK_LINE(3399)
											if (((bool((jnx >= (int)0)) && bool((jny >= (int)0))))){
												HX_STACK_LINE(3399)
												jnx = -(ax);
												HX_STACK_LINE(3399)
												jny = -(ay);
												HX_STACK_LINE(3399)
												_this->c1->jnAcc = _this->c2->jnAcc = (int)0;
											}
											else{
												HX_STACK_LINE(3399)
												jnx = (int)0;
												HX_STACK_LINE(3399)
												jny = (int)0;
											}
										}
									}
								}
								HX_STACK_LINE(3399)
								j = (jnx + jny);
								HX_STACK_LINE(3399)
								jx = (_this->nx * j);
								HX_STACK_LINE(3399)
								jy = (_this->ny * j);
								HX_STACK_LINE(3399)
								hx::AddEq(_this->b2->velx,(jx * _this->b2->imass));
								HX_STACK_LINE(3399)
								hx::AddEq(_this->b2->vely,(jy * _this->b2->imass));
								HX_STACK_LINE(3399)
								hx::SubEq(_this->b1->velx,(jx * _this->b1->imass));
								HX_STACK_LINE(3399)
								hx::SubEq(_this->b1->vely,(jy * _this->b1->imass));
								HX_STACK_LINE(3399)
								hx::AddEq(_this->b2->angvel,((((_this->rn1b * jnx) + (_this->rn2b * jny))) * _this->b2->iinertia));
								HX_STACK_LINE(3399)
								hx::SubEq(_this->b1->angvel,((((_this->rn1a * jnx) + (_this->rn2a * jny))) * _this->b1->iinertia));
							}
							else{
								HX_STACK_LINE(3399)
								if (((_this->radius != 0.0))){
									HX_STACK_LINE(3399)
									Float dw = (_this->b2->angvel - _this->b1->angvel);		HX_STACK_VAR(dw,"dw");
									HX_STACK_LINE(3399)
									j = (dw * _this->rMass);
									HX_STACK_LINE(3399)
									jMax = (_this->rfric * _this->c1->jnAcc);
									HX_STACK_LINE(3399)
									jOld = _this->jrAcc;
									HX_STACK_LINE(3399)
									hx::SubEq(_this->jrAcc,j);
									HX_STACK_LINE(3399)
									if (((_this->jrAcc > jMax))){
										HX_STACK_LINE(3399)
										_this->jrAcc = jMax;
									}
									else{
										HX_STACK_LINE(3399)
										if (((_this->jrAcc < -(jMax)))){
											HX_STACK_LINE(3399)
											_this->jrAcc = -(jMax);
										}
									}
									HX_STACK_LINE(3399)
									j = (_this->jrAcc - jOld);
									HX_STACK_LINE(3399)
									hx::AddEq(_this->b2->angvel,(j * _this->b2->iinertia));
									HX_STACK_LINE(3399)
									hx::SubEq(_this->b1->angvel,(j * _this->b1->iinertia));
								}
								HX_STACK_LINE(3399)
								v1x = (((_this->k1x + _this->b2->velx) - (_this->c1->r2y * _this->b2->angvel)) - ((_this->b1->velx - (_this->c1->r1y * _this->b1->angvel))));
								HX_STACK_LINE(3399)
								v1y = (((_this->k1y + _this->b2->vely) + (_this->c1->r2x * _this->b2->angvel)) - ((_this->b1->vely + (_this->c1->r1x * _this->b1->angvel))));
								HX_STACK_LINE(3399)
								j = ((((_this->c1->bounce + (((_this->nx * v1x) + (_this->ny * v1y)))) + _this->surfacey)) * _this->c1->nMass);
								HX_STACK_LINE(3399)
								jOld = _this->c1->jnAcc;
								HX_STACK_LINE(3399)
								cjAcc = (jOld - j);
								HX_STACK_LINE(3399)
								if (((cjAcc < 0.0))){
									HX_STACK_LINE(3399)
									cjAcc = 0.0;
								}
								HX_STACK_LINE(3399)
								j = (cjAcc - jOld);
								HX_STACK_LINE(3399)
								_this->c1->jnAcc = cjAcc;
								HX_STACK_LINE(3399)
								jx = (_this->nx * j);
								HX_STACK_LINE(3399)
								jy = (_this->ny * j);
								HX_STACK_LINE(3399)
								hx::AddEq(_this->b2->velx,(jx * _this->b2->imass));
								HX_STACK_LINE(3399)
								hx::AddEq(_this->b2->vely,(jy * _this->b2->imass));
								HX_STACK_LINE(3399)
								hx::SubEq(_this->b1->velx,(jx * _this->b1->imass));
								HX_STACK_LINE(3399)
								hx::SubEq(_this->b1->vely,(jy * _this->b1->imass));
								HX_STACK_LINE(3399)
								hx::AddEq(_this->b2->angvel,((_this->rn1b * j) * _this->b2->iinertia));
								HX_STACK_LINE(3399)
								hx::SubEq(_this->b1->angvel,((_this->rn1a * j) * _this->b1->iinertia));
							}
						}
						HX_STACK_LINE(3400)
						{
							HX_STACK_LINE(3400)
							::zpp_nape::dynamics::ZPP_ColArbiter _this = arb->colarb;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(3400)
							Float jx;		HX_STACK_VAR(jx,"jx");
							HX_STACK_LINE(3400)
							Float jy;		HX_STACK_VAR(jy,"jy");
							HX_STACK_LINE(3400)
							Float j;		HX_STACK_VAR(j,"j");
							HX_STACK_LINE(3400)
							Float jMax;		HX_STACK_VAR(jMax,"jMax");
							HX_STACK_LINE(3400)
							Float jOld;		HX_STACK_VAR(jOld,"jOld");
							HX_STACK_LINE(3400)
							Float cjAcc;		HX_STACK_VAR(cjAcc,"cjAcc");
							HX_STACK_LINE(3400)
							Float v1x = (((_this->k1x + _this->b2->velx) - (_this->c1->r2y * _this->b2->angvel)) - ((_this->b1->velx - (_this->c1->r1y * _this->b1->angvel))));		HX_STACK_VAR(v1x,"v1x");
							HX_STACK_LINE(3400)
							Float v1y = (((_this->k1y + _this->b2->vely) + (_this->c1->r2x * _this->b2->angvel)) - ((_this->b1->vely + (_this->c1->r1x * _this->b1->angvel))));		HX_STACK_VAR(v1y,"v1y");
							HX_STACK_LINE(3400)
							j = (((((v1y * _this->nx) - (v1x * _this->ny)) + _this->surfacex)) * _this->c1->tMass);
							HX_STACK_LINE(3400)
							jMax = (_this->c1->friction * _this->c1->jnAcc);
							HX_STACK_LINE(3400)
							jOld = _this->c1->jtAcc;
							HX_STACK_LINE(3400)
							cjAcc = (jOld - j);
							HX_STACK_LINE(3400)
							if (((cjAcc > jMax))){
								HX_STACK_LINE(3400)
								cjAcc = jMax;
							}
							else{
								HX_STACK_LINE(3400)
								if (((cjAcc < -(jMax)))){
									HX_STACK_LINE(3400)
									cjAcc = -(jMax);
								}
							}
							HX_STACK_LINE(3400)
							j = (cjAcc - jOld);
							HX_STACK_LINE(3400)
							_this->c1->jtAcc = cjAcc;
							HX_STACK_LINE(3400)
							jx = (-(_this->ny) * j);
							HX_STACK_LINE(3400)
							jy = (_this->nx * j);
							HX_STACK_LINE(3400)
							hx::AddEq(_this->b2->velx,(jx * _this->b2->imass));
							HX_STACK_LINE(3400)
							hx::AddEq(_this->b2->vely,(jy * _this->b2->imass));
							HX_STACK_LINE(3400)
							hx::SubEq(_this->b1->velx,(jx * _this->b1->imass));
							HX_STACK_LINE(3400)
							hx::SubEq(_this->b1->vely,(jy * _this->b1->imass));
							HX_STACK_LINE(3400)
							hx::AddEq(_this->b2->angvel,((_this->rt1b * j) * _this->b2->iinertia));
							HX_STACK_LINE(3400)
							hx::SubEq(_this->b1->angvel,((_this->rt1a * j) * _this->b1->iinertia));
							HX_STACK_LINE(3400)
							if ((_this->hc2)){
								HX_STACK_LINE(3400)
								Float v2x = (((_this->k2x + _this->b2->velx) - (_this->c2->r2y * _this->b2->angvel)) - ((_this->b1->velx - (_this->c2->r1y * _this->b1->angvel))));		HX_STACK_VAR(v2x,"v2x");
								HX_STACK_LINE(3400)
								Float v2y = (((_this->k2y + _this->b2->vely) + (_this->c2->r2x * _this->b2->angvel)) - ((_this->b1->vely + (_this->c2->r1x * _this->b1->angvel))));		HX_STACK_VAR(v2y,"v2y");
								HX_STACK_LINE(3400)
								j = (((((v2y * _this->nx) - (v2x * _this->ny)) + _this->surfacex)) * _this->c2->tMass);
								HX_STACK_LINE(3400)
								jMax = (_this->c2->friction * _this->c2->jnAcc);
								HX_STACK_LINE(3400)
								jOld = _this->c2->jtAcc;
								HX_STACK_LINE(3400)
								cjAcc = (jOld - j);
								HX_STACK_LINE(3400)
								if (((cjAcc > jMax))){
									HX_STACK_LINE(3400)
									cjAcc = jMax;
								}
								else{
									HX_STACK_LINE(3400)
									if (((cjAcc < -(jMax)))){
										HX_STACK_LINE(3400)
										cjAcc = -(jMax);
									}
								}
								HX_STACK_LINE(3400)
								j = (cjAcc - jOld);
								HX_STACK_LINE(3400)
								_this->c2->jtAcc = cjAcc;
								HX_STACK_LINE(3400)
								jx = (-(_this->ny) * j);
								HX_STACK_LINE(3400)
								jy = (_this->nx * j);
								HX_STACK_LINE(3400)
								hx::AddEq(_this->b2->velx,(jx * _this->b2->imass));
								HX_STACK_LINE(3400)
								hx::AddEq(_this->b2->vely,(jy * _this->b2->imass));
								HX_STACK_LINE(3400)
								hx::SubEq(_this->b1->velx,(jx * _this->b1->imass));
								HX_STACK_LINE(3400)
								hx::SubEq(_this->b1->vely,(jy * _this->b1->imass));
								HX_STACK_LINE(3400)
								hx::AddEq(_this->b2->angvel,((_this->rt2b * j) * _this->b2->iinertia));
								HX_STACK_LINE(3400)
								hx::SubEq(_this->b1->angvel,((_this->rt2a * j) * _this->b1->iinertia));
								HX_STACK_LINE(3400)
								v1x = (((_this->k1x + _this->b2->velx) - (_this->c1->r2y * _this->b2->angvel)) - ((_this->b1->velx - (_this->c1->r1y * _this->b1->angvel))));
								HX_STACK_LINE(3400)
								v1y = (((_this->k1y + _this->b2->vely) + (_this->c1->r2x * _this->b2->angvel)) - ((_this->b1->vely + (_this->c1->r1x * _this->b1->angvel))));
								HX_STACK_LINE(3400)
								v2x = (((_this->k2x + _this->b2->velx) - (_this->c2->r2y * _this->b2->angvel)) - ((_this->b1->velx - (_this->c2->r1y * _this->b1->angvel))));
								HX_STACK_LINE(3400)
								v2y = (((_this->k2y + _this->b2->vely) + (_this->c2->r2x * _this->b2->angvel)) - ((_this->b1->vely + (_this->c2->r1x * _this->b1->angvel))));
								HX_STACK_LINE(3400)
								Float ax = _this->c1->jnAcc;		HX_STACK_VAR(ax,"ax");
								HX_STACK_LINE(3400)
								Float ay = _this->c2->jnAcc;		HX_STACK_VAR(ay,"ay");
								HX_STACK_LINE(3400)
								{
								}
								HX_STACK_LINE(3400)
								{
								}
								HX_STACK_LINE(3400)
								Float jnx = (((((v1x * _this->nx) + (v1y * _this->ny)) + _this->surfacey) + _this->c1->bounce) - (((_this->Ka * ax) + (_this->Kb * ay))));		HX_STACK_VAR(jnx,"jnx");
								HX_STACK_LINE(3400)
								Float jny = (((((v2x * _this->nx) + (v2y * _this->ny)) + _this->surfacey) + _this->c2->bounce) - (((_this->Kb * ax) + (_this->Kc * ay))));		HX_STACK_VAR(jny,"jny");
								HX_STACK_LINE(3400)
								Float xx = -((((_this->kMassa * jnx) + (_this->kMassb * jny))));		HX_STACK_VAR(xx,"xx");
								HX_STACK_LINE(3400)
								Float xy = -((((_this->kMassb * jnx) + (_this->kMassc * jny))));		HX_STACK_VAR(xy,"xy");
								HX_STACK_LINE(3400)
								if (((bool((xx >= (int)0)) && bool((xy >= (int)0))))){
									HX_STACK_LINE(3400)
									{
										HX_STACK_LINE(3400)
										jnx = (xx - ax);
										HX_STACK_LINE(3400)
										jny = (xy - ay);
									}
									HX_STACK_LINE(3400)
									_this->c1->jnAcc = xx;
									HX_STACK_LINE(3400)
									_this->c2->jnAcc = xy;
								}
								else{
									HX_STACK_LINE(3400)
									xx = (-(_this->c1->nMass) * jnx);
									HX_STACK_LINE(3400)
									if (((bool((xx >= (int)0)) && bool((((_this->Kb * xx) + jny) >= (int)0))))){
										HX_STACK_LINE(3400)
										jnx = (xx - ax);
										HX_STACK_LINE(3400)
										jny = -(ay);
										HX_STACK_LINE(3400)
										_this->c1->jnAcc = xx;
										HX_STACK_LINE(3400)
										_this->c2->jnAcc = (int)0;
									}
									else{
										HX_STACK_LINE(3400)
										xy = (-(_this->c2->nMass) * jny);
										HX_STACK_LINE(3400)
										if (((bool((xy >= (int)0)) && bool((((_this->Kb * xy) + jnx) >= (int)0))))){
											HX_STACK_LINE(3400)
											jnx = -(ax);
											HX_STACK_LINE(3400)
											jny = (xy - ay);
											HX_STACK_LINE(3400)
											_this->c1->jnAcc = (int)0;
											HX_STACK_LINE(3400)
											_this->c2->jnAcc = xy;
										}
										else{
											HX_STACK_LINE(3400)
											if (((bool((jnx >= (int)0)) && bool((jny >= (int)0))))){
												HX_STACK_LINE(3400)
												jnx = -(ax);
												HX_STACK_LINE(3400)
												jny = -(ay);
												HX_STACK_LINE(3400)
												_this->c1->jnAcc = _this->c2->jnAcc = (int)0;
											}
											else{
												HX_STACK_LINE(3400)
												jnx = (int)0;
												HX_STACK_LINE(3400)
												jny = (int)0;
											}
										}
									}
								}
								HX_STACK_LINE(3400)
								j = (jnx + jny);
								HX_STACK_LINE(3400)
								jx = (_this->nx * j);
								HX_STACK_LINE(3400)
								jy = (_this->ny * j);
								HX_STACK_LINE(3400)
								hx::AddEq(_this->b2->velx,(jx * _this->b2->imass));
								HX_STACK_LINE(3400)
								hx::AddEq(_this->b2->vely,(jy * _this->b2->imass));
								HX_STACK_LINE(3400)
								hx::SubEq(_this->b1->velx,(jx * _this->b1->imass));
								HX_STACK_LINE(3400)
								hx::SubEq(_this->b1->vely,(jy * _this->b1->imass));
								HX_STACK_LINE(3400)
								hx::AddEq(_this->b2->angvel,((((_this->rn1b * jnx) + (_this->rn2b * jny))) * _this->b2->iinertia));
								HX_STACK_LINE(3400)
								hx::SubEq(_this->b1->angvel,((((_this->rn1a * jnx) + (_this->rn2a * jny))) * _this->b1->iinertia));
							}
							else{
								HX_STACK_LINE(3400)
								if (((_this->radius != 0.0))){
									HX_STACK_LINE(3400)
									Float dw = (_this->b2->angvel - _this->b1->angvel);		HX_STACK_VAR(dw,"dw");
									HX_STACK_LINE(3400)
									j = (dw * _this->rMass);
									HX_STACK_LINE(3400)
									jMax = (_this->rfric * _this->c1->jnAcc);
									HX_STACK_LINE(3400)
									jOld = _this->jrAcc;
									HX_STACK_LINE(3400)
									hx::SubEq(_this->jrAcc,j);
									HX_STACK_LINE(3400)
									if (((_this->jrAcc > jMax))){
										HX_STACK_LINE(3400)
										_this->jrAcc = jMax;
									}
									else{
										HX_STACK_LINE(3400)
										if (((_this->jrAcc < -(jMax)))){
											HX_STACK_LINE(3400)
											_this->jrAcc = -(jMax);
										}
									}
									HX_STACK_LINE(3400)
									j = (_this->jrAcc - jOld);
									HX_STACK_LINE(3400)
									hx::AddEq(_this->b2->angvel,(j * _this->b2->iinertia));
									HX_STACK_LINE(3400)
									hx::SubEq(_this->b1->angvel,(j * _this->b1->iinertia));
								}
								HX_STACK_LINE(3400)
								v1x = (((_this->k1x + _this->b2->velx) - (_this->c1->r2y * _this->b2->angvel)) - ((_this->b1->velx - (_this->c1->r1y * _this->b1->angvel))));
								HX_STACK_LINE(3400)
								v1y = (((_this->k1y + _this->b2->vely) + (_this->c1->r2x * _this->b2->angvel)) - ((_this->b1->vely + (_this->c1->r1x * _this->b1->angvel))));
								HX_STACK_LINE(3400)
								j = ((((_this->c1->bounce + (((_this->nx * v1x) + (_this->ny * v1y)))) + _this->surfacey)) * _this->c1->nMass);
								HX_STACK_LINE(3400)
								jOld = _this->c1->jnAcc;
								HX_STACK_LINE(3400)
								cjAcc = (jOld - j);
								HX_STACK_LINE(3400)
								if (((cjAcc < 0.0))){
									HX_STACK_LINE(3400)
									cjAcc = 0.0;
								}
								HX_STACK_LINE(3400)
								j = (cjAcc - jOld);
								HX_STACK_LINE(3400)
								_this->c1->jnAcc = cjAcc;
								HX_STACK_LINE(3400)
								jx = (_this->nx * j);
								HX_STACK_LINE(3400)
								jy = (_this->ny * j);
								HX_STACK_LINE(3400)
								hx::AddEq(_this->b2->velx,(jx * _this->b2->imass));
								HX_STACK_LINE(3400)
								hx::AddEq(_this->b2->vely,(jy * _this->b2->imass));
								HX_STACK_LINE(3400)
								hx::SubEq(_this->b1->velx,(jx * _this->b1->imass));
								HX_STACK_LINE(3400)
								hx::SubEq(_this->b1->vely,(jy * _this->b1->imass));
								HX_STACK_LINE(3400)
								hx::AddEq(_this->b2->angvel,((_this->rn1b * j) * _this->b2->iinertia));
								HX_STACK_LINE(3400)
								hx::SubEq(_this->b1->angvel,((_this->rn1a * j) * _this->b1->iinertia));
							}
						}
						HX_STACK_LINE(3401)
						{
							HX_STACK_LINE(3401)
							::zpp_nape::dynamics::ZPP_ColArbiter _this = arb->colarb;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(3401)
							Float jx;		HX_STACK_VAR(jx,"jx");
							HX_STACK_LINE(3401)
							Float jy;		HX_STACK_VAR(jy,"jy");
							HX_STACK_LINE(3401)
							Float j;		HX_STACK_VAR(j,"j");
							HX_STACK_LINE(3401)
							Float jMax;		HX_STACK_VAR(jMax,"jMax");
							HX_STACK_LINE(3401)
							Float jOld;		HX_STACK_VAR(jOld,"jOld");
							HX_STACK_LINE(3401)
							Float cjAcc;		HX_STACK_VAR(cjAcc,"cjAcc");
							HX_STACK_LINE(3401)
							Float v1x = (((_this->k1x + _this->b2->velx) - (_this->c1->r2y * _this->b2->angvel)) - ((_this->b1->velx - (_this->c1->r1y * _this->b1->angvel))));		HX_STACK_VAR(v1x,"v1x");
							HX_STACK_LINE(3401)
							Float v1y = (((_this->k1y + _this->b2->vely) + (_this->c1->r2x * _this->b2->angvel)) - ((_this->b1->vely + (_this->c1->r1x * _this->b1->angvel))));		HX_STACK_VAR(v1y,"v1y");
							HX_STACK_LINE(3401)
							j = (((((v1y * _this->nx) - (v1x * _this->ny)) + _this->surfacex)) * _this->c1->tMass);
							HX_STACK_LINE(3401)
							jMax = (_this->c1->friction * _this->c1->jnAcc);
							HX_STACK_LINE(3401)
							jOld = _this->c1->jtAcc;
							HX_STACK_LINE(3401)
							cjAcc = (jOld - j);
							HX_STACK_LINE(3401)
							if (((cjAcc > jMax))){
								HX_STACK_LINE(3401)
								cjAcc = jMax;
							}
							else{
								HX_STACK_LINE(3401)
								if (((cjAcc < -(jMax)))){
									HX_STACK_LINE(3401)
									cjAcc = -(jMax);
								}
							}
							HX_STACK_LINE(3401)
							j = (cjAcc - jOld);
							HX_STACK_LINE(3401)
							_this->c1->jtAcc = cjAcc;
							HX_STACK_LINE(3401)
							jx = (-(_this->ny) * j);
							HX_STACK_LINE(3401)
							jy = (_this->nx * j);
							HX_STACK_LINE(3401)
							hx::AddEq(_this->b2->velx,(jx * _this->b2->imass));
							HX_STACK_LINE(3401)
							hx::AddEq(_this->b2->vely,(jy * _this->b2->imass));
							HX_STACK_LINE(3401)
							hx::SubEq(_this->b1->velx,(jx * _this->b1->imass));
							HX_STACK_LINE(3401)
							hx::SubEq(_this->b1->vely,(jy * _this->b1->imass));
							HX_STACK_LINE(3401)
							hx::AddEq(_this->b2->angvel,((_this->rt1b * j) * _this->b2->iinertia));
							HX_STACK_LINE(3401)
							hx::SubEq(_this->b1->angvel,((_this->rt1a * j) * _this->b1->iinertia));
							HX_STACK_LINE(3401)
							if ((_this->hc2)){
								HX_STACK_LINE(3401)
								Float v2x = (((_this->k2x + _this->b2->velx) - (_this->c2->r2y * _this->b2->angvel)) - ((_this->b1->velx - (_this->c2->r1y * _this->b1->angvel))));		HX_STACK_VAR(v2x,"v2x");
								HX_STACK_LINE(3401)
								Float v2y = (((_this->k2y + _this->b2->vely) + (_this->c2->r2x * _this->b2->angvel)) - ((_this->b1->vely + (_this->c2->r1x * _this->b1->angvel))));		HX_STACK_VAR(v2y,"v2y");
								HX_STACK_LINE(3401)
								j = (((((v2y * _this->nx) - (v2x * _this->ny)) + _this->surfacex)) * _this->c2->tMass);
								HX_STACK_LINE(3401)
								jMax = (_this->c2->friction * _this->c2->jnAcc);
								HX_STACK_LINE(3401)
								jOld = _this->c2->jtAcc;
								HX_STACK_LINE(3401)
								cjAcc = (jOld - j);
								HX_STACK_LINE(3401)
								if (((cjAcc > jMax))){
									HX_STACK_LINE(3401)
									cjAcc = jMax;
								}
								else{
									HX_STACK_LINE(3401)
									if (((cjAcc < -(jMax)))){
										HX_STACK_LINE(3401)
										cjAcc = -(jMax);
									}
								}
								HX_STACK_LINE(3401)
								j = (cjAcc - jOld);
								HX_STACK_LINE(3401)
								_this->c2->jtAcc = cjAcc;
								HX_STACK_LINE(3401)
								jx = (-(_this->ny) * j);
								HX_STACK_LINE(3401)
								jy = (_this->nx * j);
								HX_STACK_LINE(3401)
								hx::AddEq(_this->b2->velx,(jx * _this->b2->imass));
								HX_STACK_LINE(3401)
								hx::AddEq(_this->b2->vely,(jy * _this->b2->imass));
								HX_STACK_LINE(3401)
								hx::SubEq(_this->b1->velx,(jx * _this->b1->imass));
								HX_STACK_LINE(3401)
								hx::SubEq(_this->b1->vely,(jy * _this->b1->imass));
								HX_STACK_LINE(3401)
								hx::AddEq(_this->b2->angvel,((_this->rt2b * j) * _this->b2->iinertia));
								HX_STACK_LINE(3401)
								hx::SubEq(_this->b1->angvel,((_this->rt2a * j) * _this->b1->iinertia));
								HX_STACK_LINE(3401)
								v1x = (((_this->k1x + _this->b2->velx) - (_this->c1->r2y * _this->b2->angvel)) - ((_this->b1->velx - (_this->c1->r1y * _this->b1->angvel))));
								HX_STACK_LINE(3401)
								v1y = (((_this->k1y + _this->b2->vely) + (_this->c1->r2x * _this->b2->angvel)) - ((_this->b1->vely + (_this->c1->r1x * _this->b1->angvel))));
								HX_STACK_LINE(3401)
								v2x = (((_this->k2x + _this->b2->velx) - (_this->c2->r2y * _this->b2->angvel)) - ((_this->b1->velx - (_this->c2->r1y * _this->b1->angvel))));
								HX_STACK_LINE(3401)
								v2y = (((_this->k2y + _this->b2->vely) + (_this->c2->r2x * _this->b2->angvel)) - ((_this->b1->vely + (_this->c2->r1x * _this->b1->angvel))));
								HX_STACK_LINE(3401)
								Float ax = _this->c1->jnAcc;		HX_STACK_VAR(ax,"ax");
								HX_STACK_LINE(3401)
								Float ay = _this->c2->jnAcc;		HX_STACK_VAR(ay,"ay");
								HX_STACK_LINE(3401)
								{
								}
								HX_STACK_LINE(3401)
								{
								}
								HX_STACK_LINE(3401)
								Float jnx = (((((v1x * _this->nx) + (v1y * _this->ny)) + _this->surfacey) + _this->c1->bounce) - (((_this->Ka * ax) + (_this->Kb * ay))));		HX_STACK_VAR(jnx,"jnx");
								HX_STACK_LINE(3401)
								Float jny = (((((v2x * _this->nx) + (v2y * _this->ny)) + _this->surfacey) + _this->c2->bounce) - (((_this->Kb * ax) + (_this->Kc * ay))));		HX_STACK_VAR(jny,"jny");
								HX_STACK_LINE(3401)
								Float xx = -((((_this->kMassa * jnx) + (_this->kMassb * jny))));		HX_STACK_VAR(xx,"xx");
								HX_STACK_LINE(3401)
								Float xy = -((((_this->kMassb * jnx) + (_this->kMassc * jny))));		HX_STACK_VAR(xy,"xy");
								HX_STACK_LINE(3401)
								if (((bool((xx >= (int)0)) && bool((xy >= (int)0))))){
									HX_STACK_LINE(3401)
									{
										HX_STACK_LINE(3401)
										jnx = (xx - ax);
										HX_STACK_LINE(3401)
										jny = (xy - ay);
									}
									HX_STACK_LINE(3401)
									_this->c1->jnAcc = xx;
									HX_STACK_LINE(3401)
									_this->c2->jnAcc = xy;
								}
								else{
									HX_STACK_LINE(3401)
									xx = (-(_this->c1->nMass) * jnx);
									HX_STACK_LINE(3401)
									if (((bool((xx >= (int)0)) && bool((((_this->Kb * xx) + jny) >= (int)0))))){
										HX_STACK_LINE(3401)
										jnx = (xx - ax);
										HX_STACK_LINE(3401)
										jny = -(ay);
										HX_STACK_LINE(3401)
										_this->c1->jnAcc = xx;
										HX_STACK_LINE(3401)
										_this->c2->jnAcc = (int)0;
									}
									else{
										HX_STACK_LINE(3401)
										xy = (-(_this->c2->nMass) * jny);
										HX_STACK_LINE(3401)
										if (((bool((xy >= (int)0)) && bool((((_this->Kb * xy) + jnx) >= (int)0))))){
											HX_STACK_LINE(3401)
											jnx = -(ax);
											HX_STACK_LINE(3401)
											jny = (xy - ay);
											HX_STACK_LINE(3401)
											_this->c1->jnAcc = (int)0;
											HX_STACK_LINE(3401)
											_this->c2->jnAcc = xy;
										}
										else{
											HX_STACK_LINE(3401)
											if (((bool((jnx >= (int)0)) && bool((jny >= (int)0))))){
												HX_STACK_LINE(3401)
												jnx = -(ax);
												HX_STACK_LINE(3401)
												jny = -(ay);
												HX_STACK_LINE(3401)
												_this->c1->jnAcc = _this->c2->jnAcc = (int)0;
											}
											else{
												HX_STACK_LINE(3401)
												jnx = (int)0;
												HX_STACK_LINE(3401)
												jny = (int)0;
											}
										}
									}
								}
								HX_STACK_LINE(3401)
								j = (jnx + jny);
								HX_STACK_LINE(3401)
								jx = (_this->nx * j);
								HX_STACK_LINE(3401)
								jy = (_this->ny * j);
								HX_STACK_LINE(3401)
								hx::AddEq(_this->b2->velx,(jx * _this->b2->imass));
								HX_STACK_LINE(3401)
								hx::AddEq(_this->b2->vely,(jy * _this->b2->imass));
								HX_STACK_LINE(3401)
								hx::SubEq(_this->b1->velx,(jx * _this->b1->imass));
								HX_STACK_LINE(3401)
								hx::SubEq(_this->b1->vely,(jy * _this->b1->imass));
								HX_STACK_LINE(3401)
								hx::AddEq(_this->b2->angvel,((((_this->rn1b * jnx) + (_this->rn2b * jny))) * _this->b2->iinertia));
								HX_STACK_LINE(3401)
								hx::SubEq(_this->b1->angvel,((((_this->rn1a * jnx) + (_this->rn2a * jny))) * _this->b1->iinertia));
							}
							else{
								HX_STACK_LINE(3401)
								if (((_this->radius != 0.0))){
									HX_STACK_LINE(3401)
									Float dw = (_this->b2->angvel - _this->b1->angvel);		HX_STACK_VAR(dw,"dw");
									HX_STACK_LINE(3401)
									j = (dw * _this->rMass);
									HX_STACK_LINE(3401)
									jMax = (_this->rfric * _this->c1->jnAcc);
									HX_STACK_LINE(3401)
									jOld = _this->jrAcc;
									HX_STACK_LINE(3401)
									hx::SubEq(_this->jrAcc,j);
									HX_STACK_LINE(3401)
									if (((_this->jrAcc > jMax))){
										HX_STACK_LINE(3401)
										_this->jrAcc = jMax;
									}
									else{
										HX_STACK_LINE(3401)
										if (((_this->jrAcc < -(jMax)))){
											HX_STACK_LINE(3401)
											_this->jrAcc = -(jMax);
										}
									}
									HX_STACK_LINE(3401)
									j = (_this->jrAcc - jOld);
									HX_STACK_LINE(3401)
									hx::AddEq(_this->b2->angvel,(j * _this->b2->iinertia));
									HX_STACK_LINE(3401)
									hx::SubEq(_this->b1->angvel,(j * _this->b1->iinertia));
								}
								HX_STACK_LINE(3401)
								v1x = (((_this->k1x + _this->b2->velx) - (_this->c1->r2y * _this->b2->angvel)) - ((_this->b1->velx - (_this->c1->r1y * _this->b1->angvel))));
								HX_STACK_LINE(3401)
								v1y = (((_this->k1y + _this->b2->vely) + (_this->c1->r2x * _this->b2->angvel)) - ((_this->b1->vely + (_this->c1->r1x * _this->b1->angvel))));
								HX_STACK_LINE(3401)
								j = ((((_this->c1->bounce + (((_this->nx * v1x) + (_this->ny * v1y)))) + _this->surfacey)) * _this->c1->nMass);
								HX_STACK_LINE(3401)
								jOld = _this->c1->jnAcc;
								HX_STACK_LINE(3401)
								cjAcc = (jOld - j);
								HX_STACK_LINE(3401)
								if (((cjAcc < 0.0))){
									HX_STACK_LINE(3401)
									cjAcc = 0.0;
								}
								HX_STACK_LINE(3401)
								j = (cjAcc - jOld);
								HX_STACK_LINE(3401)
								_this->c1->jnAcc = cjAcc;
								HX_STACK_LINE(3401)
								jx = (_this->nx * j);
								HX_STACK_LINE(3401)
								jy = (_this->ny * j);
								HX_STACK_LINE(3401)
								hx::AddEq(_this->b2->velx,(jx * _this->b2->imass));
								HX_STACK_LINE(3401)
								hx::AddEq(_this->b2->vely,(jy * _this->b2->imass));
								HX_STACK_LINE(3401)
								hx::SubEq(_this->b1->velx,(jx * _this->b1->imass));
								HX_STACK_LINE(3401)
								hx::SubEq(_this->b1->vely,(jy * _this->b1->imass));
								HX_STACK_LINE(3401)
								hx::AddEq(_this->b2->angvel,((_this->rn1b * j) * _this->b2->iinertia));
								HX_STACK_LINE(3401)
								hx::SubEq(_this->b1->angvel,((_this->rn1a * j) * _this->b1->iinertia));
							}
						}
						HX_STACK_LINE(3402)
						{
							HX_STACK_LINE(3402)
							::zpp_nape::dynamics::ZPP_ColArbiter _this = arb->colarb;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(3402)
							Float jx;		HX_STACK_VAR(jx,"jx");
							HX_STACK_LINE(3402)
							Float jy;		HX_STACK_VAR(jy,"jy");
							HX_STACK_LINE(3402)
							Float j;		HX_STACK_VAR(j,"j");
							HX_STACK_LINE(3402)
							Float jMax;		HX_STACK_VAR(jMax,"jMax");
							HX_STACK_LINE(3402)
							Float jOld;		HX_STACK_VAR(jOld,"jOld");
							HX_STACK_LINE(3402)
							Float cjAcc;		HX_STACK_VAR(cjAcc,"cjAcc");
							HX_STACK_LINE(3402)
							Float v1x = (((_this->k1x + _this->b2->velx) - (_this->c1->r2y * _this->b2->angvel)) - ((_this->b1->velx - (_this->c1->r1y * _this->b1->angvel))));		HX_STACK_VAR(v1x,"v1x");
							HX_STACK_LINE(3402)
							Float v1y = (((_this->k1y + _this->b2->vely) + (_this->c1->r2x * _this->b2->angvel)) - ((_this->b1->vely + (_this->c1->r1x * _this->b1->angvel))));		HX_STACK_VAR(v1y,"v1y");
							HX_STACK_LINE(3402)
							j = (((((v1y * _this->nx) - (v1x * _this->ny)) + _this->surfacex)) * _this->c1->tMass);
							HX_STACK_LINE(3402)
							jMax = (_this->c1->friction * _this->c1->jnAcc);
							HX_STACK_LINE(3402)
							jOld = _this->c1->jtAcc;
							HX_STACK_LINE(3402)
							cjAcc = (jOld - j);
							HX_STACK_LINE(3402)
							if (((cjAcc > jMax))){
								HX_STACK_LINE(3402)
								cjAcc = jMax;
							}
							else{
								HX_STACK_LINE(3402)
								if (((cjAcc < -(jMax)))){
									HX_STACK_LINE(3402)
									cjAcc = -(jMax);
								}
							}
							HX_STACK_LINE(3402)
							j = (cjAcc - jOld);
							HX_STACK_LINE(3402)
							_this->c1->jtAcc = cjAcc;
							HX_STACK_LINE(3402)
							jx = (-(_this->ny) * j);
							HX_STACK_LINE(3402)
							jy = (_this->nx * j);
							HX_STACK_LINE(3402)
							hx::AddEq(_this->b2->velx,(jx * _this->b2->imass));
							HX_STACK_LINE(3402)
							hx::AddEq(_this->b2->vely,(jy * _this->b2->imass));
							HX_STACK_LINE(3402)
							hx::SubEq(_this->b1->velx,(jx * _this->b1->imass));
							HX_STACK_LINE(3402)
							hx::SubEq(_this->b1->vely,(jy * _this->b1->imass));
							HX_STACK_LINE(3402)
							hx::AddEq(_this->b2->angvel,((_this->rt1b * j) * _this->b2->iinertia));
							HX_STACK_LINE(3402)
							hx::SubEq(_this->b1->angvel,((_this->rt1a * j) * _this->b1->iinertia));
							HX_STACK_LINE(3402)
							if ((_this->hc2)){
								HX_STACK_LINE(3402)
								Float v2x = (((_this->k2x + _this->b2->velx) - (_this->c2->r2y * _this->b2->angvel)) - ((_this->b1->velx - (_this->c2->r1y * _this->b1->angvel))));		HX_STACK_VAR(v2x,"v2x");
								HX_STACK_LINE(3402)
								Float v2y = (((_this->k2y + _this->b2->vely) + (_this->c2->r2x * _this->b2->angvel)) - ((_this->b1->vely + (_this->c2->r1x * _this->b1->angvel))));		HX_STACK_VAR(v2y,"v2y");
								HX_STACK_LINE(3402)
								j = (((((v2y * _this->nx) - (v2x * _this->ny)) + _this->surfacex)) * _this->c2->tMass);
								HX_STACK_LINE(3402)
								jMax = (_this->c2->friction * _this->c2->jnAcc);
								HX_STACK_LINE(3402)
								jOld = _this->c2->jtAcc;
								HX_STACK_LINE(3402)
								cjAcc = (jOld - j);
								HX_STACK_LINE(3402)
								if (((cjAcc > jMax))){
									HX_STACK_LINE(3402)
									cjAcc = jMax;
								}
								else{
									HX_STACK_LINE(3402)
									if (((cjAcc < -(jMax)))){
										HX_STACK_LINE(3402)
										cjAcc = -(jMax);
									}
								}
								HX_STACK_LINE(3402)
								j = (cjAcc - jOld);
								HX_STACK_LINE(3402)
								_this->c2->jtAcc = cjAcc;
								HX_STACK_LINE(3402)
								jx = (-(_this->ny) * j);
								HX_STACK_LINE(3402)
								jy = (_this->nx * j);
								HX_STACK_LINE(3402)
								hx::AddEq(_this->b2->velx,(jx * _this->b2->imass));
								HX_STACK_LINE(3402)
								hx::AddEq(_this->b2->vely,(jy * _this->b2->imass));
								HX_STACK_LINE(3402)
								hx::SubEq(_this->b1->velx,(jx * _this->b1->imass));
								HX_STACK_LINE(3402)
								hx::SubEq(_this->b1->vely,(jy * _this->b1->imass));
								HX_STACK_LINE(3402)
								hx::AddEq(_this->b2->angvel,((_this->rt2b * j) * _this->b2->iinertia));
								HX_STACK_LINE(3402)
								hx::SubEq(_this->b1->angvel,((_this->rt2a * j) * _this->b1->iinertia));
								HX_STACK_LINE(3402)
								v1x = (((_this->k1x + _this->b2->velx) - (_this->c1->r2y * _this->b2->angvel)) - ((_this->b1->velx - (_this->c1->r1y * _this->b1->angvel))));
								HX_STACK_LINE(3402)
								v1y = (((_this->k1y + _this->b2->vely) + (_this->c1->r2x * _this->b2->angvel)) - ((_this->b1->vely + (_this->c1->r1x * _this->b1->angvel))));
								HX_STACK_LINE(3402)
								v2x = (((_this->k2x + _this->b2->velx) - (_this->c2->r2y * _this->b2->angvel)) - ((_this->b1->velx - (_this->c2->r1y * _this->b1->angvel))));
								HX_STACK_LINE(3402)
								v2y = (((_this->k2y + _this->b2->vely) + (_this->c2->r2x * _this->b2->angvel)) - ((_this->b1->vely + (_this->c2->r1x * _this->b1->angvel))));
								HX_STACK_LINE(3402)
								Float ax = _this->c1->jnAcc;		HX_STACK_VAR(ax,"ax");
								HX_STACK_LINE(3402)
								Float ay = _this->c2->jnAcc;		HX_STACK_VAR(ay,"ay");
								HX_STACK_LINE(3402)
								{
								}
								HX_STACK_LINE(3402)
								{
								}
								HX_STACK_LINE(3402)
								Float jnx = (((((v1x * _this->nx) + (v1y * _this->ny)) + _this->surfacey) + _this->c1->bounce) - (((_this->Ka * ax) + (_this->Kb * ay))));		HX_STACK_VAR(jnx,"jnx");
								HX_STACK_LINE(3402)
								Float jny = (((((v2x * _this->nx) + (v2y * _this->ny)) + _this->surfacey) + _this->c2->bounce) - (((_this->Kb * ax) + (_this->Kc * ay))));		HX_STACK_VAR(jny,"jny");
								HX_STACK_LINE(3402)
								Float xx = -((((_this->kMassa * jnx) + (_this->kMassb * jny))));		HX_STACK_VAR(xx,"xx");
								HX_STACK_LINE(3402)
								Float xy = -((((_this->kMassb * jnx) + (_this->kMassc * jny))));		HX_STACK_VAR(xy,"xy");
								HX_STACK_LINE(3402)
								if (((bool((xx >= (int)0)) && bool((xy >= (int)0))))){
									HX_STACK_LINE(3402)
									{
										HX_STACK_LINE(3402)
										jnx = (xx - ax);
										HX_STACK_LINE(3402)
										jny = (xy - ay);
									}
									HX_STACK_LINE(3402)
									_this->c1->jnAcc = xx;
									HX_STACK_LINE(3402)
									_this->c2->jnAcc = xy;
								}
								else{
									HX_STACK_LINE(3402)
									xx = (-(_this->c1->nMass) * jnx);
									HX_STACK_LINE(3402)
									if (((bool((xx >= (int)0)) && bool((((_this->Kb * xx) + jny) >= (int)0))))){
										HX_STACK_LINE(3402)
										jnx = (xx - ax);
										HX_STACK_LINE(3402)
										jny = -(ay);
										HX_STACK_LINE(3402)
										_this->c1->jnAcc = xx;
										HX_STACK_LINE(3402)
										_this->c2->jnAcc = (int)0;
									}
									else{
										HX_STACK_LINE(3402)
										xy = (-(_this->c2->nMass) * jny);
										HX_STACK_LINE(3402)
										if (((bool((xy >= (int)0)) && bool((((_this->Kb * xy) + jnx) >= (int)0))))){
											HX_STACK_LINE(3402)
											jnx = -(ax);
											HX_STACK_LINE(3402)
											jny = (xy - ay);
											HX_STACK_LINE(3402)
											_this->c1->jnAcc = (int)0;
											HX_STACK_LINE(3402)
											_this->c2->jnAcc = xy;
										}
										else{
											HX_STACK_LINE(3402)
											if (((bool((jnx >= (int)0)) && bool((jny >= (int)0))))){
												HX_STACK_LINE(3402)
												jnx = -(ax);
												HX_STACK_LINE(3402)
												jny = -(ay);
												HX_STACK_LINE(3402)
												_this->c1->jnAcc = _this->c2->jnAcc = (int)0;
											}
											else{
												HX_STACK_LINE(3402)
												jnx = (int)0;
												HX_STACK_LINE(3402)
												jny = (int)0;
											}
										}
									}
								}
								HX_STACK_LINE(3402)
								j = (jnx + jny);
								HX_STACK_LINE(3402)
								jx = (_this->nx * j);
								HX_STACK_LINE(3402)
								jy = (_this->ny * j);
								HX_STACK_LINE(3402)
								hx::AddEq(_this->b2->velx,(jx * _this->b2->imass));
								HX_STACK_LINE(3402)
								hx::AddEq(_this->b2->vely,(jy * _this->b2->imass));
								HX_STACK_LINE(3402)
								hx::SubEq(_this->b1->velx,(jx * _this->b1->imass));
								HX_STACK_LINE(3402)
								hx::SubEq(_this->b1->vely,(jy * _this->b1->imass));
								HX_STACK_LINE(3402)
								hx::AddEq(_this->b2->angvel,((((_this->rn1b * jnx) + (_this->rn2b * jny))) * _this->b2->iinertia));
								HX_STACK_LINE(3402)
								hx::SubEq(_this->b1->angvel,((((_this->rn1a * jnx) + (_this->rn2a * jny))) * _this->b1->iinertia));
							}
							else{
								HX_STACK_LINE(3402)
								if (((_this->radius != 0.0))){
									HX_STACK_LINE(3402)
									Float dw = (_this->b2->angvel - _this->b1->angvel);		HX_STACK_VAR(dw,"dw");
									HX_STACK_LINE(3402)
									j = (dw * _this->rMass);
									HX_STACK_LINE(3402)
									jMax = (_this->rfric * _this->c1->jnAcc);
									HX_STACK_LINE(3402)
									jOld = _this->jrAcc;
									HX_STACK_LINE(3402)
									hx::SubEq(_this->jrAcc,j);
									HX_STACK_LINE(3402)
									if (((_this->jrAcc > jMax))){
										HX_STACK_LINE(3402)
										_this->jrAcc = jMax;
									}
									else{
										HX_STACK_LINE(3402)
										if (((_this->jrAcc < -(jMax)))){
											HX_STACK_LINE(3402)
											_this->jrAcc = -(jMax);
										}
									}
									HX_STACK_LINE(3402)
									j = (_this->jrAcc - jOld);
									HX_STACK_LINE(3402)
									hx::AddEq(_this->b2->angvel,(j * _this->b2->iinertia));
									HX_STACK_LINE(3402)
									hx::SubEq(_this->b1->angvel,(j * _this->b1->iinertia));
								}
								HX_STACK_LINE(3402)
								v1x = (((_this->k1x + _this->b2->velx) - (_this->c1->r2y * _this->b2->angvel)) - ((_this->b1->velx - (_this->c1->r1y * _this->b1->angvel))));
								HX_STACK_LINE(3402)
								v1y = (((_this->k1y + _this->b2->vely) + (_this->c1->r2x * _this->b2->angvel)) - ((_this->b1->vely + (_this->c1->r1x * _this->b1->angvel))));
								HX_STACK_LINE(3402)
								j = ((((_this->c1->bounce + (((_this->nx * v1x) + (_this->ny * v1y)))) + _this->surfacey)) * _this->c1->nMass);
								HX_STACK_LINE(3402)
								jOld = _this->c1->jnAcc;
								HX_STACK_LINE(3402)
								cjAcc = (jOld - j);
								HX_STACK_LINE(3402)
								if (((cjAcc < 0.0))){
									HX_STACK_LINE(3402)
									cjAcc = 0.0;
								}
								HX_STACK_LINE(3402)
								j = (cjAcc - jOld);
								HX_STACK_LINE(3402)
								_this->c1->jnAcc = cjAcc;
								HX_STACK_LINE(3402)
								jx = (_this->nx * j);
								HX_STACK_LINE(3402)
								jy = (_this->ny * j);
								HX_STACK_LINE(3402)
								hx::AddEq(_this->b2->velx,(jx * _this->b2->imass));
								HX_STACK_LINE(3402)
								hx::AddEq(_this->b2->vely,(jy * _this->b2->imass));
								HX_STACK_LINE(3402)
								hx::SubEq(_this->b1->velx,(jx * _this->b1->imass));
								HX_STACK_LINE(3402)
								hx::SubEq(_this->b1->vely,(jy * _this->b1->imass));
								HX_STACK_LINE(3402)
								hx::AddEq(_this->b2->angvel,((_this->rn1b * j) * _this->b2->iinertia));
								HX_STACK_LINE(3402)
								hx::SubEq(_this->b1->angvel,((_this->rn1a * j) * _this->b1->iinertia));
							}
						}
						HX_STACK_LINE(3403)
						b1->sweep_angvel = hx::Mod(b1->angvel,MAX_VEL);
						HX_STACK_LINE(3404)
						b2->sweep_angvel = hx::Mod(b2->angvel,MAX_VEL);
					}
				}
			}
			HX_STACK_LINE(3408)
			if (((bool((bool((arb != null())) && bool(((bool(arb->active) && bool((((int(arb->immState) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT))) != (int)0))))))) && bool((arb->type == ::zpp_nape::dynamics::ZPP_Arbiter_obj::COL))))){
				HX_STACK_LINE(3409)
				if (((bool(!(b1->sweepFrozen)) && bool(!(((b1->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC))))))){
					HX_STACK_LINE(3410)
					b1->sweepFrozen = true;
					HX_STACK_LINE(3411)
					if ((minTOI->failed)){
						HX_STACK_LINE(3411)
						b1->angvel = b1->sweep_angvel = (int)0;
					}
					else{
						HX_STACK_LINE(3412)
						if ((minTOI->slipped)){
							HX_STACK_LINE(3412)
							b1->angvel = hx::MultEq(b1->sweep_angvel,::nape::Config_obj::angularCCDSlipScale);
						}
						else{
							HX_STACK_LINE(3413)
							b1->angvel = b1->sweep_angvel;
						}
					}
				}
				HX_STACK_LINE(3415)
				if (((bool(!(b2->sweepFrozen)) && bool(!(((b2->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC))))))){
					HX_STACK_LINE(3416)
					b2->sweepFrozen = true;
					HX_STACK_LINE(3417)
					if ((minTOI->failed)){
						HX_STACK_LINE(3417)
						b2->angvel = b2->sweep_angvel = (int)0;
					}
					else{
						HX_STACK_LINE(3418)
						if ((minTOI->slipped)){
							HX_STACK_LINE(3418)
							b2->angvel = hx::MultEq(b2->sweep_angvel,::nape::Config_obj::angularCCDSlipScale);
						}
						else{
							HX_STACK_LINE(3419)
							b2->angvel = b2->sweep_angvel;
						}
					}
				}
			}
		}
		HX_STACK_LINE(3423)
		while((!(((this->toiEvents->head == null()))))){
			HX_STACK_LINE(3425)
			::zpp_nape::geom::ZPP_ToiEvent toi = this->toiEvents->pop_unsafe();		HX_STACK_VAR(toi,"toi");
			HX_STACK_LINE(3426)
			{
				HX_STACK_LINE(3428)
				::zpp_nape::geom::ZPP_ToiEvent o = toi;		HX_STACK_VAR(o,"o");
				HX_STACK_LINE(3429)
				{
				}
				HX_STACK_LINE(3438)
				o->next = ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool;
				HX_STACK_LINE(3439)
				::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool = o;
			}
		}
		HX_STACK_LINE(3447)
		{
			HX_STACK_LINE(3448)
			::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = this->kinematics->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(3449)
			while(((cx_ite != null()))){
				HX_STACK_LINE(3450)
				::zpp_nape::phys::ZPP_Body cur = cx_ite->elt;		HX_STACK_VAR(cur,"cur");
				HX_STACK_LINE(3451)
				{
					HX_STACK_LINE(3452)
					{
						HX_STACK_LINE(3452)
						Float delta = (deltaTime - cur->sweepTime);		HX_STACK_VAR(delta,"delta");
						HX_STACK_LINE(3452)
						if (((delta != (int)0))){
							HX_STACK_LINE(3452)
							{
							}
							HX_STACK_LINE(3452)
							cur->sweepTime = deltaTime;
							HX_STACK_LINE(3452)
							{
								HX_STACK_LINE(3452)
								Float t = delta;		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(3452)
								{
								}
								HX_STACK_LINE(3452)
								hx::AddEq(cur->posx,(cur->velx * t));
								HX_STACK_LINE(3452)
								hx::AddEq(cur->posy,(cur->vely * t));
							}
							HX_STACK_LINE(3452)
							if (((cur->angvel != (int)0))){
								HX_STACK_LINE(3452)
								Float dr = (cur->sweep_angvel * delta);		HX_STACK_VAR(dr,"dr");
								HX_STACK_LINE(3452)
								hx::AddEq(cur->rot,dr);
								HX_STACK_LINE(3452)
								if ((((dr * dr) > 0.0001))){
									HX_STACK_LINE(3452)
									cur->axisx = ::Math_obj::sin(cur->rot);
									HX_STACK_LINE(3452)
									cur->axisy = ::Math_obj::cos(cur->rot);
									HX_STACK_LINE(3452)
									{
									}
									HX_STACK_LINE(3452)
									Dynamic();
								}
								else{
									HX_STACK_LINE(3452)
									Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
									HX_STACK_LINE(3452)
									Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
									HX_STACK_LINE(3452)
									Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
									HX_STACK_LINE(3452)
									Float nx = ((((p * cur->axisx) + (dr * cur->axisy))) * m);		HX_STACK_VAR(nx,"nx");
									HX_STACK_LINE(3452)
									cur->axisy = ((((p * cur->axisy) - (dr * cur->axisx))) * m);
									HX_STACK_LINE(3452)
									cur->axisx = nx;
								}
							}
						}
					}
					HX_STACK_LINE(3453)
					cur->sweepTime = (int)0;
				}
				HX_STACK_LINE(3455)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(3458)
		{
			HX_STACK_LINE(3459)
			::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = this->live->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(3460)
			while(((cx_ite != null()))){
				HX_STACK_LINE(3461)
				::zpp_nape::phys::ZPP_Body cur = cx_ite->elt;		HX_STACK_VAR(cur,"cur");
				HX_STACK_LINE(3462)
				{
					HX_STACK_LINE(3463)
					if ((!(cur->sweepFrozen))){
						HX_STACK_LINE(3464)
						Float delta = (deltaTime - cur->sweepTime);		HX_STACK_VAR(delta,"delta");
						HX_STACK_LINE(3464)
						if (((delta != (int)0))){
							HX_STACK_LINE(3464)
							{
							}
							HX_STACK_LINE(3464)
							cur->sweepTime = deltaTime;
							HX_STACK_LINE(3464)
							{
								HX_STACK_LINE(3464)
								Float t = delta;		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(3464)
								{
								}
								HX_STACK_LINE(3464)
								hx::AddEq(cur->posx,(cur->velx * t));
								HX_STACK_LINE(3464)
								hx::AddEq(cur->posy,(cur->vely * t));
							}
							HX_STACK_LINE(3464)
							if (((cur->angvel != (int)0))){
								HX_STACK_LINE(3464)
								Float dr = (cur->sweep_angvel * delta);		HX_STACK_VAR(dr,"dr");
								HX_STACK_LINE(3464)
								hx::AddEq(cur->rot,dr);
								HX_STACK_LINE(3464)
								if ((((dr * dr) > 0.0001))){
									HX_STACK_LINE(3464)
									cur->axisx = ::Math_obj::sin(cur->rot);
									HX_STACK_LINE(3464)
									cur->axisy = ::Math_obj::cos(cur->rot);
									HX_STACK_LINE(3464)
									{
									}
									HX_STACK_LINE(3464)
									Dynamic();
								}
								else{
									HX_STACK_LINE(3464)
									Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
									HX_STACK_LINE(3464)
									Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
									HX_STACK_LINE(3464)
									Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
									HX_STACK_LINE(3464)
									Float nx = ((((p * cur->axisx) + (dr * cur->axisy))) * m);		HX_STACK_VAR(nx,"nx");
									HX_STACK_LINE(3464)
									cur->axisy = ((((p * cur->axisy) - (dr * cur->axisx))) * m);
									HX_STACK_LINE(3464)
									cur->axisx = nx;
								}
							}
						}
					}
					HX_STACK_LINE(3466)
					cur->sweepTime = (int)0;
				}
				HX_STACK_LINE(3468)
				cx_ite = cx_ite->next;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,continuousCollisions,(void))

Void ZPP_Space_obj::step( Float deltaTime,int velocityIterations,int positionIterations){
{
		HX_STACK_PUSH("ZPP_Space::step","zpp_nape/space/Space.hx",2928);
		HX_STACK_THIS(this);
		HX_STACK_ARG(deltaTime,"deltaTime");
		HX_STACK_ARG(velocityIterations,"velocityIterations");
		HX_STACK_ARG(positionIterations,"positionIterations");
		HX_STACK_LINE(2928)
		::zpp_nape::space::ZPP_Space _g = hx::ObjectPtr<OBJ_>(this);		HX_STACK_VAR(_g,"_g");
		HX_STACK_LINE(2930)
		if ((this->midstep)){
			HX_STACK_LINE(2930)
			hx::Throw (HX_CSTRING("Error: ... REALLY?? you're going to call space.step() inside of space.step()? COME ON!!"));
		}
		HX_STACK_LINE(2932)
		hx::AddEq(this->time,deltaTime);
		HX_STACK_LINE(2933)
		this->pre_dt = deltaTime;
		HX_STACK_LINE(2934)
		this->midstep = true;
		HX_STACK_LINE(2935)
		(this->stamp)++;
		HX_STACK_LINE(2938)
		this->validation();
		HX_STACK_LINE(2943)
		this->bphase->broadphase(hx::ObjectPtr<OBJ_>(this),true);
		HX_STACK_LINE(2953)
		this->prestep(deltaTime);
		HX_STACK_LINE(2958)
		if ((this->sortcontacts)){
			HX_STACK_LINE(2960)
			::zpp_nape::util::ZNPList_ZPP_ColArbiter xxlist = this->c_arbiters_false;		HX_STACK_VAR(xxlist,"xxlist");
			HX_STACK_LINE(2961)
			if (((bool(!(((xxlist->head == null())))) && bool((xxlist->head->next != null()))))){
				HX_STACK_LINE(2962)
				::zpp_nape::util::ZNPNode_ZPP_ColArbiter head = xxlist->head;		HX_STACK_VAR(head,"head");
				HX_STACK_LINE(2963)
				::zpp_nape::util::ZNPNode_ZPP_ColArbiter tail = null();		HX_STACK_VAR(tail,"tail");
				HX_STACK_LINE(2964)
				::zpp_nape::util::ZNPNode_ZPP_ColArbiter left = null();		HX_STACK_VAR(left,"left");
				HX_STACK_LINE(2965)
				::zpp_nape::util::ZNPNode_ZPP_ColArbiter right = null();		HX_STACK_VAR(right,"right");
				HX_STACK_LINE(2966)
				::zpp_nape::util::ZNPNode_ZPP_ColArbiter nxt = null();		HX_STACK_VAR(nxt,"nxt");
				HX_STACK_LINE(2967)
				int listSize = (int)1;		HX_STACK_VAR(listSize,"listSize");
				HX_STACK_LINE(2968)
				int numMerges;		HX_STACK_VAR(numMerges,"numMerges");
				int leftSize;		HX_STACK_VAR(leftSize,"leftSize");
				int rightSize;		HX_STACK_VAR(rightSize,"rightSize");
				HX_STACK_LINE(2969)
				do{
					HX_STACK_LINE(2970)
					numMerges = (int)0;
					HX_STACK_LINE(2971)
					left = head;
					HX_STACK_LINE(2972)
					tail = head = null();
					HX_STACK_LINE(2973)
					while(((left != null()))){
						HX_STACK_LINE(2974)
						(numMerges)++;
						HX_STACK_LINE(2975)
						right = left;
						HX_STACK_LINE(2976)
						leftSize = (int)0;
						HX_STACK_LINE(2977)
						rightSize = listSize;
						HX_STACK_LINE(2978)
						while(((bool((right != null())) && bool((leftSize < listSize))))){
							HX_STACK_LINE(2979)
							(leftSize)++;
							HX_STACK_LINE(2980)
							right = right->next;
						}
						HX_STACK_LINE(2982)
						while(((bool((leftSize > (int)0)) || bool((bool((rightSize > (int)0)) && bool((right != null()))))))){
							HX_STACK_LINE(2983)
							if (((leftSize == (int)0))){
								HX_STACK_LINE(2984)
								nxt = right;
								HX_STACK_LINE(2985)
								right = right->next;
								HX_STACK_LINE(2986)
								(rightSize)--;
							}
							else{
								HX_STACK_LINE(2988)
								if (((bool((rightSize == (int)0)) || bool((right == null()))))){
									HX_STACK_LINE(2989)
									nxt = left;
									HX_STACK_LINE(2990)
									left = left->next;
									HX_STACK_LINE(2991)
									(leftSize)--;
								}
								else{
									HX_STACK_LINE(2993)
									if (((  (((bool(left->elt->active) && bool(right->elt->active)))) ? bool((left->elt->oc1->dist < right->elt->oc1->dist)) : bool(true) ))){
										HX_STACK_LINE(2996)
										nxt = left;
										HX_STACK_LINE(2997)
										left = left->next;
										HX_STACK_LINE(2998)
										(leftSize)--;
									}
									else{
										HX_STACK_LINE(3001)
										nxt = right;
										HX_STACK_LINE(3002)
										right = right->next;
										HX_STACK_LINE(3003)
										(rightSize)--;
									}
								}
							}
							HX_STACK_LINE(3005)
							if (((tail != null()))){
								HX_STACK_LINE(3005)
								tail->next = nxt;
							}
							else{
								HX_STACK_LINE(3006)
								head = nxt;
							}
							HX_STACK_LINE(3007)
							tail = nxt;
						}
						HX_STACK_LINE(3009)
						left = right;
					}
					HX_STACK_LINE(3011)
					tail->next = null();
					HX_STACK_LINE(3012)
					hx::ShlEq(listSize,(int)1);
				}
while(((numMerges > (int)1)));
				HX_STACK_LINE(3015)
				{
					HX_STACK_LINE(3015)
					xxlist->head = head;
					HX_STACK_LINE(3015)
					xxlist->modified = true;
					HX_STACK_LINE(3015)
					xxlist->pushmod = true;
				}
			}
		}
		HX_STACK_LINE(3021)
		this->updateVel(deltaTime);
		HX_STACK_LINE(3022)
		this->warmStart();
		HX_STACK_LINE(3025)
		this->iterateVel(velocityIterations);
		HX_STACK_LINE(3028)
		{
			HX_STACK_LINE(3030)
			::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = this->kinematics->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(3031)
			while(((cx_ite != null()))){
				HX_STACK_LINE(3032)
				::zpp_nape::phys::ZPP_Body cur = cx_ite->elt;		HX_STACK_VAR(cur,"cur");
				HX_STACK_LINE(3033)
				{
					HX_STACK_LINE(3034)
					{
						HX_STACK_LINE(3035)
						cur->pre_posx = cur->posx;
						HX_STACK_LINE(3036)
						cur->pre_posy = cur->posy;
						HX_STACK_LINE(3037)
						{
						}
						HX_STACK_LINE(3045)
						{
						}
					}
					HX_STACK_LINE(3054)
					cur->pre_rot = cur->rot;
				}
				HX_STACK_LINE(3056)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(3060)
		{
			HX_STACK_LINE(3062)
			::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = this->live->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(3063)
			while(((cx_ite != null()))){
				HX_STACK_LINE(3064)
				::zpp_nape::phys::ZPP_Body cur = cx_ite->elt;		HX_STACK_VAR(cur,"cur");
				HX_STACK_LINE(3065)
				{
					HX_STACK_LINE(3066)
					{
						HX_STACK_LINE(3067)
						cur->pre_posx = cur->posx;
						HX_STACK_LINE(3068)
						cur->pre_posy = cur->posy;
						HX_STACK_LINE(3069)
						{
						}
						HX_STACK_LINE(3077)
						{
						}
					}
					HX_STACK_LINE(3086)
					cur->pre_rot = cur->rot;
				}
				HX_STACK_LINE(3088)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(3092)
		this->updatePos(deltaTime);
		HX_STACK_LINE(3093)
		this->continuous = true;
		HX_STACK_LINE(3094)
		this->continuousCollisions(deltaTime);
		HX_STACK_LINE(3095)
		this->continuous = false;
		HX_STACK_LINE(3098)
		this->iteratePos(positionIterations);
		HX_STACK_LINE(3101)
		{
			HX_STACK_LINE(3103)
			::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = this->kinematics->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(3104)
			while(((cx_ite != null()))){
				HX_STACK_LINE(3105)
				::zpp_nape::phys::ZPP_Body cur = cx_ite->elt;		HX_STACK_VAR(cur,"cur");
				HX_STACK_LINE(3106)
				{
					HX_STACK_LINE(3107)
					bool upos = !(((bool((cur->posx == cur->pre_posx)) && bool((cur->posy == cur->pre_posy)))));		HX_STACK_VAR(upos,"upos");
					HX_STACK_LINE(3108)
					bool urot = (cur->pre_rot != cur->rot);		HX_STACK_VAR(urot,"urot");
					HX_STACK_LINE(3109)
					if ((upos)){
						HX_STACK_LINE(3109)
						{
							HX_STACK_LINE(3109)
							::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite1 = cur->shapes->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
							HX_STACK_LINE(3109)
							while(((cx_ite1 != null()))){
								HX_STACK_LINE(3109)
								::zpp_nape::shape::ZPP_Shape s = cx_ite1->elt;		HX_STACK_VAR(s,"s");
								HX_STACK_LINE(3109)
								{
									HX_STACK_LINE(3109)
									if (((s->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_POLYGON))){
										HX_STACK_LINE(3109)
										s->polygon->invalidate_gverts();
										HX_STACK_LINE(3109)
										s->polygon->invalidate_gaxi();
									}
									HX_STACK_LINE(3109)
									s->invalidate_worldCOM();
								}
								HX_STACK_LINE(3109)
								cx_ite1 = cx_ite1->next;
							}
						}
						HX_STACK_LINE(3109)
						cur->zip_worldCOM = true;
					}
					HX_STACK_LINE(3110)
					if ((urot)){
						HX_STACK_LINE(3110)
						cur->zip_axis = true;
						HX_STACK_LINE(3110)
						{
							HX_STACK_LINE(3110)
							::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite1 = cur->shapes->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
							HX_STACK_LINE(3110)
							while(((cx_ite1 != null()))){
								HX_STACK_LINE(3110)
								::zpp_nape::shape::ZPP_Shape s = cx_ite1->elt;		HX_STACK_VAR(s,"s");
								HX_STACK_LINE(3110)
								{
									HX_STACK_LINE(3110)
									if (((s->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_POLYGON))){
										HX_STACK_LINE(3110)
										s->polygon->invalidate_gverts();
										HX_STACK_LINE(3110)
										s->polygon->invalidate_gaxi();
									}
									HX_STACK_LINE(3110)
									s->invalidate_worldCOM();
								}
								HX_STACK_LINE(3110)
								cx_ite1 = cx_ite1->next;
							}
						}
						HX_STACK_LINE(3110)
						cur->zip_worldCOM = true;
					}
				}
				HX_STACK_LINE(3112)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(3116)
		{
			HX_STACK_LINE(3118)
			::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = this->live->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(3119)
			while(((cx_ite != null()))){
				HX_STACK_LINE(3120)
				::zpp_nape::phys::ZPP_Body cur = cx_ite->elt;		HX_STACK_VAR(cur,"cur");
				HX_STACK_LINE(3121)
				{
					HX_STACK_LINE(3122)
					bool upos = !(((bool((cur->posx == cur->pre_posx)) && bool((cur->posy == cur->pre_posy)))));		HX_STACK_VAR(upos,"upos");
					HX_STACK_LINE(3123)
					bool urot = (cur->pre_rot != cur->rot);		HX_STACK_VAR(urot,"urot");
					HX_STACK_LINE(3124)
					if ((upos)){
						HX_STACK_LINE(3124)
						{
							HX_STACK_LINE(3124)
							::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite1 = cur->shapes->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
							HX_STACK_LINE(3124)
							while(((cx_ite1 != null()))){
								HX_STACK_LINE(3124)
								::zpp_nape::shape::ZPP_Shape s = cx_ite1->elt;		HX_STACK_VAR(s,"s");
								HX_STACK_LINE(3124)
								{
									HX_STACK_LINE(3124)
									if (((s->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_POLYGON))){
										HX_STACK_LINE(3124)
										s->polygon->invalidate_gverts();
										HX_STACK_LINE(3124)
										s->polygon->invalidate_gaxi();
									}
									HX_STACK_LINE(3124)
									s->invalidate_worldCOM();
								}
								HX_STACK_LINE(3124)
								cx_ite1 = cx_ite1->next;
							}
						}
						HX_STACK_LINE(3124)
						cur->zip_worldCOM = true;
					}
					HX_STACK_LINE(3125)
					if ((urot)){
						HX_STACK_LINE(3125)
						cur->zip_axis = true;
						HX_STACK_LINE(3125)
						{
							HX_STACK_LINE(3125)
							::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite1 = cur->shapes->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
							HX_STACK_LINE(3125)
							while(((cx_ite1 != null()))){
								HX_STACK_LINE(3125)
								::zpp_nape::shape::ZPP_Shape s = cx_ite1->elt;		HX_STACK_VAR(s,"s");
								HX_STACK_LINE(3125)
								{
									HX_STACK_LINE(3125)
									if (((s->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_POLYGON))){
										HX_STACK_LINE(3125)
										s->polygon->invalidate_gverts();
										HX_STACK_LINE(3125)
										s->polygon->invalidate_gaxi();
									}
									HX_STACK_LINE(3125)
									s->invalidate_worldCOM();
								}
								HX_STACK_LINE(3125)
								cx_ite1 = cx_ite1->next;
							}
						}
						HX_STACK_LINE(3125)
						cur->zip_worldCOM = true;
					}
				}
				HX_STACK_LINE(3127)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(3131)
		::zpp_nape::util::ZNPNode_ZPP_Body pre = null();		HX_STACK_VAR(pre,"pre");
		HX_STACK_LINE(3132)
		{
			HX_STACK_LINE(3133)
			::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = this->staticsleep->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(3134)
			while(((cx_ite != null()))){
				HX_STACK_LINE(3135)
				::zpp_nape::phys::ZPP_Body b = cx_ite->elt;		HX_STACK_VAR(b,"b");
				HX_STACK_LINE(3136)
				{
					HX_STACK_LINE(3137)
					{
					}
					HX_STACK_LINE(3145)
					if (((bool(!(((b->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC)))) || bool((bool((bool((b->velx == (int)0)) && bool((b->vely == (int)0)))) && bool((b->angvel == (int)0))))))){
						HX_STACK_LINE(3146)
						b->component->sleeping = true;
						struct _Function_5_1{
							inline static ::zpp_nape::util::ZNPNode_ZPP_Body Block( ::zpp_nape::space::ZPP_Space_obj *__this,::zpp_nape::util::ZNPNode_ZPP_Body &pre){
								HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",3147);
								{
									HX_STACK_LINE(3147)
									::zpp_nape::util::ZNPList_ZPP_Body _this = __this->staticsleep;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(3147)
									{
									}
									HX_STACK_LINE(3147)
									::zpp_nape::util::ZNPNode_ZPP_Body old;		HX_STACK_VAR(old,"old");
									HX_STACK_LINE(3147)
									::zpp_nape::util::ZNPNode_ZPP_Body ret;		HX_STACK_VAR(ret,"ret");
									HX_STACK_LINE(3147)
									if (((pre == null()))){
										HX_STACK_LINE(3147)
										old = _this->head;
										HX_STACK_LINE(3147)
										ret = old->next;
										HX_STACK_LINE(3147)
										_this->head = ret;
										HX_STACK_LINE(3147)
										if (((_this->head == null()))){
											HX_STACK_LINE(3147)
											_this->pushmod = true;
										}
									}
									else{
										HX_STACK_LINE(3147)
										old = pre->next;
										HX_STACK_LINE(3147)
										ret = old->next;
										HX_STACK_LINE(3147)
										pre->next = ret;
										HX_STACK_LINE(3147)
										if (((ret == null()))){
											HX_STACK_LINE(3147)
											_this->pushmod = true;
										}
									}
									HX_STACK_LINE(3147)
									{
									}
									HX_STACK_LINE(3147)
									{
										HX_STACK_LINE(3147)
										::zpp_nape::util::ZNPNode_ZPP_Body o = old;		HX_STACK_VAR(o,"o");
										HX_STACK_LINE(3147)
										{
										}
										HX_STACK_LINE(3147)
										o->elt = null();
										HX_STACK_LINE(3147)
										o->next = ::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool;
										HX_STACK_LINE(3147)
										::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool = o;
									}
									HX_STACK_LINE(3147)
									_this->modified = true;
									HX_STACK_LINE(3147)
									(_this->length)--;
									HX_STACK_LINE(3147)
									_this->pushmod = true;
									HX_STACK_LINE(3147)
									return ret;
								}
								return null();
							}
						};
						HX_STACK_LINE(3147)
						cx_ite = _Function_5_1::Block(this,pre);
						HX_STACK_LINE(3148)
						continue;
					}
					HX_STACK_LINE(3150)
					pre = cx_ite;
				}
				HX_STACK_LINE(3152)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(3157)
		this->doForests(deltaTime);
		HX_STACK_LINE(3158)
		this->sleepArbiters();
		HX_STACK_LINE(3161)
		this->midstep = false;
		HX_STACK_LINE(3162)
		::zpp_nape::space::ZPP_CallbackSet pre1 = null();		HX_STACK_VAR(pre1,"pre1");
		HX_STACK_LINE(3163)
		{
			HX_STACK_LINE(3164)
			::zpp_nape::space::ZPP_CallbackSet cx_ite = this->callbackset_list->next;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(3165)
			while(((cx_ite != null()))){
				HX_STACK_LINE(3166)
				::zpp_nape::space::ZPP_CallbackSet set = cx_ite;		HX_STACK_VAR(set,"set");
				HX_STACK_LINE(3167)
				{
					HX_STACK_LINE(3168)
					if (((set->arbiters->head == null()))){
						struct _Function_5_1{
							inline static ::zpp_nape::space::ZPP_CallbackSet Block( ::zpp_nape::space::ZPP_Space_obj *__this,::zpp_nape::space::ZPP_CallbackSet &pre1){
								HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",3169);
								{
									HX_STACK_LINE(3169)
									::zpp_nape::space::ZPP_CallbackSet _this = __this->callbackset_list;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(3169)
									{
									}
									HX_STACK_LINE(3169)
									::zpp_nape::space::ZPP_CallbackSet old;		HX_STACK_VAR(old,"old");
									HX_STACK_LINE(3169)
									::zpp_nape::space::ZPP_CallbackSet ret;		HX_STACK_VAR(ret,"ret");
									HX_STACK_LINE(3169)
									if (((pre1 == null()))){
										HX_STACK_LINE(3169)
										old = _this->next;
										HX_STACK_LINE(3169)
										ret = old->next;
										HX_STACK_LINE(3169)
										_this->next = ret;
										HX_STACK_LINE(3169)
										if (((_this->next == null()))){
											HX_STACK_LINE(3169)
											_this->pushmod = true;
										}
									}
									else{
										HX_STACK_LINE(3169)
										old = pre1->next;
										HX_STACK_LINE(3169)
										ret = old->next;
										HX_STACK_LINE(3169)
										pre1->next = ret;
										HX_STACK_LINE(3169)
										if (((ret == null()))){
											HX_STACK_LINE(3169)
											_this->pushmod = true;
										}
									}
									HX_STACK_LINE(3169)
									old->_inuse = false;
									HX_STACK_LINE(3169)
									{
									}
									HX_STACK_LINE(3169)
									_this->modified = true;
									HX_STACK_LINE(3169)
									(_this->length)--;
									HX_STACK_LINE(3169)
									_this->pushmod = true;
									HX_STACK_LINE(3169)
									return ret;
								}
								return null();
							}
						};
						HX_STACK_LINE(3169)
						cx_ite = _Function_5_1::Block(this,pre1);
						HX_STACK_LINE(3170)
						::String inf = ((set->int1->id + HX_CSTRING(" ")) + set->int2->id);		HX_STACK_VAR(inf,"inf");
						HX_STACK_LINE(3171)
						{
						}
						HX_STACK_LINE(3179)
						{
						}
						HX_STACK_LINE(3187)
						{
						}
						HX_STACK_LINE(3195)
						{
							HX_STACK_LINE(3196)
							::zpp_nape::space::ZPP_CallbackSet o = set;		HX_STACK_VAR(o,"o");
							HX_STACK_LINE(3197)
							{
							}
							HX_STACK_LINE(3205)
							{
								HX_STACK_LINE(3205)
								o->int1 = o->int2 = null();
								HX_STACK_LINE(3205)
								o->id = o->di = (int)-1;
								HX_STACK_LINE(3205)
								o->freed = true;
								HX_STACK_LINE(3205)
								Dynamic();
							}
							HX_STACK_LINE(3206)
							o->next = ::zpp_nape::space::ZPP_CallbackSet_obj::zpp_pool;
							HX_STACK_LINE(3207)
							::zpp_nape::space::ZPP_CallbackSet_obj::zpp_pool = o;
						}
						HX_STACK_LINE(3212)
						continue;
					}
					struct _Function_4_1{
						inline static bool Block( ::zpp_nape::space::ZPP_CallbackSet &set){
							HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",3214);
							{
								HX_STACK_LINE(3214)
								bool ret;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(3214)
								{
									HX_STACK_LINE(3214)
									ret = true;
									HX_STACK_LINE(3214)
									{
										HX_STACK_LINE(3214)
										::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite1 = set->arbiters->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
										HX_STACK_LINE(3214)
										while(((cx_ite1 != null()))){
											HX_STACK_LINE(3214)
											::zpp_nape::dynamics::ZPP_Arbiter x = cx_ite1->elt;		HX_STACK_VAR(x,"x");
											HX_STACK_LINE(3214)
											if ((x->sleeping)){
												HX_STACK_LINE(3214)
												cx_ite1 = cx_ite1->next;
												HX_STACK_LINE(3214)
												continue;
											}
											else{
												HX_STACK_LINE(3214)
												ret = false;
												HX_STACK_LINE(3214)
												break;
											}
											HX_STACK_LINE(3214)
											cx_ite1 = cx_ite1->next;
										}
									}
								}
								HX_STACK_LINE(3214)
								return ret;
							}
							return null();
						}
					};
					HX_STACK_LINE(3214)
					bool sleeping = _Function_4_1::Block(set);		HX_STACK_VAR(sleeping,"sleeping");
					HX_STACK_LINE(3215)
					{
						HX_STACK_LINE(3215)
						::zpp_nape::callbacks::ZPP_CbSet a = set->int1->cbSet;		HX_STACK_VAR(a,"a");
						::zpp_nape::callbacks::ZPP_CbSet b = set->int2->cbSet;		HX_STACK_VAR(b,"b");
						int event = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_ONGOING;		HX_STACK_VAR(event,"event");
						HX_STACK_LINE(3215)
						{
							HX_STACK_LINE(3215)
							{
							}
							HX_STACK_LINE(3215)
							{
								struct _Function_7_1{
									inline static ::zpp_nape::callbacks::ZPP_CbSetPair Block( ::zpp_nape::callbacks::ZPP_CbSet &a,::zpp_nape::callbacks::ZPP_CbSet &b){
										HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",3215);
										{
											HX_STACK_LINE(3215)
											::zpp_nape::callbacks::ZPP_CbSetPair ret = null();		HX_STACK_VAR(ret,"ret");
											HX_STACK_LINE(3215)
											::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs = (  (((a->cbpairs->length < b->cbpairs->length))) ? ::zpp_nape::util::ZNPList_ZPP_CbSetPair(a->cbpairs) : ::zpp_nape::util::ZNPList_ZPP_CbSetPair(b->cbpairs) );		HX_STACK_VAR(pairs,"pairs");
											HX_STACK_LINE(3215)
											{
												HX_STACK_LINE(3215)
												::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite1 = pairs->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
												HX_STACK_LINE(3215)
												while(((cx_ite1 != null()))){
													HX_STACK_LINE(3215)
													::zpp_nape::callbacks::ZPP_CbSetPair p = cx_ite1->elt;		HX_STACK_VAR(p,"p");
													HX_STACK_LINE(3215)
													if (((bool((bool((p->a == a)) && bool((p->b == b)))) || bool((bool((p->a == b)) && bool((p->b == a))))))){
														HX_STACK_LINE(3215)
														ret = p;
														HX_STACK_LINE(3215)
														break;
													}
													HX_STACK_LINE(3215)
													cx_ite1 = cx_ite1->next;
												}
											}
											HX_STACK_LINE(3215)
											if (((ret == null()))){
												struct _Function_9_1{
													inline static ::zpp_nape::callbacks::ZPP_CbSetPair Block( ::zpp_nape::callbacks::ZPP_CbSet &a,::zpp_nape::callbacks::ZPP_CbSet &b){
														HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",3215);
														{
															HX_STACK_LINE(3215)
															::zpp_nape::callbacks::ZPP_CbSetPair ret1;		HX_STACK_VAR(ret1,"ret1");
															HX_STACK_LINE(3215)
															{
																HX_STACK_LINE(3215)
																if (((::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool == null()))){
																	HX_STACK_LINE(3215)
																	ret1 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__new();
																}
																else{
																	HX_STACK_LINE(3215)
																	ret1 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
																	HX_STACK_LINE(3215)
																	::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret1->next;
																	HX_STACK_LINE(3215)
																	ret1->next = null();
																}
																HX_STACK_LINE(3215)
																ret1->zip_listeners = true;
															}
															HX_STACK_LINE(3215)
															if ((::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(a,b))){
																HX_STACK_LINE(3215)
																ret1->a = a;
																HX_STACK_LINE(3215)
																ret1->b = b;
															}
															else{
																HX_STACK_LINE(3215)
																ret1->a = b;
																HX_STACK_LINE(3215)
																ret1->b = a;
															}
															HX_STACK_LINE(3215)
															return ret1;
														}
														return null();
													}
												};
												HX_STACK_LINE(3215)
												ret = _Function_9_1::Block(a,b);
												HX_STACK_LINE(3215)
												a->cbpairs->add(ret);
												HX_STACK_LINE(3215)
												if (((b != a))){
													HX_STACK_LINE(3215)
													b->cbpairs->add(ret);
												}
											}
											HX_STACK_LINE(3215)
											if ((ret->zip_listeners)){
												HX_STACK_LINE(3215)
												ret->zip_listeners = false;
												HX_STACK_LINE(3215)
												ret->__validate();
											}
											HX_STACK_LINE(3215)
											return ret;
										}
										return null();
									}
								};
								HX_STACK_LINE(3215)
								::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite1 = (_Function_7_1::Block(a,b))->listeners->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
								HX_STACK_LINE(3215)
								while(((cx_ite1 != null()))){
									HX_STACK_LINE(3215)
									::zpp_nape::callbacks::ZPP_InteractionListener x = cx_ite1->elt;		HX_STACK_VAR(x,"x");
									HX_STACK_LINE(3215)
									if (((x->event == event))){
										HX_STACK_LINE(3215)
										if (((bool(((bool(!(sleeping)) || bool(x->allowSleepingCallbacks)))) && bool(!(set->empty_arb(x->itype)))))){
											HX_STACK_LINE(3215)
											::zpp_nape::callbacks::ZPP_Callback cb = _g->push_callback(x);		HX_STACK_VAR(cb,"cb");
											HX_STACK_LINE(3215)
											cb->event = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_ONGOING;
											HX_STACK_LINE(3215)
											{
												HX_STACK_LINE(3215)
												::zpp_nape::phys::ZPP_Interactor o1 = set->int1;		HX_STACK_VAR(o1,"o1");
												HX_STACK_LINE(3215)
												::zpp_nape::phys::ZPP_Interactor o2 = set->int2;		HX_STACK_VAR(o2,"o2");
												struct _Function_11_1{
													inline static bool Block( ::zpp_nape::callbacks::ZPP_InteractionListener &x,::zpp_nape::phys::ZPP_Interactor &o1){
														HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",3215);
														{
															HX_STACK_LINE(3215)
															::zpp_nape::callbacks::ZPP_OptionType _this = x->options1;		HX_STACK_VAR(_this,"_this");
															::zpp_nape::util::ZNPList_ZPP_CbType xs = o1->cbTypes;		HX_STACK_VAR(xs,"xs");
															HX_STACK_LINE(3215)
															return (bool(_this->nonemptyintersection(xs,_this->includes)) && bool(!(_this->nonemptyintersection(xs,_this->excludes))));
														}
														return null();
													}
												};
												struct _Function_11_2{
													inline static bool Block( ::zpp_nape::callbacks::ZPP_InteractionListener &x,::zpp_nape::phys::ZPP_Interactor &o2){
														HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",3215);
														{
															HX_STACK_LINE(3215)
															::zpp_nape::callbacks::ZPP_OptionType _this = x->options2;		HX_STACK_VAR(_this,"_this");
															::zpp_nape::util::ZNPList_ZPP_CbType xs = o2->cbTypes;		HX_STACK_VAR(xs,"xs");
															HX_STACK_LINE(3215)
															return (bool(_this->nonemptyintersection(xs,_this->includes)) && bool(!(_this->nonemptyintersection(xs,_this->excludes))));
														}
														return null();
													}
												};
												HX_STACK_LINE(3215)
												if (((bool(_Function_11_1::Block(x,o1)) && bool(_Function_11_2::Block(x,o2))))){
													HX_STACK_LINE(3215)
													cb->int1 = o1;
													HX_STACK_LINE(3215)
													cb->int2 = o2;
												}
												else{
													HX_STACK_LINE(3215)
													cb->int1 = o2;
													HX_STACK_LINE(3215)
													cb->int2 = o1;
												}
											}
											HX_STACK_LINE(3215)
											cb->set = set;
										}
									}
									HX_STACK_LINE(3215)
									cx_ite1 = cx_ite1->next;
								}
							}
						}
					}
					HX_STACK_LINE(3223)
					pre1 = cx_ite;
				}
				HX_STACK_LINE(3225)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(3228)
		while((!(this->callbacks->empty()))){
			HX_STACK_LINE(3229)
			::zpp_nape::callbacks::ZPP_Callback cb = this->callbacks->pop();		HX_STACK_VAR(cb,"cb");
			HX_STACK_LINE(3230)
			if (((cb->listener->type == ::zpp_nape::util::ZPP_Flags_obj::id_ListenerType_BODY))){
				HX_STACK_LINE(3231)
				::zpp_nape::callbacks::ZPP_BodyListener o = cb->listener->body;		HX_STACK_VAR(o,"o");
				HX_STACK_LINE(3232)
				o->handler(cb->wrapper_body());
			}
			else{
				HX_STACK_LINE(3234)
				if (((cb->listener->type == ::zpp_nape::util::ZPP_Flags_obj::id_ListenerType_CONSTRAINT))){
					HX_STACK_LINE(3235)
					::zpp_nape::callbacks::ZPP_ConstraintListener o = cb->listener->constraint;		HX_STACK_VAR(o,"o");
					HX_STACK_LINE(3236)
					o->handler(cb->wrapper_con());
				}
				else{
					HX_STACK_LINE(3238)
					if (((cb->listener->type == ::zpp_nape::util::ZPP_Flags_obj::id_ListenerType_INTERACTION))){
						HX_STACK_LINE(3239)
						::zpp_nape::callbacks::ZPP_InteractionListener o = cb->listener->interaction;		HX_STACK_VAR(o,"o");
						HX_STACK_LINE(3240)
						o->handleri(cb->wrapper_int());
					}
				}
			}
			HX_STACK_LINE(3242)
			{
				HX_STACK_LINE(3243)
				::zpp_nape::callbacks::ZPP_Callback o = cb;		HX_STACK_VAR(o,"o");
				HX_STACK_LINE(3244)
				{
				}
				HX_STACK_LINE(3252)
				{
					HX_STACK_LINE(3252)
					o->int1 = o->int2 = null();
					HX_STACK_LINE(3252)
					o->body = null();
					HX_STACK_LINE(3252)
					o->constraint = null();
					HX_STACK_LINE(3252)
					o->listener = null();
					HX_STACK_LINE(3252)
					if (((o->wrap_arbiters != null()))){
						HX_STACK_LINE(3252)
						o->wrap_arbiters->zpp_inner->inner = null();
					}
					HX_STACK_LINE(3252)
					o->set = null();
				}
				HX_STACK_LINE(3253)
				o->next = ::zpp_nape::callbacks::ZPP_Callback_obj::zpp_pool;
				HX_STACK_LINE(3254)
				::zpp_nape::callbacks::ZPP_Callback_obj::zpp_pool = o;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC3(ZPP_Space_obj,step,(void))

::zpp_nape::callbacks::ZPP_Callback ZPP_Space_obj::push_callback( ::zpp_nape::callbacks::ZPP_Listener i){
	HX_STACK_PUSH("ZPP_Space::push_callback","zpp_nape/space/Space.hx",2896);
	HX_STACK_THIS(this);
	HX_STACK_ARG(i,"i");
	HX_STACK_LINE(2897)
	{
	}
	HX_STACK_LINE(2905)
	::zpp_nape::callbacks::ZPP_Callback cb;		HX_STACK_VAR(cb,"cb");
	HX_STACK_LINE(2906)
	{
		HX_STACK_LINE(2907)
		if (((::zpp_nape::callbacks::ZPP_Callback_obj::zpp_pool == null()))){
			HX_STACK_LINE(2907)
			cb = ::zpp_nape::callbacks::ZPP_Callback_obj::__new();
		}
		else{
			HX_STACK_LINE(2914)
			cb = ::zpp_nape::callbacks::ZPP_Callback_obj::zpp_pool;
			HX_STACK_LINE(2915)
			::zpp_nape::callbacks::ZPP_Callback_obj::zpp_pool = cb->next;
			HX_STACK_LINE(2916)
			cb->next = null();
		}
		HX_STACK_LINE(2921)
		Dynamic();
	}
	HX_STACK_LINE(2923)
	this->callbacks->push(cb);
	HX_STACK_LINE(2924)
	cb->listener = i;
	HX_STACK_LINE(2925)
	return cb;
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,push_callback,return )

::nape::geom::ConvexResultList ZPP_Space_obj::convexMultiCast( ::zpp_nape::shape::ZPP_Shape shape,Float deltaTime,::nape::dynamics::InteractionFilter filter,bool dynamics,::nape::geom::ConvexResultList output){
	HX_STACK_PUSH("ZPP_Space::convexMultiCast","zpp_nape/space/Space.hx",2751);
	HX_STACK_THIS(this);
	HX_STACK_ARG(shape,"shape");
	HX_STACK_ARG(deltaTime,"deltaTime");
	HX_STACK_ARG(filter,"filter");
	HX_STACK_ARG(dynamics,"dynamics");
	HX_STACK_ARG(output,"output");
	HX_STACK_LINE(2752)
	::zpp_nape::geom::ZPP_ToiEvent toi;		HX_STACK_VAR(toi,"toi");
	HX_STACK_LINE(2753)
	{
		HX_STACK_LINE(2754)
		if (((::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool == null()))){
			HX_STACK_LINE(2754)
			toi = ::zpp_nape::geom::ZPP_ToiEvent_obj::__new();
		}
		else{
			HX_STACK_LINE(2761)
			toi = ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool;
			HX_STACK_LINE(2762)
			::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool = toi->next;
			HX_STACK_LINE(2763)
			toi->next = null();
		}
		HX_STACK_LINE(2768)
		{
			HX_STACK_LINE(2768)
			toi->failed = false;
			HX_STACK_LINE(2768)
			toi->s1 = toi->s2 = null();
			HX_STACK_LINE(2768)
			toi->arbiter = null();
		}
	}
	HX_STACK_LINE(2770)
	if (((shape->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE))){
		HX_STACK_LINE(2770)
		::zpp_nape::shape::ZPP_Circle _this = shape->circle;		HX_STACK_VAR(_this,"_this");
		HX_STACK_LINE(2770)
		if ((_this->zip_worldCOM)){
			HX_STACK_LINE(2770)
			if (((_this->body != null()))){
				HX_STACK_LINE(2770)
				_this->zip_worldCOM = false;
				HX_STACK_LINE(2770)
				if ((_this->zip_localCOM)){
					HX_STACK_LINE(2770)
					_this->zip_localCOM = false;
					HX_STACK_LINE(2770)
					if (((_this->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_POLYGON))){
						HX_STACK_LINE(2770)
						::zpp_nape::shape::ZPP_Polygon _this1 = _this->polygon;		HX_STACK_VAR(_this1,"_this1");
						HX_STACK_LINE(2770)
						if (((_this1->lverts->next == null()))){
							HX_STACK_LINE(2770)
							hx::Throw (HX_CSTRING("Error: An empty polygon has no meaningful localCOM"));
						}
						HX_STACK_LINE(2770)
						if (((_this1->lverts->next->next == null()))){
							HX_STACK_LINE(2770)
							_this1->localCOMx = _this1->lverts->next->x;
							HX_STACK_LINE(2770)
							_this1->localCOMy = _this1->lverts->next->y;
							HX_STACK_LINE(2770)
							{
							}
							HX_STACK_LINE(2770)
							Dynamic();
						}
						else{
							HX_STACK_LINE(2770)
							if (((_this1->lverts->next->next->next == null()))){
								HX_STACK_LINE(2770)
								{
									HX_STACK_LINE(2770)
									_this1->localCOMx = _this1->lverts->next->x;
									HX_STACK_LINE(2770)
									_this1->localCOMy = _this1->lverts->next->y;
									HX_STACK_LINE(2770)
									{
									}
									HX_STACK_LINE(2770)
									{
									}
								}
								HX_STACK_LINE(2770)
								{
									HX_STACK_LINE(2770)
									Float t = 1.0;		HX_STACK_VAR(t,"t");
									HX_STACK_LINE(2770)
									{
									}
									HX_STACK_LINE(2770)
									hx::AddEq(_this1->localCOMx,(_this1->lverts->next->next->x * t));
									HX_STACK_LINE(2770)
									hx::AddEq(_this1->localCOMy,(_this1->lverts->next->next->y * t));
								}
								HX_STACK_LINE(2770)
								{
									HX_STACK_LINE(2770)
									Float t = 0.5;		HX_STACK_VAR(t,"t");
									HX_STACK_LINE(2770)
									{
									}
									HX_STACK_LINE(2770)
									hx::MultEq(_this1->localCOMx,t);
									HX_STACK_LINE(2770)
									hx::MultEq(_this1->localCOMy,t);
								}
							}
							else{
								HX_STACK_LINE(2770)
								{
									HX_STACK_LINE(2770)
									_this1->localCOMx = (int)0;
									HX_STACK_LINE(2770)
									_this1->localCOMy = (int)0;
									HX_STACK_LINE(2770)
									{
									}
									HX_STACK_LINE(2770)
									{
									}
								}
								HX_STACK_LINE(2770)
								Float area = 0.0;		HX_STACK_VAR(area,"area");
								HX_STACK_LINE(2770)
								{
									HX_STACK_LINE(2770)
									::zpp_nape::geom::ZPP_Vec2 cx_ite = _this1->lverts->next;		HX_STACK_VAR(cx_ite,"cx_ite");
									HX_STACK_LINE(2770)
									::zpp_nape::geom::ZPP_Vec2 u = cx_ite;		HX_STACK_VAR(u,"u");
									HX_STACK_LINE(2770)
									cx_ite = cx_ite->next;
									HX_STACK_LINE(2770)
									::zpp_nape::geom::ZPP_Vec2 v = cx_ite;		HX_STACK_VAR(v,"v");
									HX_STACK_LINE(2770)
									cx_ite = cx_ite->next;
									HX_STACK_LINE(2770)
									while(((cx_ite != null()))){
										HX_STACK_LINE(2770)
										::zpp_nape::geom::ZPP_Vec2 w = cx_ite;		HX_STACK_VAR(w,"w");
										HX_STACK_LINE(2770)
										{
											HX_STACK_LINE(2770)
											hx::AddEq(area,(v->x * ((w->y - u->y))));
											HX_STACK_LINE(2770)
											Float cf = ((w->y * v->x) - (w->x * v->y));		HX_STACK_VAR(cf,"cf");
											HX_STACK_LINE(2770)
											hx::AddEq(_this1->localCOMx,(((v->x + w->x)) * cf));
											HX_STACK_LINE(2770)
											hx::AddEq(_this1->localCOMy,(((v->y + w->y)) * cf));
										}
										HX_STACK_LINE(2770)
										u = v;
										HX_STACK_LINE(2770)
										v = w;
										HX_STACK_LINE(2770)
										cx_ite = cx_ite->next;
									}
									HX_STACK_LINE(2770)
									cx_ite = _this1->lverts->next;
									HX_STACK_LINE(2770)
									::zpp_nape::geom::ZPP_Vec2 w = cx_ite;		HX_STACK_VAR(w,"w");
									HX_STACK_LINE(2770)
									{
										HX_STACK_LINE(2770)
										hx::AddEq(area,(v->x * ((w->y - u->y))));
										HX_STACK_LINE(2770)
										Float cf = ((w->y * v->x) - (w->x * v->y));		HX_STACK_VAR(cf,"cf");
										HX_STACK_LINE(2770)
										hx::AddEq(_this1->localCOMx,(((v->x + w->x)) * cf));
										HX_STACK_LINE(2770)
										hx::AddEq(_this1->localCOMy,(((v->y + w->y)) * cf));
									}
									HX_STACK_LINE(2770)
									u = v;
									HX_STACK_LINE(2770)
									v = w;
									HX_STACK_LINE(2770)
									cx_ite = cx_ite->next;
									HX_STACK_LINE(2770)
									::zpp_nape::geom::ZPP_Vec2 w1 = cx_ite;		HX_STACK_VAR(w1,"w1");
									HX_STACK_LINE(2770)
									{
										HX_STACK_LINE(2770)
										hx::AddEq(area,(v->x * ((w1->y - u->y))));
										HX_STACK_LINE(2770)
										Float cf = ((w1->y * v->x) - (w1->x * v->y));		HX_STACK_VAR(cf,"cf");
										HX_STACK_LINE(2770)
										hx::AddEq(_this1->localCOMx,(((v->x + w1->x)) * cf));
										HX_STACK_LINE(2770)
										hx::AddEq(_this1->localCOMy,(((v->y + w1->y)) * cf));
									}
								}
								HX_STACK_LINE(2770)
								area = (Float((int)1) / Float((((int)3 * area))));
								HX_STACK_LINE(2770)
								{
									HX_STACK_LINE(2770)
									Float t = area;		HX_STACK_VAR(t,"t");
									HX_STACK_LINE(2770)
									{
									}
									HX_STACK_LINE(2770)
									hx::MultEq(_this1->localCOMx,t);
									HX_STACK_LINE(2770)
									hx::MultEq(_this1->localCOMy,t);
								}
							}
						}
					}
				}
				HX_STACK_LINE(2770)
				{
					HX_STACK_LINE(2770)
					::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
					HX_STACK_LINE(2770)
					if ((_this1->zip_axis)){
						HX_STACK_LINE(2770)
						_this1->zip_axis = false;
						HX_STACK_LINE(2770)
						{
							HX_STACK_LINE(2770)
							_this1->axisx = ::Math_obj::sin(_this1->rot);
							HX_STACK_LINE(2770)
							_this1->axisy = ::Math_obj::cos(_this1->rot);
							HX_STACK_LINE(2770)
							{
							}
							HX_STACK_LINE(2770)
							Dynamic();
						}
					}
				}
				HX_STACK_LINE(2770)
				{
					HX_STACK_LINE(2770)
					_this->worldCOMx = (_this->body->posx + (((_this->body->axisy * _this->localCOMx) - (_this->body->axisx * _this->localCOMy))));
					HX_STACK_LINE(2770)
					_this->worldCOMy = (_this->body->posy + (((_this->localCOMx * _this->body->axisx) + (_this->localCOMy * _this->body->axisy))));
				}
			}
		}
	}
	else{
		HX_STACK_LINE(2770)
		::zpp_nape::shape::ZPP_Polygon _this = shape->polygon;		HX_STACK_VAR(_this,"_this");
		HX_STACK_LINE(2770)
		if ((_this->zip_gaxi)){
			HX_STACK_LINE(2770)
			if (((_this->body != null()))){
				HX_STACK_LINE(2770)
				_this->zip_gaxi = false;
				HX_STACK_LINE(2770)
				_this->validate_laxi();
				HX_STACK_LINE(2770)
				{
					HX_STACK_LINE(2770)
					::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
					HX_STACK_LINE(2770)
					if ((_this1->zip_axis)){
						HX_STACK_LINE(2770)
						_this1->zip_axis = false;
						HX_STACK_LINE(2770)
						{
							HX_STACK_LINE(2770)
							_this1->axisx = ::Math_obj::sin(_this1->rot);
							HX_STACK_LINE(2770)
							_this1->axisy = ::Math_obj::cos(_this1->rot);
							HX_STACK_LINE(2770)
							{
							}
							HX_STACK_LINE(2770)
							Dynamic();
						}
					}
				}
				HX_STACK_LINE(2770)
				if ((_this->zip_gverts)){
					HX_STACK_LINE(2770)
					if (((_this->body != null()))){
						HX_STACK_LINE(2770)
						_this->zip_gverts = false;
						HX_STACK_LINE(2770)
						_this->validate_lverts();
						HX_STACK_LINE(2770)
						{
							HX_STACK_LINE(2770)
							::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
							HX_STACK_LINE(2770)
							if ((_this1->zip_axis)){
								HX_STACK_LINE(2770)
								_this1->zip_axis = false;
								HX_STACK_LINE(2770)
								{
									HX_STACK_LINE(2770)
									_this1->axisx = ::Math_obj::sin(_this1->rot);
									HX_STACK_LINE(2770)
									_this1->axisy = ::Math_obj::cos(_this1->rot);
									HX_STACK_LINE(2770)
									{
									}
									HX_STACK_LINE(2770)
									Dynamic();
								}
							}
						}
						HX_STACK_LINE(2770)
						::zpp_nape::geom::ZPP_Vec2 li = _this->lverts->next;		HX_STACK_VAR(li,"li");
						HX_STACK_LINE(2770)
						{
							HX_STACK_LINE(2770)
							::zpp_nape::geom::ZPP_Vec2 cx_ite = _this->gverts->next;		HX_STACK_VAR(cx_ite,"cx_ite");
							HX_STACK_LINE(2770)
							while(((cx_ite != null()))){
								HX_STACK_LINE(2770)
								::zpp_nape::geom::ZPP_Vec2 g = cx_ite;		HX_STACK_VAR(g,"g");
								HX_STACK_LINE(2770)
								{
									HX_STACK_LINE(2770)
									::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
									HX_STACK_LINE(2770)
									li = li->next;
									HX_STACK_LINE(2770)
									{
										HX_STACK_LINE(2770)
										g->x = (_this->body->posx + (((_this->body->axisy * l->x) - (_this->body->axisx * l->y))));
										HX_STACK_LINE(2770)
										g->y = (_this->body->posy + (((l->x * _this->body->axisx) + (l->y * _this->body->axisy))));
									}
								}
								HX_STACK_LINE(2770)
								cx_ite = cx_ite->next;
							}
						}
					}
				}
				HX_STACK_LINE(2770)
				::zpp_nape::util::ZNPNode_ZPP_Edge ite = _this->edges->head;		HX_STACK_VAR(ite,"ite");
				HX_STACK_LINE(2770)
				{
					HX_STACK_LINE(2770)
					::zpp_nape::geom::ZPP_Vec2 cx_ite = _this->gverts->next;		HX_STACK_VAR(cx_ite,"cx_ite");
					HX_STACK_LINE(2770)
					::zpp_nape::geom::ZPP_Vec2 u = cx_ite;		HX_STACK_VAR(u,"u");
					HX_STACK_LINE(2770)
					cx_ite = cx_ite->next;
					HX_STACK_LINE(2770)
					while(((cx_ite != null()))){
						HX_STACK_LINE(2770)
						::zpp_nape::geom::ZPP_Vec2 v = cx_ite;		HX_STACK_VAR(v,"v");
						HX_STACK_LINE(2770)
						{
							HX_STACK_LINE(2770)
							::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
							HX_STACK_LINE(2770)
							ite = ite->next;
							HX_STACK_LINE(2770)
							e->gp0 = u;
							HX_STACK_LINE(2770)
							e->gp1 = v;
							HX_STACK_LINE(2770)
							{
								HX_STACK_LINE(2770)
								e->gnormx = ((_this->body->axisy * e->lnormx) - (_this->body->axisx * e->lnormy));
								HX_STACK_LINE(2770)
								e->gnormy = ((e->lnormx * _this->body->axisx) + (e->lnormy * _this->body->axisy));
							}
							HX_STACK_LINE(2770)
							e->gprojection = (((_this->body->posx * e->gnormx) + (_this->body->posy * e->gnormy)) + e->lprojection);
							HX_STACK_LINE(2770)
							if (((e->wrap_gnorm != null()))){
								HX_STACK_LINE(2770)
								e->wrap_gnorm->zpp_inner->x = e->gnormx;
								HX_STACK_LINE(2770)
								e->wrap_gnorm->zpp_inner->y = e->gnormy;
								HX_STACK_LINE(2770)
								{
								}
								HX_STACK_LINE(2770)
								{
								}
							}
							HX_STACK_LINE(2770)
							e->tp0 = ((e->gp0->y * e->gnormx) - (e->gp0->x * e->gnormy));
							HX_STACK_LINE(2770)
							e->tp1 = ((e->gp1->y * e->gnormx) - (e->gp1->x * e->gnormy));
						}
						HX_STACK_LINE(2770)
						u = v;
						HX_STACK_LINE(2770)
						cx_ite = cx_ite->next;
					}
					HX_STACK_LINE(2770)
					::zpp_nape::geom::ZPP_Vec2 v = _this->gverts->next;		HX_STACK_VAR(v,"v");
					HX_STACK_LINE(2770)
					{
						HX_STACK_LINE(2770)
						::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
						HX_STACK_LINE(2770)
						ite = ite->next;
						HX_STACK_LINE(2770)
						e->gp0 = u;
						HX_STACK_LINE(2770)
						e->gp1 = v;
						HX_STACK_LINE(2770)
						{
							HX_STACK_LINE(2770)
							e->gnormx = ((_this->body->axisy * e->lnormx) - (_this->body->axisx * e->lnormy));
							HX_STACK_LINE(2770)
							e->gnormy = ((e->lnormx * _this->body->axisx) + (e->lnormy * _this->body->axisy));
						}
						HX_STACK_LINE(2770)
						e->gprojection = (((_this->body->posx * e->gnormx) + (_this->body->posy * e->gnormy)) + e->lprojection);
						HX_STACK_LINE(2770)
						if (((e->wrap_gnorm != null()))){
							HX_STACK_LINE(2770)
							e->wrap_gnorm->zpp_inner->x = e->gnormx;
							HX_STACK_LINE(2770)
							e->wrap_gnorm->zpp_inner->y = e->gnormy;
							HX_STACK_LINE(2770)
							{
							}
							HX_STACK_LINE(2770)
							{
							}
						}
						HX_STACK_LINE(2770)
						e->tp0 = ((e->gp0->y * e->gnormx) - (e->gp0->x * e->gnormy));
						HX_STACK_LINE(2770)
						e->tp1 = ((e->gp1->y * e->gnormx) - (e->gp1->x * e->gnormy));
					}
				}
			}
		}
	}
	HX_STACK_LINE(2771)
	::zpp_nape::phys::ZPP_Body body = shape->body;		HX_STACK_VAR(body,"body");
	HX_STACK_LINE(2772)
	Float prex = body->posx;		HX_STACK_VAR(prex,"prex");
	HX_STACK_LINE(2773)
	Float prey = body->posy;		HX_STACK_VAR(prey,"prey");
	HX_STACK_LINE(2774)
	body->sweepTime = (int)0;
	HX_STACK_LINE(2775)
	body->sweep_angvel = body->angvel;
	HX_STACK_LINE(2776)
	{
		HX_STACK_LINE(2776)
		Float delta = (deltaTime - body->sweepTime);		HX_STACK_VAR(delta,"delta");
		HX_STACK_LINE(2776)
		if (((delta != (int)0))){
			HX_STACK_LINE(2776)
			{
			}
			HX_STACK_LINE(2776)
			body->sweepTime = deltaTime;
			HX_STACK_LINE(2776)
			{
				HX_STACK_LINE(2776)
				Float t = delta;		HX_STACK_VAR(t,"t");
				HX_STACK_LINE(2776)
				{
				}
				HX_STACK_LINE(2776)
				hx::AddEq(body->posx,(body->velx * t));
				HX_STACK_LINE(2776)
				hx::AddEq(body->posy,(body->vely * t));
			}
			HX_STACK_LINE(2776)
			if (((body->angvel != (int)0))){
				HX_STACK_LINE(2776)
				Float dr = (body->sweep_angvel * delta);		HX_STACK_VAR(dr,"dr");
				HX_STACK_LINE(2776)
				hx::AddEq(body->rot,dr);
				HX_STACK_LINE(2776)
				if ((((dr * dr) > 0.0001))){
					HX_STACK_LINE(2776)
					body->axisx = ::Math_obj::sin(body->rot);
					HX_STACK_LINE(2776)
					body->axisy = ::Math_obj::cos(body->rot);
					HX_STACK_LINE(2776)
					{
					}
					HX_STACK_LINE(2776)
					Dynamic();
				}
				else{
					HX_STACK_LINE(2776)
					Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
					HX_STACK_LINE(2776)
					Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
					HX_STACK_LINE(2776)
					Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
					HX_STACK_LINE(2776)
					Float nx = ((((p * body->axisx) + (dr * body->axisy))) * m);		HX_STACK_VAR(nx,"nx");
					HX_STACK_LINE(2776)
					body->axisy = ((((p * body->axisy) - (dr * body->axisx))) * m);
					HX_STACK_LINE(2776)
					body->axisx = nx;
				}
			}
		}
	}
	HX_STACK_LINE(2777)
	Float postx = body->posx;		HX_STACK_VAR(postx,"postx");
	HX_STACK_LINE(2778)
	Float posty = body->posy;		HX_STACK_VAR(posty,"posty");
	HX_STACK_LINE(2779)
	shape->validate_sweepRadius();
	HX_STACK_LINE(2780)
	Float rad = shape->sweepRadius;		HX_STACK_VAR(rad,"rad");
	HX_STACK_LINE(2781)
	::zpp_nape::geom::ZPP_AABB aabb;		HX_STACK_VAR(aabb,"aabb");
	HX_STACK_LINE(2782)
	{
		HX_STACK_LINE(2783)
		if (((::zpp_nape::geom::ZPP_AABB_obj::zpp_pool == null()))){
			HX_STACK_LINE(2783)
			aabb = ::zpp_nape::geom::ZPP_AABB_obj::__new();
		}
		else{
			HX_STACK_LINE(2790)
			aabb = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;
			HX_STACK_LINE(2791)
			::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = aabb->next;
			HX_STACK_LINE(2792)
			aabb->next = null();
		}
		HX_STACK_LINE(2797)
		Dynamic();
	}
	struct _Function_1_1{
		inline static Float Block( Float &prex,Float &postx){
			HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",2799);
			{
				HX_STACK_LINE(2800)
				Float x = prex;		HX_STACK_VAR(x,"x");
				HX_STACK_LINE(2801)
				Float y = postx;		HX_STACK_VAR(y,"y");
				HX_STACK_LINE(2802)
				return (  (((x < y))) ? Float(x) : Float(y) );
			}
			return null();
		}
	};
	HX_STACK_LINE(2799)
	aabb->minx = (_Function_1_1::Block(prex,postx) - rad);
	struct _Function_1_2{
		inline static Float Block( Float &prex,Float &postx){
			HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",2804);
			{
				HX_STACK_LINE(2805)
				Float x = prex;		HX_STACK_VAR(x,"x");
				HX_STACK_LINE(2806)
				Float y = postx;		HX_STACK_VAR(y,"y");
				HX_STACK_LINE(2807)
				return (  (((x > y))) ? Float(x) : Float(y) );
			}
			return null();
		}
	};
	HX_STACK_LINE(2804)
	aabb->maxx = (_Function_1_2::Block(prex,postx) + rad);
	struct _Function_1_3{
		inline static Float Block( Float &prey,Float &posty){
			HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",2809);
			{
				HX_STACK_LINE(2810)
				Float x = prey;		HX_STACK_VAR(x,"x");
				HX_STACK_LINE(2811)
				Float y = posty;		HX_STACK_VAR(y,"y");
				HX_STACK_LINE(2812)
				return (  (((x < y))) ? Float(x) : Float(y) );
			}
			return null();
		}
	};
	HX_STACK_LINE(2809)
	aabb->miny = (_Function_1_3::Block(prey,posty) - rad);
	struct _Function_1_4{
		inline static Float Block( Float &prey,Float &posty){
			HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",2814);
			{
				HX_STACK_LINE(2815)
				Float x = prey;		HX_STACK_VAR(x,"x");
				HX_STACK_LINE(2816)
				Float y = posty;		HX_STACK_VAR(y,"y");
				HX_STACK_LINE(2817)
				return (  (((x > y))) ? Float(x) : Float(y) );
			}
			return null();
		}
	};
	HX_STACK_LINE(2814)
	aabb->maxy = (_Function_1_4::Block(prey,posty) + rad);
	HX_STACK_LINE(2819)
	::nape::shape::ShapeList list = this->convexShapeList = this->bphase->shapesInAABB(aabb,false,false,(  (((filter == null()))) ? ::zpp_nape::dynamics::ZPP_InteractionFilter(null()) : ::zpp_nape::dynamics::ZPP_InteractionFilter(filter->zpp_inner) ),this->convexShapeList);		HX_STACK_VAR(list,"list");
	HX_STACK_LINE(2820)
	{
		HX_STACK_LINE(2821)
		::zpp_nape::geom::ZPP_AABB o = aabb;		HX_STACK_VAR(o,"o");
		HX_STACK_LINE(2822)
		{
		}
		HX_STACK_LINE(2830)
		{
			HX_STACK_LINE(2830)
			if (((o->outer != null()))){
				HX_STACK_LINE(2830)
				o->outer->zpp_inner = null();
				HX_STACK_LINE(2830)
				o->outer = null();
			}
			HX_STACK_LINE(2830)
			o->wrap_min = o->wrap_max = null();
			HX_STACK_LINE(2830)
			o->_invalidate = null();
			HX_STACK_LINE(2830)
			o->_validate = null();
		}
		HX_STACK_LINE(2831)
		o->next = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;
		HX_STACK_LINE(2832)
		::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = o;
	}
	HX_STACK_LINE(2837)
	::nape::geom::ConvexResultList ret = (  (((output == null()))) ? ::nape::geom::ConvexResultList(::nape::geom::ConvexResultList_obj::__new()) : ::nape::geom::ConvexResultList(output) );		HX_STACK_VAR(ret,"ret");
	struct _Function_1_5{
		inline static ::nape::shape::ShapeIterator Block( ::nape::shape::ShapeList &list){
			HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",2838);
			{
				HX_STACK_LINE(2838)
				list->zpp_inner->valmod();
				HX_STACK_LINE(2838)
				return ::nape::shape::ShapeIterator_obj::get(list);
			}
			return null();
		}
	};
	HX_STACK_LINE(2838)
	for(::cpp::FastIterator_obj< ::nape::shape::Shape > *__it = ::cpp::CreateFastIterator< ::nape::shape::Shape >(_Function_1_5::Block(list));  __it->hasNext(); ){
		::nape::shape::Shape s = __it->next();
		if (((bool((s != shape->outer)) && bool((((  (((s->zpp_inner->body != null()))) ? ::nape::phys::Body(s->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body->outer))))){
			HX_STACK_LINE(2840)
			toi->s1 = shape;
			HX_STACK_LINE(2841)
			toi->s2 = s->zpp_inner;
			HX_STACK_LINE(2842)
			if ((dynamics)){
				HX_STACK_LINE(2843)
				s->zpp_inner->validate_sweepRadius();
				HX_STACK_LINE(2844)
				((  (((s->zpp_inner->body != null()))) ? ::nape::phys::Body(s->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->sweep_angvel = ((  (((s->zpp_inner->body != null()))) ? ::nape::phys::Body(s->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->angvel;
				HX_STACK_LINE(2845)
				((  (((s->zpp_inner->body != null()))) ? ::nape::phys::Body(s->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->sweepTime = (int)0;
				HX_STACK_LINE(2846)
				::zpp_nape::geom::ZPP_SweepDistance_obj::dynamicSweep(toi,deltaTime,(int)0,(int)0,true);
				HX_STACK_LINE(2847)
				{
					HX_STACK_LINE(2847)
					::zpp_nape::phys::ZPP_Body _this = ((  (((s->zpp_inner->body != null()))) ? ::nape::phys::Body(s->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(2847)
					Float delta = ((int)0 - _this->sweepTime);		HX_STACK_VAR(delta,"delta");
					HX_STACK_LINE(2847)
					if (((delta != (int)0))){
						HX_STACK_LINE(2847)
						{
						}
						HX_STACK_LINE(2847)
						_this->sweepTime = (int)0;
						HX_STACK_LINE(2847)
						{
							HX_STACK_LINE(2847)
							Float t = delta;		HX_STACK_VAR(t,"t");
							HX_STACK_LINE(2847)
							{
							}
							HX_STACK_LINE(2847)
							hx::AddEq(_this->posx,(_this->velx * t));
							HX_STACK_LINE(2847)
							hx::AddEq(_this->posy,(_this->vely * t));
						}
						HX_STACK_LINE(2847)
						if (((_this->angvel != (int)0))){
							HX_STACK_LINE(2847)
							Float dr = (_this->sweep_angvel * delta);		HX_STACK_VAR(dr,"dr");
							HX_STACK_LINE(2847)
							hx::AddEq(_this->rot,dr);
							HX_STACK_LINE(2847)
							if ((((dr * dr) > 0.0001))){
								HX_STACK_LINE(2847)
								_this->axisx = ::Math_obj::sin(_this->rot);
								HX_STACK_LINE(2847)
								_this->axisy = ::Math_obj::cos(_this->rot);
								HX_STACK_LINE(2847)
								{
								}
								HX_STACK_LINE(2847)
								Dynamic();
							}
							else{
								HX_STACK_LINE(2847)
								Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
								HX_STACK_LINE(2847)
								Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
								HX_STACK_LINE(2847)
								Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
								HX_STACK_LINE(2847)
								Float nx = ((((p * _this->axisx) + (dr * _this->axisy))) * m);		HX_STACK_VAR(nx,"nx");
								HX_STACK_LINE(2847)
								_this->axisy = ((((p * _this->axisy) - (dr * _this->axisx))) * m);
								HX_STACK_LINE(2847)
								_this->axisx = nx;
							}
						}
					}
				}
				HX_STACK_LINE(2848)
				{
					HX_STACK_LINE(2848)
					::zpp_nape::phys::ZPP_Body _this = ((  (((s->zpp_inner->body != null()))) ? ::nape::phys::Body(s->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner;		HX_STACK_VAR(_this,"_this");
					::zpp_nape::shape::ZPP_Shape s1 = s->zpp_inner;		HX_STACK_VAR(s1,"s1");
					HX_STACK_LINE(2848)
					{
					}
					HX_STACK_LINE(2848)
					if (((s1->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE))){
						HX_STACK_LINE(2848)
						s1->worldCOMx = (_this->posx + (((_this->axisy * s1->localCOMx) - (_this->axisx * s1->localCOMy))));
						HX_STACK_LINE(2848)
						s1->worldCOMy = (_this->posy + (((s1->localCOMx * _this->axisx) + (s1->localCOMy * _this->axisy))));
					}
					else{
						HX_STACK_LINE(2848)
						::zpp_nape::shape::ZPP_Polygon p = s1->polygon;		HX_STACK_VAR(p,"p");
						HX_STACK_LINE(2848)
						::zpp_nape::geom::ZPP_Vec2 li = p->lverts->next;		HX_STACK_VAR(li,"li");
						HX_STACK_LINE(2848)
						{
							HX_STACK_LINE(2848)
							::zpp_nape::geom::ZPP_Vec2 cx_ite = p->gverts->next;		HX_STACK_VAR(cx_ite,"cx_ite");
							HX_STACK_LINE(2848)
							while(((cx_ite != null()))){
								HX_STACK_LINE(2848)
								::zpp_nape::geom::ZPP_Vec2 g = cx_ite;		HX_STACK_VAR(g,"g");
								HX_STACK_LINE(2848)
								{
									HX_STACK_LINE(2848)
									::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
									HX_STACK_LINE(2848)
									li = li->next;
									HX_STACK_LINE(2848)
									{
										HX_STACK_LINE(2848)
										g->x = (_this->posx + (((_this->axisy * l->x) - (_this->axisx * l->y))));
										HX_STACK_LINE(2848)
										g->y = (_this->posy + (((l->x * _this->axisx) + (l->y * _this->axisy))));
									}
								}
								HX_STACK_LINE(2848)
								cx_ite = cx_ite->next;
							}
						}
						HX_STACK_LINE(2848)
						::zpp_nape::util::ZNPNode_ZPP_Edge ite = p->edges->head;		HX_STACK_VAR(ite,"ite");
						HX_STACK_LINE(2848)
						{
							HX_STACK_LINE(2848)
							::zpp_nape::geom::ZPP_Vec2 cx_ite = p->gverts->next;		HX_STACK_VAR(cx_ite,"cx_ite");
							HX_STACK_LINE(2848)
							::zpp_nape::geom::ZPP_Vec2 u = cx_ite;		HX_STACK_VAR(u,"u");
							HX_STACK_LINE(2848)
							cx_ite = cx_ite->next;
							HX_STACK_LINE(2848)
							while(((cx_ite != null()))){
								HX_STACK_LINE(2848)
								::zpp_nape::geom::ZPP_Vec2 v = cx_ite;		HX_STACK_VAR(v,"v");
								HX_STACK_LINE(2848)
								{
									HX_STACK_LINE(2848)
									::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
									HX_STACK_LINE(2848)
									ite = ite->next;
									HX_STACK_LINE(2848)
									{
										HX_STACK_LINE(2848)
										e->gnormx = ((_this->axisy * e->lnormx) - (_this->axisx * e->lnormy));
										HX_STACK_LINE(2848)
										e->gnormy = ((e->lnormx * _this->axisx) + (e->lnormy * _this->axisy));
									}
									HX_STACK_LINE(2848)
									e->gprojection = (((_this->posx * e->gnormx) + (_this->posy * e->gnormy)) + e->lprojection);
									HX_STACK_LINE(2848)
									e->tp0 = ((u->y * e->gnormx) - (u->x * e->gnormy));
									HX_STACK_LINE(2848)
									e->tp1 = ((v->y * e->gnormx) - (v->x * e->gnormy));
								}
								HX_STACK_LINE(2848)
								u = v;
								HX_STACK_LINE(2848)
								cx_ite = cx_ite->next;
							}
							HX_STACK_LINE(2848)
							::zpp_nape::geom::ZPP_Vec2 v = p->gverts->next;		HX_STACK_VAR(v,"v");
							HX_STACK_LINE(2848)
							{
								HX_STACK_LINE(2848)
								::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
								HX_STACK_LINE(2848)
								ite = ite->next;
								HX_STACK_LINE(2848)
								{
									HX_STACK_LINE(2848)
									e->gnormx = ((_this->axisy * e->lnormx) - (_this->axisx * e->lnormy));
									HX_STACK_LINE(2848)
									e->gnormy = ((e->lnormx * _this->axisx) + (e->lnormy * _this->axisy));
								}
								HX_STACK_LINE(2848)
								e->gprojection = (((_this->posx * e->gnormx) + (_this->posy * e->gnormy)) + e->lprojection);
								HX_STACK_LINE(2848)
								e->tp0 = ((u->y * e->gnormx) - (u->x * e->gnormy));
								HX_STACK_LINE(2848)
								e->tp1 = ((v->y * e->gnormx) - (v->x * e->gnormy));
							}
						}
					}
				}
			}
			else{
				HX_STACK_LINE(2850)
				::zpp_nape::geom::ZPP_SweepDistance_obj::staticSweep(toi,deltaTime,(int)0,(int)0);
			}
			HX_STACK_LINE(2853)
			hx::MultEq(toi->toi,deltaTime);
			HX_STACK_LINE(2854)
			if (((toi->toi > (int)0))){
				struct _Function_3_1{
					inline static ::nape::geom::Vec2 Block( ::zpp_nape::geom::ZPP_ToiEvent &toi){
						HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",2855);
						{
							HX_STACK_LINE(2855)
							Float x = -(toi->axis->x);		HX_STACK_VAR(x,"x");
							Float y = -(toi->axis->y);		HX_STACK_VAR(y,"y");
							bool weak = false;		HX_STACK_VAR(weak,"weak");
							HX_STACK_LINE(2855)
							if (((bool((x != x)) || bool((y != y))))){
								HX_STACK_LINE(2855)
								hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
							}
							HX_STACK_LINE(2855)
							::nape::geom::Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
							HX_STACK_LINE(2855)
							if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
								HX_STACK_LINE(2855)
								ret1 = ::nape::geom::Vec2_obj::__new(null(),null());
							}
							else{
								HX_STACK_LINE(2855)
								ret1 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
								HX_STACK_LINE(2855)
								::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret1->zpp_pool;
								HX_STACK_LINE(2855)
								ret1->zpp_pool = null();
								HX_STACK_LINE(2855)
								ret1->zpp_disp = false;
								HX_STACK_LINE(2855)
								if (((ret1 == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
									HX_STACK_LINE(2855)
									::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
								}
							}
							HX_STACK_LINE(2855)
							if (((ret1->zpp_inner == null()))){
								struct _Function_5_1{
									inline static ::zpp_nape::geom::ZPP_Vec2 Block( Float &x,Float &y){
										HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",2855);
										{
											HX_STACK_LINE(2855)
											bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
											HX_STACK_LINE(2855)
											::zpp_nape::geom::ZPP_Vec2 ret2;		HX_STACK_VAR(ret2,"ret2");
											HX_STACK_LINE(2855)
											{
												HX_STACK_LINE(2855)
												if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
													HX_STACK_LINE(2855)
													ret2 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
												}
												else{
													HX_STACK_LINE(2855)
													ret2 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
													HX_STACK_LINE(2855)
													::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret2->next;
													HX_STACK_LINE(2855)
													ret2->next = null();
												}
												HX_STACK_LINE(2855)
												ret2->weak = false;
											}
											HX_STACK_LINE(2855)
											ret2->_immutable = immutable;
											HX_STACK_LINE(2855)
											{
												HX_STACK_LINE(2855)
												ret2->x = x;
												HX_STACK_LINE(2855)
												ret2->y = y;
												HX_STACK_LINE(2855)
												{
												}
												HX_STACK_LINE(2855)
												{
												}
											}
											HX_STACK_LINE(2855)
											return ret2;
										}
										return null();
									}
								};
								HX_STACK_LINE(2855)
								ret1->zpp_inner = _Function_5_1::Block(x,y);
								HX_STACK_LINE(2855)
								ret1->zpp_inner->outer = ret1;
							}
							else{
								HX_STACK_LINE(2855)
								if (((bool((ret1 != null())) && bool(ret1->zpp_disp)))){
									HX_STACK_LINE(2855)
									hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
								}
								HX_STACK_LINE(2855)
								{
									HX_STACK_LINE(2855)
									::zpp_nape::geom::ZPP_Vec2 _this = ret1->zpp_inner;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(2855)
									if ((_this->_immutable)){
										HX_STACK_LINE(2855)
										hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
									}
									HX_STACK_LINE(2855)
									if (((_this->_isimmutable_dyn() != null()))){
										HX_STACK_LINE(2855)
										_this->_isimmutable();
									}
								}
								HX_STACK_LINE(2855)
								if (((bool((x != x)) || bool((y != y))))){
									HX_STACK_LINE(2855)
									hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
								}
								struct _Function_5_1{
									inline static Float Block( ::nape::geom::Vec2 &ret1){
										HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",2855);
										{
											HX_STACK_LINE(2855)
											if (((bool((ret1 != null())) && bool(ret1->zpp_disp)))){
												HX_STACK_LINE(2855)
												hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
											}
											HX_STACK_LINE(2855)
											{
												HX_STACK_LINE(2855)
												::zpp_nape::geom::ZPP_Vec2 _this = ret1->zpp_inner;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(2855)
												if (((_this->_validate_dyn() != null()))){
													HX_STACK_LINE(2855)
													_this->_validate();
												}
											}
											HX_STACK_LINE(2855)
											return ret1->zpp_inner->x;
										}
										return null();
									}
								};
								struct _Function_5_2{
									inline static Float Block( ::nape::geom::Vec2 &ret1){
										HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",2855);
										{
											HX_STACK_LINE(2855)
											if (((bool((ret1 != null())) && bool(ret1->zpp_disp)))){
												HX_STACK_LINE(2855)
												hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
											}
											HX_STACK_LINE(2855)
											{
												HX_STACK_LINE(2855)
												::zpp_nape::geom::ZPP_Vec2 _this = ret1->zpp_inner;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(2855)
												if (((_this->_validate_dyn() != null()))){
													HX_STACK_LINE(2855)
													_this->_validate();
												}
											}
											HX_STACK_LINE(2855)
											return ret1->zpp_inner->y;
										}
										return null();
									}
								};
								HX_STACK_LINE(2855)
								if ((!(((bool((_Function_5_1::Block(ret1) == x)) && bool((_Function_5_2::Block(ret1) == y))))))){
									HX_STACK_LINE(2855)
									{
										HX_STACK_LINE(2855)
										ret1->zpp_inner->x = x;
										HX_STACK_LINE(2855)
										ret1->zpp_inner->y = y;
										HX_STACK_LINE(2855)
										{
										}
										HX_STACK_LINE(2855)
										{
										}
									}
									HX_STACK_LINE(2855)
									{
										HX_STACK_LINE(2855)
										::zpp_nape::geom::ZPP_Vec2 _this = ret1->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(2855)
										if (((_this->_invalidate_dyn() != null()))){
											HX_STACK_LINE(2855)
											_this->_invalidate(_this);
										}
									}
								}
								HX_STACK_LINE(2855)
								ret1;
							}
							HX_STACK_LINE(2855)
							ret1->zpp_inner->weak = weak;
							HX_STACK_LINE(2855)
							return ret1;
						}
						return null();
					}
				};
				struct _Function_3_2{
					inline static ::nape::geom::Vec2 Block( ::zpp_nape::geom::ZPP_ToiEvent &toi){
						HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",2855);
						{
							HX_STACK_LINE(2855)
							Float x = toi->c2->x;		HX_STACK_VAR(x,"x");
							Float y = toi->c2->y;		HX_STACK_VAR(y,"y");
							bool weak = false;		HX_STACK_VAR(weak,"weak");
							HX_STACK_LINE(2855)
							if (((bool((x != x)) || bool((y != y))))){
								HX_STACK_LINE(2855)
								hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
							}
							HX_STACK_LINE(2855)
							::nape::geom::Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
							HX_STACK_LINE(2855)
							if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
								HX_STACK_LINE(2855)
								ret1 = ::nape::geom::Vec2_obj::__new(null(),null());
							}
							else{
								HX_STACK_LINE(2855)
								ret1 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
								HX_STACK_LINE(2855)
								::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret1->zpp_pool;
								HX_STACK_LINE(2855)
								ret1->zpp_pool = null();
								HX_STACK_LINE(2855)
								ret1->zpp_disp = false;
								HX_STACK_LINE(2855)
								if (((ret1 == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
									HX_STACK_LINE(2855)
									::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
								}
							}
							HX_STACK_LINE(2855)
							if (((ret1->zpp_inner == null()))){
								struct _Function_5_1{
									inline static ::zpp_nape::geom::ZPP_Vec2 Block( Float &x,Float &y){
										HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",2855);
										{
											HX_STACK_LINE(2855)
											bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
											HX_STACK_LINE(2855)
											::zpp_nape::geom::ZPP_Vec2 ret2;		HX_STACK_VAR(ret2,"ret2");
											HX_STACK_LINE(2855)
											{
												HX_STACK_LINE(2855)
												if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
													HX_STACK_LINE(2855)
													ret2 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
												}
												else{
													HX_STACK_LINE(2855)
													ret2 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
													HX_STACK_LINE(2855)
													::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret2->next;
													HX_STACK_LINE(2855)
													ret2->next = null();
												}
												HX_STACK_LINE(2855)
												ret2->weak = false;
											}
											HX_STACK_LINE(2855)
											ret2->_immutable = immutable;
											HX_STACK_LINE(2855)
											{
												HX_STACK_LINE(2855)
												ret2->x = x;
												HX_STACK_LINE(2855)
												ret2->y = y;
												HX_STACK_LINE(2855)
												{
												}
												HX_STACK_LINE(2855)
												{
												}
											}
											HX_STACK_LINE(2855)
											return ret2;
										}
										return null();
									}
								};
								HX_STACK_LINE(2855)
								ret1->zpp_inner = _Function_5_1::Block(x,y);
								HX_STACK_LINE(2855)
								ret1->zpp_inner->outer = ret1;
							}
							else{
								HX_STACK_LINE(2855)
								if (((bool((ret1 != null())) && bool(ret1->zpp_disp)))){
									HX_STACK_LINE(2855)
									hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
								}
								HX_STACK_LINE(2855)
								{
									HX_STACK_LINE(2855)
									::zpp_nape::geom::ZPP_Vec2 _this = ret1->zpp_inner;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(2855)
									if ((_this->_immutable)){
										HX_STACK_LINE(2855)
										hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
									}
									HX_STACK_LINE(2855)
									if (((_this->_isimmutable_dyn() != null()))){
										HX_STACK_LINE(2855)
										_this->_isimmutable();
									}
								}
								HX_STACK_LINE(2855)
								if (((bool((x != x)) || bool((y != y))))){
									HX_STACK_LINE(2855)
									hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
								}
								struct _Function_5_1{
									inline static Float Block( ::nape::geom::Vec2 &ret1){
										HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",2855);
										{
											HX_STACK_LINE(2855)
											if (((bool((ret1 != null())) && bool(ret1->zpp_disp)))){
												HX_STACK_LINE(2855)
												hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
											}
											HX_STACK_LINE(2855)
											{
												HX_STACK_LINE(2855)
												::zpp_nape::geom::ZPP_Vec2 _this = ret1->zpp_inner;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(2855)
												if (((_this->_validate_dyn() != null()))){
													HX_STACK_LINE(2855)
													_this->_validate();
												}
											}
											HX_STACK_LINE(2855)
											return ret1->zpp_inner->x;
										}
										return null();
									}
								};
								struct _Function_5_2{
									inline static Float Block( ::nape::geom::Vec2 &ret1){
										HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",2855);
										{
											HX_STACK_LINE(2855)
											if (((bool((ret1 != null())) && bool(ret1->zpp_disp)))){
												HX_STACK_LINE(2855)
												hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
											}
											HX_STACK_LINE(2855)
											{
												HX_STACK_LINE(2855)
												::zpp_nape::geom::ZPP_Vec2 _this = ret1->zpp_inner;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(2855)
												if (((_this->_validate_dyn() != null()))){
													HX_STACK_LINE(2855)
													_this->_validate();
												}
											}
											HX_STACK_LINE(2855)
											return ret1->zpp_inner->y;
										}
										return null();
									}
								};
								HX_STACK_LINE(2855)
								if ((!(((bool((_Function_5_1::Block(ret1) == x)) && bool((_Function_5_2::Block(ret1) == y))))))){
									HX_STACK_LINE(2855)
									{
										HX_STACK_LINE(2855)
										ret1->zpp_inner->x = x;
										HX_STACK_LINE(2855)
										ret1->zpp_inner->y = y;
										HX_STACK_LINE(2855)
										{
										}
										HX_STACK_LINE(2855)
										{
										}
									}
									HX_STACK_LINE(2855)
									{
										HX_STACK_LINE(2855)
										::zpp_nape::geom::ZPP_Vec2 _this = ret1->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(2855)
										if (((_this->_invalidate_dyn() != null()))){
											HX_STACK_LINE(2855)
											_this->_invalidate(_this);
										}
									}
								}
								HX_STACK_LINE(2855)
								ret1;
							}
							HX_STACK_LINE(2855)
							ret1->zpp_inner->weak = weak;
							HX_STACK_LINE(2855)
							return ret1;
						}
						return null();
					}
				};
				HX_STACK_LINE(2855)
				::nape::geom::ConvexResult res = ::zpp_nape::geom::ZPP_ConvexRayResult_obj::getConvex(_Function_3_1::Block(toi),_Function_3_2::Block(toi),toi->toi,s);		HX_STACK_VAR(res,"res");
				HX_STACK_LINE(2856)
				{
					HX_STACK_LINE(2857)
					::zpp_nape::util::ZNPNode_ConvexResult pre = null();		HX_STACK_VAR(pre,"pre");
					HX_STACK_LINE(2858)
					{
						HX_STACK_LINE(2859)
						::zpp_nape::util::ZNPNode_ConvexResult cx_ite = ret->zpp_inner->inner->head;		HX_STACK_VAR(cx_ite,"cx_ite");
						HX_STACK_LINE(2860)
						while(((cx_ite != null()))){
							HX_STACK_LINE(2861)
							::nape::geom::ConvexResult j = cx_ite->elt;		HX_STACK_VAR(j,"j");
							HX_STACK_LINE(2862)
							{
								struct _Function_7_1{
									inline static Float Block( ::nape::geom::ConvexResult &res){
										HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",2863);
										{
											HX_STACK_LINE(2863)
											if (((res->zpp_inner->next != null()))){
												HX_STACK_LINE(2863)
												hx::Throw (HX_CSTRING("Error: This object has been disposed of and cannot be used"));
											}
											HX_STACK_LINE(2863)
											return res->zpp_inner->toiDistance;
										}
										return null();
									}
								};
								struct _Function_7_2{
									inline static Float Block( ::nape::geom::ConvexResult &j){
										HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",2863);
										{
											HX_STACK_LINE(2863)
											if (((j->zpp_inner->next != null()))){
												HX_STACK_LINE(2863)
												hx::Throw (HX_CSTRING("Error: This object has been disposed of and cannot be used"));
											}
											HX_STACK_LINE(2863)
											return j->zpp_inner->toiDistance;
										}
										return null();
									}
								};
								HX_STACK_LINE(2863)
								if (((_Function_7_1::Block(res) < _Function_7_2::Block(j)))){
									HX_STACK_LINE(2863)
									break;
								}
								HX_STACK_LINE(2864)
								pre = cx_ite;
							}
							HX_STACK_LINE(2866)
							cx_ite = cx_ite->next;
						}
					}
					HX_STACK_LINE(2869)
					{
						HX_STACK_LINE(2869)
						::zpp_nape::util::ZNPList_ConvexResult _this = ret->zpp_inner->inner;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(2869)
						{
						}
						struct _Function_5_1{
							inline static ::zpp_nape::util::ZNPNode_ConvexResult Block( ::nape::geom::ConvexResult &res){
								HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",2869);
								{
									HX_STACK_LINE(2869)
									::zpp_nape::util::ZNPNode_ConvexResult ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(2869)
									{
										HX_STACK_LINE(2869)
										if (((::zpp_nape::util::ZNPNode_ConvexResult_obj::zpp_pool == null()))){
											HX_STACK_LINE(2869)
											ret1 = ::zpp_nape::util::ZNPNode_ConvexResult_obj::__new();
										}
										else{
											HX_STACK_LINE(2869)
											ret1 = ::zpp_nape::util::ZNPNode_ConvexResult_obj::zpp_pool;
											HX_STACK_LINE(2869)
											::zpp_nape::util::ZNPNode_ConvexResult_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(2869)
											ret1->next = null();
										}
										HX_STACK_LINE(2869)
										Dynamic();
									}
									HX_STACK_LINE(2869)
									ret1->elt = res;
									HX_STACK_LINE(2869)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(2869)
						::zpp_nape::util::ZNPNode_ConvexResult temp = _Function_5_1::Block(res);		HX_STACK_VAR(temp,"temp");
						HX_STACK_LINE(2869)
						if (((pre == null()))){
							HX_STACK_LINE(2869)
							temp->next = _this->head;
							HX_STACK_LINE(2869)
							_this->head = temp;
						}
						else{
							HX_STACK_LINE(2869)
							temp->next = pre->next;
							HX_STACK_LINE(2869)
							pre->next = temp;
						}
						HX_STACK_LINE(2869)
						_this->pushmod = _this->modified = true;
						HX_STACK_LINE(2869)
						(_this->length)++;
						HX_STACK_LINE(2869)
						temp;
					}
				}
			}
		}
;
	}
	HX_STACK_LINE(2874)
	list->clear();
	HX_STACK_LINE(2875)
	{
		HX_STACK_LINE(2876)
		::zpp_nape::geom::ZPP_ToiEvent o = toi;		HX_STACK_VAR(o,"o");
		HX_STACK_LINE(2877)
		{
		}
		HX_STACK_LINE(2886)
		o->next = ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool;
		HX_STACK_LINE(2887)
		::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool = o;
	}
	HX_STACK_LINE(2892)
	{
		HX_STACK_LINE(2892)
		Float delta = ((int)0 - body->sweepTime);		HX_STACK_VAR(delta,"delta");
		HX_STACK_LINE(2892)
		if (((delta != (int)0))){
			HX_STACK_LINE(2892)
			{
			}
			HX_STACK_LINE(2892)
			body->sweepTime = (int)0;
			HX_STACK_LINE(2892)
			{
				HX_STACK_LINE(2892)
				Float t = delta;		HX_STACK_VAR(t,"t");
				HX_STACK_LINE(2892)
				{
				}
				HX_STACK_LINE(2892)
				hx::AddEq(body->posx,(body->velx * t));
				HX_STACK_LINE(2892)
				hx::AddEq(body->posy,(body->vely * t));
			}
			HX_STACK_LINE(2892)
			if (((body->angvel != (int)0))){
				HX_STACK_LINE(2892)
				Float dr = (body->sweep_angvel * delta);		HX_STACK_VAR(dr,"dr");
				HX_STACK_LINE(2892)
				hx::AddEq(body->rot,dr);
				HX_STACK_LINE(2892)
				if ((((dr * dr) > 0.0001))){
					HX_STACK_LINE(2892)
					body->axisx = ::Math_obj::sin(body->rot);
					HX_STACK_LINE(2892)
					body->axisy = ::Math_obj::cos(body->rot);
					HX_STACK_LINE(2892)
					{
					}
					HX_STACK_LINE(2892)
					Dynamic();
				}
				else{
					HX_STACK_LINE(2892)
					Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
					HX_STACK_LINE(2892)
					Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
					HX_STACK_LINE(2892)
					Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
					HX_STACK_LINE(2892)
					Float nx = ((((p * body->axisx) + (dr * body->axisy))) * m);		HX_STACK_VAR(nx,"nx");
					HX_STACK_LINE(2892)
					body->axisy = ((((p * body->axisy) - (dr * body->axisx))) * m);
					HX_STACK_LINE(2892)
					body->axisx = nx;
				}
			}
		}
	}
	HX_STACK_LINE(2893)
	{
		HX_STACK_LINE(2893)
		{
		}
		HX_STACK_LINE(2893)
		if (((shape->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE))){
			HX_STACK_LINE(2893)
			shape->worldCOMx = (body->posx + (((body->axisy * shape->localCOMx) - (body->axisx * shape->localCOMy))));
			HX_STACK_LINE(2893)
			shape->worldCOMy = (body->posy + (((shape->localCOMx * body->axisx) + (shape->localCOMy * body->axisy))));
		}
		else{
			HX_STACK_LINE(2893)
			::zpp_nape::shape::ZPP_Polygon p = shape->polygon;		HX_STACK_VAR(p,"p");
			HX_STACK_LINE(2893)
			::zpp_nape::geom::ZPP_Vec2 li = p->lverts->next;		HX_STACK_VAR(li,"li");
			HX_STACK_LINE(2893)
			{
				HX_STACK_LINE(2893)
				::zpp_nape::geom::ZPP_Vec2 cx_ite = p->gverts->next;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(2893)
				while(((cx_ite != null()))){
					HX_STACK_LINE(2893)
					::zpp_nape::geom::ZPP_Vec2 g = cx_ite;		HX_STACK_VAR(g,"g");
					HX_STACK_LINE(2893)
					{
						HX_STACK_LINE(2893)
						::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
						HX_STACK_LINE(2893)
						li = li->next;
						HX_STACK_LINE(2893)
						{
							HX_STACK_LINE(2893)
							g->x = (body->posx + (((body->axisy * l->x) - (body->axisx * l->y))));
							HX_STACK_LINE(2893)
							g->y = (body->posy + (((l->x * body->axisx) + (l->y * body->axisy))));
						}
					}
					HX_STACK_LINE(2893)
					cx_ite = cx_ite->next;
				}
			}
			HX_STACK_LINE(2893)
			::zpp_nape::util::ZNPNode_ZPP_Edge ite = p->edges->head;		HX_STACK_VAR(ite,"ite");
			HX_STACK_LINE(2893)
			{
				HX_STACK_LINE(2893)
				::zpp_nape::geom::ZPP_Vec2 cx_ite = p->gverts->next;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(2893)
				::zpp_nape::geom::ZPP_Vec2 u = cx_ite;		HX_STACK_VAR(u,"u");
				HX_STACK_LINE(2893)
				cx_ite = cx_ite->next;
				HX_STACK_LINE(2893)
				while(((cx_ite != null()))){
					HX_STACK_LINE(2893)
					::zpp_nape::geom::ZPP_Vec2 v = cx_ite;		HX_STACK_VAR(v,"v");
					HX_STACK_LINE(2893)
					{
						HX_STACK_LINE(2893)
						::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
						HX_STACK_LINE(2893)
						ite = ite->next;
						HX_STACK_LINE(2893)
						{
							HX_STACK_LINE(2893)
							e->gnormx = ((body->axisy * e->lnormx) - (body->axisx * e->lnormy));
							HX_STACK_LINE(2893)
							e->gnormy = ((e->lnormx * body->axisx) + (e->lnormy * body->axisy));
						}
						HX_STACK_LINE(2893)
						e->gprojection = (((body->posx * e->gnormx) + (body->posy * e->gnormy)) + e->lprojection);
						HX_STACK_LINE(2893)
						e->tp0 = ((u->y * e->gnormx) - (u->x * e->gnormy));
						HX_STACK_LINE(2893)
						e->tp1 = ((v->y * e->gnormx) - (v->x * e->gnormy));
					}
					HX_STACK_LINE(2893)
					u = v;
					HX_STACK_LINE(2893)
					cx_ite = cx_ite->next;
				}
				HX_STACK_LINE(2893)
				::zpp_nape::geom::ZPP_Vec2 v = p->gverts->next;		HX_STACK_VAR(v,"v");
				HX_STACK_LINE(2893)
				{
					HX_STACK_LINE(2893)
					::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
					HX_STACK_LINE(2893)
					ite = ite->next;
					HX_STACK_LINE(2893)
					{
						HX_STACK_LINE(2893)
						e->gnormx = ((body->axisy * e->lnormx) - (body->axisx * e->lnormy));
						HX_STACK_LINE(2893)
						e->gnormy = ((e->lnormx * body->axisx) + (e->lnormy * body->axisy));
					}
					HX_STACK_LINE(2893)
					e->gprojection = (((body->posx * e->gnormx) + (body->posy * e->gnormy)) + e->lprojection);
					HX_STACK_LINE(2893)
					e->tp0 = ((u->y * e->gnormx) - (u->x * e->gnormy));
					HX_STACK_LINE(2893)
					e->tp1 = ((v->y * e->gnormx) - (v->x * e->gnormy));
				}
			}
		}
	}
	HX_STACK_LINE(2894)
	return ret;
}


HX_DEFINE_DYNAMIC_FUNC5(ZPP_Space_obj,convexMultiCast,return )

Void ZPP_Space_obj::prepareCast( ::zpp_nape::shape::ZPP_Shape s){
{
		HX_STACK_PUSH("ZPP_Space::prepareCast","zpp_nape/space/Space.hx",2747);
		HX_STACK_THIS(this);
		HX_STACK_ARG(s,"s");
		HX_STACK_LINE(2747)
		if (((s->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE))){
			HX_STACK_LINE(2748)
			::zpp_nape::shape::ZPP_Circle _this = s->circle;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(2748)
			if ((_this->zip_worldCOM)){
				HX_STACK_LINE(2748)
				if (((_this->body != null()))){
					HX_STACK_LINE(2748)
					_this->zip_worldCOM = false;
					HX_STACK_LINE(2748)
					if ((_this->zip_localCOM)){
						HX_STACK_LINE(2748)
						_this->zip_localCOM = false;
						HX_STACK_LINE(2748)
						if (((_this->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_POLYGON))){
							HX_STACK_LINE(2748)
							::zpp_nape::shape::ZPP_Polygon _this1 = _this->polygon;		HX_STACK_VAR(_this1,"_this1");
							HX_STACK_LINE(2748)
							if (((_this1->lverts->next == null()))){
								HX_STACK_LINE(2748)
								hx::Throw (HX_CSTRING("Error: An empty polygon has no meaningful localCOM"));
							}
							HX_STACK_LINE(2748)
							if (((_this1->lverts->next->next == null()))){
								HX_STACK_LINE(2748)
								_this1->localCOMx = _this1->lverts->next->x;
								HX_STACK_LINE(2748)
								_this1->localCOMy = _this1->lverts->next->y;
								HX_STACK_LINE(2748)
								{
								}
								HX_STACK_LINE(2748)
								Dynamic();
							}
							else{
								HX_STACK_LINE(2748)
								if (((_this1->lverts->next->next->next == null()))){
									HX_STACK_LINE(2748)
									{
										HX_STACK_LINE(2748)
										_this1->localCOMx = _this1->lverts->next->x;
										HX_STACK_LINE(2748)
										_this1->localCOMy = _this1->lverts->next->y;
										HX_STACK_LINE(2748)
										{
										}
										HX_STACK_LINE(2748)
										{
										}
									}
									HX_STACK_LINE(2748)
									{
										HX_STACK_LINE(2748)
										Float t = 1.0;		HX_STACK_VAR(t,"t");
										HX_STACK_LINE(2748)
										{
										}
										HX_STACK_LINE(2748)
										hx::AddEq(_this1->localCOMx,(_this1->lverts->next->next->x * t));
										HX_STACK_LINE(2748)
										hx::AddEq(_this1->localCOMy,(_this1->lverts->next->next->y * t));
									}
									HX_STACK_LINE(2748)
									{
										HX_STACK_LINE(2748)
										Float t = 0.5;		HX_STACK_VAR(t,"t");
										HX_STACK_LINE(2748)
										{
										}
										HX_STACK_LINE(2748)
										hx::MultEq(_this1->localCOMx,t);
										HX_STACK_LINE(2748)
										hx::MultEq(_this1->localCOMy,t);
									}
								}
								else{
									HX_STACK_LINE(2748)
									{
										HX_STACK_LINE(2748)
										_this1->localCOMx = (int)0;
										HX_STACK_LINE(2748)
										_this1->localCOMy = (int)0;
										HX_STACK_LINE(2748)
										{
										}
										HX_STACK_LINE(2748)
										{
										}
									}
									HX_STACK_LINE(2748)
									Float area = 0.0;		HX_STACK_VAR(area,"area");
									HX_STACK_LINE(2748)
									{
										HX_STACK_LINE(2748)
										::zpp_nape::geom::ZPP_Vec2 cx_ite = _this1->lverts->next;		HX_STACK_VAR(cx_ite,"cx_ite");
										HX_STACK_LINE(2748)
										::zpp_nape::geom::ZPP_Vec2 u = cx_ite;		HX_STACK_VAR(u,"u");
										HX_STACK_LINE(2748)
										cx_ite = cx_ite->next;
										HX_STACK_LINE(2748)
										::zpp_nape::geom::ZPP_Vec2 v = cx_ite;		HX_STACK_VAR(v,"v");
										HX_STACK_LINE(2748)
										cx_ite = cx_ite->next;
										HX_STACK_LINE(2748)
										while(((cx_ite != null()))){
											HX_STACK_LINE(2748)
											::zpp_nape::geom::ZPP_Vec2 w = cx_ite;		HX_STACK_VAR(w,"w");
											HX_STACK_LINE(2748)
											{
												HX_STACK_LINE(2748)
												hx::AddEq(area,(v->x * ((w->y - u->y))));
												HX_STACK_LINE(2748)
												Float cf = ((w->y * v->x) - (w->x * v->y));		HX_STACK_VAR(cf,"cf");
												HX_STACK_LINE(2748)
												hx::AddEq(_this1->localCOMx,(((v->x + w->x)) * cf));
												HX_STACK_LINE(2748)
												hx::AddEq(_this1->localCOMy,(((v->y + w->y)) * cf));
											}
											HX_STACK_LINE(2748)
											u = v;
											HX_STACK_LINE(2748)
											v = w;
											HX_STACK_LINE(2748)
											cx_ite = cx_ite->next;
										}
										HX_STACK_LINE(2748)
										cx_ite = _this1->lverts->next;
										HX_STACK_LINE(2748)
										::zpp_nape::geom::ZPP_Vec2 w = cx_ite;		HX_STACK_VAR(w,"w");
										HX_STACK_LINE(2748)
										{
											HX_STACK_LINE(2748)
											hx::AddEq(area,(v->x * ((w->y - u->y))));
											HX_STACK_LINE(2748)
											Float cf = ((w->y * v->x) - (w->x * v->y));		HX_STACK_VAR(cf,"cf");
											HX_STACK_LINE(2748)
											hx::AddEq(_this1->localCOMx,(((v->x + w->x)) * cf));
											HX_STACK_LINE(2748)
											hx::AddEq(_this1->localCOMy,(((v->y + w->y)) * cf));
										}
										HX_STACK_LINE(2748)
										u = v;
										HX_STACK_LINE(2748)
										v = w;
										HX_STACK_LINE(2748)
										cx_ite = cx_ite->next;
										HX_STACK_LINE(2748)
										::zpp_nape::geom::ZPP_Vec2 w1 = cx_ite;		HX_STACK_VAR(w1,"w1");
										HX_STACK_LINE(2748)
										{
											HX_STACK_LINE(2748)
											hx::AddEq(area,(v->x * ((w1->y - u->y))));
											HX_STACK_LINE(2748)
											Float cf = ((w1->y * v->x) - (w1->x * v->y));		HX_STACK_VAR(cf,"cf");
											HX_STACK_LINE(2748)
											hx::AddEq(_this1->localCOMx,(((v->x + w1->x)) * cf));
											HX_STACK_LINE(2748)
											hx::AddEq(_this1->localCOMy,(((v->y + w1->y)) * cf));
										}
									}
									HX_STACK_LINE(2748)
									area = (Float((int)1) / Float((((int)3 * area))));
									HX_STACK_LINE(2748)
									{
										HX_STACK_LINE(2748)
										Float t = area;		HX_STACK_VAR(t,"t");
										HX_STACK_LINE(2748)
										{
										}
										HX_STACK_LINE(2748)
										hx::MultEq(_this1->localCOMx,t);
										HX_STACK_LINE(2748)
										hx::MultEq(_this1->localCOMy,t);
									}
								}
							}
						}
					}
					HX_STACK_LINE(2748)
					{
						HX_STACK_LINE(2748)
						::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
						HX_STACK_LINE(2748)
						if ((_this1->zip_axis)){
							HX_STACK_LINE(2748)
							_this1->zip_axis = false;
							HX_STACK_LINE(2748)
							{
								HX_STACK_LINE(2748)
								_this1->axisx = ::Math_obj::sin(_this1->rot);
								HX_STACK_LINE(2748)
								_this1->axisy = ::Math_obj::cos(_this1->rot);
								HX_STACK_LINE(2748)
								{
								}
								HX_STACK_LINE(2748)
								Dynamic();
							}
						}
					}
					HX_STACK_LINE(2748)
					{
						HX_STACK_LINE(2748)
						_this->worldCOMx = (_this->body->posx + (((_this->body->axisy * _this->localCOMx) - (_this->body->axisx * _this->localCOMy))));
						HX_STACK_LINE(2748)
						_this->worldCOMy = (_this->body->posy + (((_this->localCOMx * _this->body->axisx) + (_this->localCOMy * _this->body->axisy))));
					}
				}
			}
		}
		else{
			HX_STACK_LINE(2749)
			::zpp_nape::shape::ZPP_Polygon _this = s->polygon;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(2749)
			if ((_this->zip_gaxi)){
				HX_STACK_LINE(2749)
				if (((_this->body != null()))){
					HX_STACK_LINE(2749)
					_this->zip_gaxi = false;
					HX_STACK_LINE(2749)
					_this->validate_laxi();
					HX_STACK_LINE(2749)
					{
						HX_STACK_LINE(2749)
						::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
						HX_STACK_LINE(2749)
						if ((_this1->zip_axis)){
							HX_STACK_LINE(2749)
							_this1->zip_axis = false;
							HX_STACK_LINE(2749)
							{
								HX_STACK_LINE(2749)
								_this1->axisx = ::Math_obj::sin(_this1->rot);
								HX_STACK_LINE(2749)
								_this1->axisy = ::Math_obj::cos(_this1->rot);
								HX_STACK_LINE(2749)
								{
								}
								HX_STACK_LINE(2749)
								Dynamic();
							}
						}
					}
					HX_STACK_LINE(2749)
					if ((_this->zip_gverts)){
						HX_STACK_LINE(2749)
						if (((_this->body != null()))){
							HX_STACK_LINE(2749)
							_this->zip_gverts = false;
							HX_STACK_LINE(2749)
							_this->validate_lverts();
							HX_STACK_LINE(2749)
							{
								HX_STACK_LINE(2749)
								::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
								HX_STACK_LINE(2749)
								if ((_this1->zip_axis)){
									HX_STACK_LINE(2749)
									_this1->zip_axis = false;
									HX_STACK_LINE(2749)
									{
										HX_STACK_LINE(2749)
										_this1->axisx = ::Math_obj::sin(_this1->rot);
										HX_STACK_LINE(2749)
										_this1->axisy = ::Math_obj::cos(_this1->rot);
										HX_STACK_LINE(2749)
										{
										}
										HX_STACK_LINE(2749)
										Dynamic();
									}
								}
							}
							HX_STACK_LINE(2749)
							::zpp_nape::geom::ZPP_Vec2 li = _this->lverts->next;		HX_STACK_VAR(li,"li");
							HX_STACK_LINE(2749)
							{
								HX_STACK_LINE(2749)
								::zpp_nape::geom::ZPP_Vec2 cx_ite = _this->gverts->next;		HX_STACK_VAR(cx_ite,"cx_ite");
								HX_STACK_LINE(2749)
								while(((cx_ite != null()))){
									HX_STACK_LINE(2749)
									::zpp_nape::geom::ZPP_Vec2 g = cx_ite;		HX_STACK_VAR(g,"g");
									HX_STACK_LINE(2749)
									{
										HX_STACK_LINE(2749)
										::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
										HX_STACK_LINE(2749)
										li = li->next;
										HX_STACK_LINE(2749)
										{
											HX_STACK_LINE(2749)
											g->x = (_this->body->posx + (((_this->body->axisy * l->x) - (_this->body->axisx * l->y))));
											HX_STACK_LINE(2749)
											g->y = (_this->body->posy + (((l->x * _this->body->axisx) + (l->y * _this->body->axisy))));
										}
									}
									HX_STACK_LINE(2749)
									cx_ite = cx_ite->next;
								}
							}
						}
					}
					HX_STACK_LINE(2749)
					::zpp_nape::util::ZNPNode_ZPP_Edge ite = _this->edges->head;		HX_STACK_VAR(ite,"ite");
					HX_STACK_LINE(2749)
					{
						HX_STACK_LINE(2749)
						::zpp_nape::geom::ZPP_Vec2 cx_ite = _this->gverts->next;		HX_STACK_VAR(cx_ite,"cx_ite");
						HX_STACK_LINE(2749)
						::zpp_nape::geom::ZPP_Vec2 u = cx_ite;		HX_STACK_VAR(u,"u");
						HX_STACK_LINE(2749)
						cx_ite = cx_ite->next;
						HX_STACK_LINE(2749)
						while(((cx_ite != null()))){
							HX_STACK_LINE(2749)
							::zpp_nape::geom::ZPP_Vec2 v = cx_ite;		HX_STACK_VAR(v,"v");
							HX_STACK_LINE(2749)
							{
								HX_STACK_LINE(2749)
								::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
								HX_STACK_LINE(2749)
								ite = ite->next;
								HX_STACK_LINE(2749)
								e->gp0 = u;
								HX_STACK_LINE(2749)
								e->gp1 = v;
								HX_STACK_LINE(2749)
								{
									HX_STACK_LINE(2749)
									e->gnormx = ((_this->body->axisy * e->lnormx) - (_this->body->axisx * e->lnormy));
									HX_STACK_LINE(2749)
									e->gnormy = ((e->lnormx * _this->body->axisx) + (e->lnormy * _this->body->axisy));
								}
								HX_STACK_LINE(2749)
								e->gprojection = (((_this->body->posx * e->gnormx) + (_this->body->posy * e->gnormy)) + e->lprojection);
								HX_STACK_LINE(2749)
								if (((e->wrap_gnorm != null()))){
									HX_STACK_LINE(2749)
									e->wrap_gnorm->zpp_inner->x = e->gnormx;
									HX_STACK_LINE(2749)
									e->wrap_gnorm->zpp_inner->y = e->gnormy;
									HX_STACK_LINE(2749)
									{
									}
									HX_STACK_LINE(2749)
									{
									}
								}
								HX_STACK_LINE(2749)
								e->tp0 = ((e->gp0->y * e->gnormx) - (e->gp0->x * e->gnormy));
								HX_STACK_LINE(2749)
								e->tp1 = ((e->gp1->y * e->gnormx) - (e->gp1->x * e->gnormy));
							}
							HX_STACK_LINE(2749)
							u = v;
							HX_STACK_LINE(2749)
							cx_ite = cx_ite->next;
						}
						HX_STACK_LINE(2749)
						::zpp_nape::geom::ZPP_Vec2 v = _this->gverts->next;		HX_STACK_VAR(v,"v");
						HX_STACK_LINE(2749)
						{
							HX_STACK_LINE(2749)
							::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
							HX_STACK_LINE(2749)
							ite = ite->next;
							HX_STACK_LINE(2749)
							e->gp0 = u;
							HX_STACK_LINE(2749)
							e->gp1 = v;
							HX_STACK_LINE(2749)
							{
								HX_STACK_LINE(2749)
								e->gnormx = ((_this->body->axisy * e->lnormx) - (_this->body->axisx * e->lnormy));
								HX_STACK_LINE(2749)
								e->gnormy = ((e->lnormx * _this->body->axisx) + (e->lnormy * _this->body->axisy));
							}
							HX_STACK_LINE(2749)
							e->gprojection = (((_this->body->posx * e->gnormx) + (_this->body->posy * e->gnormy)) + e->lprojection);
							HX_STACK_LINE(2749)
							if (((e->wrap_gnorm != null()))){
								HX_STACK_LINE(2749)
								e->wrap_gnorm->zpp_inner->x = e->gnormx;
								HX_STACK_LINE(2749)
								e->wrap_gnorm->zpp_inner->y = e->gnormy;
								HX_STACK_LINE(2749)
								{
								}
								HX_STACK_LINE(2749)
								{
								}
							}
							HX_STACK_LINE(2749)
							e->tp0 = ((e->gp0->y * e->gnormx) - (e->gp0->x * e->gnormy));
							HX_STACK_LINE(2749)
							e->tp1 = ((e->gp1->y * e->gnormx) - (e->gp1->x * e->gnormy));
						}
					}
				}
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,prepareCast,(void))

::nape::geom::ConvexResult ZPP_Space_obj::convexCast( ::zpp_nape::shape::ZPP_Shape shape,Float deltaTime,::nape::dynamics::InteractionFilter filter,bool dynamics){
	HX_STACK_PUSH("ZPP_Space::convexCast","zpp_nape/space/Space.hx",2526);
	HX_STACK_THIS(this);
	HX_STACK_ARG(shape,"shape");
	HX_STACK_ARG(deltaTime,"deltaTime");
	HX_STACK_ARG(filter,"filter");
	HX_STACK_ARG(dynamics,"dynamics");
	HX_STACK_LINE(2527)
	::zpp_nape::geom::ZPP_ToiEvent toi;		HX_STACK_VAR(toi,"toi");
	HX_STACK_LINE(2528)
	{
		HX_STACK_LINE(2529)
		if (((::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool == null()))){
			HX_STACK_LINE(2529)
			toi = ::zpp_nape::geom::ZPP_ToiEvent_obj::__new();
		}
		else{
			HX_STACK_LINE(2536)
			toi = ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool;
			HX_STACK_LINE(2537)
			::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool = toi->next;
			HX_STACK_LINE(2538)
			toi->next = null();
		}
		HX_STACK_LINE(2543)
		{
			HX_STACK_LINE(2543)
			toi->failed = false;
			HX_STACK_LINE(2543)
			toi->s1 = toi->s2 = null();
			HX_STACK_LINE(2543)
			toi->arbiter = null();
		}
	}
	HX_STACK_LINE(2545)
	if (((shape->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE))){
		HX_STACK_LINE(2545)
		::zpp_nape::shape::ZPP_Circle _this = shape->circle;		HX_STACK_VAR(_this,"_this");
		HX_STACK_LINE(2545)
		if ((_this->zip_worldCOM)){
			HX_STACK_LINE(2545)
			if (((_this->body != null()))){
				HX_STACK_LINE(2545)
				_this->zip_worldCOM = false;
				HX_STACK_LINE(2545)
				if ((_this->zip_localCOM)){
					HX_STACK_LINE(2545)
					_this->zip_localCOM = false;
					HX_STACK_LINE(2545)
					if (((_this->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_POLYGON))){
						HX_STACK_LINE(2545)
						::zpp_nape::shape::ZPP_Polygon _this1 = _this->polygon;		HX_STACK_VAR(_this1,"_this1");
						HX_STACK_LINE(2545)
						if (((_this1->lverts->next == null()))){
							HX_STACK_LINE(2545)
							hx::Throw (HX_CSTRING("Error: An empty polygon has no meaningful localCOM"));
						}
						HX_STACK_LINE(2545)
						if (((_this1->lverts->next->next == null()))){
							HX_STACK_LINE(2545)
							_this1->localCOMx = _this1->lverts->next->x;
							HX_STACK_LINE(2545)
							_this1->localCOMy = _this1->lverts->next->y;
							HX_STACK_LINE(2545)
							{
							}
							HX_STACK_LINE(2545)
							Dynamic();
						}
						else{
							HX_STACK_LINE(2545)
							if (((_this1->lverts->next->next->next == null()))){
								HX_STACK_LINE(2545)
								{
									HX_STACK_LINE(2545)
									_this1->localCOMx = _this1->lverts->next->x;
									HX_STACK_LINE(2545)
									_this1->localCOMy = _this1->lverts->next->y;
									HX_STACK_LINE(2545)
									{
									}
									HX_STACK_LINE(2545)
									{
									}
								}
								HX_STACK_LINE(2545)
								{
									HX_STACK_LINE(2545)
									Float t = 1.0;		HX_STACK_VAR(t,"t");
									HX_STACK_LINE(2545)
									{
									}
									HX_STACK_LINE(2545)
									hx::AddEq(_this1->localCOMx,(_this1->lverts->next->next->x * t));
									HX_STACK_LINE(2545)
									hx::AddEq(_this1->localCOMy,(_this1->lverts->next->next->y * t));
								}
								HX_STACK_LINE(2545)
								{
									HX_STACK_LINE(2545)
									Float t = 0.5;		HX_STACK_VAR(t,"t");
									HX_STACK_LINE(2545)
									{
									}
									HX_STACK_LINE(2545)
									hx::MultEq(_this1->localCOMx,t);
									HX_STACK_LINE(2545)
									hx::MultEq(_this1->localCOMy,t);
								}
							}
							else{
								HX_STACK_LINE(2545)
								{
									HX_STACK_LINE(2545)
									_this1->localCOMx = (int)0;
									HX_STACK_LINE(2545)
									_this1->localCOMy = (int)0;
									HX_STACK_LINE(2545)
									{
									}
									HX_STACK_LINE(2545)
									{
									}
								}
								HX_STACK_LINE(2545)
								Float area = 0.0;		HX_STACK_VAR(area,"area");
								HX_STACK_LINE(2545)
								{
									HX_STACK_LINE(2545)
									::zpp_nape::geom::ZPP_Vec2 cx_ite = _this1->lverts->next;		HX_STACK_VAR(cx_ite,"cx_ite");
									HX_STACK_LINE(2545)
									::zpp_nape::geom::ZPP_Vec2 u = cx_ite;		HX_STACK_VAR(u,"u");
									HX_STACK_LINE(2545)
									cx_ite = cx_ite->next;
									HX_STACK_LINE(2545)
									::zpp_nape::geom::ZPP_Vec2 v = cx_ite;		HX_STACK_VAR(v,"v");
									HX_STACK_LINE(2545)
									cx_ite = cx_ite->next;
									HX_STACK_LINE(2545)
									while(((cx_ite != null()))){
										HX_STACK_LINE(2545)
										::zpp_nape::geom::ZPP_Vec2 w = cx_ite;		HX_STACK_VAR(w,"w");
										HX_STACK_LINE(2545)
										{
											HX_STACK_LINE(2545)
											hx::AddEq(area,(v->x * ((w->y - u->y))));
											HX_STACK_LINE(2545)
											Float cf = ((w->y * v->x) - (w->x * v->y));		HX_STACK_VAR(cf,"cf");
											HX_STACK_LINE(2545)
											hx::AddEq(_this1->localCOMx,(((v->x + w->x)) * cf));
											HX_STACK_LINE(2545)
											hx::AddEq(_this1->localCOMy,(((v->y + w->y)) * cf));
										}
										HX_STACK_LINE(2545)
										u = v;
										HX_STACK_LINE(2545)
										v = w;
										HX_STACK_LINE(2545)
										cx_ite = cx_ite->next;
									}
									HX_STACK_LINE(2545)
									cx_ite = _this1->lverts->next;
									HX_STACK_LINE(2545)
									::zpp_nape::geom::ZPP_Vec2 w = cx_ite;		HX_STACK_VAR(w,"w");
									HX_STACK_LINE(2545)
									{
										HX_STACK_LINE(2545)
										hx::AddEq(area,(v->x * ((w->y - u->y))));
										HX_STACK_LINE(2545)
										Float cf = ((w->y * v->x) - (w->x * v->y));		HX_STACK_VAR(cf,"cf");
										HX_STACK_LINE(2545)
										hx::AddEq(_this1->localCOMx,(((v->x + w->x)) * cf));
										HX_STACK_LINE(2545)
										hx::AddEq(_this1->localCOMy,(((v->y + w->y)) * cf));
									}
									HX_STACK_LINE(2545)
									u = v;
									HX_STACK_LINE(2545)
									v = w;
									HX_STACK_LINE(2545)
									cx_ite = cx_ite->next;
									HX_STACK_LINE(2545)
									::zpp_nape::geom::ZPP_Vec2 w1 = cx_ite;		HX_STACK_VAR(w1,"w1");
									HX_STACK_LINE(2545)
									{
										HX_STACK_LINE(2545)
										hx::AddEq(area,(v->x * ((w1->y - u->y))));
										HX_STACK_LINE(2545)
										Float cf = ((w1->y * v->x) - (w1->x * v->y));		HX_STACK_VAR(cf,"cf");
										HX_STACK_LINE(2545)
										hx::AddEq(_this1->localCOMx,(((v->x + w1->x)) * cf));
										HX_STACK_LINE(2545)
										hx::AddEq(_this1->localCOMy,(((v->y + w1->y)) * cf));
									}
								}
								HX_STACK_LINE(2545)
								area = (Float((int)1) / Float((((int)3 * area))));
								HX_STACK_LINE(2545)
								{
									HX_STACK_LINE(2545)
									Float t = area;		HX_STACK_VAR(t,"t");
									HX_STACK_LINE(2545)
									{
									}
									HX_STACK_LINE(2545)
									hx::MultEq(_this1->localCOMx,t);
									HX_STACK_LINE(2545)
									hx::MultEq(_this1->localCOMy,t);
								}
							}
						}
					}
				}
				HX_STACK_LINE(2545)
				{
					HX_STACK_LINE(2545)
					::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
					HX_STACK_LINE(2545)
					if ((_this1->zip_axis)){
						HX_STACK_LINE(2545)
						_this1->zip_axis = false;
						HX_STACK_LINE(2545)
						{
							HX_STACK_LINE(2545)
							_this1->axisx = ::Math_obj::sin(_this1->rot);
							HX_STACK_LINE(2545)
							_this1->axisy = ::Math_obj::cos(_this1->rot);
							HX_STACK_LINE(2545)
							{
							}
							HX_STACK_LINE(2545)
							Dynamic();
						}
					}
				}
				HX_STACK_LINE(2545)
				{
					HX_STACK_LINE(2545)
					_this->worldCOMx = (_this->body->posx + (((_this->body->axisy * _this->localCOMx) - (_this->body->axisx * _this->localCOMy))));
					HX_STACK_LINE(2545)
					_this->worldCOMy = (_this->body->posy + (((_this->localCOMx * _this->body->axisx) + (_this->localCOMy * _this->body->axisy))));
				}
			}
		}
	}
	else{
		HX_STACK_LINE(2545)
		::zpp_nape::shape::ZPP_Polygon _this = shape->polygon;		HX_STACK_VAR(_this,"_this");
		HX_STACK_LINE(2545)
		if ((_this->zip_gaxi)){
			HX_STACK_LINE(2545)
			if (((_this->body != null()))){
				HX_STACK_LINE(2545)
				_this->zip_gaxi = false;
				HX_STACK_LINE(2545)
				_this->validate_laxi();
				HX_STACK_LINE(2545)
				{
					HX_STACK_LINE(2545)
					::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
					HX_STACK_LINE(2545)
					if ((_this1->zip_axis)){
						HX_STACK_LINE(2545)
						_this1->zip_axis = false;
						HX_STACK_LINE(2545)
						{
							HX_STACK_LINE(2545)
							_this1->axisx = ::Math_obj::sin(_this1->rot);
							HX_STACK_LINE(2545)
							_this1->axisy = ::Math_obj::cos(_this1->rot);
							HX_STACK_LINE(2545)
							{
							}
							HX_STACK_LINE(2545)
							Dynamic();
						}
					}
				}
				HX_STACK_LINE(2545)
				if ((_this->zip_gverts)){
					HX_STACK_LINE(2545)
					if (((_this->body != null()))){
						HX_STACK_LINE(2545)
						_this->zip_gverts = false;
						HX_STACK_LINE(2545)
						_this->validate_lverts();
						HX_STACK_LINE(2545)
						{
							HX_STACK_LINE(2545)
							::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
							HX_STACK_LINE(2545)
							if ((_this1->zip_axis)){
								HX_STACK_LINE(2545)
								_this1->zip_axis = false;
								HX_STACK_LINE(2545)
								{
									HX_STACK_LINE(2545)
									_this1->axisx = ::Math_obj::sin(_this1->rot);
									HX_STACK_LINE(2545)
									_this1->axisy = ::Math_obj::cos(_this1->rot);
									HX_STACK_LINE(2545)
									{
									}
									HX_STACK_LINE(2545)
									Dynamic();
								}
							}
						}
						HX_STACK_LINE(2545)
						::zpp_nape::geom::ZPP_Vec2 li = _this->lverts->next;		HX_STACK_VAR(li,"li");
						HX_STACK_LINE(2545)
						{
							HX_STACK_LINE(2545)
							::zpp_nape::geom::ZPP_Vec2 cx_ite = _this->gverts->next;		HX_STACK_VAR(cx_ite,"cx_ite");
							HX_STACK_LINE(2545)
							while(((cx_ite != null()))){
								HX_STACK_LINE(2545)
								::zpp_nape::geom::ZPP_Vec2 g = cx_ite;		HX_STACK_VAR(g,"g");
								HX_STACK_LINE(2545)
								{
									HX_STACK_LINE(2545)
									::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
									HX_STACK_LINE(2545)
									li = li->next;
									HX_STACK_LINE(2545)
									{
										HX_STACK_LINE(2545)
										g->x = (_this->body->posx + (((_this->body->axisy * l->x) - (_this->body->axisx * l->y))));
										HX_STACK_LINE(2545)
										g->y = (_this->body->posy + (((l->x * _this->body->axisx) + (l->y * _this->body->axisy))));
									}
								}
								HX_STACK_LINE(2545)
								cx_ite = cx_ite->next;
							}
						}
					}
				}
				HX_STACK_LINE(2545)
				::zpp_nape::util::ZNPNode_ZPP_Edge ite = _this->edges->head;		HX_STACK_VAR(ite,"ite");
				HX_STACK_LINE(2545)
				{
					HX_STACK_LINE(2545)
					::zpp_nape::geom::ZPP_Vec2 cx_ite = _this->gverts->next;		HX_STACK_VAR(cx_ite,"cx_ite");
					HX_STACK_LINE(2545)
					::zpp_nape::geom::ZPP_Vec2 u = cx_ite;		HX_STACK_VAR(u,"u");
					HX_STACK_LINE(2545)
					cx_ite = cx_ite->next;
					HX_STACK_LINE(2545)
					while(((cx_ite != null()))){
						HX_STACK_LINE(2545)
						::zpp_nape::geom::ZPP_Vec2 v = cx_ite;		HX_STACK_VAR(v,"v");
						HX_STACK_LINE(2545)
						{
							HX_STACK_LINE(2545)
							::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
							HX_STACK_LINE(2545)
							ite = ite->next;
							HX_STACK_LINE(2545)
							e->gp0 = u;
							HX_STACK_LINE(2545)
							e->gp1 = v;
							HX_STACK_LINE(2545)
							{
								HX_STACK_LINE(2545)
								e->gnormx = ((_this->body->axisy * e->lnormx) - (_this->body->axisx * e->lnormy));
								HX_STACK_LINE(2545)
								e->gnormy = ((e->lnormx * _this->body->axisx) + (e->lnormy * _this->body->axisy));
							}
							HX_STACK_LINE(2545)
							e->gprojection = (((_this->body->posx * e->gnormx) + (_this->body->posy * e->gnormy)) + e->lprojection);
							HX_STACK_LINE(2545)
							if (((e->wrap_gnorm != null()))){
								HX_STACK_LINE(2545)
								e->wrap_gnorm->zpp_inner->x = e->gnormx;
								HX_STACK_LINE(2545)
								e->wrap_gnorm->zpp_inner->y = e->gnormy;
								HX_STACK_LINE(2545)
								{
								}
								HX_STACK_LINE(2545)
								{
								}
							}
							HX_STACK_LINE(2545)
							e->tp0 = ((e->gp0->y * e->gnormx) - (e->gp0->x * e->gnormy));
							HX_STACK_LINE(2545)
							e->tp1 = ((e->gp1->y * e->gnormx) - (e->gp1->x * e->gnormy));
						}
						HX_STACK_LINE(2545)
						u = v;
						HX_STACK_LINE(2545)
						cx_ite = cx_ite->next;
					}
					HX_STACK_LINE(2545)
					::zpp_nape::geom::ZPP_Vec2 v = _this->gverts->next;		HX_STACK_VAR(v,"v");
					HX_STACK_LINE(2545)
					{
						HX_STACK_LINE(2545)
						::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
						HX_STACK_LINE(2545)
						ite = ite->next;
						HX_STACK_LINE(2545)
						e->gp0 = u;
						HX_STACK_LINE(2545)
						e->gp1 = v;
						HX_STACK_LINE(2545)
						{
							HX_STACK_LINE(2545)
							e->gnormx = ((_this->body->axisy * e->lnormx) - (_this->body->axisx * e->lnormy));
							HX_STACK_LINE(2545)
							e->gnormy = ((e->lnormx * _this->body->axisx) + (e->lnormy * _this->body->axisy));
						}
						HX_STACK_LINE(2545)
						e->gprojection = (((_this->body->posx * e->gnormx) + (_this->body->posy * e->gnormy)) + e->lprojection);
						HX_STACK_LINE(2545)
						if (((e->wrap_gnorm != null()))){
							HX_STACK_LINE(2545)
							e->wrap_gnorm->zpp_inner->x = e->gnormx;
							HX_STACK_LINE(2545)
							e->wrap_gnorm->zpp_inner->y = e->gnormy;
							HX_STACK_LINE(2545)
							{
							}
							HX_STACK_LINE(2545)
							{
							}
						}
						HX_STACK_LINE(2545)
						e->tp0 = ((e->gp0->y * e->gnormx) - (e->gp0->x * e->gnormy));
						HX_STACK_LINE(2545)
						e->tp1 = ((e->gp1->y * e->gnormx) - (e->gp1->x * e->gnormy));
					}
				}
			}
		}
	}
	HX_STACK_LINE(2546)
	::zpp_nape::phys::ZPP_Body body = shape->body;		HX_STACK_VAR(body,"body");
	HX_STACK_LINE(2547)
	Float prex = body->posx;		HX_STACK_VAR(prex,"prex");
	HX_STACK_LINE(2548)
	Float prey = body->posy;		HX_STACK_VAR(prey,"prey");
	HX_STACK_LINE(2549)
	body->sweepTime = (int)0;
	HX_STACK_LINE(2550)
	body->sweep_angvel = body->angvel;
	HX_STACK_LINE(2551)
	{
		HX_STACK_LINE(2551)
		Float delta = (deltaTime - body->sweepTime);		HX_STACK_VAR(delta,"delta");
		HX_STACK_LINE(2551)
		if (((delta != (int)0))){
			HX_STACK_LINE(2551)
			{
			}
			HX_STACK_LINE(2551)
			body->sweepTime = deltaTime;
			HX_STACK_LINE(2551)
			{
				HX_STACK_LINE(2551)
				Float t = delta;		HX_STACK_VAR(t,"t");
				HX_STACK_LINE(2551)
				{
				}
				HX_STACK_LINE(2551)
				hx::AddEq(body->posx,(body->velx * t));
				HX_STACK_LINE(2551)
				hx::AddEq(body->posy,(body->vely * t));
			}
			HX_STACK_LINE(2551)
			if (((body->angvel != (int)0))){
				HX_STACK_LINE(2551)
				Float dr = (body->sweep_angvel * delta);		HX_STACK_VAR(dr,"dr");
				HX_STACK_LINE(2551)
				hx::AddEq(body->rot,dr);
				HX_STACK_LINE(2551)
				if ((((dr * dr) > 0.0001))){
					HX_STACK_LINE(2551)
					body->axisx = ::Math_obj::sin(body->rot);
					HX_STACK_LINE(2551)
					body->axisy = ::Math_obj::cos(body->rot);
					HX_STACK_LINE(2551)
					{
					}
					HX_STACK_LINE(2551)
					Dynamic();
				}
				else{
					HX_STACK_LINE(2551)
					Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
					HX_STACK_LINE(2551)
					Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
					HX_STACK_LINE(2551)
					Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
					HX_STACK_LINE(2551)
					Float nx = ((((p * body->axisx) + (dr * body->axisy))) * m);		HX_STACK_VAR(nx,"nx");
					HX_STACK_LINE(2551)
					body->axisy = ((((p * body->axisy) - (dr * body->axisx))) * m);
					HX_STACK_LINE(2551)
					body->axisx = nx;
				}
			}
		}
	}
	HX_STACK_LINE(2552)
	Float postx = body->posx;		HX_STACK_VAR(postx,"postx");
	HX_STACK_LINE(2553)
	Float posty = body->posy;		HX_STACK_VAR(posty,"posty");
	HX_STACK_LINE(2554)
	shape->validate_sweepRadius();
	HX_STACK_LINE(2555)
	Float rad = shape->sweepRadius;		HX_STACK_VAR(rad,"rad");
	HX_STACK_LINE(2556)
	::zpp_nape::geom::ZPP_AABB aabb;		HX_STACK_VAR(aabb,"aabb");
	HX_STACK_LINE(2557)
	{
		HX_STACK_LINE(2558)
		if (((::zpp_nape::geom::ZPP_AABB_obj::zpp_pool == null()))){
			HX_STACK_LINE(2558)
			aabb = ::zpp_nape::geom::ZPP_AABB_obj::__new();
		}
		else{
			HX_STACK_LINE(2565)
			aabb = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;
			HX_STACK_LINE(2566)
			::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = aabb->next;
			HX_STACK_LINE(2567)
			aabb->next = null();
		}
		HX_STACK_LINE(2572)
		Dynamic();
	}
	struct _Function_1_1{
		inline static Float Block( Float &prex,Float &postx){
			HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",2574);
			{
				HX_STACK_LINE(2575)
				Float x = prex;		HX_STACK_VAR(x,"x");
				HX_STACK_LINE(2576)
				Float y = postx;		HX_STACK_VAR(y,"y");
				HX_STACK_LINE(2577)
				return (  (((x < y))) ? Float(x) : Float(y) );
			}
			return null();
		}
	};
	HX_STACK_LINE(2574)
	aabb->minx = (_Function_1_1::Block(prex,postx) - rad);
	struct _Function_1_2{
		inline static Float Block( Float &prex,Float &postx){
			HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",2579);
			{
				HX_STACK_LINE(2580)
				Float x = prex;		HX_STACK_VAR(x,"x");
				HX_STACK_LINE(2581)
				Float y = postx;		HX_STACK_VAR(y,"y");
				HX_STACK_LINE(2582)
				return (  (((x > y))) ? Float(x) : Float(y) );
			}
			return null();
		}
	};
	HX_STACK_LINE(2579)
	aabb->maxx = (_Function_1_2::Block(prex,postx) + rad);
	struct _Function_1_3{
		inline static Float Block( Float &prey,Float &posty){
			HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",2584);
			{
				HX_STACK_LINE(2585)
				Float x = prey;		HX_STACK_VAR(x,"x");
				HX_STACK_LINE(2586)
				Float y = posty;		HX_STACK_VAR(y,"y");
				HX_STACK_LINE(2587)
				return (  (((x < y))) ? Float(x) : Float(y) );
			}
			return null();
		}
	};
	HX_STACK_LINE(2584)
	aabb->miny = (_Function_1_3::Block(prey,posty) - rad);
	struct _Function_1_4{
		inline static Float Block( Float &prey,Float &posty){
			HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",2589);
			{
				HX_STACK_LINE(2590)
				Float x = prey;		HX_STACK_VAR(x,"x");
				HX_STACK_LINE(2591)
				Float y = posty;		HX_STACK_VAR(y,"y");
				HX_STACK_LINE(2592)
				return (  (((x > y))) ? Float(x) : Float(y) );
			}
			return null();
		}
	};
	HX_STACK_LINE(2589)
	aabb->maxy = (_Function_1_4::Block(prey,posty) + rad);
	HX_STACK_LINE(2594)
	::nape::shape::ShapeList list = this->convexShapeList = this->bphase->shapesInAABB(aabb,false,false,(  (((filter == null()))) ? ::zpp_nape::dynamics::ZPP_InteractionFilter(null()) : ::zpp_nape::dynamics::ZPP_InteractionFilter(filter->zpp_inner) ),this->convexShapeList);		HX_STACK_VAR(list,"list");
	HX_STACK_LINE(2595)
	{
		HX_STACK_LINE(2596)
		::zpp_nape::geom::ZPP_AABB o = aabb;		HX_STACK_VAR(o,"o");
		HX_STACK_LINE(2597)
		{
		}
		HX_STACK_LINE(2605)
		{
			HX_STACK_LINE(2605)
			if (((o->outer != null()))){
				HX_STACK_LINE(2605)
				o->outer->zpp_inner = null();
				HX_STACK_LINE(2605)
				o->outer = null();
			}
			HX_STACK_LINE(2605)
			o->wrap_min = o->wrap_max = null();
			HX_STACK_LINE(2605)
			o->_invalidate = null();
			HX_STACK_LINE(2605)
			o->_validate = null();
		}
		HX_STACK_LINE(2606)
		o->next = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;
		HX_STACK_LINE(2607)
		::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = o;
	}
	HX_STACK_LINE(2612)
	Float minAxisx = 0.0;		HX_STACK_VAR(minAxisx,"minAxisx");
	HX_STACK_LINE(2613)
	Float minAxisy = 0.0;		HX_STACK_VAR(minAxisy,"minAxisy");
	HX_STACK_LINE(2614)
	{
		HX_STACK_LINE(2615)
		minAxisx = (int)0;
		HX_STACK_LINE(2616)
		minAxisy = (int)0;
		HX_STACK_LINE(2617)
		{
		}
		HX_STACK_LINE(2625)
		{
		}
	}
	HX_STACK_LINE(2634)
	Float minPosx = 0.0;		HX_STACK_VAR(minPosx,"minPosx");
	HX_STACK_LINE(2635)
	Float minPosy = 0.0;		HX_STACK_VAR(minPosy,"minPosy");
	HX_STACK_LINE(2636)
	{
		HX_STACK_LINE(2637)
		minPosx = (int)0;
		HX_STACK_LINE(2638)
		minPosy = (int)0;
		HX_STACK_LINE(2639)
		{
		}
		HX_STACK_LINE(2647)
		{
		}
	}
	HX_STACK_LINE(2656)
	::nape::shape::Shape mins = null();		HX_STACK_VAR(mins,"mins");
	HX_STACK_LINE(2657)
	Float mint = (deltaTime + (int)1);		HX_STACK_VAR(mint,"mint");
	struct _Function_1_5{
		inline static ::nape::shape::ShapeIterator Block( ::nape::shape::ShapeList &list){
			HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",2658);
			{
				HX_STACK_LINE(2658)
				list->zpp_inner->valmod();
				HX_STACK_LINE(2658)
				return ::nape::shape::ShapeIterator_obj::get(list);
			}
			return null();
		}
	};
	HX_STACK_LINE(2658)
	for(::cpp::FastIterator_obj< ::nape::shape::Shape > *__it = ::cpp::CreateFastIterator< ::nape::shape::Shape >(_Function_1_5::Block(list));  __it->hasNext(); ){
		::nape::shape::Shape s = __it->next();
		if (((bool((s != shape->outer)) && bool((((  (((s->zpp_inner->body != null()))) ? ::nape::phys::Body(s->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body->outer))))){
			HX_STACK_LINE(2660)
			toi->s1 = shape;
			HX_STACK_LINE(2661)
			toi->s2 = s->zpp_inner;
			HX_STACK_LINE(2662)
			if ((dynamics)){
				HX_STACK_LINE(2663)
				s->zpp_inner->validate_sweepRadius();
				HX_STACK_LINE(2664)
				((  (((s->zpp_inner->body != null()))) ? ::nape::phys::Body(s->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->sweep_angvel = ((  (((s->zpp_inner->body != null()))) ? ::nape::phys::Body(s->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->angvel;
				HX_STACK_LINE(2665)
				((  (((s->zpp_inner->body != null()))) ? ::nape::phys::Body(s->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->sweepTime = (int)0;
				HX_STACK_LINE(2666)
				::zpp_nape::geom::ZPP_SweepDistance_obj::dynamicSweep(toi,deltaTime,(int)0,(int)0,true);
				HX_STACK_LINE(2667)
				{
					HX_STACK_LINE(2667)
					::zpp_nape::phys::ZPP_Body _this = ((  (((s->zpp_inner->body != null()))) ? ::nape::phys::Body(s->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(2667)
					Float delta = ((int)0 - _this->sweepTime);		HX_STACK_VAR(delta,"delta");
					HX_STACK_LINE(2667)
					if (((delta != (int)0))){
						HX_STACK_LINE(2667)
						{
						}
						HX_STACK_LINE(2667)
						_this->sweepTime = (int)0;
						HX_STACK_LINE(2667)
						{
							HX_STACK_LINE(2667)
							Float t = delta;		HX_STACK_VAR(t,"t");
							HX_STACK_LINE(2667)
							{
							}
							HX_STACK_LINE(2667)
							hx::AddEq(_this->posx,(_this->velx * t));
							HX_STACK_LINE(2667)
							hx::AddEq(_this->posy,(_this->vely * t));
						}
						HX_STACK_LINE(2667)
						if (((_this->angvel != (int)0))){
							HX_STACK_LINE(2667)
							Float dr = (_this->sweep_angvel * delta);		HX_STACK_VAR(dr,"dr");
							HX_STACK_LINE(2667)
							hx::AddEq(_this->rot,dr);
							HX_STACK_LINE(2667)
							if ((((dr * dr) > 0.0001))){
								HX_STACK_LINE(2667)
								_this->axisx = ::Math_obj::sin(_this->rot);
								HX_STACK_LINE(2667)
								_this->axisy = ::Math_obj::cos(_this->rot);
								HX_STACK_LINE(2667)
								{
								}
								HX_STACK_LINE(2667)
								Dynamic();
							}
							else{
								HX_STACK_LINE(2667)
								Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
								HX_STACK_LINE(2667)
								Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
								HX_STACK_LINE(2667)
								Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
								HX_STACK_LINE(2667)
								Float nx = ((((p * _this->axisx) + (dr * _this->axisy))) * m);		HX_STACK_VAR(nx,"nx");
								HX_STACK_LINE(2667)
								_this->axisy = ((((p * _this->axisy) - (dr * _this->axisx))) * m);
								HX_STACK_LINE(2667)
								_this->axisx = nx;
							}
						}
					}
				}
				HX_STACK_LINE(2668)
				{
					HX_STACK_LINE(2668)
					::zpp_nape::phys::ZPP_Body _this = ((  (((s->zpp_inner->body != null()))) ? ::nape::phys::Body(s->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner;		HX_STACK_VAR(_this,"_this");
					::zpp_nape::shape::ZPP_Shape s1 = s->zpp_inner;		HX_STACK_VAR(s1,"s1");
					HX_STACK_LINE(2668)
					{
					}
					HX_STACK_LINE(2668)
					if (((s1->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE))){
						HX_STACK_LINE(2668)
						s1->worldCOMx = (_this->posx + (((_this->axisy * s1->localCOMx) - (_this->axisx * s1->localCOMy))));
						HX_STACK_LINE(2668)
						s1->worldCOMy = (_this->posy + (((s1->localCOMx * _this->axisx) + (s1->localCOMy * _this->axisy))));
					}
					else{
						HX_STACK_LINE(2668)
						::zpp_nape::shape::ZPP_Polygon p = s1->polygon;		HX_STACK_VAR(p,"p");
						HX_STACK_LINE(2668)
						::zpp_nape::geom::ZPP_Vec2 li = p->lverts->next;		HX_STACK_VAR(li,"li");
						HX_STACK_LINE(2668)
						{
							HX_STACK_LINE(2668)
							::zpp_nape::geom::ZPP_Vec2 cx_ite = p->gverts->next;		HX_STACK_VAR(cx_ite,"cx_ite");
							HX_STACK_LINE(2668)
							while(((cx_ite != null()))){
								HX_STACK_LINE(2668)
								::zpp_nape::geom::ZPP_Vec2 g = cx_ite;		HX_STACK_VAR(g,"g");
								HX_STACK_LINE(2668)
								{
									HX_STACK_LINE(2668)
									::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
									HX_STACK_LINE(2668)
									li = li->next;
									HX_STACK_LINE(2668)
									{
										HX_STACK_LINE(2668)
										g->x = (_this->posx + (((_this->axisy * l->x) - (_this->axisx * l->y))));
										HX_STACK_LINE(2668)
										g->y = (_this->posy + (((l->x * _this->axisx) + (l->y * _this->axisy))));
									}
								}
								HX_STACK_LINE(2668)
								cx_ite = cx_ite->next;
							}
						}
						HX_STACK_LINE(2668)
						::zpp_nape::util::ZNPNode_ZPP_Edge ite = p->edges->head;		HX_STACK_VAR(ite,"ite");
						HX_STACK_LINE(2668)
						{
							HX_STACK_LINE(2668)
							::zpp_nape::geom::ZPP_Vec2 cx_ite = p->gverts->next;		HX_STACK_VAR(cx_ite,"cx_ite");
							HX_STACK_LINE(2668)
							::zpp_nape::geom::ZPP_Vec2 u = cx_ite;		HX_STACK_VAR(u,"u");
							HX_STACK_LINE(2668)
							cx_ite = cx_ite->next;
							HX_STACK_LINE(2668)
							while(((cx_ite != null()))){
								HX_STACK_LINE(2668)
								::zpp_nape::geom::ZPP_Vec2 v = cx_ite;		HX_STACK_VAR(v,"v");
								HX_STACK_LINE(2668)
								{
									HX_STACK_LINE(2668)
									::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
									HX_STACK_LINE(2668)
									ite = ite->next;
									HX_STACK_LINE(2668)
									{
										HX_STACK_LINE(2668)
										e->gnormx = ((_this->axisy * e->lnormx) - (_this->axisx * e->lnormy));
										HX_STACK_LINE(2668)
										e->gnormy = ((e->lnormx * _this->axisx) + (e->lnormy * _this->axisy));
									}
									HX_STACK_LINE(2668)
									e->gprojection = (((_this->posx * e->gnormx) + (_this->posy * e->gnormy)) + e->lprojection);
									HX_STACK_LINE(2668)
									e->tp0 = ((u->y * e->gnormx) - (u->x * e->gnormy));
									HX_STACK_LINE(2668)
									e->tp1 = ((v->y * e->gnormx) - (v->x * e->gnormy));
								}
								HX_STACK_LINE(2668)
								u = v;
								HX_STACK_LINE(2668)
								cx_ite = cx_ite->next;
							}
							HX_STACK_LINE(2668)
							::zpp_nape::geom::ZPP_Vec2 v = p->gverts->next;		HX_STACK_VAR(v,"v");
							HX_STACK_LINE(2668)
							{
								HX_STACK_LINE(2668)
								::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
								HX_STACK_LINE(2668)
								ite = ite->next;
								HX_STACK_LINE(2668)
								{
									HX_STACK_LINE(2668)
									e->gnormx = ((_this->axisy * e->lnormx) - (_this->axisx * e->lnormy));
									HX_STACK_LINE(2668)
									e->gnormy = ((e->lnormx * _this->axisx) + (e->lnormy * _this->axisy));
								}
								HX_STACK_LINE(2668)
								e->gprojection = (((_this->posx * e->gnormx) + (_this->posy * e->gnormy)) + e->lprojection);
								HX_STACK_LINE(2668)
								e->tp0 = ((u->y * e->gnormx) - (u->x * e->gnormy));
								HX_STACK_LINE(2668)
								e->tp1 = ((v->y * e->gnormx) - (v->x * e->gnormy));
							}
						}
					}
				}
			}
			else{
				HX_STACK_LINE(2670)
				::zpp_nape::geom::ZPP_SweepDistance_obj::staticSweep(toi,deltaTime,(int)0,(int)0);
			}
			HX_STACK_LINE(2673)
			hx::MultEq(toi->toi,deltaTime);
			HX_STACK_LINE(2674)
			if (((bool((toi->toi > (int)0)) && bool((toi->toi < mint))))){
				HX_STACK_LINE(2675)
				mint = toi->toi;
				HX_STACK_LINE(2676)
				{
					HX_STACK_LINE(2677)
					minAxisx = toi->axis->x;
					HX_STACK_LINE(2678)
					minAxisy = toi->axis->y;
					HX_STACK_LINE(2679)
					{
					}
					HX_STACK_LINE(2687)
					{
					}
				}
				HX_STACK_LINE(2696)
				{
					HX_STACK_LINE(2697)
					minPosx = toi->c2->x;
					HX_STACK_LINE(2698)
					minPosy = toi->c2->y;
					HX_STACK_LINE(2699)
					{
					}
					HX_STACK_LINE(2707)
					{
					}
				}
				HX_STACK_LINE(2716)
				mins = s;
			}
		}
;
	}
	HX_STACK_LINE(2720)
	list->clear();
	HX_STACK_LINE(2721)
	{
		HX_STACK_LINE(2722)
		::zpp_nape::geom::ZPP_ToiEvent o = toi;		HX_STACK_VAR(o,"o");
		HX_STACK_LINE(2723)
		{
		}
		HX_STACK_LINE(2732)
		o->next = ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool;
		HX_STACK_LINE(2733)
		::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool = o;
	}
	HX_STACK_LINE(2738)
	{
		HX_STACK_LINE(2738)
		Float delta = ((int)0 - body->sweepTime);		HX_STACK_VAR(delta,"delta");
		HX_STACK_LINE(2738)
		if (((delta != (int)0))){
			HX_STACK_LINE(2738)
			{
			}
			HX_STACK_LINE(2738)
			body->sweepTime = (int)0;
			HX_STACK_LINE(2738)
			{
				HX_STACK_LINE(2738)
				Float t = delta;		HX_STACK_VAR(t,"t");
				HX_STACK_LINE(2738)
				{
				}
				HX_STACK_LINE(2738)
				hx::AddEq(body->posx,(body->velx * t));
				HX_STACK_LINE(2738)
				hx::AddEq(body->posy,(body->vely * t));
			}
			HX_STACK_LINE(2738)
			if (((body->angvel != (int)0))){
				HX_STACK_LINE(2738)
				Float dr = (body->sweep_angvel * delta);		HX_STACK_VAR(dr,"dr");
				HX_STACK_LINE(2738)
				hx::AddEq(body->rot,dr);
				HX_STACK_LINE(2738)
				if ((((dr * dr) > 0.0001))){
					HX_STACK_LINE(2738)
					body->axisx = ::Math_obj::sin(body->rot);
					HX_STACK_LINE(2738)
					body->axisy = ::Math_obj::cos(body->rot);
					HX_STACK_LINE(2738)
					{
					}
					HX_STACK_LINE(2738)
					Dynamic();
				}
				else{
					HX_STACK_LINE(2738)
					Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
					HX_STACK_LINE(2738)
					Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
					HX_STACK_LINE(2738)
					Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
					HX_STACK_LINE(2738)
					Float nx = ((((p * body->axisx) + (dr * body->axisy))) * m);		HX_STACK_VAR(nx,"nx");
					HX_STACK_LINE(2738)
					body->axisy = ((((p * body->axisy) - (dr * body->axisx))) * m);
					HX_STACK_LINE(2738)
					body->axisx = nx;
				}
			}
		}
	}
	HX_STACK_LINE(2739)
	{
		HX_STACK_LINE(2739)
		{
		}
		HX_STACK_LINE(2739)
		if (((shape->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE))){
			HX_STACK_LINE(2739)
			shape->worldCOMx = (body->posx + (((body->axisy * shape->localCOMx) - (body->axisx * shape->localCOMy))));
			HX_STACK_LINE(2739)
			shape->worldCOMy = (body->posy + (((shape->localCOMx * body->axisx) + (shape->localCOMy * body->axisy))));
		}
		else{
			HX_STACK_LINE(2739)
			::zpp_nape::shape::ZPP_Polygon p = shape->polygon;		HX_STACK_VAR(p,"p");
			HX_STACK_LINE(2739)
			::zpp_nape::geom::ZPP_Vec2 li = p->lverts->next;		HX_STACK_VAR(li,"li");
			HX_STACK_LINE(2739)
			{
				HX_STACK_LINE(2739)
				::zpp_nape::geom::ZPP_Vec2 cx_ite = p->gverts->next;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(2739)
				while(((cx_ite != null()))){
					HX_STACK_LINE(2739)
					::zpp_nape::geom::ZPP_Vec2 g = cx_ite;		HX_STACK_VAR(g,"g");
					HX_STACK_LINE(2739)
					{
						HX_STACK_LINE(2739)
						::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
						HX_STACK_LINE(2739)
						li = li->next;
						HX_STACK_LINE(2739)
						{
							HX_STACK_LINE(2739)
							g->x = (body->posx + (((body->axisy * l->x) - (body->axisx * l->y))));
							HX_STACK_LINE(2739)
							g->y = (body->posy + (((l->x * body->axisx) + (l->y * body->axisy))));
						}
					}
					HX_STACK_LINE(2739)
					cx_ite = cx_ite->next;
				}
			}
			HX_STACK_LINE(2739)
			::zpp_nape::util::ZNPNode_ZPP_Edge ite = p->edges->head;		HX_STACK_VAR(ite,"ite");
			HX_STACK_LINE(2739)
			{
				HX_STACK_LINE(2739)
				::zpp_nape::geom::ZPP_Vec2 cx_ite = p->gverts->next;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(2739)
				::zpp_nape::geom::ZPP_Vec2 u = cx_ite;		HX_STACK_VAR(u,"u");
				HX_STACK_LINE(2739)
				cx_ite = cx_ite->next;
				HX_STACK_LINE(2739)
				while(((cx_ite != null()))){
					HX_STACK_LINE(2739)
					::zpp_nape::geom::ZPP_Vec2 v = cx_ite;		HX_STACK_VAR(v,"v");
					HX_STACK_LINE(2739)
					{
						HX_STACK_LINE(2739)
						::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
						HX_STACK_LINE(2739)
						ite = ite->next;
						HX_STACK_LINE(2739)
						{
							HX_STACK_LINE(2739)
							e->gnormx = ((body->axisy * e->lnormx) - (body->axisx * e->lnormy));
							HX_STACK_LINE(2739)
							e->gnormy = ((e->lnormx * body->axisx) + (e->lnormy * body->axisy));
						}
						HX_STACK_LINE(2739)
						e->gprojection = (((body->posx * e->gnormx) + (body->posy * e->gnormy)) + e->lprojection);
						HX_STACK_LINE(2739)
						e->tp0 = ((u->y * e->gnormx) - (u->x * e->gnormy));
						HX_STACK_LINE(2739)
						e->tp1 = ((v->y * e->gnormx) - (v->x * e->gnormy));
					}
					HX_STACK_LINE(2739)
					u = v;
					HX_STACK_LINE(2739)
					cx_ite = cx_ite->next;
				}
				HX_STACK_LINE(2739)
				::zpp_nape::geom::ZPP_Vec2 v = p->gverts->next;		HX_STACK_VAR(v,"v");
				HX_STACK_LINE(2739)
				{
					HX_STACK_LINE(2739)
					::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
					HX_STACK_LINE(2739)
					ite = ite->next;
					HX_STACK_LINE(2739)
					{
						HX_STACK_LINE(2739)
						e->gnormx = ((body->axisy * e->lnormx) - (body->axisx * e->lnormy));
						HX_STACK_LINE(2739)
						e->gnormy = ((e->lnormx * body->axisx) + (e->lnormy * body->axisy));
					}
					HX_STACK_LINE(2739)
					e->gprojection = (((body->posx * e->gnormx) + (body->posy * e->gnormy)) + e->lprojection);
					HX_STACK_LINE(2739)
					e->tp0 = ((u->y * e->gnormx) - (u->x * e->gnormy));
					HX_STACK_LINE(2739)
					e->tp1 = ((v->y * e->gnormx) - (v->x * e->gnormy));
				}
			}
		}
	}
	HX_STACK_LINE(2740)
	if (((mint <= deltaTime))){
		struct _Function_2_1{
			inline static ::nape::geom::Vec2 Block( Float &minAxisx,Float &minAxisy){
				HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",2741);
				{
					HX_STACK_LINE(2741)
					Float x = -(minAxisx);		HX_STACK_VAR(x,"x");
					Float y = -(minAxisy);		HX_STACK_VAR(y,"y");
					bool weak = false;		HX_STACK_VAR(weak,"weak");
					HX_STACK_LINE(2741)
					if (((bool((x != x)) || bool((y != y))))){
						HX_STACK_LINE(2741)
						hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
					}
					HX_STACK_LINE(2741)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(2741)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(2741)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(2741)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(2741)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(2741)
						ret->zpp_pool = null();
						HX_STACK_LINE(2741)
						ret->zpp_disp = false;
						HX_STACK_LINE(2741)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(2741)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(2741)
					if (((ret->zpp_inner == null()))){
						struct _Function_4_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( Float &x,Float &y){
								HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",2741);
								{
									HX_STACK_LINE(2741)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(2741)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(2741)
									{
										HX_STACK_LINE(2741)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(2741)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(2741)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(2741)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(2741)
											ret1->next = null();
										}
										HX_STACK_LINE(2741)
										ret1->weak = false;
									}
									HX_STACK_LINE(2741)
									ret1->_immutable = immutable;
									HX_STACK_LINE(2741)
									{
										HX_STACK_LINE(2741)
										ret1->x = x;
										HX_STACK_LINE(2741)
										ret1->y = y;
										HX_STACK_LINE(2741)
										{
										}
										HX_STACK_LINE(2741)
										{
										}
									}
									HX_STACK_LINE(2741)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(2741)
						ret->zpp_inner = _Function_4_1::Block(x,y);
						HX_STACK_LINE(2741)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(2741)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(2741)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(2741)
						{
							HX_STACK_LINE(2741)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(2741)
							if ((_this->_immutable)){
								HX_STACK_LINE(2741)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(2741)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(2741)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(2741)
						if (((bool((x != x)) || bool((y != y))))){
							HX_STACK_LINE(2741)
							hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
						}
						struct _Function_4_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",2741);
								{
									HX_STACK_LINE(2741)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(2741)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(2741)
									{
										HX_STACK_LINE(2741)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(2741)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(2741)
											_this->_validate();
										}
									}
									HX_STACK_LINE(2741)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_4_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",2741);
								{
									HX_STACK_LINE(2741)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(2741)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(2741)
									{
										HX_STACK_LINE(2741)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(2741)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(2741)
											_this->_validate();
										}
									}
									HX_STACK_LINE(2741)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(2741)
						if ((!(((bool((_Function_4_1::Block(ret) == x)) && bool((_Function_4_2::Block(ret) == y))))))){
							HX_STACK_LINE(2741)
							{
								HX_STACK_LINE(2741)
								ret->zpp_inner->x = x;
								HX_STACK_LINE(2741)
								ret->zpp_inner->y = y;
								HX_STACK_LINE(2741)
								{
								}
								HX_STACK_LINE(2741)
								{
								}
							}
							HX_STACK_LINE(2741)
							{
								HX_STACK_LINE(2741)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(2741)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(2741)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(2741)
						ret;
					}
					HX_STACK_LINE(2741)
					ret->zpp_inner->weak = weak;
					HX_STACK_LINE(2741)
					return ret;
				}
				return null();
			}
		};
		struct _Function_2_2{
			inline static ::nape::geom::Vec2 Block( Float &minPosx,Float &minPosy){
				HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",2741);
				{
					HX_STACK_LINE(2741)
					bool weak = false;		HX_STACK_VAR(weak,"weak");
					HX_STACK_LINE(2741)
					if (((bool((minPosx != minPosx)) || bool((minPosy != minPosy))))){
						HX_STACK_LINE(2741)
						hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
					}
					HX_STACK_LINE(2741)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(2741)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(2741)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(2741)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(2741)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(2741)
						ret->zpp_pool = null();
						HX_STACK_LINE(2741)
						ret->zpp_disp = false;
						HX_STACK_LINE(2741)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(2741)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(2741)
					if (((ret->zpp_inner == null()))){
						struct _Function_4_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( Float &minPosx,Float &minPosy){
								HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",2741);
								{
									HX_STACK_LINE(2741)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(2741)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(2741)
									{
										HX_STACK_LINE(2741)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(2741)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(2741)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(2741)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(2741)
											ret1->next = null();
										}
										HX_STACK_LINE(2741)
										ret1->weak = false;
									}
									HX_STACK_LINE(2741)
									ret1->_immutable = immutable;
									HX_STACK_LINE(2741)
									{
										HX_STACK_LINE(2741)
										ret1->x = minPosx;
										HX_STACK_LINE(2741)
										ret1->y = minPosy;
										HX_STACK_LINE(2741)
										{
										}
										HX_STACK_LINE(2741)
										{
										}
									}
									HX_STACK_LINE(2741)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(2741)
						ret->zpp_inner = _Function_4_1::Block(minPosx,minPosy);
						HX_STACK_LINE(2741)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(2741)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(2741)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(2741)
						{
							HX_STACK_LINE(2741)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(2741)
							if ((_this->_immutable)){
								HX_STACK_LINE(2741)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(2741)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(2741)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(2741)
						if (((bool((minPosx != minPosx)) || bool((minPosy != minPosy))))){
							HX_STACK_LINE(2741)
							hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
						}
						struct _Function_4_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",2741);
								{
									HX_STACK_LINE(2741)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(2741)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(2741)
									{
										HX_STACK_LINE(2741)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(2741)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(2741)
											_this->_validate();
										}
									}
									HX_STACK_LINE(2741)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_4_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",2741);
								{
									HX_STACK_LINE(2741)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(2741)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(2741)
									{
										HX_STACK_LINE(2741)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(2741)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(2741)
											_this->_validate();
										}
									}
									HX_STACK_LINE(2741)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(2741)
						if ((!(((bool((_Function_4_1::Block(ret) == minPosx)) && bool((_Function_4_2::Block(ret) == minPosy))))))){
							HX_STACK_LINE(2741)
							{
								HX_STACK_LINE(2741)
								ret->zpp_inner->x = minPosx;
								HX_STACK_LINE(2741)
								ret->zpp_inner->y = minPosy;
								HX_STACK_LINE(2741)
								{
								}
								HX_STACK_LINE(2741)
								{
								}
							}
							HX_STACK_LINE(2741)
							{
								HX_STACK_LINE(2741)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(2741)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(2741)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(2741)
						ret;
					}
					HX_STACK_LINE(2741)
					ret->zpp_inner->weak = weak;
					HX_STACK_LINE(2741)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(2740)
		return ::zpp_nape::geom::ZPP_ConvexRayResult_obj::getConvex(_Function_2_1::Block(minAxisx,minAxisy),_Function_2_2::Block(minPosx,minPosy),mint,mins);
	}
	else{
		HX_STACK_LINE(2743)
		return null();
	}
	HX_STACK_LINE(2740)
	return null();
}


HX_DEFINE_DYNAMIC_FUNC4(ZPP_Space_obj,convexCast,return )

::nape::geom::RayResultList ZPP_Space_obj::rayMultiCast( ::nape::geom::Ray ray,bool inner,::nape::dynamics::InteractionFilter filter,::nape::geom::RayResultList output){
	HX_STACK_PUSH("ZPP_Space::rayMultiCast","zpp_nape/space/Space.hx",2522);
	HX_STACK_THIS(this);
	HX_STACK_ARG(ray,"ray");
	HX_STACK_ARG(inner,"inner");
	HX_STACK_ARG(filter,"filter");
	HX_STACK_ARG(output,"output");
	HX_STACK_LINE(2522)
	return this->bphase->rayMultiCast(ray->zpp_inner,inner,(  (((filter == null()))) ? ::zpp_nape::dynamics::ZPP_InteractionFilter(null()) : ::zpp_nape::dynamics::ZPP_InteractionFilter(filter->zpp_inner) ),output);
}


HX_DEFINE_DYNAMIC_FUNC4(ZPP_Space_obj,rayMultiCast,return )

::nape::geom::RayResult ZPP_Space_obj::rayCast( ::nape::geom::Ray ray,bool inner,::nape::dynamics::InteractionFilter filter){
	HX_STACK_PUSH("ZPP_Space::rayCast","zpp_nape/space/Space.hx",2519);
	HX_STACK_THIS(this);
	HX_STACK_ARG(ray,"ray");
	HX_STACK_ARG(inner,"inner");
	HX_STACK_ARG(filter,"filter");
	HX_STACK_LINE(2519)
	return this->bphase->rayCast(ray->zpp_inner,inner,(  (((filter == null()))) ? ::zpp_nape::dynamics::ZPP_InteractionFilter(null()) : ::zpp_nape::dynamics::ZPP_InteractionFilter(filter->zpp_inner) ));
}


HX_DEFINE_DYNAMIC_FUNC3(ZPP_Space_obj,rayCast,return )

::nape::phys::BodyList ZPP_Space_obj::bodiesInShape( ::zpp_nape::shape::ZPP_Shape shape,bool cont,::zpp_nape::dynamics::ZPP_InteractionFilter filter,::nape::phys::BodyList output){
	HX_STACK_PUSH("ZPP_Space::bodiesInShape","zpp_nape/space/Space.hx",2516);
	HX_STACK_THIS(this);
	HX_STACK_ARG(shape,"shape");
	HX_STACK_ARG(cont,"cont");
	HX_STACK_ARG(filter,"filter");
	HX_STACK_ARG(output,"output");
	HX_STACK_LINE(2516)
	return this->bphase->bodiesInShape(shape,cont,filter,output);
}


HX_DEFINE_DYNAMIC_FUNC4(ZPP_Space_obj,bodiesInShape,return )

::nape::shape::ShapeList ZPP_Space_obj::shapesInShape( ::zpp_nape::shape::ZPP_Shape shape,bool cont,::zpp_nape::dynamics::ZPP_InteractionFilter filter,::nape::shape::ShapeList output){
	HX_STACK_PUSH("ZPP_Space::shapesInShape","zpp_nape/space/Space.hx",2513);
	HX_STACK_THIS(this);
	HX_STACK_ARG(shape,"shape");
	HX_STACK_ARG(cont,"cont");
	HX_STACK_ARG(filter,"filter");
	HX_STACK_ARG(output,"output");
	HX_STACK_LINE(2513)
	return this->bphase->shapesInShape(shape,cont,filter,output);
}


HX_DEFINE_DYNAMIC_FUNC4(ZPP_Space_obj,shapesInShape,return )

::nape::phys::BodyList ZPP_Space_obj::bodiesInCircle( ::nape::geom::Vec2 pos,Float rad,bool cont,::zpp_nape::dynamics::ZPP_InteractionFilter filter,::nape::phys::BodyList output){
	HX_STACK_PUSH("ZPP_Space::bodiesInCircle","zpp_nape/space/Space.hx",2510);
	HX_STACK_THIS(this);
	HX_STACK_ARG(pos,"pos");
	HX_STACK_ARG(rad,"rad");
	HX_STACK_ARG(cont,"cont");
	HX_STACK_ARG(filter,"filter");
	HX_STACK_ARG(output,"output");
	struct _Function_1_1{
		inline static Float Block( ::nape::geom::Vec2 &pos){
			HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",2511);
			{
				HX_STACK_LINE(2511)
				if (((bool((pos != null())) && bool(pos->zpp_disp)))){
					HX_STACK_LINE(2511)
					hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
				}
				HX_STACK_LINE(2511)
				{
					HX_STACK_LINE(2511)
					::zpp_nape::geom::ZPP_Vec2 _this = pos->zpp_inner;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(2511)
					if (((_this->_validate_dyn() != null()))){
						HX_STACK_LINE(2511)
						_this->_validate();
					}
				}
				HX_STACK_LINE(2511)
				return pos->zpp_inner->x;
			}
			return null();
		}
	};
	struct _Function_1_2{
		inline static Float Block( ::nape::geom::Vec2 &pos){
			HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",2511);
			{
				HX_STACK_LINE(2511)
				if (((bool((pos != null())) && bool(pos->zpp_disp)))){
					HX_STACK_LINE(2511)
					hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
				}
				HX_STACK_LINE(2511)
				{
					HX_STACK_LINE(2511)
					::zpp_nape::geom::ZPP_Vec2 _this = pos->zpp_inner;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(2511)
					if (((_this->_validate_dyn() != null()))){
						HX_STACK_LINE(2511)
						_this->_validate();
					}
				}
				HX_STACK_LINE(2511)
				return pos->zpp_inner->y;
			}
			return null();
		}
	};
	HX_STACK_LINE(2510)
	return this->bphase->bodiesInCircle(_Function_1_1::Block(pos),_Function_1_2::Block(pos),rad,cont,filter,output);
}


HX_DEFINE_DYNAMIC_FUNC5(ZPP_Space_obj,bodiesInCircle,return )

::nape::shape::ShapeList ZPP_Space_obj::shapesInCircle( ::nape::geom::Vec2 pos,Float rad,bool cont,::zpp_nape::dynamics::ZPP_InteractionFilter filter,::nape::shape::ShapeList output){
	HX_STACK_PUSH("ZPP_Space::shapesInCircle","zpp_nape/space/Space.hx",2507);
	HX_STACK_THIS(this);
	HX_STACK_ARG(pos,"pos");
	HX_STACK_ARG(rad,"rad");
	HX_STACK_ARG(cont,"cont");
	HX_STACK_ARG(filter,"filter");
	HX_STACK_ARG(output,"output");
	struct _Function_1_1{
		inline static Float Block( ::nape::geom::Vec2 &pos){
			HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",2508);
			{
				HX_STACK_LINE(2508)
				if (((bool((pos != null())) && bool(pos->zpp_disp)))){
					HX_STACK_LINE(2508)
					hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
				}
				HX_STACK_LINE(2508)
				{
					HX_STACK_LINE(2508)
					::zpp_nape::geom::ZPP_Vec2 _this = pos->zpp_inner;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(2508)
					if (((_this->_validate_dyn() != null()))){
						HX_STACK_LINE(2508)
						_this->_validate();
					}
				}
				HX_STACK_LINE(2508)
				return pos->zpp_inner->x;
			}
			return null();
		}
	};
	struct _Function_1_2{
		inline static Float Block( ::nape::geom::Vec2 &pos){
			HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",2508);
			{
				HX_STACK_LINE(2508)
				if (((bool((pos != null())) && bool(pos->zpp_disp)))){
					HX_STACK_LINE(2508)
					hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
				}
				HX_STACK_LINE(2508)
				{
					HX_STACK_LINE(2508)
					::zpp_nape::geom::ZPP_Vec2 _this = pos->zpp_inner;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(2508)
					if (((_this->_validate_dyn() != null()))){
						HX_STACK_LINE(2508)
						_this->_validate();
					}
				}
				HX_STACK_LINE(2508)
				return pos->zpp_inner->y;
			}
			return null();
		}
	};
	HX_STACK_LINE(2507)
	return this->bphase->shapesInCircle(_Function_1_1::Block(pos),_Function_1_2::Block(pos),rad,cont,filter,output);
}


HX_DEFINE_DYNAMIC_FUNC5(ZPP_Space_obj,shapesInCircle,return )

::nape::phys::BodyList ZPP_Space_obj::bodiesInAABB( ::nape::geom::AABB aabb,bool strict,bool cont,::zpp_nape::dynamics::ZPP_InteractionFilter filter,::nape::phys::BodyList output){
	HX_STACK_PUSH("ZPP_Space::bodiesInAABB","zpp_nape/space/Space.hx",2504);
	HX_STACK_THIS(this);
	HX_STACK_ARG(aabb,"aabb");
	HX_STACK_ARG(strict,"strict");
	HX_STACK_ARG(cont,"cont");
	HX_STACK_ARG(filter,"filter");
	HX_STACK_ARG(output,"output");
	HX_STACK_LINE(2504)
	return this->bphase->bodiesInAABB(aabb->zpp_inner,strict,cont,filter,output);
}


HX_DEFINE_DYNAMIC_FUNC5(ZPP_Space_obj,bodiesInAABB,return )

::nape::shape::ShapeList ZPP_Space_obj::shapesInAABB( ::nape::geom::AABB aabb,bool strict,bool cont,::zpp_nape::dynamics::ZPP_InteractionFilter filter,::nape::shape::ShapeList output){
	HX_STACK_PUSH("ZPP_Space::shapesInAABB","zpp_nape/space/Space.hx",2501);
	HX_STACK_THIS(this);
	HX_STACK_ARG(aabb,"aabb");
	HX_STACK_ARG(strict,"strict");
	HX_STACK_ARG(cont,"cont");
	HX_STACK_ARG(filter,"filter");
	HX_STACK_ARG(output,"output");
	HX_STACK_LINE(2501)
	return this->bphase->shapesInAABB(aabb->zpp_inner,strict,cont,filter,output);
}


HX_DEFINE_DYNAMIC_FUNC5(ZPP_Space_obj,shapesInAABB,return )

::nape::phys::BodyList ZPP_Space_obj::bodiesUnderPoint( Float x,Float y,::zpp_nape::dynamics::ZPP_InteractionFilter filter,::nape::phys::BodyList output){
	HX_STACK_PUSH("ZPP_Space::bodiesUnderPoint","zpp_nape/space/Space.hx",2498);
	HX_STACK_THIS(this);
	HX_STACK_ARG(x,"x");
	HX_STACK_ARG(y,"y");
	HX_STACK_ARG(filter,"filter");
	HX_STACK_ARG(output,"output");
	HX_STACK_LINE(2498)
	return this->bphase->bodiesUnderPoint(x,y,filter,output);
}


HX_DEFINE_DYNAMIC_FUNC4(ZPP_Space_obj,bodiesUnderPoint,return )

::nape::shape::ShapeList ZPP_Space_obj::shapesUnderPoint( Float x,Float y,::zpp_nape::dynamics::ZPP_InteractionFilter filter,::nape::shape::ShapeList output){
	HX_STACK_PUSH("ZPP_Space::shapesUnderPoint","zpp_nape/space/Space.hx",2495);
	HX_STACK_THIS(this);
	HX_STACK_ARG(x,"x");
	HX_STACK_ARG(y,"y");
	HX_STACK_ARG(filter,"filter");
	HX_STACK_ARG(output,"output");
	HX_STACK_LINE(2495)
	return this->bphase->shapesUnderPoint(x,y,filter,output);
}


HX_DEFINE_DYNAMIC_FUNC4(ZPP_Space_obj,shapesUnderPoint,return )

Void ZPP_Space_obj::remBody( ::zpp_nape::phys::ZPP_Body body,hx::Null< int >  __o_flag){
int flag = __o_flag.Default(-1);
	HX_STACK_PUSH("ZPP_Space::remBody","zpp_nape/space/Space.hx",2356);
	HX_STACK_THIS(this);
	HX_STACK_ARG(body,"body");
	HX_STACK_ARG(flag,"flag");
{
		HX_STACK_LINE(2357)
		if (((body->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_STATIC))){
			HX_STACK_LINE(2358)
			{
				HX_STACK_LINE(2359)
				::zpp_nape::phys::ZPP_Body o = body;		HX_STACK_VAR(o,"o");
				HX_STACK_LINE(2360)
				{
				}
				HX_STACK_LINE(2368)
				if ((!(o->world))){
					HX_STACK_LINE(2369)
					{
					}
					HX_STACK_LINE(2377)
					o->component->waket = (this->stamp + ((  ((this->midstep)) ? int((int)0) : int((int)1) )));
					HX_STACK_LINE(2378)
					if ((o->component->sleeping)){
						HX_STACK_LINE(2378)
						this->really_wake(o,true);
					}
				}
			}
			HX_STACK_LINE(2383)
			{
			}
			HX_STACK_LINE(2391)
			{
			}
			HX_STACK_LINE(2399)
			this->staticsleep->remove(body);
			HX_STACK_LINE(2400)
			{
			}
		}
		else{
			HX_STACK_LINE(2409)
			if (((body->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC))){
				HX_STACK_LINE(2411)
				{
					HX_STACK_LINE(2412)
					::zpp_nape::phys::ZPP_Body o = body;		HX_STACK_VAR(o,"o");
					HX_STACK_LINE(2413)
					{
					}
					HX_STACK_LINE(2421)
					if ((!(o->world))){
						HX_STACK_LINE(2422)
						{
						}
						HX_STACK_LINE(2430)
						o->component->waket = (this->stamp + ((  ((this->midstep)) ? int((int)0) : int((int)1) )));
						HX_STACK_LINE(2431)
						if ((o->component->sleeping)){
							HX_STACK_LINE(2431)
							this->really_wake(o,true);
						}
					}
				}
				HX_STACK_LINE(2436)
				this->live->remove(body);
				HX_STACK_LINE(2437)
				{
				}
			}
			else{
				HX_STACK_LINE(2447)
				if (((flag != ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC))){
					HX_STACK_LINE(2447)
					this->kinematics->remove(body);
				}
				HX_STACK_LINE(2448)
				{
					HX_STACK_LINE(2449)
					::zpp_nape::phys::ZPP_Body o = body;		HX_STACK_VAR(o,"o");
					HX_STACK_LINE(2450)
					{
					}
					HX_STACK_LINE(2458)
					if ((!(o->world))){
						HX_STACK_LINE(2459)
						{
						}
						HX_STACK_LINE(2467)
						o->component->waket = (this->stamp + ((  ((this->midstep)) ? int((int)0) : int((int)1) )));
						HX_STACK_LINE(2468)
						if ((o->component->sleeping)){
							HX_STACK_LINE(2468)
							this->really_wake(o,true);
						}
					}
				}
				HX_STACK_LINE(2473)
				this->staticsleep->remove(body);
				HX_STACK_LINE(2474)
				{
				}
			}
		}
		HX_STACK_LINE(2484)
		{
			HX_STACK_LINE(2485)
			::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite = body->shapes->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(2486)
			while(((cx_ite != null()))){
				HX_STACK_LINE(2487)
				::zpp_nape::shape::ZPP_Shape shape = cx_ite->elt;		HX_STACK_VAR(shape,"shape");
				HX_STACK_LINE(2488)
				this->removed_shape(shape,true);
				HX_STACK_LINE(2489)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(2492)
		body->removedFromSpace();
		HX_STACK_LINE(2493)
		body->space = null();
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,remBody,(void))

Void ZPP_Space_obj::addBody( ::zpp_nape::phys::ZPP_Body body,hx::Null< int >  __o_flag){
int flag = __o_flag.Default(-1);
	HX_STACK_PUSH("ZPP_Space::addBody","zpp_nape/space/Space.hx",2276);
	HX_STACK_THIS(this);
	HX_STACK_ARG(body,"body");
	HX_STACK_ARG(flag,"flag");
{
		HX_STACK_LINE(2277)
		body->space = hx::ObjectPtr<OBJ_>(this);
		HX_STACK_LINE(2278)
		body->addedToSpace();
		HX_STACK_LINE(2279)
		{
		}
		HX_STACK_LINE(2287)
		body->component->sleeping = true;
		HX_STACK_LINE(2288)
		{
			HX_STACK_LINE(2289)
			::zpp_nape::phys::ZPP_Body o = body;		HX_STACK_VAR(o,"o");
			HX_STACK_LINE(2290)
			{
			}
			HX_STACK_LINE(2298)
			if ((!(o->world))){
				HX_STACK_LINE(2299)
				{
				}
				HX_STACK_LINE(2307)
				o->component->waket = (this->stamp + ((  ((this->midstep)) ? int((int)0) : int((int)1) )));
				HX_STACK_LINE(2308)
				if ((o->component->sleeping)){
					HX_STACK_LINE(2308)
					this->really_wake(o,true);
				}
			}
		}
		HX_STACK_LINE(2313)
		{
			HX_STACK_LINE(2314)
			::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite = body->shapes->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(2315)
			while(((cx_ite != null()))){
				HX_STACK_LINE(2316)
				::zpp_nape::shape::ZPP_Shape shape = cx_ite->elt;		HX_STACK_VAR(shape,"shape");
				HX_STACK_LINE(2317)
				{
					HX_STACK_LINE(2317)
					{
					}
					HX_STACK_LINE(2317)
					this->bphase->insert(shape);
					HX_STACK_LINE(2317)
					shape->addedToSpace();
				}
				HX_STACK_LINE(2318)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(2321)
		if (((body->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_STATIC))){
			HX_STACK_LINE(2322)
			this->static_validation(body);
			HX_STACK_LINE(2323)
			{
			}
		}
		else{
			HX_STACK_LINE(2332)
			if (((body->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC))){
			}
			else{
				HX_STACK_LINE(2344)
				if (((flag != ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC))){
					HX_STACK_LINE(2344)
					this->kinematics->add(body);
				}
				HX_STACK_LINE(2345)
				{
				}
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,addBody,(void))

Void ZPP_Space_obj::remCompound( ::zpp_nape::phys::ZPP_Compound x){
{
		HX_STACK_PUSH("ZPP_Space::remCompound","zpp_nape/space/Space.hx",2248);
		HX_STACK_THIS(this);
		HX_STACK_ARG(x,"x");
		HX_STACK_LINE(2249)
		{
			HX_STACK_LINE(2250)
			::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = x->bodies->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(2251)
			while(((cx_ite != null()))){
				HX_STACK_LINE(2252)
				::zpp_nape::phys::ZPP_Body i = cx_ite->elt;		HX_STACK_VAR(i,"i");
				HX_STACK_LINE(2253)
				this->remBody(i,null());
				HX_STACK_LINE(2254)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(2257)
		{
			HX_STACK_LINE(2258)
			::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = x->constraints->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(2259)
			while(((cx_ite != null()))){
				HX_STACK_LINE(2260)
				::zpp_nape::constraint::ZPP_Constraint i = cx_ite->elt;		HX_STACK_VAR(i,"i");
				HX_STACK_LINE(2261)
				this->remConstraint(i);
				HX_STACK_LINE(2262)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(2265)
		{
			HX_STACK_LINE(2266)
			::zpp_nape::util::ZNPNode_ZPP_Compound cx_ite = x->compounds->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(2267)
			while(((cx_ite != null()))){
				HX_STACK_LINE(2268)
				::zpp_nape::phys::ZPP_Compound i = cx_ite->elt;		HX_STACK_VAR(i,"i");
				HX_STACK_LINE(2269)
				this->remCompound(i);
				HX_STACK_LINE(2270)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(2273)
		x->removedFromSpace();
		HX_STACK_LINE(2274)
		x->space = null();
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,remCompound,(void))

Void ZPP_Space_obj::addCompound( ::zpp_nape::phys::ZPP_Compound x){
{
		HX_STACK_PUSH("ZPP_Space::addCompound","zpp_nape/space/Space.hx",2220);
		HX_STACK_THIS(this);
		HX_STACK_ARG(x,"x");
		HX_STACK_LINE(2221)
		x->space = hx::ObjectPtr<OBJ_>(this);
		HX_STACK_LINE(2222)
		x->addedToSpace();
		HX_STACK_LINE(2223)
		{
			HX_STACK_LINE(2224)
			::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = x->bodies->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(2225)
			while(((cx_ite != null()))){
				HX_STACK_LINE(2226)
				::zpp_nape::phys::ZPP_Body i = cx_ite->elt;		HX_STACK_VAR(i,"i");
				HX_STACK_LINE(2227)
				this->addBody(i,null());
				HX_STACK_LINE(2228)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(2231)
		{
			HX_STACK_LINE(2232)
			::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = x->constraints->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(2233)
			while(((cx_ite != null()))){
				HX_STACK_LINE(2234)
				::zpp_nape::constraint::ZPP_Constraint i = cx_ite->elt;		HX_STACK_VAR(i,"i");
				HX_STACK_LINE(2235)
				this->addConstraint(i);
				HX_STACK_LINE(2236)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(2239)
		{
			HX_STACK_LINE(2240)
			::zpp_nape::util::ZNPNode_ZPP_Compound cx_ite = x->compounds->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(2241)
			while(((cx_ite != null()))){
				HX_STACK_LINE(2242)
				::zpp_nape::phys::ZPP_Compound i = cx_ite->elt;		HX_STACK_VAR(i,"i");
				HX_STACK_LINE(2243)
				this->addCompound(i);
				HX_STACK_LINE(2244)
				cx_ite = cx_ite->next;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,addCompound,(void))

Void ZPP_Space_obj::remConstraint( ::zpp_nape::constraint::ZPP_Constraint con){
{
		HX_STACK_PUSH("ZPP_Space::remConstraint","zpp_nape/space/Space.hx",2212);
		HX_STACK_THIS(this);
		HX_STACK_ARG(con,"con");
		HX_STACK_LINE(2213)
		if ((con->active)){
			HX_STACK_LINE(2214)
			this->wake_constraint(con,true);
			HX_STACK_LINE(2215)
			this->live_constraints->remove(con);
		}
		HX_STACK_LINE(2217)
		con->removedFromSpace();
		HX_STACK_LINE(2218)
		con->space = null();
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,remConstraint,(void))

Void ZPP_Space_obj::addConstraint( ::zpp_nape::constraint::ZPP_Constraint con){
{
		HX_STACK_PUSH("ZPP_Space::addConstraint","zpp_nape/space/Space.hx",2196);
		HX_STACK_THIS(this);
		HX_STACK_ARG(con,"con");
		HX_STACK_LINE(2197)
		con->space = hx::ObjectPtr<OBJ_>(this);
		HX_STACK_LINE(2198)
		con->addedToSpace();
		HX_STACK_LINE(2199)
		if ((con->active)){
			HX_STACK_LINE(2200)
			{
			}
			HX_STACK_LINE(2208)
			con->component->sleeping = true;
			HX_STACK_LINE(2209)
			this->wake_constraint(con,true);
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,addConstraint,(void))

Void ZPP_Space_obj::removed_shape( ::zpp_nape::shape::ZPP_Shape s,hx::Null< bool >  __o_deleting){
bool deleting = __o_deleting.Default(false);
	HX_STACK_PUSH("ZPP_Space::removed_shape","zpp_nape/space/Space.hx",2054);
	HX_STACK_THIS(this);
	HX_STACK_ARG(s,"s");
	HX_STACK_ARG(deleting,"deleting");
{
		HX_STACK_LINE(2054)
		::zpp_nape::space::ZPP_Space _g = hx::ObjectPtr<OBJ_>(this);		HX_STACK_VAR(_g,"_g");
		HX_STACK_LINE(2055)
		::zpp_nape::phys::ZPP_Body body = s->body;		HX_STACK_VAR(body,"body");
		HX_STACK_LINE(2056)
		if ((!(deleting))){
			HX_STACK_LINE(2056)
			body->wake();
		}
		HX_STACK_LINE(2059)
		::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
		HX_STACK_LINE(2060)
		{
			HX_STACK_LINE(2061)
			::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite = body->arbiters->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(2062)
			while(((cx_ite != null()))){
				HX_STACK_LINE(2063)
				::zpp_nape::dynamics::ZPP_Arbiter xarb = cx_ite->elt;		HX_STACK_VAR(xarb,"xarb");
				HX_STACK_LINE(2064)
				{
					HX_STACK_LINE(2065)
					bool rem = (bool((xarb->ws1 == s)) || bool((xarb->ws2 == s)));		HX_STACK_VAR(rem,"rem");
					HX_STACK_LINE(2066)
					if ((rem)){
						HX_STACK_LINE(2067)
						if (((xarb->present != (int)0))){
							HX_STACK_LINE(2068)
							this->MRCA_chains(xarb->ws1,xarb->ws2);
							HX_STACK_LINE(2069)
							{
								HX_STACK_LINE(2070)
								::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite1 = this->mrca1->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
								HX_STACK_LINE(2071)
								while(((cx_ite1 != null()))){
									HX_STACK_LINE(2072)
									::zpp_nape::phys::ZPP_Interactor i1 = cx_ite1->elt;		HX_STACK_VAR(i1,"i1");
									HX_STACK_LINE(2073)
									{
										HX_STACK_LINE(2075)
										::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite2 = this->mrca2->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
										HX_STACK_LINE(2076)
										while(((cx_ite2 != null()))){
											HX_STACK_LINE(2077)
											::zpp_nape::phys::ZPP_Interactor i2 = cx_ite2->elt;		HX_STACK_VAR(i2,"i2");
											HX_STACK_LINE(2078)
											{
												HX_STACK_LINE(2079)
												::zpp_nape::callbacks::ZPP_CbSet cb1 = i1->cbSet;		HX_STACK_VAR(cb1,"cb1");
												HX_STACK_LINE(2080)
												::zpp_nape::callbacks::ZPP_CbSet cb2 = i2->cbSet;		HX_STACK_VAR(cb2,"cb2");
												HX_STACK_LINE(2081)
												{
												}
												HX_STACK_LINE(2089)
												cb1->validate();
												HX_STACK_LINE(2090)
												cb2->validate();
												struct _Function_11_1{
													inline static bool Block( ::zpp_nape::callbacks::ZPP_CbSet &cb1,::zpp_nape::callbacks::ZPP_CbSet &cb2){
														HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",2091);
														{
															HX_STACK_LINE(2091)
															{
															}
															struct _Function_12_1{
																inline static ::zpp_nape::callbacks::ZPP_CbSetPair Block( ::zpp_nape::callbacks::ZPP_CbSet &cb1,::zpp_nape::callbacks::ZPP_CbSet &cb2){
																	HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",2091);
																	{
																		HX_STACK_LINE(2091)
																		::zpp_nape::callbacks::ZPP_CbSetPair ret = null();		HX_STACK_VAR(ret,"ret");
																		HX_STACK_LINE(2091)
																		::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs = (  (((cb1->cbpairs->length < cb2->cbpairs->length))) ? ::zpp_nape::util::ZNPList_ZPP_CbSetPair(cb1->cbpairs) : ::zpp_nape::util::ZNPList_ZPP_CbSetPair(cb2->cbpairs) );		HX_STACK_VAR(pairs,"pairs");
																		HX_STACK_LINE(2091)
																		{
																			HX_STACK_LINE(2091)
																			::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite3 = pairs->head;		HX_STACK_VAR(cx_ite3,"cx_ite3");
																			HX_STACK_LINE(2091)
																			while(((cx_ite3 != null()))){
																				HX_STACK_LINE(2091)
																				::zpp_nape::callbacks::ZPP_CbSetPair p = cx_ite3->elt;		HX_STACK_VAR(p,"p");
																				HX_STACK_LINE(2091)
																				if (((bool((bool((p->a == cb1)) && bool((p->b == cb2)))) || bool((bool((p->a == cb2)) && bool((p->b == cb1))))))){
																					HX_STACK_LINE(2091)
																					ret = p;
																					HX_STACK_LINE(2091)
																					break;
																				}
																				HX_STACK_LINE(2091)
																				cx_ite3 = cx_ite3->next;
																			}
																		}
																		HX_STACK_LINE(2091)
																		if (((ret == null()))){
																			struct _Function_14_1{
																				inline static ::zpp_nape::callbacks::ZPP_CbSetPair Block( ::zpp_nape::callbacks::ZPP_CbSet &cb1,::zpp_nape::callbacks::ZPP_CbSet &cb2){
																					HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",2091);
																					{
																						HX_STACK_LINE(2091)
																						::zpp_nape::callbacks::ZPP_CbSetPair ret1;		HX_STACK_VAR(ret1,"ret1");
																						HX_STACK_LINE(2091)
																						{
																							HX_STACK_LINE(2091)
																							if (((::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool == null()))){
																								HX_STACK_LINE(2091)
																								ret1 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__new();
																							}
																							else{
																								HX_STACK_LINE(2091)
																								ret1 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
																								HX_STACK_LINE(2091)
																								::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret1->next;
																								HX_STACK_LINE(2091)
																								ret1->next = null();
																							}
																							HX_STACK_LINE(2091)
																							ret1->zip_listeners = true;
																						}
																						HX_STACK_LINE(2091)
																						if ((::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(cb1,cb2))){
																							HX_STACK_LINE(2091)
																							ret1->a = cb1;
																							HX_STACK_LINE(2091)
																							ret1->b = cb2;
																						}
																						else{
																							HX_STACK_LINE(2091)
																							ret1->a = cb2;
																							HX_STACK_LINE(2091)
																							ret1->b = cb1;
																						}
																						HX_STACK_LINE(2091)
																						return ret1;
																					}
																					return null();
																				}
																			};
																			HX_STACK_LINE(2091)
																			ret = _Function_14_1::Block(cb1,cb2);
																			HX_STACK_LINE(2091)
																			cb1->cbpairs->add(ret);
																			HX_STACK_LINE(2091)
																			if (((cb2 != cb1))){
																				HX_STACK_LINE(2091)
																				cb2->cbpairs->add(ret);
																			}
																		}
																		HX_STACK_LINE(2091)
																		if ((ret->zip_listeners)){
																			HX_STACK_LINE(2091)
																			ret->zip_listeners = false;
																			HX_STACK_LINE(2091)
																			ret->__validate();
																		}
																		HX_STACK_LINE(2091)
																		return ret;
																	}
																	return null();
																}
															};
															HX_STACK_LINE(2091)
															return ((_Function_12_1::Block(cb1,cb2))->listeners->head == null());
														}
														return null();
													}
												};
												HX_STACK_LINE(2091)
												if ((_Function_11_1::Block(cb1,cb2))){
													HX_STACK_LINE(2092)
													cx_ite2 = cx_ite2->next;
													HX_STACK_LINE(2093)
													continue;
												}
												HX_STACK_LINE(2095)
												::zpp_nape::space::ZPP_CallbackSet callbackset = ::zpp_nape::phys::ZPP_Interactor_obj::get(i1,i2);		HX_STACK_VAR(callbackset,"callbackset");
												HX_STACK_LINE(2096)
												{
												}
												HX_STACK_LINE(2104)
												callbackset->remove_arb(xarb);
												HX_STACK_LINE(2105)
												(xarb->present)--;
												HX_STACK_LINE(2106)
												{
													HX_STACK_LINE(2106)
													int event = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_END;		HX_STACK_VAR(event,"event");
													HX_STACK_LINE(2106)
													{
														HX_STACK_LINE(2106)
														{
														}
														HX_STACK_LINE(2106)
														{
															struct _Function_14_1{
																inline static ::zpp_nape::callbacks::ZPP_CbSetPair Block( ::zpp_nape::callbacks::ZPP_CbSet &cb1,::zpp_nape::callbacks::ZPP_CbSet &cb2){
																	HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",2106);
																	{
																		HX_STACK_LINE(2106)
																		::zpp_nape::callbacks::ZPP_CbSetPair ret = null();		HX_STACK_VAR(ret,"ret");
																		HX_STACK_LINE(2106)
																		::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs = (  (((cb1->cbpairs->length < cb2->cbpairs->length))) ? ::zpp_nape::util::ZNPList_ZPP_CbSetPair(cb1->cbpairs) : ::zpp_nape::util::ZNPList_ZPP_CbSetPair(cb2->cbpairs) );		HX_STACK_VAR(pairs,"pairs");
																		HX_STACK_LINE(2106)
																		{
																			HX_STACK_LINE(2106)
																			::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite3 = pairs->head;		HX_STACK_VAR(cx_ite3,"cx_ite3");
																			HX_STACK_LINE(2106)
																			while(((cx_ite3 != null()))){
																				HX_STACK_LINE(2106)
																				::zpp_nape::callbacks::ZPP_CbSetPair p = cx_ite3->elt;		HX_STACK_VAR(p,"p");
																				HX_STACK_LINE(2106)
																				if (((bool((bool((p->a == cb1)) && bool((p->b == cb2)))) || bool((bool((p->a == cb2)) && bool((p->b == cb1))))))){
																					HX_STACK_LINE(2106)
																					ret = p;
																					HX_STACK_LINE(2106)
																					break;
																				}
																				HX_STACK_LINE(2106)
																				cx_ite3 = cx_ite3->next;
																			}
																		}
																		HX_STACK_LINE(2106)
																		if (((ret == null()))){
																			struct _Function_16_1{
																				inline static ::zpp_nape::callbacks::ZPP_CbSetPair Block( ::zpp_nape::callbacks::ZPP_CbSet &cb1,::zpp_nape::callbacks::ZPP_CbSet &cb2){
																					HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",2106);
																					{
																						HX_STACK_LINE(2106)
																						::zpp_nape::callbacks::ZPP_CbSetPair ret1;		HX_STACK_VAR(ret1,"ret1");
																						HX_STACK_LINE(2106)
																						{
																							HX_STACK_LINE(2106)
																							if (((::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool == null()))){
																								HX_STACK_LINE(2106)
																								ret1 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__new();
																							}
																							else{
																								HX_STACK_LINE(2106)
																								ret1 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
																								HX_STACK_LINE(2106)
																								::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret1->next;
																								HX_STACK_LINE(2106)
																								ret1->next = null();
																							}
																							HX_STACK_LINE(2106)
																							ret1->zip_listeners = true;
																						}
																						HX_STACK_LINE(2106)
																						if ((::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(cb1,cb2))){
																							HX_STACK_LINE(2106)
																							ret1->a = cb1;
																							HX_STACK_LINE(2106)
																							ret1->b = cb2;
																						}
																						else{
																							HX_STACK_LINE(2106)
																							ret1->a = cb2;
																							HX_STACK_LINE(2106)
																							ret1->b = cb1;
																						}
																						HX_STACK_LINE(2106)
																						return ret1;
																					}
																					return null();
																				}
																			};
																			HX_STACK_LINE(2106)
																			ret = _Function_16_1::Block(cb1,cb2);
																			HX_STACK_LINE(2106)
																			cb1->cbpairs->add(ret);
																			HX_STACK_LINE(2106)
																			if (((cb2 != cb1))){
																				HX_STACK_LINE(2106)
																				cb2->cbpairs->add(ret);
																			}
																		}
																		HX_STACK_LINE(2106)
																		if ((ret->zip_listeners)){
																			HX_STACK_LINE(2106)
																			ret->zip_listeners = false;
																			HX_STACK_LINE(2106)
																			ret->__validate();
																		}
																		HX_STACK_LINE(2106)
																		return ret;
																	}
																	return null();
																}
															};
															HX_STACK_LINE(2106)
															::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite3 = (_Function_14_1::Block(cb1,cb2))->listeners->head;		HX_STACK_VAR(cx_ite3,"cx_ite3");
															HX_STACK_LINE(2106)
															while(((cx_ite3 != null()))){
																HX_STACK_LINE(2106)
																::zpp_nape::callbacks::ZPP_InteractionListener x = cx_ite3->elt;		HX_STACK_VAR(x,"x");
																HX_STACK_LINE(2106)
																if (((x->event == event))){
																	HX_STACK_LINE(2106)
																	if (((bool((((int(x->itype) & int(xarb->type))) != (int)0)) && bool(callbackset->empty_arb(x->itype))))){
																		HX_STACK_LINE(2106)
																		::zpp_nape::callbacks::ZPP_Callback cb = _g->push_callback(x);		HX_STACK_VAR(cb,"cb");
																		HX_STACK_LINE(2106)
																		cb->event = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_END;
																		HX_STACK_LINE(2106)
																		{
																			HX_STACK_LINE(2106)
																			::zpp_nape::phys::ZPP_Interactor o1 = callbackset->int1;		HX_STACK_VAR(o1,"o1");
																			HX_STACK_LINE(2106)
																			::zpp_nape::phys::ZPP_Interactor o2 = callbackset->int2;		HX_STACK_VAR(o2,"o2");
																			struct _Function_18_1{
																				inline static bool Block( ::zpp_nape::callbacks::ZPP_InteractionListener &x,::zpp_nape::phys::ZPP_Interactor &o1){
																					HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",2106);
																					{
																						HX_STACK_LINE(2106)
																						::zpp_nape::callbacks::ZPP_OptionType _this = x->options1;		HX_STACK_VAR(_this,"_this");
																						::zpp_nape::util::ZNPList_ZPP_CbType xs = o1->cbTypes;		HX_STACK_VAR(xs,"xs");
																						HX_STACK_LINE(2106)
																						return (bool(_this->nonemptyintersection(xs,_this->includes)) && bool(!(_this->nonemptyintersection(xs,_this->excludes))));
																					}
																					return null();
																				}
																			};
																			struct _Function_18_2{
																				inline static bool Block( ::zpp_nape::callbacks::ZPP_InteractionListener &x,::zpp_nape::phys::ZPP_Interactor &o2){
																					HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",2106);
																					{
																						HX_STACK_LINE(2106)
																						::zpp_nape::callbacks::ZPP_OptionType _this = x->options2;		HX_STACK_VAR(_this,"_this");
																						::zpp_nape::util::ZNPList_ZPP_CbType xs = o2->cbTypes;		HX_STACK_VAR(xs,"xs");
																						HX_STACK_LINE(2106)
																						return (bool(_this->nonemptyintersection(xs,_this->includes)) && bool(!(_this->nonemptyintersection(xs,_this->excludes))));
																					}
																					return null();
																				}
																			};
																			HX_STACK_LINE(2106)
																			if (((bool(_Function_18_1::Block(x,o1)) && bool(_Function_18_2::Block(x,o2))))){
																				HX_STACK_LINE(2106)
																				cb->int1 = o1;
																				HX_STACK_LINE(2106)
																				cb->int2 = o2;
																			}
																			else{
																				HX_STACK_LINE(2106)
																				cb->int1 = o2;
																				HX_STACK_LINE(2106)
																				cb->int2 = o1;
																			}
																		}
																		HX_STACK_LINE(2106)
																		cb->set = callbackset;
																	}
																}
																HX_STACK_LINE(2106)
																cx_ite3 = cx_ite3->next;
															}
														}
													}
												}
												HX_STACK_LINE(2114)
												if (((callbackset->arbiters->head == null()))){
													HX_STACK_LINE(2114)
													this->remove_callbackset(callbackset);
												}
											}
											HX_STACK_LINE(2118)
											cx_ite2 = cx_ite2->next;
										}
									}
									HX_STACK_LINE(2122)
									cx_ite1 = cx_ite1->next;
								}
							}
							HX_STACK_LINE(2125)
							{
							}
						}
						HX_STACK_LINE(2134)
						if (((bool((xarb->b1 != body)) && bool((xarb->b1->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC))))){
							HX_STACK_LINE(2135)
							::zpp_nape::phys::ZPP_Body o = xarb->b1;		HX_STACK_VAR(o,"o");
							HX_STACK_LINE(2136)
							{
							}
							HX_STACK_LINE(2144)
							if ((!(o->world))){
								HX_STACK_LINE(2145)
								{
								}
								HX_STACK_LINE(2153)
								o->component->waket = (this->stamp + ((  ((this->midstep)) ? int((int)0) : int((int)1) )));
								HX_STACK_LINE(2154)
								if ((o->component->sleeping)){
									HX_STACK_LINE(2154)
									this->really_wake(o,false);
								}
							}
						}
						HX_STACK_LINE(2159)
						if (((bool((xarb->b2 != body)) && bool((xarb->b2->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC))))){
							HX_STACK_LINE(2160)
							::zpp_nape::phys::ZPP_Body o = xarb->b2;		HX_STACK_VAR(o,"o");
							HX_STACK_LINE(2161)
							{
							}
							HX_STACK_LINE(2169)
							if ((!(o->world))){
								HX_STACK_LINE(2170)
								{
								}
								HX_STACK_LINE(2178)
								o->component->waket = (this->stamp + ((  ((this->midstep)) ? int((int)0) : int((int)1) )));
								HX_STACK_LINE(2179)
								if ((o->component->sleeping)){
									HX_STACK_LINE(2179)
									this->really_wake(o,false);
								}
							}
						}
						HX_STACK_LINE(2184)
						{
							HX_STACK_LINE(2184)
							{
							}
							HX_STACK_LINE(2184)
							xarb->cleared = true;
							HX_STACK_LINE(2184)
							if (((bool((body == null())) || bool((xarb->b2 == body))))){
								HX_STACK_LINE(2184)
								::zpp_nape::util::ZNPList_ZPP_Arbiter _this = xarb->b1->arbiters;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(2184)
								{
								}
								HX_STACK_LINE(2184)
								{
									HX_STACK_LINE(2184)
									{
									}
									HX_STACK_LINE(2184)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter pre1 = null();		HX_STACK_VAR(pre1,"pre1");
									HX_STACK_LINE(2184)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;		HX_STACK_VAR(cur,"cur");
									HX_STACK_LINE(2184)
									bool ret = false;		HX_STACK_VAR(ret,"ret");
									HX_STACK_LINE(2184)
									while(((cur != null()))){
										HX_STACK_LINE(2184)
										if (((cur->elt == xarb))){
											HX_STACK_LINE(2184)
											{
												HX_STACK_LINE(2184)
												{
												}
												HX_STACK_LINE(2184)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
												HX_STACK_LINE(2184)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(2184)
												if (((pre1 == null()))){
													HX_STACK_LINE(2184)
													old = _this->head;
													HX_STACK_LINE(2184)
													ret1 = old->next;
													HX_STACK_LINE(2184)
													_this->head = ret1;
													HX_STACK_LINE(2184)
													if (((_this->head == null()))){
														HX_STACK_LINE(2184)
														_this->pushmod = true;
													}
												}
												else{
													HX_STACK_LINE(2184)
													old = pre1->next;
													HX_STACK_LINE(2184)
													ret1 = old->next;
													HX_STACK_LINE(2184)
													pre1->next = ret1;
													HX_STACK_LINE(2184)
													if (((ret1 == null()))){
														HX_STACK_LINE(2184)
														_this->pushmod = true;
													}
												}
												HX_STACK_LINE(2184)
												{
												}
												HX_STACK_LINE(2184)
												{
													HX_STACK_LINE(2184)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
													HX_STACK_LINE(2184)
													{
													}
													HX_STACK_LINE(2184)
													o->elt = null();
													HX_STACK_LINE(2184)
													o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
													HX_STACK_LINE(2184)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
												}
												HX_STACK_LINE(2184)
												_this->modified = true;
												HX_STACK_LINE(2184)
												(_this->length)--;
												HX_STACK_LINE(2184)
												_this->pushmod = true;
												HX_STACK_LINE(2184)
												ret1;
											}
											HX_STACK_LINE(2184)
											ret = true;
											HX_STACK_LINE(2184)
											break;
										}
										HX_STACK_LINE(2184)
										pre1 = cur;
										HX_STACK_LINE(2184)
										cur = cur->next;
									}
									HX_STACK_LINE(2184)
									ret;
								}
							}
							HX_STACK_LINE(2184)
							if (((bool((body == null())) || bool((xarb->b1 == body))))){
								HX_STACK_LINE(2184)
								::zpp_nape::util::ZNPList_ZPP_Arbiter _this = xarb->b2->arbiters;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(2184)
								{
								}
								HX_STACK_LINE(2184)
								{
									HX_STACK_LINE(2184)
									{
									}
									HX_STACK_LINE(2184)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter pre1 = null();		HX_STACK_VAR(pre1,"pre1");
									HX_STACK_LINE(2184)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;		HX_STACK_VAR(cur,"cur");
									HX_STACK_LINE(2184)
									bool ret = false;		HX_STACK_VAR(ret,"ret");
									HX_STACK_LINE(2184)
									while(((cur != null()))){
										HX_STACK_LINE(2184)
										if (((cur->elt == xarb))){
											HX_STACK_LINE(2184)
											{
												HX_STACK_LINE(2184)
												{
												}
												HX_STACK_LINE(2184)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
												HX_STACK_LINE(2184)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(2184)
												if (((pre1 == null()))){
													HX_STACK_LINE(2184)
													old = _this->head;
													HX_STACK_LINE(2184)
													ret1 = old->next;
													HX_STACK_LINE(2184)
													_this->head = ret1;
													HX_STACK_LINE(2184)
													if (((_this->head == null()))){
														HX_STACK_LINE(2184)
														_this->pushmod = true;
													}
												}
												else{
													HX_STACK_LINE(2184)
													old = pre1->next;
													HX_STACK_LINE(2184)
													ret1 = old->next;
													HX_STACK_LINE(2184)
													pre1->next = ret1;
													HX_STACK_LINE(2184)
													if (((ret1 == null()))){
														HX_STACK_LINE(2184)
														_this->pushmod = true;
													}
												}
												HX_STACK_LINE(2184)
												{
												}
												HX_STACK_LINE(2184)
												{
													HX_STACK_LINE(2184)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
													HX_STACK_LINE(2184)
													{
													}
													HX_STACK_LINE(2184)
													o->elt = null();
													HX_STACK_LINE(2184)
													o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
													HX_STACK_LINE(2184)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
												}
												HX_STACK_LINE(2184)
												_this->modified = true;
												HX_STACK_LINE(2184)
												(_this->length)--;
												HX_STACK_LINE(2184)
												_this->pushmod = true;
												HX_STACK_LINE(2184)
												ret1;
											}
											HX_STACK_LINE(2184)
											ret = true;
											HX_STACK_LINE(2184)
											break;
										}
										HX_STACK_LINE(2184)
										pre1 = cur;
										HX_STACK_LINE(2184)
										cur = cur->next;
									}
									HX_STACK_LINE(2184)
									ret;
								}
							}
							HX_STACK_LINE(2184)
							if (((xarb->pair != null()))){
								HX_STACK_LINE(2184)
								xarb->pair->arb = null();
								HX_STACK_LINE(2184)
								xarb->pair = null();
							}
							HX_STACK_LINE(2184)
							xarb->active = false;
							HX_STACK_LINE(2184)
							this->f_arbiters->modified = true;
						}
						HX_STACK_LINE(2185)
						cx_ite = body->arbiters->erase(pre);
						HX_STACK_LINE(2186)
						continue;
					}
					HX_STACK_LINE(2188)
					pre = cx_ite;
				}
				HX_STACK_LINE(2190)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(2193)
		this->bphase->remove(s);
		HX_STACK_LINE(2194)
		s->removedFromSpace();
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,removed_shape,(void))

Void ZPP_Space_obj::added_shape( ::zpp_nape::shape::ZPP_Shape s,hx::Null< bool >  __o_dontwake){
bool dontwake = __o_dontwake.Default(false);
	HX_STACK_PUSH("ZPP_Space::added_shape","zpp_nape/space/Space.hx",2023);
	HX_STACK_THIS(this);
	HX_STACK_ARG(s,"s");
	HX_STACK_ARG(dontwake,"dontwake");
{
		HX_STACK_LINE(2024)
		if ((!(dontwake))){
			HX_STACK_LINE(2026)
			::zpp_nape::phys::ZPP_Body o = s->body;		HX_STACK_VAR(o,"o");
			HX_STACK_LINE(2027)
			{
			}
			HX_STACK_LINE(2035)
			if ((!(o->world))){
				HX_STACK_LINE(2036)
				{
				}
				HX_STACK_LINE(2044)
				o->component->waket = (this->stamp + ((  ((this->midstep)) ? int((int)0) : int((int)1) )));
				HX_STACK_LINE(2045)
				if ((o->component->sleeping)){
					HX_STACK_LINE(2045)
					this->really_wake(o,false);
				}
			}
		}
		HX_STACK_LINE(2051)
		this->bphase->insert(s);
		HX_STACK_LINE(2052)
		s->addedToSpace();
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,added_shape,(void))

Void ZPP_Space_obj::transmitType( ::zpp_nape::phys::ZPP_Body p,int new_type){
{
		HX_STACK_PUSH("ZPP_Space::transmitType","zpp_nape/space/Space.hx",1956);
		HX_STACK_THIS(this);
		HX_STACK_ARG(p,"p");
		HX_STACK_ARG(new_type,"new_type");
		HX_STACK_LINE(1957)
		{
			HX_STACK_LINE(1958)
			::zpp_nape::phys::ZPP_Body o = p;		HX_STACK_VAR(o,"o");
			HX_STACK_LINE(1959)
			{
			}
			HX_STACK_LINE(1967)
			if ((!(o->world))){
				HX_STACK_LINE(1968)
				{
				}
				HX_STACK_LINE(1976)
				o->component->waket = (this->stamp + ((  ((this->midstep)) ? int((int)0) : int((int)1) )));
				HX_STACK_LINE(1977)
				if ((o->component->sleeping)){
					HX_STACK_LINE(1977)
					this->really_wake(o,false);
				}
			}
		}
		HX_STACK_LINE(1982)
		if (((p->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC))){
			HX_STACK_LINE(1982)
			this->live->remove(p);
		}
		else{
			HX_STACK_LINE(1985)
			if (((p->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC))){
				HX_STACK_LINE(1986)
				this->kinematics->remove(p);
				HX_STACK_LINE(1987)
				this->staticsleep->remove(p);
			}
			else{
				HX_STACK_LINE(1989)
				if (((p->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_STATIC))){
					HX_STACK_LINE(1989)
					this->staticsleep->remove(p);
				}
			}
		}
		HX_STACK_LINE(1992)
		p->type = new_type;
		HX_STACK_LINE(1993)
		if (((p->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC))){
			HX_STACK_LINE(1993)
			this->kinematics->add(p);
		}
		HX_STACK_LINE(1994)
		if (((p->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_STATIC))){
			HX_STACK_LINE(1994)
			this->static_validation(p);
		}
		HX_STACK_LINE(1995)
		p->component->sleeping = true;
		HX_STACK_LINE(1996)
		{
			HX_STACK_LINE(1997)
			::zpp_nape::phys::ZPP_Body o = p;		HX_STACK_VAR(o,"o");
			HX_STACK_LINE(1998)
			{
			}
			HX_STACK_LINE(2006)
			if ((!(o->world))){
				HX_STACK_LINE(2007)
				{
				}
				HX_STACK_LINE(2015)
				o->component->waket = (this->stamp + ((  ((this->midstep)) ? int((int)0) : int((int)1) )));
				HX_STACK_LINE(2016)
				if ((o->component->sleeping)){
					HX_STACK_LINE(2016)
					this->really_wake(o,true);
				}
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,transmitType,(void))

Void ZPP_Space_obj::remove_callbackset( ::zpp_nape::space::ZPP_CallbackSet cb){
{
		HX_STACK_PUSH("ZPP_Space::remove_callbackset","zpp_nape/space/Space.hx",1951);
		HX_STACK_THIS(this);
		HX_STACK_ARG(cb,"cb");
		HX_STACK_LINE(1952)
		cb->lazydel = true;
		HX_STACK_LINE(1953)
		{
			HX_STACK_LINE(1953)
			::zpp_nape::util::ZNPList_ZPP_CallbackSet _this = cb->int1->cbsets;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(1953)
			{
			}
			HX_STACK_LINE(1953)
			{
				HX_STACK_LINE(1953)
				{
				}
				HX_STACK_LINE(1953)
				::zpp_nape::util::ZNPNode_ZPP_CallbackSet pre = null();		HX_STACK_VAR(pre,"pre");
				HX_STACK_LINE(1953)
				::zpp_nape::util::ZNPNode_ZPP_CallbackSet cur = _this->head;		HX_STACK_VAR(cur,"cur");
				HX_STACK_LINE(1953)
				bool ret = false;		HX_STACK_VAR(ret,"ret");
				HX_STACK_LINE(1953)
				while(((cur != null()))){
					HX_STACK_LINE(1953)
					if (((cur->elt == cb))){
						HX_STACK_LINE(1953)
						{
							HX_STACK_LINE(1953)
							{
							}
							HX_STACK_LINE(1953)
							::zpp_nape::util::ZNPNode_ZPP_CallbackSet old;		HX_STACK_VAR(old,"old");
							HX_STACK_LINE(1953)
							::zpp_nape::util::ZNPNode_ZPP_CallbackSet ret1;		HX_STACK_VAR(ret1,"ret1");
							HX_STACK_LINE(1953)
							if (((pre == null()))){
								HX_STACK_LINE(1953)
								old = _this->head;
								HX_STACK_LINE(1953)
								ret1 = old->next;
								HX_STACK_LINE(1953)
								_this->head = ret1;
								HX_STACK_LINE(1953)
								if (((_this->head == null()))){
									HX_STACK_LINE(1953)
									_this->pushmod = true;
								}
							}
							else{
								HX_STACK_LINE(1953)
								old = pre->next;
								HX_STACK_LINE(1953)
								ret1 = old->next;
								HX_STACK_LINE(1953)
								pre->next = ret1;
								HX_STACK_LINE(1953)
								if (((ret1 == null()))){
									HX_STACK_LINE(1953)
									_this->pushmod = true;
								}
							}
							HX_STACK_LINE(1953)
							{
							}
							HX_STACK_LINE(1953)
							{
								HX_STACK_LINE(1953)
								::zpp_nape::util::ZNPNode_ZPP_CallbackSet o = old;		HX_STACK_VAR(o,"o");
								HX_STACK_LINE(1953)
								{
								}
								HX_STACK_LINE(1953)
								o->elt = null();
								HX_STACK_LINE(1953)
								o->next = ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool;
								HX_STACK_LINE(1953)
								::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool = o;
							}
							HX_STACK_LINE(1953)
							_this->modified = true;
							HX_STACK_LINE(1953)
							(_this->length)--;
							HX_STACK_LINE(1953)
							_this->pushmod = true;
							HX_STACK_LINE(1953)
							ret1;
						}
						HX_STACK_LINE(1953)
						ret = true;
						HX_STACK_LINE(1953)
						break;
					}
					HX_STACK_LINE(1953)
					pre = cur;
					HX_STACK_LINE(1953)
					cur = cur->next;
				}
				HX_STACK_LINE(1953)
				ret;
			}
		}
		HX_STACK_LINE(1954)
		{
			HX_STACK_LINE(1954)
			::zpp_nape::util::ZNPList_ZPP_CallbackSet _this = cb->int2->cbsets;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(1954)
			{
			}
			HX_STACK_LINE(1954)
			{
				HX_STACK_LINE(1954)
				{
				}
				HX_STACK_LINE(1954)
				::zpp_nape::util::ZNPNode_ZPP_CallbackSet pre = null();		HX_STACK_VAR(pre,"pre");
				HX_STACK_LINE(1954)
				::zpp_nape::util::ZNPNode_ZPP_CallbackSet cur = _this->head;		HX_STACK_VAR(cur,"cur");
				HX_STACK_LINE(1954)
				bool ret = false;		HX_STACK_VAR(ret,"ret");
				HX_STACK_LINE(1954)
				while(((cur != null()))){
					HX_STACK_LINE(1954)
					if (((cur->elt == cb))){
						HX_STACK_LINE(1954)
						{
							HX_STACK_LINE(1954)
							{
							}
							HX_STACK_LINE(1954)
							::zpp_nape::util::ZNPNode_ZPP_CallbackSet old;		HX_STACK_VAR(old,"old");
							HX_STACK_LINE(1954)
							::zpp_nape::util::ZNPNode_ZPP_CallbackSet ret1;		HX_STACK_VAR(ret1,"ret1");
							HX_STACK_LINE(1954)
							if (((pre == null()))){
								HX_STACK_LINE(1954)
								old = _this->head;
								HX_STACK_LINE(1954)
								ret1 = old->next;
								HX_STACK_LINE(1954)
								_this->head = ret1;
								HX_STACK_LINE(1954)
								if (((_this->head == null()))){
									HX_STACK_LINE(1954)
									_this->pushmod = true;
								}
							}
							else{
								HX_STACK_LINE(1954)
								old = pre->next;
								HX_STACK_LINE(1954)
								ret1 = old->next;
								HX_STACK_LINE(1954)
								pre->next = ret1;
								HX_STACK_LINE(1954)
								if (((ret1 == null()))){
									HX_STACK_LINE(1954)
									_this->pushmod = true;
								}
							}
							HX_STACK_LINE(1954)
							{
							}
							HX_STACK_LINE(1954)
							{
								HX_STACK_LINE(1954)
								::zpp_nape::util::ZNPNode_ZPP_CallbackSet o = old;		HX_STACK_VAR(o,"o");
								HX_STACK_LINE(1954)
								{
								}
								HX_STACK_LINE(1954)
								o->elt = null();
								HX_STACK_LINE(1954)
								o->next = ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool;
								HX_STACK_LINE(1954)
								::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool = o;
							}
							HX_STACK_LINE(1954)
							_this->modified = true;
							HX_STACK_LINE(1954)
							(_this->length)--;
							HX_STACK_LINE(1954)
							_this->pushmod = true;
							HX_STACK_LINE(1954)
							ret1;
						}
						HX_STACK_LINE(1954)
						ret = true;
						HX_STACK_LINE(1954)
						break;
					}
					HX_STACK_LINE(1954)
					pre = cur;
					HX_STACK_LINE(1954)
					cur = cur->next;
				}
				HX_STACK_LINE(1954)
				ret;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,remove_callbackset,(void))

Void ZPP_Space_obj::add_callbackset( ::zpp_nape::space::ZPP_CallbackSet cb){
{
		HX_STACK_PUSH("ZPP_Space::add_callbackset","zpp_nape/space/Space.hx",1938);
		HX_STACK_THIS(this);
		HX_STACK_ARG(cb,"cb");
		HX_STACK_LINE(1939)
		{
		}
		HX_STACK_LINE(1947)
		{
			HX_STACK_LINE(1947)
			::zpp_nape::util::ZNPList_ZPP_CallbackSet _this = cb->int1->cbsets;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(1947)
			{
			}
			struct _Function_2_1{
				inline static ::zpp_nape::util::ZNPNode_ZPP_CallbackSet Block( ::zpp_nape::space::ZPP_CallbackSet &cb){
					HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",1947);
					{
						HX_STACK_LINE(1947)
						::zpp_nape::util::ZNPNode_ZPP_CallbackSet ret;		HX_STACK_VAR(ret,"ret");
						HX_STACK_LINE(1947)
						{
							HX_STACK_LINE(1947)
							if (((::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool == null()))){
								HX_STACK_LINE(1947)
								ret = ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::__new();
							}
							else{
								HX_STACK_LINE(1947)
								ret = ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool;
								HX_STACK_LINE(1947)
								::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool = ret->next;
								HX_STACK_LINE(1947)
								ret->next = null();
							}
							HX_STACK_LINE(1947)
							Dynamic();
						}
						HX_STACK_LINE(1947)
						ret->elt = cb;
						HX_STACK_LINE(1947)
						return ret;
					}
					return null();
				}
			};
			HX_STACK_LINE(1947)
			::zpp_nape::util::ZNPNode_ZPP_CallbackSet temp = _Function_2_1::Block(cb);		HX_STACK_VAR(temp,"temp");
			HX_STACK_LINE(1947)
			temp->next = _this->head;
			HX_STACK_LINE(1947)
			_this->head = temp;
			HX_STACK_LINE(1947)
			_this->modified = true;
			HX_STACK_LINE(1947)
			(_this->length)++;
			HX_STACK_LINE(1947)
			cb;
		}
		HX_STACK_LINE(1948)
		{
			HX_STACK_LINE(1948)
			::zpp_nape::util::ZNPList_ZPP_CallbackSet _this = cb->int2->cbsets;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(1948)
			{
			}
			struct _Function_2_1{
				inline static ::zpp_nape::util::ZNPNode_ZPP_CallbackSet Block( ::zpp_nape::space::ZPP_CallbackSet &cb){
					HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",1948);
					{
						HX_STACK_LINE(1948)
						::zpp_nape::util::ZNPNode_ZPP_CallbackSet ret;		HX_STACK_VAR(ret,"ret");
						HX_STACK_LINE(1948)
						{
							HX_STACK_LINE(1948)
							if (((::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool == null()))){
								HX_STACK_LINE(1948)
								ret = ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::__new();
							}
							else{
								HX_STACK_LINE(1948)
								ret = ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool;
								HX_STACK_LINE(1948)
								::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool = ret->next;
								HX_STACK_LINE(1948)
								ret->next = null();
							}
							HX_STACK_LINE(1948)
							Dynamic();
						}
						HX_STACK_LINE(1948)
						ret->elt = cb;
						HX_STACK_LINE(1948)
						return ret;
					}
					return null();
				}
			};
			HX_STACK_LINE(1948)
			::zpp_nape::util::ZNPNode_ZPP_CallbackSet temp = _Function_2_1::Block(cb);		HX_STACK_VAR(temp,"temp");
			HX_STACK_LINE(1948)
			temp->next = _this->head;
			HX_STACK_LINE(1948)
			_this->head = temp;
			HX_STACK_LINE(1948)
			_this->modified = true;
			HX_STACK_LINE(1948)
			(_this->length)++;
			HX_STACK_LINE(1948)
			cb;
		}
		HX_STACK_LINE(1949)
		{
			HX_STACK_LINE(1949)
			::zpp_nape::space::ZPP_CallbackSet _this = this->callbackset_list;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(1949)
			{
			}
			struct _Function_2_1{
				inline static ::zpp_nape::space::ZPP_CallbackSet Block( ::zpp_nape::space::ZPP_CallbackSet &cb){
					HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",1949);
					{
						HX_STACK_LINE(1949)
						cb->_inuse = true;
						HX_STACK_LINE(1949)
						return cb;
					}
					return null();
				}
			};
			HX_STACK_LINE(1949)
			::zpp_nape::space::ZPP_CallbackSet temp = _Function_2_1::Block(cb);		HX_STACK_VAR(temp,"temp");
			HX_STACK_LINE(1949)
			temp->next = _this->next;
			HX_STACK_LINE(1949)
			_this->next = temp;
			HX_STACK_LINE(1949)
			_this->modified = true;
			HX_STACK_LINE(1949)
			(_this->length)++;
			HX_STACK_LINE(1949)
			cb;
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,add_callbackset,(void))

Void ZPP_Space_obj::remListener( ::zpp_nape::callbacks::ZPP_Listener x){
{
		HX_STACK_PUSH("ZPP_Space::remListener","zpp_nape/space/Space.hx",1931);
		HX_STACK_THIS(this);
		HX_STACK_ARG(x,"x");
		HX_STACK_LINE(1932)
		if (((x->interaction != null()))){
			HX_STACK_LINE(1932)
			Dynamic();
		}
		HX_STACK_LINE(1935)
		x->removedFromSpace();
		HX_STACK_LINE(1936)
		x->space = null();
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,remListener,(void))

Void ZPP_Space_obj::addListener( ::zpp_nape::callbacks::ZPP_Listener x){
{
		HX_STACK_PUSH("ZPP_Space::addListener","zpp_nape/space/Space.hx",1924);
		HX_STACK_THIS(this);
		HX_STACK_ARG(x,"x");
		HX_STACK_LINE(1925)
		x->space = hx::ObjectPtr<OBJ_>(this);
		HX_STACK_LINE(1926)
		x->addedToSpace();
		HX_STACK_LINE(1927)
		if (((x->interaction != null()))){
			HX_STACK_LINE(1927)
			Dynamic();
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,addListener,(void))

Void ZPP_Space_obj::unrevoke_listener( ::zpp_nape::callbacks::ZPP_InteractionListener x){
{
		HX_STACK_PUSH("ZPP_Space::unrevoke_listener","zpp_nape/space/Space.hx",1923);
		HX_STACK_THIS(this);
		HX_STACK_ARG(x,"x");
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,unrevoke_listener,(void))

Void ZPP_Space_obj::revoke_listener( ::zpp_nape::callbacks::ZPP_InteractionListener x){
{
		HX_STACK_PUSH("ZPP_Space::revoke_listener","zpp_nape/space/Space.hx",1920);
		HX_STACK_THIS(this);
		HX_STACK_ARG(x,"x");
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,revoke_listener,(void))

Void ZPP_Space_obj::listeners_modifiable( ){
{
		HX_STACK_PUSH("ZPP_Space::listeners_modifiable","zpp_nape/space/Space.hx",1807);
		HX_STACK_THIS(this);
		HX_STACK_LINE(1807)
		if ((this->midstep)){
			HX_STACK_LINE(1808)
			hx::Throw (HX_CSTRING("Error: Space::listeners cannot be set during space step()"));
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Space_obj,listeners_modifiable,(void))

Void ZPP_Space_obj::listeners_subber( ::nape::callbacks::Listener x){
{
		HX_STACK_PUSH("ZPP_Space::listeners_subber","zpp_nape/space/Space.hx",1803);
		HX_STACK_THIS(this);
		HX_STACK_ARG(x,"x");
		HX_STACK_LINE(1803)
		this->remListener(x->zpp_inner);
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,listeners_subber,(void))

bool ZPP_Space_obj::listeners_adder( ::nape::callbacks::Listener x){
	HX_STACK_PUSH("ZPP_Space::listeners_adder","zpp_nape/space/Space.hx",1795);
	HX_STACK_THIS(this);
	HX_STACK_ARG(x,"x");
	HX_STACK_LINE(1795)
	if (((x->zpp_inner->space != hx::ObjectPtr<OBJ_>(this)))){
		HX_STACK_LINE(1797)
		if (((x->zpp_inner->space != null()))){
			HX_STACK_LINE(1797)
			x->zpp_inner->space->outer->zpp_inner->wrap_listeners->remove(x);
		}
		HX_STACK_LINE(1798)
		this->addListener(x->zpp_inner);
		HX_STACK_LINE(1799)
		return true;
	}
	else{
		HX_STACK_LINE(1801)
		return false;
	}
	HX_STACK_LINE(1795)
	return false;
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,listeners_adder,return )

Void ZPP_Space_obj::constraints_modifiable( ){
{
		HX_STACK_PUSH("ZPP_Space::constraints_modifiable","zpp_nape/space/Space.hx",1791);
		HX_STACK_THIS(this);
		HX_STACK_LINE(1791)
		if ((this->midstep)){
			HX_STACK_LINE(1792)
			hx::Throw (HX_CSTRING("Error: Space::constraints cannot be set during space step()"));
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Space_obj,constraints_modifiable,(void))

Void ZPP_Space_obj::constraints_subber( ::nape::constraint::Constraint x){
{
		HX_STACK_PUSH("ZPP_Space::constraints_subber","zpp_nape/space/Space.hx",1787);
		HX_STACK_THIS(this);
		HX_STACK_ARG(x,"x");
		HX_STACK_LINE(1787)
		this->remConstraint(x->zpp_inner);
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,constraints_subber,(void))

bool ZPP_Space_obj::constraints_adder( ::nape::constraint::Constraint x){
	HX_STACK_PUSH("ZPP_Space::constraints_adder","zpp_nape/space/Space.hx",1776);
	HX_STACK_THIS(this);
	HX_STACK_ARG(x,"x");
	HX_STACK_LINE(1778)
	if (((x->zpp_inner->compound != null()))){
		HX_STACK_LINE(1778)
		hx::Throw (HX_CSTRING("Error: Cannot set the space of a Constraint belonging to a Compound, only the root Compound space can be set"));
	}
	HX_STACK_LINE(1780)
	if (((x->zpp_inner->space != hx::ObjectPtr<OBJ_>(this)))){
		HX_STACK_LINE(1781)
		if (((x->zpp_inner->space != null()))){
			HX_STACK_LINE(1781)
			x->zpp_inner->space->outer->zpp_inner->wrap_constraints->remove(x);
		}
		HX_STACK_LINE(1782)
		this->addConstraint(x->zpp_inner);
		HX_STACK_LINE(1783)
		return true;
	}
	else{
		HX_STACK_LINE(1785)
		return false;
	}
	HX_STACK_LINE(1780)
	return false;
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,constraints_adder,return )

Void ZPP_Space_obj::compounds_modifiable( ){
{
		HX_STACK_PUSH("ZPP_Space::compounds_modifiable","zpp_nape/space/Space.hx",1772);
		HX_STACK_THIS(this);
		HX_STACK_LINE(1772)
		if ((this->midstep)){
			HX_STACK_LINE(1773)
			hx::Throw (HX_CSTRING("Error: Space::compounds cannot be set during space step()"));
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Space_obj,compounds_modifiable,(void))

Void ZPP_Space_obj::compounds_subber( ::nape::phys::Compound x){
{
		HX_STACK_PUSH("ZPP_Space::compounds_subber","zpp_nape/space/Space.hx",1768);
		HX_STACK_THIS(this);
		HX_STACK_ARG(x,"x");
		HX_STACK_LINE(1768)
		this->remCompound(x->zpp_inner);
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,compounds_subber,(void))

bool ZPP_Space_obj::compounds_adder( ::nape::phys::Compound x){
	HX_STACK_PUSH("ZPP_Space::compounds_adder","zpp_nape/space/Space.hx",1757);
	HX_STACK_THIS(this);
	HX_STACK_ARG(x,"x");
	HX_STACK_LINE(1759)
	if (((x->zpp_inner->compound != null()))){
		HX_STACK_LINE(1759)
		hx::Throw (HX_CSTRING("Error: Cannot set the space of an inner Compound, only the root Compound space can be set"));
	}
	HX_STACK_LINE(1761)
	if (((x->zpp_inner->space != hx::ObjectPtr<OBJ_>(this)))){
		HX_STACK_LINE(1762)
		if (((x->zpp_inner->space != null()))){
			HX_STACK_LINE(1762)
			x->zpp_inner->space->wrap_compounds->remove(x);
		}
		HX_STACK_LINE(1763)
		this->addCompound(x->zpp_inner);
		HX_STACK_LINE(1764)
		return true;
	}
	else{
		HX_STACK_LINE(1766)
		return false;
	}
	HX_STACK_LINE(1761)
	return false;
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,compounds_adder,return )

Void ZPP_Space_obj::bodies_modifiable( ){
{
		HX_STACK_PUSH("ZPP_Space::bodies_modifiable","zpp_nape/space/Space.hx",1753);
		HX_STACK_THIS(this);
		HX_STACK_LINE(1753)
		if ((this->midstep)){
			HX_STACK_LINE(1754)
			hx::Throw (HX_CSTRING("Error: Space::bodies cannot be set during space step()"));
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Space_obj,bodies_modifiable,(void))

Void ZPP_Space_obj::bodies_subber( ::nape::phys::Body x){
{
		HX_STACK_PUSH("ZPP_Space::bodies_subber","zpp_nape/space/Space.hx",1749);
		HX_STACK_THIS(this);
		HX_STACK_ARG(x,"x");
		HX_STACK_LINE(1749)
		this->remBody(x->zpp_inner,null());
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,bodies_subber,(void))

bool ZPP_Space_obj::bodies_adder( ::nape::phys::Body x){
	HX_STACK_PUSH("ZPP_Space::bodies_adder","zpp_nape/space/Space.hx",1738);
	HX_STACK_THIS(this);
	HX_STACK_ARG(x,"x");
	HX_STACK_LINE(1740)
	if (((x->zpp_inner->compound != null()))){
		HX_STACK_LINE(1740)
		hx::Throw (HX_CSTRING("Error: Cannot set the space of a Body belonging to a Compound, only the root Compound space can be set"));
	}
	HX_STACK_LINE(1742)
	if (((x->zpp_inner->space != hx::ObjectPtr<OBJ_>(this)))){
		HX_STACK_LINE(1743)
		if (((x->zpp_inner->space != null()))){
			HX_STACK_LINE(1743)
			x->zpp_inner->space->outer->zpp_inner->wrap_bodies->remove(x);
		}
		HX_STACK_LINE(1744)
		this->addBody(x->zpp_inner,null());
		HX_STACK_LINE(1745)
		return true;
	}
	else{
		HX_STACK_LINE(1747)
		return false;
	}
	HX_STACK_LINE(1742)
	return false;
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,bodies_adder,return )

Void ZPP_Space_obj::clear( ){
{
		HX_STACK_PUSH("ZPP_Space::clear","zpp_nape/space/Space.hx",1479);
		HX_STACK_THIS(this);
		HX_STACK_LINE(1480)
		while((!(((this->listeners->head == null()))))){
			HX_STACK_LINE(1482)
			::zpp_nape::callbacks::ZPP_Listener c = this->listeners->pop_unsafe();		HX_STACK_VAR(c,"c");
			HX_STACK_LINE(1483)
			this->remListener(c);
		}
		HX_STACK_LINE(1486)
		while((!(((this->callbackset_list->next == null()))))){
			HX_STACK_LINE(1488)
			::zpp_nape::space::ZPP_CallbackSet c = this->callbackset_list->pop_unsafe();		HX_STACK_VAR(c,"c");
			HX_STACK_LINE(1489)
			{
				HX_STACK_LINE(1490)
				c->arbiters->clear();
				HX_STACK_LINE(1491)
				{
					HX_STACK_LINE(1492)
					::zpp_nape::space::ZPP_CallbackSet o = c;		HX_STACK_VAR(o,"o");
					HX_STACK_LINE(1493)
					{
					}
					HX_STACK_LINE(1501)
					{
						HX_STACK_LINE(1501)
						o->int1 = o->int2 = null();
						HX_STACK_LINE(1501)
						o->id = o->di = (int)-1;
						HX_STACK_LINE(1501)
						o->freed = true;
						HX_STACK_LINE(1501)
						Dynamic();
					}
					HX_STACK_LINE(1502)
					o->next = ::zpp_nape::space::ZPP_CallbackSet_obj::zpp_pool;
					HX_STACK_LINE(1503)
					::zpp_nape::space::ZPP_CallbackSet_obj::zpp_pool = o;
				}
			}
		}
		HX_STACK_LINE(1511)
		while((!(((this->c_arbiters_true->head == null()))))){
			HX_STACK_LINE(1513)
			::zpp_nape::dynamics::ZPP_ColArbiter arb = this->c_arbiters_true->pop_unsafe();		HX_STACK_VAR(arb,"arb");
			HX_STACK_LINE(1514)
			{
				HX_STACK_LINE(1514)
				{
					HX_STACK_LINE(1514)
					{
					}
					HX_STACK_LINE(1514)
					{
					}
					HX_STACK_LINE(1514)
					{
					}
					HX_STACK_LINE(1514)
					{
					}
					HX_STACK_LINE(1514)
					if ((!(arb->cleared))){
						HX_STACK_LINE(1514)
						{
							HX_STACK_LINE(1514)
							::zpp_nape::util::ZNPList_ZPP_Arbiter _this = arb->b1->arbiters;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1514)
							{
							}
							HX_STACK_LINE(1514)
							{
								HX_STACK_LINE(1514)
								{
								}
								HX_STACK_LINE(1514)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
								HX_STACK_LINE(1514)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;		HX_STACK_VAR(cur,"cur");
								HX_STACK_LINE(1514)
								bool ret = false;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(1514)
								while(((cur != null()))){
									HX_STACK_LINE(1514)
									if (((cur->elt == arb))){
										HX_STACK_LINE(1514)
										{
											HX_STACK_LINE(1514)
											{
											}
											HX_STACK_LINE(1514)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
											HX_STACK_LINE(1514)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(1514)
											if (((pre == null()))){
												HX_STACK_LINE(1514)
												old = _this->head;
												HX_STACK_LINE(1514)
												ret1 = old->next;
												HX_STACK_LINE(1514)
												_this->head = ret1;
												HX_STACK_LINE(1514)
												if (((_this->head == null()))){
													HX_STACK_LINE(1514)
													_this->pushmod = true;
												}
											}
											else{
												HX_STACK_LINE(1514)
												old = pre->next;
												HX_STACK_LINE(1514)
												ret1 = old->next;
												HX_STACK_LINE(1514)
												pre->next = ret1;
												HX_STACK_LINE(1514)
												if (((ret1 == null()))){
													HX_STACK_LINE(1514)
													_this->pushmod = true;
												}
											}
											HX_STACK_LINE(1514)
											{
											}
											HX_STACK_LINE(1514)
											{
												HX_STACK_LINE(1514)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
												HX_STACK_LINE(1514)
												{
												}
												HX_STACK_LINE(1514)
												o->elt = null();
												HX_STACK_LINE(1514)
												o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
												HX_STACK_LINE(1514)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
											}
											HX_STACK_LINE(1514)
											_this->modified = true;
											HX_STACK_LINE(1514)
											(_this->length)--;
											HX_STACK_LINE(1514)
											_this->pushmod = true;
											HX_STACK_LINE(1514)
											ret1;
										}
										HX_STACK_LINE(1514)
										ret = true;
										HX_STACK_LINE(1514)
										break;
									}
									HX_STACK_LINE(1514)
									pre = cur;
									HX_STACK_LINE(1514)
									cur = cur->next;
								}
								HX_STACK_LINE(1514)
								ret;
							}
						}
						HX_STACK_LINE(1514)
						{
							HX_STACK_LINE(1514)
							::zpp_nape::util::ZNPList_ZPP_Arbiter _this = arb->b2->arbiters;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1514)
							{
							}
							HX_STACK_LINE(1514)
							{
								HX_STACK_LINE(1514)
								{
								}
								HX_STACK_LINE(1514)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
								HX_STACK_LINE(1514)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;		HX_STACK_VAR(cur,"cur");
								HX_STACK_LINE(1514)
								bool ret = false;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(1514)
								while(((cur != null()))){
									HX_STACK_LINE(1514)
									if (((cur->elt == arb))){
										HX_STACK_LINE(1514)
										{
											HX_STACK_LINE(1514)
											{
											}
											HX_STACK_LINE(1514)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
											HX_STACK_LINE(1514)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(1514)
											if (((pre == null()))){
												HX_STACK_LINE(1514)
												old = _this->head;
												HX_STACK_LINE(1514)
												ret1 = old->next;
												HX_STACK_LINE(1514)
												_this->head = ret1;
												HX_STACK_LINE(1514)
												if (((_this->head == null()))){
													HX_STACK_LINE(1514)
													_this->pushmod = true;
												}
											}
											else{
												HX_STACK_LINE(1514)
												old = pre->next;
												HX_STACK_LINE(1514)
												ret1 = old->next;
												HX_STACK_LINE(1514)
												pre->next = ret1;
												HX_STACK_LINE(1514)
												if (((ret1 == null()))){
													HX_STACK_LINE(1514)
													_this->pushmod = true;
												}
											}
											HX_STACK_LINE(1514)
											{
											}
											HX_STACK_LINE(1514)
											{
												HX_STACK_LINE(1514)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
												HX_STACK_LINE(1514)
												{
												}
												HX_STACK_LINE(1514)
												o->elt = null();
												HX_STACK_LINE(1514)
												o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
												HX_STACK_LINE(1514)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
											}
											HX_STACK_LINE(1514)
											_this->modified = true;
											HX_STACK_LINE(1514)
											(_this->length)--;
											HX_STACK_LINE(1514)
											_this->pushmod = true;
											HX_STACK_LINE(1514)
											ret1;
										}
										HX_STACK_LINE(1514)
										ret = true;
										HX_STACK_LINE(1514)
										break;
									}
									HX_STACK_LINE(1514)
									pre = cur;
									HX_STACK_LINE(1514)
									cur = cur->next;
								}
								HX_STACK_LINE(1514)
								ret;
							}
						}
						HX_STACK_LINE(1514)
						if (((arb->pair != null()))){
							HX_STACK_LINE(1514)
							arb->pair->arb = null();
							HX_STACK_LINE(1514)
							arb->pair = null();
						}
					}
					HX_STACK_LINE(1514)
					arb->b1 = arb->b2 = null();
					HX_STACK_LINE(1514)
					arb->active = false;
					HX_STACK_LINE(1514)
					arb->intchange = false;
				}
				HX_STACK_LINE(1514)
				while((!(((arb->contacts->next == null()))))){
					HX_STACK_LINE(1514)
					{
						struct _Function_5_1{
							inline static ::zpp_nape::dynamics::ZPP_Contact Block( ::zpp_nape::dynamics::ZPP_ColArbiter &arb){
								HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",1514);
								{
									HX_STACK_LINE(1514)
									::zpp_nape::dynamics::ZPP_Contact _this = arb->contacts;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(1514)
									{
									}
									HX_STACK_LINE(1514)
									::zpp_nape::dynamics::ZPP_Contact ret = _this->next;		HX_STACK_VAR(ret,"ret");
									HX_STACK_LINE(1514)
									_this->pop();
									HX_STACK_LINE(1514)
									return ret;
								}
								return null();
							}
						};
						HX_STACK_LINE(1514)
						::zpp_nape::dynamics::ZPP_Contact o = _Function_5_1::Block(arb);		HX_STACK_VAR(o,"o");
						HX_STACK_LINE(1514)
						{
						}
						HX_STACK_LINE(1514)
						o->arbiter = null();
						HX_STACK_LINE(1514)
						o->next = ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool;
						HX_STACK_LINE(1514)
						::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool = o;
					}
					HX_STACK_LINE(1514)
					{
						HX_STACK_LINE(1514)
						::zpp_nape::dynamics::ZPP_IContact _this = arb->innards;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(1514)
						{
						}
						HX_STACK_LINE(1514)
						::zpp_nape::dynamics::ZPP_IContact ret = _this->next;		HX_STACK_VAR(ret,"ret");
						HX_STACK_LINE(1514)
						_this->next = ret->next;
						HX_STACK_LINE(1514)
						ret->_inuse = false;
						HX_STACK_LINE(1514)
						{
						}
						HX_STACK_LINE(1514)
						if (((_this->next == null()))){
							HX_STACK_LINE(1514)
							_this->pushmod = true;
						}
						HX_STACK_LINE(1514)
						_this->modified = true;
						HX_STACK_LINE(1514)
						(_this->length)--;
					}
				}
				HX_STACK_LINE(1514)
				{
					HX_STACK_LINE(1514)
					::zpp_nape::dynamics::ZPP_ColArbiter o = arb;		HX_STACK_VAR(o,"o");
					HX_STACK_LINE(1514)
					{
					}
					HX_STACK_LINE(1514)
					{
						HX_STACK_LINE(1514)
						{
						}
						HX_STACK_LINE(1514)
						{
						}
						HX_STACK_LINE(1514)
						o->userdef_dyn_fric = false;
						HX_STACK_LINE(1514)
						o->userdef_stat_fric = false;
						HX_STACK_LINE(1514)
						o->userdef_restitution = false;
						HX_STACK_LINE(1514)
						o->userdef_rfric = false;
						HX_STACK_LINE(1514)
						o->__ref_edge1 = o->__ref_edge2 = null();
					}
					HX_STACK_LINE(1514)
					o->next = ::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool;
					HX_STACK_LINE(1514)
					::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool = o;
				}
				HX_STACK_LINE(1514)
				arb->pre_dt = -1.0;
			}
		}
		HX_STACK_LINE(1517)
		while((!(((this->c_arbiters_false->head == null()))))){
			HX_STACK_LINE(1519)
			::zpp_nape::dynamics::ZPP_ColArbiter arb = this->c_arbiters_false->pop_unsafe();		HX_STACK_VAR(arb,"arb");
			HX_STACK_LINE(1520)
			{
				HX_STACK_LINE(1520)
				{
					HX_STACK_LINE(1520)
					{
					}
					HX_STACK_LINE(1520)
					{
					}
					HX_STACK_LINE(1520)
					{
					}
					HX_STACK_LINE(1520)
					{
					}
					HX_STACK_LINE(1520)
					if ((!(arb->cleared))){
						HX_STACK_LINE(1520)
						{
							HX_STACK_LINE(1520)
							::zpp_nape::util::ZNPList_ZPP_Arbiter _this = arb->b1->arbiters;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1520)
							{
							}
							HX_STACK_LINE(1520)
							{
								HX_STACK_LINE(1520)
								{
								}
								HX_STACK_LINE(1520)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
								HX_STACK_LINE(1520)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;		HX_STACK_VAR(cur,"cur");
								HX_STACK_LINE(1520)
								bool ret = false;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(1520)
								while(((cur != null()))){
									HX_STACK_LINE(1520)
									if (((cur->elt == arb))){
										HX_STACK_LINE(1520)
										{
											HX_STACK_LINE(1520)
											{
											}
											HX_STACK_LINE(1520)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
											HX_STACK_LINE(1520)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(1520)
											if (((pre == null()))){
												HX_STACK_LINE(1520)
												old = _this->head;
												HX_STACK_LINE(1520)
												ret1 = old->next;
												HX_STACK_LINE(1520)
												_this->head = ret1;
												HX_STACK_LINE(1520)
												if (((_this->head == null()))){
													HX_STACK_LINE(1520)
													_this->pushmod = true;
												}
											}
											else{
												HX_STACK_LINE(1520)
												old = pre->next;
												HX_STACK_LINE(1520)
												ret1 = old->next;
												HX_STACK_LINE(1520)
												pre->next = ret1;
												HX_STACK_LINE(1520)
												if (((ret1 == null()))){
													HX_STACK_LINE(1520)
													_this->pushmod = true;
												}
											}
											HX_STACK_LINE(1520)
											{
											}
											HX_STACK_LINE(1520)
											{
												HX_STACK_LINE(1520)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
												HX_STACK_LINE(1520)
												{
												}
												HX_STACK_LINE(1520)
												o->elt = null();
												HX_STACK_LINE(1520)
												o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
												HX_STACK_LINE(1520)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
											}
											HX_STACK_LINE(1520)
											_this->modified = true;
											HX_STACK_LINE(1520)
											(_this->length)--;
											HX_STACK_LINE(1520)
											_this->pushmod = true;
											HX_STACK_LINE(1520)
											ret1;
										}
										HX_STACK_LINE(1520)
										ret = true;
										HX_STACK_LINE(1520)
										break;
									}
									HX_STACK_LINE(1520)
									pre = cur;
									HX_STACK_LINE(1520)
									cur = cur->next;
								}
								HX_STACK_LINE(1520)
								ret;
							}
						}
						HX_STACK_LINE(1520)
						{
							HX_STACK_LINE(1520)
							::zpp_nape::util::ZNPList_ZPP_Arbiter _this = arb->b2->arbiters;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1520)
							{
							}
							HX_STACK_LINE(1520)
							{
								HX_STACK_LINE(1520)
								{
								}
								HX_STACK_LINE(1520)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
								HX_STACK_LINE(1520)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;		HX_STACK_VAR(cur,"cur");
								HX_STACK_LINE(1520)
								bool ret = false;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(1520)
								while(((cur != null()))){
									HX_STACK_LINE(1520)
									if (((cur->elt == arb))){
										HX_STACK_LINE(1520)
										{
											HX_STACK_LINE(1520)
											{
											}
											HX_STACK_LINE(1520)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
											HX_STACK_LINE(1520)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(1520)
											if (((pre == null()))){
												HX_STACK_LINE(1520)
												old = _this->head;
												HX_STACK_LINE(1520)
												ret1 = old->next;
												HX_STACK_LINE(1520)
												_this->head = ret1;
												HX_STACK_LINE(1520)
												if (((_this->head == null()))){
													HX_STACK_LINE(1520)
													_this->pushmod = true;
												}
											}
											else{
												HX_STACK_LINE(1520)
												old = pre->next;
												HX_STACK_LINE(1520)
												ret1 = old->next;
												HX_STACK_LINE(1520)
												pre->next = ret1;
												HX_STACK_LINE(1520)
												if (((ret1 == null()))){
													HX_STACK_LINE(1520)
													_this->pushmod = true;
												}
											}
											HX_STACK_LINE(1520)
											{
											}
											HX_STACK_LINE(1520)
											{
												HX_STACK_LINE(1520)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
												HX_STACK_LINE(1520)
												{
												}
												HX_STACK_LINE(1520)
												o->elt = null();
												HX_STACK_LINE(1520)
												o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
												HX_STACK_LINE(1520)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
											}
											HX_STACK_LINE(1520)
											_this->modified = true;
											HX_STACK_LINE(1520)
											(_this->length)--;
											HX_STACK_LINE(1520)
											_this->pushmod = true;
											HX_STACK_LINE(1520)
											ret1;
										}
										HX_STACK_LINE(1520)
										ret = true;
										HX_STACK_LINE(1520)
										break;
									}
									HX_STACK_LINE(1520)
									pre = cur;
									HX_STACK_LINE(1520)
									cur = cur->next;
								}
								HX_STACK_LINE(1520)
								ret;
							}
						}
						HX_STACK_LINE(1520)
						if (((arb->pair != null()))){
							HX_STACK_LINE(1520)
							arb->pair->arb = null();
							HX_STACK_LINE(1520)
							arb->pair = null();
						}
					}
					HX_STACK_LINE(1520)
					arb->b1 = arb->b2 = null();
					HX_STACK_LINE(1520)
					arb->active = false;
					HX_STACK_LINE(1520)
					arb->intchange = false;
				}
				HX_STACK_LINE(1520)
				while((!(((arb->contacts->next == null()))))){
					HX_STACK_LINE(1520)
					{
						struct _Function_5_1{
							inline static ::zpp_nape::dynamics::ZPP_Contact Block( ::zpp_nape::dynamics::ZPP_ColArbiter &arb){
								HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",1520);
								{
									HX_STACK_LINE(1520)
									::zpp_nape::dynamics::ZPP_Contact _this = arb->contacts;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(1520)
									{
									}
									HX_STACK_LINE(1520)
									::zpp_nape::dynamics::ZPP_Contact ret = _this->next;		HX_STACK_VAR(ret,"ret");
									HX_STACK_LINE(1520)
									_this->pop();
									HX_STACK_LINE(1520)
									return ret;
								}
								return null();
							}
						};
						HX_STACK_LINE(1520)
						::zpp_nape::dynamics::ZPP_Contact o = _Function_5_1::Block(arb);		HX_STACK_VAR(o,"o");
						HX_STACK_LINE(1520)
						{
						}
						HX_STACK_LINE(1520)
						o->arbiter = null();
						HX_STACK_LINE(1520)
						o->next = ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool;
						HX_STACK_LINE(1520)
						::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool = o;
					}
					HX_STACK_LINE(1520)
					{
						HX_STACK_LINE(1520)
						::zpp_nape::dynamics::ZPP_IContact _this = arb->innards;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(1520)
						{
						}
						HX_STACK_LINE(1520)
						::zpp_nape::dynamics::ZPP_IContact ret = _this->next;		HX_STACK_VAR(ret,"ret");
						HX_STACK_LINE(1520)
						_this->next = ret->next;
						HX_STACK_LINE(1520)
						ret->_inuse = false;
						HX_STACK_LINE(1520)
						{
						}
						HX_STACK_LINE(1520)
						if (((_this->next == null()))){
							HX_STACK_LINE(1520)
							_this->pushmod = true;
						}
						HX_STACK_LINE(1520)
						_this->modified = true;
						HX_STACK_LINE(1520)
						(_this->length)--;
					}
				}
				HX_STACK_LINE(1520)
				{
					HX_STACK_LINE(1520)
					::zpp_nape::dynamics::ZPP_ColArbiter o = arb;		HX_STACK_VAR(o,"o");
					HX_STACK_LINE(1520)
					{
					}
					HX_STACK_LINE(1520)
					{
						HX_STACK_LINE(1520)
						{
						}
						HX_STACK_LINE(1520)
						{
						}
						HX_STACK_LINE(1520)
						o->userdef_dyn_fric = false;
						HX_STACK_LINE(1520)
						o->userdef_stat_fric = false;
						HX_STACK_LINE(1520)
						o->userdef_restitution = false;
						HX_STACK_LINE(1520)
						o->userdef_rfric = false;
						HX_STACK_LINE(1520)
						o->__ref_edge1 = o->__ref_edge2 = null();
					}
					HX_STACK_LINE(1520)
					o->next = ::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool;
					HX_STACK_LINE(1520)
					::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool = o;
				}
				HX_STACK_LINE(1520)
				arb->pre_dt = -1.0;
			}
		}
		HX_STACK_LINE(1523)
		while((!(((this->s_arbiters->head == null()))))){
			HX_STACK_LINE(1525)
			::zpp_nape::dynamics::ZPP_SensorArbiter arb = this->s_arbiters->pop_unsafe();		HX_STACK_VAR(arb,"arb");
			HX_STACK_LINE(1526)
			{
				HX_STACK_LINE(1526)
				{
					HX_STACK_LINE(1526)
					{
					}
					HX_STACK_LINE(1526)
					{
					}
					HX_STACK_LINE(1526)
					{
					}
					HX_STACK_LINE(1526)
					{
					}
					HX_STACK_LINE(1526)
					if ((!(arb->cleared))){
						HX_STACK_LINE(1526)
						{
							HX_STACK_LINE(1526)
							::zpp_nape::util::ZNPList_ZPP_Arbiter _this = arb->b1->arbiters;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1526)
							{
							}
							HX_STACK_LINE(1526)
							{
								HX_STACK_LINE(1526)
								{
								}
								HX_STACK_LINE(1526)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
								HX_STACK_LINE(1526)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;		HX_STACK_VAR(cur,"cur");
								HX_STACK_LINE(1526)
								bool ret = false;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(1526)
								while(((cur != null()))){
									HX_STACK_LINE(1526)
									if (((cur->elt == arb))){
										HX_STACK_LINE(1526)
										{
											HX_STACK_LINE(1526)
											{
											}
											HX_STACK_LINE(1526)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
											HX_STACK_LINE(1526)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(1526)
											if (((pre == null()))){
												HX_STACK_LINE(1526)
												old = _this->head;
												HX_STACK_LINE(1526)
												ret1 = old->next;
												HX_STACK_LINE(1526)
												_this->head = ret1;
												HX_STACK_LINE(1526)
												if (((_this->head == null()))){
													HX_STACK_LINE(1526)
													_this->pushmod = true;
												}
											}
											else{
												HX_STACK_LINE(1526)
												old = pre->next;
												HX_STACK_LINE(1526)
												ret1 = old->next;
												HX_STACK_LINE(1526)
												pre->next = ret1;
												HX_STACK_LINE(1526)
												if (((ret1 == null()))){
													HX_STACK_LINE(1526)
													_this->pushmod = true;
												}
											}
											HX_STACK_LINE(1526)
											{
											}
											HX_STACK_LINE(1526)
											{
												HX_STACK_LINE(1526)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
												HX_STACK_LINE(1526)
												{
												}
												HX_STACK_LINE(1526)
												o->elt = null();
												HX_STACK_LINE(1526)
												o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
												HX_STACK_LINE(1526)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
											}
											HX_STACK_LINE(1526)
											_this->modified = true;
											HX_STACK_LINE(1526)
											(_this->length)--;
											HX_STACK_LINE(1526)
											_this->pushmod = true;
											HX_STACK_LINE(1526)
											ret1;
										}
										HX_STACK_LINE(1526)
										ret = true;
										HX_STACK_LINE(1526)
										break;
									}
									HX_STACK_LINE(1526)
									pre = cur;
									HX_STACK_LINE(1526)
									cur = cur->next;
								}
								HX_STACK_LINE(1526)
								ret;
							}
						}
						HX_STACK_LINE(1526)
						{
							HX_STACK_LINE(1526)
							::zpp_nape::util::ZNPList_ZPP_Arbiter _this = arb->b2->arbiters;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1526)
							{
							}
							HX_STACK_LINE(1526)
							{
								HX_STACK_LINE(1526)
								{
								}
								HX_STACK_LINE(1526)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
								HX_STACK_LINE(1526)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;		HX_STACK_VAR(cur,"cur");
								HX_STACK_LINE(1526)
								bool ret = false;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(1526)
								while(((cur != null()))){
									HX_STACK_LINE(1526)
									if (((cur->elt == arb))){
										HX_STACK_LINE(1526)
										{
											HX_STACK_LINE(1526)
											{
											}
											HX_STACK_LINE(1526)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
											HX_STACK_LINE(1526)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(1526)
											if (((pre == null()))){
												HX_STACK_LINE(1526)
												old = _this->head;
												HX_STACK_LINE(1526)
												ret1 = old->next;
												HX_STACK_LINE(1526)
												_this->head = ret1;
												HX_STACK_LINE(1526)
												if (((_this->head == null()))){
													HX_STACK_LINE(1526)
													_this->pushmod = true;
												}
											}
											else{
												HX_STACK_LINE(1526)
												old = pre->next;
												HX_STACK_LINE(1526)
												ret1 = old->next;
												HX_STACK_LINE(1526)
												pre->next = ret1;
												HX_STACK_LINE(1526)
												if (((ret1 == null()))){
													HX_STACK_LINE(1526)
													_this->pushmod = true;
												}
											}
											HX_STACK_LINE(1526)
											{
											}
											HX_STACK_LINE(1526)
											{
												HX_STACK_LINE(1526)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
												HX_STACK_LINE(1526)
												{
												}
												HX_STACK_LINE(1526)
												o->elt = null();
												HX_STACK_LINE(1526)
												o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
												HX_STACK_LINE(1526)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
											}
											HX_STACK_LINE(1526)
											_this->modified = true;
											HX_STACK_LINE(1526)
											(_this->length)--;
											HX_STACK_LINE(1526)
											_this->pushmod = true;
											HX_STACK_LINE(1526)
											ret1;
										}
										HX_STACK_LINE(1526)
										ret = true;
										HX_STACK_LINE(1526)
										break;
									}
									HX_STACK_LINE(1526)
									pre = cur;
									HX_STACK_LINE(1526)
									cur = cur->next;
								}
								HX_STACK_LINE(1526)
								ret;
							}
						}
						HX_STACK_LINE(1526)
						if (((arb->pair != null()))){
							HX_STACK_LINE(1526)
							arb->pair->arb = null();
							HX_STACK_LINE(1526)
							arb->pair = null();
						}
					}
					HX_STACK_LINE(1526)
					arb->b1 = arb->b2 = null();
					HX_STACK_LINE(1526)
					arb->active = false;
					HX_STACK_LINE(1526)
					arb->intchange = false;
				}
				HX_STACK_LINE(1526)
				{
					HX_STACK_LINE(1526)
					::zpp_nape::dynamics::ZPP_SensorArbiter o = arb;		HX_STACK_VAR(o,"o");
					HX_STACK_LINE(1526)
					{
					}
					HX_STACK_LINE(1526)
					o->next = ::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool;
					HX_STACK_LINE(1526)
					::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool = o;
				}
			}
		}
		HX_STACK_LINE(1529)
		while((!(((this->f_arbiters->head == null()))))){
			HX_STACK_LINE(1531)
			::zpp_nape::dynamics::ZPP_FluidArbiter arb = this->f_arbiters->pop_unsafe();		HX_STACK_VAR(arb,"arb");
			HX_STACK_LINE(1532)
			{
				HX_STACK_LINE(1532)
				{
					HX_STACK_LINE(1532)
					{
					}
					HX_STACK_LINE(1532)
					{
					}
					HX_STACK_LINE(1532)
					{
					}
					HX_STACK_LINE(1532)
					{
					}
					HX_STACK_LINE(1532)
					if ((!(arb->cleared))){
						HX_STACK_LINE(1532)
						{
							HX_STACK_LINE(1532)
							::zpp_nape::util::ZNPList_ZPP_Arbiter _this = arb->b1->arbiters;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1532)
							{
							}
							HX_STACK_LINE(1532)
							{
								HX_STACK_LINE(1532)
								{
								}
								HX_STACK_LINE(1532)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
								HX_STACK_LINE(1532)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;		HX_STACK_VAR(cur,"cur");
								HX_STACK_LINE(1532)
								bool ret = false;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(1532)
								while(((cur != null()))){
									HX_STACK_LINE(1532)
									if (((cur->elt == arb))){
										HX_STACK_LINE(1532)
										{
											HX_STACK_LINE(1532)
											{
											}
											HX_STACK_LINE(1532)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
											HX_STACK_LINE(1532)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(1532)
											if (((pre == null()))){
												HX_STACK_LINE(1532)
												old = _this->head;
												HX_STACK_LINE(1532)
												ret1 = old->next;
												HX_STACK_LINE(1532)
												_this->head = ret1;
												HX_STACK_LINE(1532)
												if (((_this->head == null()))){
													HX_STACK_LINE(1532)
													_this->pushmod = true;
												}
											}
											else{
												HX_STACK_LINE(1532)
												old = pre->next;
												HX_STACK_LINE(1532)
												ret1 = old->next;
												HX_STACK_LINE(1532)
												pre->next = ret1;
												HX_STACK_LINE(1532)
												if (((ret1 == null()))){
													HX_STACK_LINE(1532)
													_this->pushmod = true;
												}
											}
											HX_STACK_LINE(1532)
											{
											}
											HX_STACK_LINE(1532)
											{
												HX_STACK_LINE(1532)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
												HX_STACK_LINE(1532)
												{
												}
												HX_STACK_LINE(1532)
												o->elt = null();
												HX_STACK_LINE(1532)
												o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
												HX_STACK_LINE(1532)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
											}
											HX_STACK_LINE(1532)
											_this->modified = true;
											HX_STACK_LINE(1532)
											(_this->length)--;
											HX_STACK_LINE(1532)
											_this->pushmod = true;
											HX_STACK_LINE(1532)
											ret1;
										}
										HX_STACK_LINE(1532)
										ret = true;
										HX_STACK_LINE(1532)
										break;
									}
									HX_STACK_LINE(1532)
									pre = cur;
									HX_STACK_LINE(1532)
									cur = cur->next;
								}
								HX_STACK_LINE(1532)
								ret;
							}
						}
						HX_STACK_LINE(1532)
						{
							HX_STACK_LINE(1532)
							::zpp_nape::util::ZNPList_ZPP_Arbiter _this = arb->b2->arbiters;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1532)
							{
							}
							HX_STACK_LINE(1532)
							{
								HX_STACK_LINE(1532)
								{
								}
								HX_STACK_LINE(1532)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
								HX_STACK_LINE(1532)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;		HX_STACK_VAR(cur,"cur");
								HX_STACK_LINE(1532)
								bool ret = false;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(1532)
								while(((cur != null()))){
									HX_STACK_LINE(1532)
									if (((cur->elt == arb))){
										HX_STACK_LINE(1532)
										{
											HX_STACK_LINE(1532)
											{
											}
											HX_STACK_LINE(1532)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
											HX_STACK_LINE(1532)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(1532)
											if (((pre == null()))){
												HX_STACK_LINE(1532)
												old = _this->head;
												HX_STACK_LINE(1532)
												ret1 = old->next;
												HX_STACK_LINE(1532)
												_this->head = ret1;
												HX_STACK_LINE(1532)
												if (((_this->head == null()))){
													HX_STACK_LINE(1532)
													_this->pushmod = true;
												}
											}
											else{
												HX_STACK_LINE(1532)
												old = pre->next;
												HX_STACK_LINE(1532)
												ret1 = old->next;
												HX_STACK_LINE(1532)
												pre->next = ret1;
												HX_STACK_LINE(1532)
												if (((ret1 == null()))){
													HX_STACK_LINE(1532)
													_this->pushmod = true;
												}
											}
											HX_STACK_LINE(1532)
											{
											}
											HX_STACK_LINE(1532)
											{
												HX_STACK_LINE(1532)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
												HX_STACK_LINE(1532)
												{
												}
												HX_STACK_LINE(1532)
												o->elt = null();
												HX_STACK_LINE(1532)
												o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
												HX_STACK_LINE(1532)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
											}
											HX_STACK_LINE(1532)
											_this->modified = true;
											HX_STACK_LINE(1532)
											(_this->length)--;
											HX_STACK_LINE(1532)
											_this->pushmod = true;
											HX_STACK_LINE(1532)
											ret1;
										}
										HX_STACK_LINE(1532)
										ret = true;
										HX_STACK_LINE(1532)
										break;
									}
									HX_STACK_LINE(1532)
									pre = cur;
									HX_STACK_LINE(1532)
									cur = cur->next;
								}
								HX_STACK_LINE(1532)
								ret;
							}
						}
						HX_STACK_LINE(1532)
						if (((arb->pair != null()))){
							HX_STACK_LINE(1532)
							arb->pair->arb = null();
							HX_STACK_LINE(1532)
							arb->pair = null();
						}
					}
					HX_STACK_LINE(1532)
					arb->b1 = arb->b2 = null();
					HX_STACK_LINE(1532)
					arb->active = false;
					HX_STACK_LINE(1532)
					arb->intchange = false;
				}
				HX_STACK_LINE(1532)
				{
					HX_STACK_LINE(1532)
					::zpp_nape::dynamics::ZPP_FluidArbiter o = arb;		HX_STACK_VAR(o,"o");
					HX_STACK_LINE(1532)
					{
					}
					HX_STACK_LINE(1532)
					o->next = ::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool;
					HX_STACK_LINE(1532)
					::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool = o;
				}
				HX_STACK_LINE(1532)
				arb->pre_dt = -1.0;
			}
		}
		HX_STACK_LINE(1535)
		this->bphase->clear();
		HX_STACK_LINE(1536)
		while((!(((this->bodies->head == null()))))){
			HX_STACK_LINE(1538)
			::zpp_nape::phys::ZPP_Body b = this->bodies->pop_unsafe();		HX_STACK_VAR(b,"b");
			HX_STACK_LINE(1539)
			{
				HX_STACK_LINE(1540)
				if (((b->component != null()))){
					HX_STACK_LINE(1542)
					::zpp_nape::space::ZPP_Island i = b->component->island;		HX_STACK_VAR(i,"i");
					HX_STACK_LINE(1543)
					if (((i != null()))){
						HX_STACK_LINE(1544)
						while((!(((i->comps->head == null()))))){
							HX_STACK_LINE(1546)
							::zpp_nape::space::ZPP_Component c = i->comps->pop_unsafe();		HX_STACK_VAR(c,"c");
							HX_STACK_LINE(1547)
							{
								HX_STACK_LINE(1547)
								c->sleeping = false;
								HX_STACK_LINE(1547)
								c->island = null();
								HX_STACK_LINE(1547)
								c->parent = c;
								HX_STACK_LINE(1547)
								c->rank = (int)0;
							}
						}
						HX_STACK_LINE(1550)
						{
							HX_STACK_LINE(1551)
							::zpp_nape::space::ZPP_Island o = i;		HX_STACK_VAR(o,"o");
							HX_STACK_LINE(1552)
							{
							}
							HX_STACK_LINE(1561)
							o->next = ::zpp_nape::space::ZPP_Island_obj::zpp_pool;
							HX_STACK_LINE(1562)
							::zpp_nape::space::ZPP_Island_obj::zpp_pool = o;
						}
					}
				}
				HX_STACK_LINE(1570)
				b->removedFromSpace();
				HX_STACK_LINE(1571)
				b->space = null();
			}
		}
		HX_STACK_LINE(1575)
		while((!(((this->constraints->head == null()))))){
			HX_STACK_LINE(1577)
			::zpp_nape::constraint::ZPP_Constraint c = this->constraints->pop_unsafe();		HX_STACK_VAR(c,"c");
			HX_STACK_LINE(1578)
			{
				HX_STACK_LINE(1579)
				if (((c->component != null()))){
					HX_STACK_LINE(1581)
					::zpp_nape::space::ZPP_Island i = c->component->island;		HX_STACK_VAR(i,"i");
					HX_STACK_LINE(1582)
					if (((i != null()))){
						HX_STACK_LINE(1583)
						while((!(((i->comps->head == null()))))){
							HX_STACK_LINE(1585)
							::zpp_nape::space::ZPP_Component c1 = i->comps->pop_unsafe();		HX_STACK_VAR(c1,"c1");
							HX_STACK_LINE(1586)
							{
								HX_STACK_LINE(1586)
								c1->sleeping = false;
								HX_STACK_LINE(1586)
								c1->island = null();
								HX_STACK_LINE(1586)
								c1->parent = c1;
								HX_STACK_LINE(1586)
								c1->rank = (int)0;
							}
						}
						HX_STACK_LINE(1589)
						{
							HX_STACK_LINE(1590)
							::zpp_nape::space::ZPP_Island o = i;		HX_STACK_VAR(o,"o");
							HX_STACK_LINE(1591)
							{
							}
							HX_STACK_LINE(1600)
							o->next = ::zpp_nape::space::ZPP_Island_obj::zpp_pool;
							HX_STACK_LINE(1601)
							::zpp_nape::space::ZPP_Island_obj::zpp_pool = o;
						}
					}
				}
				HX_STACK_LINE(1609)
				c->removedFromSpace();
				HX_STACK_LINE(1610)
				c->space = null();
			}
		}
		HX_STACK_LINE(1614)
		this->kinematics->clear();
		HX_STACK_LINE(1615)
		::zpp_nape::util::ZNPList_ZPP_Compound stack = ::zpp_nape::util::ZNPList_ZPP_Compound_obj::__new();		HX_STACK_VAR(stack,"stack");
		HX_STACK_LINE(1616)
		while((!(((this->compounds->head == null()))))){
			HX_STACK_LINE(1618)
			::zpp_nape::phys::ZPP_Compound c = this->compounds->pop_unsafe();		HX_STACK_VAR(c,"c");
			HX_STACK_LINE(1619)
			stack->add(c);
		}
		HX_STACK_LINE(1622)
		while((!(((stack->head == null()))))){
			HX_STACK_LINE(1623)
			::zpp_nape::phys::ZPP_Compound comp = stack->pop_unsafe();		HX_STACK_VAR(comp,"comp");
			HX_STACK_LINE(1624)
			comp->removedFromSpace();
			HX_STACK_LINE(1625)
			comp->space = null();
			HX_STACK_LINE(1626)
			{
				HX_STACK_LINE(1627)
				::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = comp->bodies->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(1628)
				while(((cx_ite != null()))){
					HX_STACK_LINE(1629)
					::zpp_nape::phys::ZPP_Body b = cx_ite->elt;		HX_STACK_VAR(b,"b");
					HX_STACK_LINE(1630)
					{
						HX_STACK_LINE(1631)
						if (((b->component != null()))){
							HX_STACK_LINE(1633)
							::zpp_nape::space::ZPP_Island i = b->component->island;		HX_STACK_VAR(i,"i");
							HX_STACK_LINE(1634)
							if (((i != null()))){
								HX_STACK_LINE(1635)
								while((!(((i->comps->head == null()))))){
									HX_STACK_LINE(1637)
									::zpp_nape::space::ZPP_Component c = i->comps->pop_unsafe();		HX_STACK_VAR(c,"c");
									HX_STACK_LINE(1638)
									{
										HX_STACK_LINE(1638)
										c->sleeping = false;
										HX_STACK_LINE(1638)
										c->island = null();
										HX_STACK_LINE(1638)
										c->parent = c;
										HX_STACK_LINE(1638)
										c->rank = (int)0;
									}
								}
								HX_STACK_LINE(1641)
								{
									HX_STACK_LINE(1642)
									::zpp_nape::space::ZPP_Island o = i;		HX_STACK_VAR(o,"o");
									HX_STACK_LINE(1643)
									{
									}
									HX_STACK_LINE(1652)
									o->next = ::zpp_nape::space::ZPP_Island_obj::zpp_pool;
									HX_STACK_LINE(1653)
									::zpp_nape::space::ZPP_Island_obj::zpp_pool = o;
								}
							}
						}
						HX_STACK_LINE(1661)
						b->removedFromSpace();
						HX_STACK_LINE(1662)
						b->space = null();
					}
					HX_STACK_LINE(1664)
					cx_ite = cx_ite->next;
				}
			}
			HX_STACK_LINE(1667)
			{
				HX_STACK_LINE(1668)
				::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = comp->constraints->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(1669)
				while(((cx_ite != null()))){
					HX_STACK_LINE(1670)
					::zpp_nape::constraint::ZPP_Constraint c = cx_ite->elt;		HX_STACK_VAR(c,"c");
					HX_STACK_LINE(1671)
					{
						HX_STACK_LINE(1672)
						if (((c->component != null()))){
							HX_STACK_LINE(1674)
							::zpp_nape::space::ZPP_Island i = c->component->island;		HX_STACK_VAR(i,"i");
							HX_STACK_LINE(1675)
							if (((i != null()))){
								HX_STACK_LINE(1676)
								while((!(((i->comps->head == null()))))){
									HX_STACK_LINE(1678)
									::zpp_nape::space::ZPP_Component c1 = i->comps->pop_unsafe();		HX_STACK_VAR(c1,"c1");
									HX_STACK_LINE(1679)
									{
										HX_STACK_LINE(1679)
										c1->sleeping = false;
										HX_STACK_LINE(1679)
										c1->island = null();
										HX_STACK_LINE(1679)
										c1->parent = c1;
										HX_STACK_LINE(1679)
										c1->rank = (int)0;
									}
								}
								HX_STACK_LINE(1682)
								{
									HX_STACK_LINE(1683)
									::zpp_nape::space::ZPP_Island o = i;		HX_STACK_VAR(o,"o");
									HX_STACK_LINE(1684)
									{
									}
									HX_STACK_LINE(1693)
									o->next = ::zpp_nape::space::ZPP_Island_obj::zpp_pool;
									HX_STACK_LINE(1694)
									::zpp_nape::space::ZPP_Island_obj::zpp_pool = o;
								}
							}
						}
						HX_STACK_LINE(1702)
						c->removedFromSpace();
						HX_STACK_LINE(1703)
						c->space = null();
					}
					HX_STACK_LINE(1705)
					cx_ite = cx_ite->next;
				}
			}
			HX_STACK_LINE(1708)
			{
				HX_STACK_LINE(1709)
				::zpp_nape::util::ZNPNode_ZPP_Compound cx_ite = comp->compounds->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(1710)
				while(((cx_ite != null()))){
					HX_STACK_LINE(1711)
					::zpp_nape::phys::ZPP_Compound i = cx_ite->elt;		HX_STACK_VAR(i,"i");
					HX_STACK_LINE(1712)
					stack->add(i);
					HX_STACK_LINE(1713)
					cx_ite = cx_ite->next;
				}
			}
		}
		HX_STACK_LINE(1717)
		{
		}
		HX_STACK_LINE(1725)
		this->staticsleep->clear();
		HX_STACK_LINE(1726)
		this->live->clear();
		HX_STACK_LINE(1727)
		this->live_constraints->clear();
		HX_STACK_LINE(1728)
		this->stamp = (int)0;
		HX_STACK_LINE(1729)
		this->time = 0.0;
		HX_STACK_LINE(1733)
		this->mrca1->clear();
		HX_STACK_LINE(1734)
		this->mrca2->clear();
		HX_STACK_LINE(1735)
		this->prelisteners->clear();
		HX_STACK_LINE(1736)
		this->cbsets->clear();
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Space_obj,clear,(void))

Void ZPP_Space_obj::gravity_validate( ){
{
		HX_STACK_PUSH("ZPP_Space::gravity_validate","zpp_nape/space/Space.hx",1425);
		HX_STACK_THIS(this);
		HX_STACK_LINE(1427)
		this->wrap_gravity->zpp_inner->x = this->gravityx;
		HX_STACK_LINE(1428)
		this->wrap_gravity->zpp_inner->y = this->gravityy;
		HX_STACK_LINE(1429)
		{
		}
		HX_STACK_LINE(1437)
		{
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Space_obj,gravity_validate,(void))

Void ZPP_Space_obj::gravity_invalidate( ::zpp_nape::geom::ZPP_Vec2 x){
{
		HX_STACK_PUSH("ZPP_Space::gravity_invalidate","zpp_nape/space/Space.hx",1316);
		HX_STACK_THIS(this);
		HX_STACK_ARG(x,"x");
		HX_STACK_LINE(1318)
		if ((this->midstep)){
			HX_STACK_LINE(1318)
			hx::Throw (HX_CSTRING("Error: Space::gravity cannot be set during space step"));
		}
		HX_STACK_LINE(1320)
		{
			HX_STACK_LINE(1321)
			this->gravityx = x->x;
			HX_STACK_LINE(1322)
			this->gravityy = x->y;
			HX_STACK_LINE(1323)
			{
			}
			HX_STACK_LINE(1331)
			{
			}
		}
		HX_STACK_LINE(1340)
		::zpp_nape::util::ZNPList_ZPP_Compound stack = ::zpp_nape::util::ZNPList_ZPP_Compound_obj::__new();		HX_STACK_VAR(stack,"stack");
		HX_STACK_LINE(1341)
		{
			HX_STACK_LINE(1342)
			::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = this->bodies->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(1343)
			while(((cx_ite != null()))){
				HX_STACK_LINE(1344)
				::zpp_nape::phys::ZPP_Body x1 = cx_ite->elt;		HX_STACK_VAR(x1,"x1");
				HX_STACK_LINE(1345)
				{
					HX_STACK_LINE(1346)
					::zpp_nape::phys::ZPP_Body o = x1;		HX_STACK_VAR(o,"o");
					HX_STACK_LINE(1347)
					{
					}
					HX_STACK_LINE(1355)
					if ((!(o->world))){
						HX_STACK_LINE(1356)
						{
						}
						HX_STACK_LINE(1364)
						o->component->waket = (this->stamp + ((  ((this->midstep)) ? int((int)0) : int((int)1) )));
						HX_STACK_LINE(1365)
						if ((o->component->sleeping)){
							HX_STACK_LINE(1365)
							this->really_wake(o,false);
						}
					}
				}
				HX_STACK_LINE(1370)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(1373)
		{
			HX_STACK_LINE(1374)
			::zpp_nape::util::ZNPNode_ZPP_Compound cx_ite = this->compounds->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(1375)
			while(((cx_ite != null()))){
				HX_STACK_LINE(1376)
				::zpp_nape::phys::ZPP_Compound i = cx_ite->elt;		HX_STACK_VAR(i,"i");
				HX_STACK_LINE(1377)
				stack->add(i);
				HX_STACK_LINE(1378)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(1381)
		while((!(((stack->head == null()))))){
			HX_STACK_LINE(1382)
			::zpp_nape::phys::ZPP_Compound s = stack->pop_unsafe();		HX_STACK_VAR(s,"s");
			HX_STACK_LINE(1383)
			{
				HX_STACK_LINE(1384)
				::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = s->bodies->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(1385)
				while(((cx_ite != null()))){
					HX_STACK_LINE(1386)
					::zpp_nape::phys::ZPP_Body x1 = cx_ite->elt;		HX_STACK_VAR(x1,"x1");
					HX_STACK_LINE(1387)
					{
						HX_STACK_LINE(1388)
						::zpp_nape::phys::ZPP_Body o = x1;		HX_STACK_VAR(o,"o");
						HX_STACK_LINE(1389)
						{
						}
						HX_STACK_LINE(1397)
						if ((!(o->world))){
							HX_STACK_LINE(1398)
							{
							}
							HX_STACK_LINE(1406)
							o->component->waket = (this->stamp + ((  ((this->midstep)) ? int((int)0) : int((int)1) )));
							HX_STACK_LINE(1407)
							if ((o->component->sleeping)){
								HX_STACK_LINE(1407)
								this->really_wake(o,false);
							}
						}
					}
					HX_STACK_LINE(1412)
					cx_ite = cx_ite->next;
				}
			}
			HX_STACK_LINE(1415)
			{
				HX_STACK_LINE(1416)
				::zpp_nape::util::ZNPNode_ZPP_Compound cx_ite = s->compounds->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(1417)
				while(((cx_ite != null()))){
					HX_STACK_LINE(1418)
					::zpp_nape::phys::ZPP_Compound i = cx_ite->elt;		HX_STACK_VAR(i,"i");
					HX_STACK_LINE(1419)
					stack->add(i);
					HX_STACK_LINE(1420)
					cx_ite = cx_ite->next;
				}
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,gravity_invalidate,(void))

Void ZPP_Space_obj::getgravity( ){
{
		HX_STACK_PUSH("ZPP_Space::getgravity","zpp_nape/space/Space.hx",1310);
		HX_STACK_THIS(this);
		struct _Function_1_1{
			inline static ::nape::geom::Vec2 Block( ::zpp_nape::space::ZPP_Space_obj *__this){
				HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",1311);
				{
					HX_STACK_LINE(1311)
					Float x = __this->gravityx;		HX_STACK_VAR(x,"x");
					Float y = __this->gravityy;		HX_STACK_VAR(y,"y");
					bool weak = false;		HX_STACK_VAR(weak,"weak");
					HX_STACK_LINE(1311)
					if (((bool((x != x)) || bool((y != y))))){
						HX_STACK_LINE(1311)
						hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
					}
					HX_STACK_LINE(1311)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(1311)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(1311)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(1311)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(1311)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(1311)
						ret->zpp_pool = null();
						HX_STACK_LINE(1311)
						ret->zpp_disp = false;
						HX_STACK_LINE(1311)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(1311)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(1311)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( Float &x,Float &y){
								HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",1311);
								{
									HX_STACK_LINE(1311)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(1311)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(1311)
									{
										HX_STACK_LINE(1311)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(1311)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(1311)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(1311)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(1311)
											ret1->next = null();
										}
										HX_STACK_LINE(1311)
										ret1->weak = false;
									}
									HX_STACK_LINE(1311)
									ret1->_immutable = immutable;
									HX_STACK_LINE(1311)
									{
										HX_STACK_LINE(1311)
										ret1->x = x;
										HX_STACK_LINE(1311)
										ret1->y = y;
										HX_STACK_LINE(1311)
										{
										}
										HX_STACK_LINE(1311)
										{
										}
									}
									HX_STACK_LINE(1311)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(1311)
						ret->zpp_inner = _Function_3_1::Block(x,y);
						HX_STACK_LINE(1311)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(1311)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(1311)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(1311)
						{
							HX_STACK_LINE(1311)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1311)
							if ((_this->_immutable)){
								HX_STACK_LINE(1311)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(1311)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(1311)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(1311)
						if (((bool((x != x)) || bool((y != y))))){
							HX_STACK_LINE(1311)
							hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",1311);
								{
									HX_STACK_LINE(1311)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(1311)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(1311)
									{
										HX_STACK_LINE(1311)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(1311)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(1311)
											_this->_validate();
										}
									}
									HX_STACK_LINE(1311)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","zpp_nape/space/Space.hx",1311);
								{
									HX_STACK_LINE(1311)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(1311)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(1311)
									{
										HX_STACK_LINE(1311)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(1311)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(1311)
											_this->_validate();
										}
									}
									HX_STACK_LINE(1311)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(1311)
						if ((!(((bool((_Function_3_1::Block(ret) == x)) && bool((_Function_3_2::Block(ret) == y))))))){
							HX_STACK_LINE(1311)
							{
								HX_STACK_LINE(1311)
								ret->zpp_inner->x = x;
								HX_STACK_LINE(1311)
								ret->zpp_inner->y = y;
								HX_STACK_LINE(1311)
								{
								}
								HX_STACK_LINE(1311)
								{
								}
							}
							HX_STACK_LINE(1311)
							{
								HX_STACK_LINE(1311)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(1311)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(1311)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(1311)
						ret;
					}
					HX_STACK_LINE(1311)
					ret->zpp_inner->weak = weak;
					HX_STACK_LINE(1311)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(1311)
		this->wrap_gravity = _Function_1_1::Block(this);
		HX_STACK_LINE(1312)
		this->wrap_gravity->zpp_inner->_inuse = true;
		HX_STACK_LINE(1313)
		this->wrap_gravity->zpp_inner->_invalidate = this->gravity_invalidate_dyn();
		HX_STACK_LINE(1314)
		this->wrap_gravity->zpp_inner->_validate = this->gravity_validate_dyn();
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Space_obj,getgravity,(void))


ZPP_Space_obj::ZPP_Space_obj()
{
}

void ZPP_Space_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_Space);
	HX_MARK_MEMBER_NAME(mrca2,"mrca2");
	HX_MARK_MEMBER_NAME(mrca1,"mrca1");
	HX_MARK_MEMBER_NAME(prelisteners,"prelisteners");
	HX_MARK_MEMBER_NAME(precb,"precb");
	HX_MARK_MEMBER_NAME(continuous,"continuous");
	HX_MARK_MEMBER_NAME(toiEvents,"toiEvents");
	HX_MARK_MEMBER_NAME(pre_dt,"pre_dt");
	HX_MARK_MEMBER_NAME(convexShapeList,"convexShapeList");
	HX_MARK_MEMBER_NAME(cbsets,"cbsets");
	HX_MARK_MEMBER_NAME(callbackset_list,"callbackset_list");
	HX_MARK_MEMBER_NAME(callbacks,"callbacks");
	HX_MARK_MEMBER_NAME(wrap_listeners,"wrap_listeners");
	HX_MARK_MEMBER_NAME(listeners,"listeners");
	HX_MARK_MEMBER_NAME(islands,"islands");
	HX_MARK_MEMBER_NAME(staticsleep,"staticsleep");
	HX_MARK_MEMBER_NAME(wrap_livecon,"wrap_livecon");
	HX_MARK_MEMBER_NAME(live_constraints,"live_constraints");
	HX_MARK_MEMBER_NAME(wrap_live,"wrap_live");
	HX_MARK_MEMBER_NAME(live,"live");
	HX_MARK_MEMBER_NAME(wrap_arbiters,"wrap_arbiters");
	HX_MARK_MEMBER_NAME(s_arbiters,"s_arbiters");
	HX_MARK_MEMBER_NAME(f_arbiters,"f_arbiters");
	HX_MARK_MEMBER_NAME(c_arbiters_false,"c_arbiters_false");
	HX_MARK_MEMBER_NAME(c_arbiters_true,"c_arbiters_true");
	HX_MARK_MEMBER_NAME(sortcontacts,"sortcontacts");
	HX_MARK_MEMBER_NAME(time,"time");
	HX_MARK_MEMBER_NAME(midstep,"midstep");
	HX_MARK_MEMBER_NAME(stamp,"stamp");
	HX_MARK_MEMBER_NAME(global_ang_drag,"global_ang_drag");
	HX_MARK_MEMBER_NAME(global_lin_drag,"global_lin_drag");
	HX_MARK_MEMBER_NAME(__static,"__static");
	HX_MARK_MEMBER_NAME(bphase,"bphase");
	HX_MARK_MEMBER_NAME(kinematics,"kinematics");
	HX_MARK_MEMBER_NAME(wrap_constraints,"wrap_constraints");
	HX_MARK_MEMBER_NAME(constraints,"constraints");
	HX_MARK_MEMBER_NAME(wrap_compounds,"wrap_compounds");
	HX_MARK_MEMBER_NAME(compounds,"compounds");
	HX_MARK_MEMBER_NAME(wrap_bodies,"wrap_bodies");
	HX_MARK_MEMBER_NAME(bodies,"bodies");
	HX_MARK_MEMBER_NAME(wrap_gravity,"wrap_gravity");
	HX_MARK_MEMBER_NAME(gravityy,"gravityy");
	HX_MARK_MEMBER_NAME(gravityx,"gravityx");
	HX_MARK_MEMBER_NAME(userData,"userData");
	HX_MARK_MEMBER_NAME(outer,"outer");
	HX_MARK_END_CLASS();
}

void ZPP_Space_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(mrca2,"mrca2");
	HX_VISIT_MEMBER_NAME(mrca1,"mrca1");
	HX_VISIT_MEMBER_NAME(prelisteners,"prelisteners");
	HX_VISIT_MEMBER_NAME(precb,"precb");
	HX_VISIT_MEMBER_NAME(continuous,"continuous");
	HX_VISIT_MEMBER_NAME(toiEvents,"toiEvents");
	HX_VISIT_MEMBER_NAME(pre_dt,"pre_dt");
	HX_VISIT_MEMBER_NAME(convexShapeList,"convexShapeList");
	HX_VISIT_MEMBER_NAME(cbsets,"cbsets");
	HX_VISIT_MEMBER_NAME(callbackset_list,"callbackset_list");
	HX_VISIT_MEMBER_NAME(callbacks,"callbacks");
	HX_VISIT_MEMBER_NAME(wrap_listeners,"wrap_listeners");
	HX_VISIT_MEMBER_NAME(listeners,"listeners");
	HX_VISIT_MEMBER_NAME(islands,"islands");
	HX_VISIT_MEMBER_NAME(staticsleep,"staticsleep");
	HX_VISIT_MEMBER_NAME(wrap_livecon,"wrap_livecon");
	HX_VISIT_MEMBER_NAME(live_constraints,"live_constraints");
	HX_VISIT_MEMBER_NAME(wrap_live,"wrap_live");
	HX_VISIT_MEMBER_NAME(live,"live");
	HX_VISIT_MEMBER_NAME(wrap_arbiters,"wrap_arbiters");
	HX_VISIT_MEMBER_NAME(s_arbiters,"s_arbiters");
	HX_VISIT_MEMBER_NAME(f_arbiters,"f_arbiters");
	HX_VISIT_MEMBER_NAME(c_arbiters_false,"c_arbiters_false");
	HX_VISIT_MEMBER_NAME(c_arbiters_true,"c_arbiters_true");
	HX_VISIT_MEMBER_NAME(sortcontacts,"sortcontacts");
	HX_VISIT_MEMBER_NAME(time,"time");
	HX_VISIT_MEMBER_NAME(midstep,"midstep");
	HX_VISIT_MEMBER_NAME(stamp,"stamp");
	HX_VISIT_MEMBER_NAME(global_ang_drag,"global_ang_drag");
	HX_VISIT_MEMBER_NAME(global_lin_drag,"global_lin_drag");
	HX_VISIT_MEMBER_NAME(__static,"__static");
	HX_VISIT_MEMBER_NAME(bphase,"bphase");
	HX_VISIT_MEMBER_NAME(kinematics,"kinematics");
	HX_VISIT_MEMBER_NAME(wrap_constraints,"wrap_constraints");
	HX_VISIT_MEMBER_NAME(constraints,"constraints");
	HX_VISIT_MEMBER_NAME(wrap_compounds,"wrap_compounds");
	HX_VISIT_MEMBER_NAME(compounds,"compounds");
	HX_VISIT_MEMBER_NAME(wrap_bodies,"wrap_bodies");
	HX_VISIT_MEMBER_NAME(bodies,"bodies");
	HX_VISIT_MEMBER_NAME(wrap_gravity,"wrap_gravity");
	HX_VISIT_MEMBER_NAME(gravityy,"gravityy");
	HX_VISIT_MEMBER_NAME(gravityx,"gravityx");
	HX_VISIT_MEMBER_NAME(userData,"userData");
	HX_VISIT_MEMBER_NAME(outer,"outer");
}

Dynamic ZPP_Space_obj::__Field(const ::String &inName,bool inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"step") ) { return step_dyn(); }
		if (HX_FIELD_EQ(inName,"live") ) { return live; }
		if (HX_FIELD_EQ(inName,"time") ) { return time; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"mrca2") ) { return mrca2; }
		if (HX_FIELD_EQ(inName,"mrca1") ) { return mrca1; }
		if (HX_FIELD_EQ(inName,"precb") ) { return precb; }
		if (HX_FIELD_EQ(inName,"clear") ) { return clear_dyn(); }
		if (HX_FIELD_EQ(inName,"stamp") ) { return stamp; }
		if (HX_FIELD_EQ(inName,"outer") ) { return outer; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"pre_dt") ) { return pre_dt; }
		if (HX_FIELD_EQ(inName,"cbsets") ) { return cbsets; }
		if (HX_FIELD_EQ(inName,"bphase") ) { return bphase; }
		if (HX_FIELD_EQ(inName,"bodies") ) { return bodies; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"prestep") ) { return prestep_dyn(); }
		if (HX_FIELD_EQ(inName,"rayCast") ) { return rayCast_dyn(); }
		if (HX_FIELD_EQ(inName,"remBody") ) { return remBody_dyn(); }
		if (HX_FIELD_EQ(inName,"addBody") ) { return addBody_dyn(); }
		if (HX_FIELD_EQ(inName,"islands") ) { return islands; }
		if (HX_FIELD_EQ(inName,"midstep") ) { return midstep; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__static") ) { return __static; }
		if (HX_FIELD_EQ(inName,"gravityy") ) { return gravityy; }
		if (HX_FIELD_EQ(inName,"gravityx") ) { return gravityx; }
		if (HX_FIELD_EQ(inName,"userData") ) { return userData; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"warmStart") ) { return warmStart_dyn(); }
		if (HX_FIELD_EQ(inName,"updatePos") ) { return updatePos_dyn(); }
		if (HX_FIELD_EQ(inName,"updateVel") ) { return updateVel_dyn(); }
		if (HX_FIELD_EQ(inName,"doForests") ) { return doForests_dyn(); }
		if (HX_FIELD_EQ(inName,"toiEvents") ) { return toiEvents; }
		if (HX_FIELD_EQ(inName,"callbacks") ) { return callbacks; }
		if (HX_FIELD_EQ(inName,"listeners") ) { return listeners; }
		if (HX_FIELD_EQ(inName,"wrap_live") ) { return wrap_live; }
		if (HX_FIELD_EQ(inName,"compounds") ) { return compounds; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"iteratePos") ) { return iteratePos_dyn(); }
		if (HX_FIELD_EQ(inName,"iterateVel") ) { return iterateVel_dyn(); }
		if (HX_FIELD_EQ(inName,"presteparb") ) { return presteparb_dyn(); }
		if (HX_FIELD_EQ(inName,"continuous") ) { return continuous; }
		if (HX_FIELD_EQ(inName,"validation") ) { return validation_dyn(); }
		if (HX_FIELD_EQ(inName,"wakeIsland") ) { return wakeIsland_dyn(); }
		if (HX_FIELD_EQ(inName,"bodyCbWake") ) { return bodyCbWake_dyn(); }
		if (HX_FIELD_EQ(inName,"convexCast") ) { return convexCast_dyn(); }
		if (HX_FIELD_EQ(inName,"s_arbiters") ) { return s_arbiters; }
		if (HX_FIELD_EQ(inName,"f_arbiters") ) { return f_arbiters; }
		if (HX_FIELD_EQ(inName,"kinematics") ) { return kinematics; }
		if (HX_FIELD_EQ(inName,"getgravity") ) { return getgravity_dyn(); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"MRCA_chains") ) { return MRCA_chains_dyn(); }
		if (HX_FIELD_EQ(inName,"narrowPhase") ) { return narrowPhase_dyn(); }
		if (HX_FIELD_EQ(inName,"really_wake") ) { return really_wake_dyn(); }
		if (HX_FIELD_EQ(inName,"bodyCbSleep") ) { return bodyCbSleep_dyn(); }
		if (HX_FIELD_EQ(inName,"prepareCast") ) { return prepareCast_dyn(); }
		if (HX_FIELD_EQ(inName,"remCompound") ) { return remCompound_dyn(); }
		if (HX_FIELD_EQ(inName,"addCompound") ) { return addCompound_dyn(); }
		if (HX_FIELD_EQ(inName,"added_shape") ) { return added_shape_dyn(); }
		if (HX_FIELD_EQ(inName,"remListener") ) { return remListener_dyn(); }
		if (HX_FIELD_EQ(inName,"addListener") ) { return addListener_dyn(); }
		if (HX_FIELD_EQ(inName,"staticsleep") ) { return staticsleep; }
		if (HX_FIELD_EQ(inName,"constraints") ) { return constraints; }
		if (HX_FIELD_EQ(inName,"wrap_bodies") ) { return wrap_bodies; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"prelisteners") ) { return prelisteners; }
		if (HX_FIELD_EQ(inName,"group_ignore") ) { return group_ignore_dyn(); }
		if (HX_FIELD_EQ(inName,"wakeCompound") ) { return wakeCompound_dyn(); }
		if (HX_FIELD_EQ(inName,"rayMultiCast") ) { return rayMultiCast_dyn(); }
		if (HX_FIELD_EQ(inName,"bodiesInAABB") ) { return bodiesInAABB_dyn(); }
		if (HX_FIELD_EQ(inName,"shapesInAABB") ) { return shapesInAABB_dyn(); }
		if (HX_FIELD_EQ(inName,"transmitType") ) { return transmitType_dyn(); }
		if (HX_FIELD_EQ(inName,"bodies_adder") ) { return bodies_adder_dyn(); }
		if (HX_FIELD_EQ(inName,"wrap_livecon") ) { return wrap_livecon; }
		if (HX_FIELD_EQ(inName,"sortcontacts") ) { return sortcontacts; }
		if (HX_FIELD_EQ(inName,"wrap_gravity") ) { return wrap_gravity; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"sleepArbiters") ) { return sleepArbiters_dyn(); }
		if (HX_FIELD_EQ(inName,"push_callback") ) { return push_callback_dyn(); }
		if (HX_FIELD_EQ(inName,"bodiesInShape") ) { return bodiesInShape_dyn(); }
		if (HX_FIELD_EQ(inName,"shapesInShape") ) { return shapesInShape_dyn(); }
		if (HX_FIELD_EQ(inName,"remConstraint") ) { return remConstraint_dyn(); }
		if (HX_FIELD_EQ(inName,"addConstraint") ) { return addConstraint_dyn(); }
		if (HX_FIELD_EQ(inName,"removed_shape") ) { return removed_shape_dyn(); }
		if (HX_FIELD_EQ(inName,"bodies_subber") ) { return bodies_subber_dyn(); }
		if (HX_FIELD_EQ(inName,"wrap_arbiters") ) { return wrap_arbiters; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"bodiesInCircle") ) { return bodiesInCircle_dyn(); }
		if (HX_FIELD_EQ(inName,"shapesInCircle") ) { return shapesInCircle_dyn(); }
		if (HX_FIELD_EQ(inName,"wrap_listeners") ) { return wrap_listeners; }
		if (HX_FIELD_EQ(inName,"wrap_compounds") ) { return wrap_compounds; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"interactionType") ) { return interactionType_dyn(); }
		if (HX_FIELD_EQ(inName,"wake_constraint") ) { return wake_constraint_dyn(); }
		if (HX_FIELD_EQ(inName,"continuousEvent") ) { return continuousEvent_dyn(); }
		if (HX_FIELD_EQ(inName,"convexMultiCast") ) { return convexMultiCast_dyn(); }
		if (HX_FIELD_EQ(inName,"convexShapeList") ) { return convexShapeList; }
		if (HX_FIELD_EQ(inName,"add_callbackset") ) { return add_callbackset_dyn(); }
		if (HX_FIELD_EQ(inName,"revoke_listener") ) { return revoke_listener_dyn(); }
		if (HX_FIELD_EQ(inName,"listeners_adder") ) { return listeners_adder_dyn(); }
		if (HX_FIELD_EQ(inName,"compounds_adder") ) { return compounds_adder_dyn(); }
		if (HX_FIELD_EQ(inName,"c_arbiters_true") ) { return c_arbiters_true; }
		if (HX_FIELD_EQ(inName,"global_ang_drag") ) { return global_ang_drag; }
		if (HX_FIELD_EQ(inName,"global_lin_drag") ) { return global_lin_drag; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"non_inlined_wake") ) { return non_inlined_wake_dyn(); }
		if (HX_FIELD_EQ(inName,"nullListenerType") ) { return nullListenerType_dyn(); }
		if (HX_FIELD_EQ(inName,"constraintCbWake") ) { return constraintCbWake_dyn(); }
		if (HX_FIELD_EQ(inName,"bodiesUnderPoint") ) { return bodiesUnderPoint_dyn(); }
		if (HX_FIELD_EQ(inName,"shapesUnderPoint") ) { return shapesUnderPoint_dyn(); }
		if (HX_FIELD_EQ(inName,"listeners_subber") ) { return listeners_subber_dyn(); }
		if (HX_FIELD_EQ(inName,"compounds_subber") ) { return compounds_subber_dyn(); }
		if (HX_FIELD_EQ(inName,"callbackset_list") ) { return callbackset_list; }
		if (HX_FIELD_EQ(inName,"live_constraints") ) { return live_constraints; }
		if (HX_FIELD_EQ(inName,"c_arbiters_false") ) { return c_arbiters_false; }
		if (HX_FIELD_EQ(inName,"wrap_constraints") ) { return wrap_constraints; }
		if (HX_FIELD_EQ(inName,"gravity_validate") ) { return gravity_validate_dyn(); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"static_validation") ) { return static_validation_dyn(); }
		if (HX_FIELD_EQ(inName,"freshListenerType") ) { return freshListenerType_dyn(); }
		if (HX_FIELD_EQ(inName,"constraintCbBreak") ) { return constraintCbBreak_dyn(); }
		if (HX_FIELD_EQ(inName,"constraintCbSleep") ) { return constraintCbSleep_dyn(); }
		if (HX_FIELD_EQ(inName,"unrevoke_listener") ) { return unrevoke_listener_dyn(); }
		if (HX_FIELD_EQ(inName,"constraints_adder") ) { return constraints_adder_dyn(); }
		if (HX_FIELD_EQ(inName,"bodies_modifiable") ) { return bodies_modifiable_dyn(); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"nullInteractorType") ) { return nullInteractorType_dyn(); }
		if (HX_FIELD_EQ(inName,"remove_callbackset") ) { return remove_callbackset_dyn(); }
		if (HX_FIELD_EQ(inName,"constraints_subber") ) { return constraints_subber_dyn(); }
		if (HX_FIELD_EQ(inName,"gravity_invalidate") ) { return gravity_invalidate_dyn(); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"inlined_MRCA_chains") ) { return inlined_MRCA_chains_dyn(); }
		if (HX_FIELD_EQ(inName,"freshInteractorType") ) { return freshInteractorType_dyn(); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"continuousCollisions") ) { return continuousCollisions_dyn(); }
		if (HX_FIELD_EQ(inName,"listeners_modifiable") ) { return listeners_modifiable_dyn(); }
		if (HX_FIELD_EQ(inName,"compounds_modifiable") ) { return compounds_modifiable_dyn(); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"constraints_modifiable") ) { return constraints_modifiable_dyn(); }
	}
	return super::__Field(inName,inCallProp);
}

Dynamic ZPP_Space_obj::__SetField(const ::String &inName,const Dynamic &inValue,bool inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"live") ) { live=inValue.Cast< ::zpp_nape::util::ZNPList_ZPP_Body >(); return inValue; }
		if (HX_FIELD_EQ(inName,"time") ) { time=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"mrca2") ) { mrca2=inValue.Cast< ::zpp_nape::util::ZNPList_ZPP_Interactor >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mrca1") ) { mrca1=inValue.Cast< ::zpp_nape::util::ZNPList_ZPP_Interactor >(); return inValue; }
		if (HX_FIELD_EQ(inName,"precb") ) { precb=inValue.Cast< ::nape::callbacks::PreCallback >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stamp") ) { stamp=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"outer") ) { outer=inValue.Cast< ::nape::space::Space >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"pre_dt") ) { pre_dt=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cbsets") ) { cbsets=inValue.Cast< ::zpp_nape::space::ZPP_CbSetManager >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bphase") ) { bphase=inValue.Cast< ::zpp_nape::space::ZPP_Broadphase >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bodies") ) { bodies=inValue.Cast< ::zpp_nape::util::ZNPList_ZPP_Body >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"islands") ) { islands=inValue.Cast< ::zpp_nape::space::ZPP_Island >(); return inValue; }
		if (HX_FIELD_EQ(inName,"midstep") ) { midstep=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__static") ) { __static=inValue.Cast< ::nape::phys::Body >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gravityy") ) { gravityy=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gravityx") ) { gravityx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"userData") ) { userData=inValue.Cast< Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"toiEvents") ) { toiEvents=inValue.Cast< ::zpp_nape::util::ZNPList_ZPP_ToiEvent >(); return inValue; }
		if (HX_FIELD_EQ(inName,"callbacks") ) { callbacks=inValue.Cast< ::zpp_nape::callbacks::ZPP_Callback >(); return inValue; }
		if (HX_FIELD_EQ(inName,"listeners") ) { listeners=inValue.Cast< ::zpp_nape::util::ZNPList_ZPP_Listener >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wrap_live") ) { wrap_live=inValue.Cast< ::nape::phys::BodyList >(); return inValue; }
		if (HX_FIELD_EQ(inName,"compounds") ) { compounds=inValue.Cast< ::zpp_nape::util::ZNPList_ZPP_Compound >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"continuous") ) { continuous=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"s_arbiters") ) { s_arbiters=inValue.Cast< ::zpp_nape::util::ZNPList_ZPP_SensorArbiter >(); return inValue; }
		if (HX_FIELD_EQ(inName,"f_arbiters") ) { f_arbiters=inValue.Cast< ::zpp_nape::util::ZNPList_ZPP_FluidArbiter >(); return inValue; }
		if (HX_FIELD_EQ(inName,"kinematics") ) { kinematics=inValue.Cast< ::zpp_nape::util::ZNPList_ZPP_Body >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"staticsleep") ) { staticsleep=inValue.Cast< ::zpp_nape::util::ZNPList_ZPP_Body >(); return inValue; }
		if (HX_FIELD_EQ(inName,"constraints") ) { constraints=inValue.Cast< ::zpp_nape::util::ZNPList_ZPP_Constraint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wrap_bodies") ) { wrap_bodies=inValue.Cast< ::nape::phys::BodyList >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"prelisteners") ) { prelisteners=inValue.Cast< ::zpp_nape::util::ZNPList_ZPP_InteractionListener >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wrap_livecon") ) { wrap_livecon=inValue.Cast< ::nape::constraint::ConstraintList >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sortcontacts") ) { sortcontacts=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wrap_gravity") ) { wrap_gravity=inValue.Cast< ::nape::geom::Vec2 >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"wrap_arbiters") ) { wrap_arbiters=inValue.Cast< ::nape::dynamics::ArbiterList >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"wrap_listeners") ) { wrap_listeners=inValue.Cast< ::nape::callbacks::ListenerList >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wrap_compounds") ) { wrap_compounds=inValue.Cast< ::nape::phys::CompoundList >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"convexShapeList") ) { convexShapeList=inValue.Cast< ::nape::shape::ShapeList >(); return inValue; }
		if (HX_FIELD_EQ(inName,"c_arbiters_true") ) { c_arbiters_true=inValue.Cast< ::zpp_nape::util::ZNPList_ZPP_ColArbiter >(); return inValue; }
		if (HX_FIELD_EQ(inName,"global_ang_drag") ) { global_ang_drag=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"global_lin_drag") ) { global_lin_drag=inValue.Cast< Float >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"callbackset_list") ) { callbackset_list=inValue.Cast< ::zpp_nape::space::ZPP_CallbackSet >(); return inValue; }
		if (HX_FIELD_EQ(inName,"live_constraints") ) { live_constraints=inValue.Cast< ::zpp_nape::util::ZNPList_ZPP_Constraint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"c_arbiters_false") ) { c_arbiters_false=inValue.Cast< ::zpp_nape::util::ZNPList_ZPP_ColArbiter >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wrap_constraints") ) { wrap_constraints=inValue.Cast< ::nape::constraint::ConstraintList >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZPP_Space_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_CSTRING("mrca2"));
	outFields->push(HX_CSTRING("mrca1"));
	outFields->push(HX_CSTRING("prelisteners"));
	outFields->push(HX_CSTRING("precb"));
	outFields->push(HX_CSTRING("continuous"));
	outFields->push(HX_CSTRING("toiEvents"));
	outFields->push(HX_CSTRING("pre_dt"));
	outFields->push(HX_CSTRING("convexShapeList"));
	outFields->push(HX_CSTRING("cbsets"));
	outFields->push(HX_CSTRING("callbackset_list"));
	outFields->push(HX_CSTRING("callbacks"));
	outFields->push(HX_CSTRING("wrap_listeners"));
	outFields->push(HX_CSTRING("listeners"));
	outFields->push(HX_CSTRING("islands"));
	outFields->push(HX_CSTRING("staticsleep"));
	outFields->push(HX_CSTRING("wrap_livecon"));
	outFields->push(HX_CSTRING("live_constraints"));
	outFields->push(HX_CSTRING("wrap_live"));
	outFields->push(HX_CSTRING("live"));
	outFields->push(HX_CSTRING("wrap_arbiters"));
	outFields->push(HX_CSTRING("s_arbiters"));
	outFields->push(HX_CSTRING("f_arbiters"));
	outFields->push(HX_CSTRING("c_arbiters_false"));
	outFields->push(HX_CSTRING("c_arbiters_true"));
	outFields->push(HX_CSTRING("sortcontacts"));
	outFields->push(HX_CSTRING("time"));
	outFields->push(HX_CSTRING("midstep"));
	outFields->push(HX_CSTRING("stamp"));
	outFields->push(HX_CSTRING("global_ang_drag"));
	outFields->push(HX_CSTRING("global_lin_drag"));
	outFields->push(HX_CSTRING("__static"));
	outFields->push(HX_CSTRING("bphase"));
	outFields->push(HX_CSTRING("kinematics"));
	outFields->push(HX_CSTRING("wrap_constraints"));
	outFields->push(HX_CSTRING("constraints"));
	outFields->push(HX_CSTRING("wrap_compounds"));
	outFields->push(HX_CSTRING("compounds"));
	outFields->push(HX_CSTRING("wrap_bodies"));
	outFields->push(HX_CSTRING("bodies"));
	outFields->push(HX_CSTRING("wrap_gravity"));
	outFields->push(HX_CSTRING("gravityy"));
	outFields->push(HX_CSTRING("gravityx"));
	outFields->push(HX_CSTRING("userData"));
	outFields->push(HX_CSTRING("outer"));
	super::__GetFields(outFields);
};

static ::String sStaticFields[] = {
	String(null()) };

static ::String sMemberFields[] = {
	HX_CSTRING("inlined_MRCA_chains"),
	HX_CSTRING("MRCA_chains"),
	HX_CSTRING("mrca2"),
	HX_CSTRING("mrca1"),
	HX_CSTRING("narrowPhase"),
	HX_CSTRING("prelisteners"),
	HX_CSTRING("precb"),
	HX_CSTRING("interactionType"),
	HX_CSTRING("group_ignore"),
	HX_CSTRING("iteratePos"),
	HX_CSTRING("iterateVel"),
	HX_CSTRING("warmStart"),
	HX_CSTRING("prestep"),
	HX_CSTRING("presteparb"),
	HX_CSTRING("continuous"),
	HX_CSTRING("updatePos"),
	HX_CSTRING("updateVel"),
	HX_CSTRING("validation"),
	HX_CSTRING("static_validation"),
	HX_CSTRING("sleepArbiters"),
	HX_CSTRING("doForests"),
	HX_CSTRING("wake_constraint"),
	HX_CSTRING("really_wake"),
	HX_CSTRING("non_inlined_wake"),
	HX_CSTRING("wakeIsland"),
	HX_CSTRING("wakeCompound"),
	HX_CSTRING("freshInteractorType"),
	HX_CSTRING("freshListenerType"),
	HX_CSTRING("nullInteractorType"),
	HX_CSTRING("nullListenerType"),
	HX_CSTRING("constraintCbBreak"),
	HX_CSTRING("constraintCbSleep"),
	HX_CSTRING("constraintCbWake"),
	HX_CSTRING("bodyCbSleep"),
	HX_CSTRING("bodyCbWake"),
	HX_CSTRING("continuousEvent"),
	HX_CSTRING("continuousCollisions"),
	HX_CSTRING("toiEvents"),
	HX_CSTRING("step"),
	HX_CSTRING("pre_dt"),
	HX_CSTRING("push_callback"),
	HX_CSTRING("convexMultiCast"),
	HX_CSTRING("prepareCast"),
	HX_CSTRING("convexCast"),
	HX_CSTRING("convexShapeList"),
	HX_CSTRING("rayMultiCast"),
	HX_CSTRING("rayCast"),
	HX_CSTRING("bodiesInShape"),
	HX_CSTRING("shapesInShape"),
	HX_CSTRING("bodiesInCircle"),
	HX_CSTRING("shapesInCircle"),
	HX_CSTRING("bodiesInAABB"),
	HX_CSTRING("shapesInAABB"),
	HX_CSTRING("bodiesUnderPoint"),
	HX_CSTRING("shapesUnderPoint"),
	HX_CSTRING("remBody"),
	HX_CSTRING("addBody"),
	HX_CSTRING("remCompound"),
	HX_CSTRING("addCompound"),
	HX_CSTRING("remConstraint"),
	HX_CSTRING("addConstraint"),
	HX_CSTRING("removed_shape"),
	HX_CSTRING("added_shape"),
	HX_CSTRING("transmitType"),
	HX_CSTRING("remove_callbackset"),
	HX_CSTRING("add_callbackset"),
	HX_CSTRING("remListener"),
	HX_CSTRING("addListener"),
	HX_CSTRING("unrevoke_listener"),
	HX_CSTRING("revoke_listener"),
	HX_CSTRING("listeners_modifiable"),
	HX_CSTRING("listeners_subber"),
	HX_CSTRING("listeners_adder"),
	HX_CSTRING("constraints_modifiable"),
	HX_CSTRING("constraints_subber"),
	HX_CSTRING("constraints_adder"),
	HX_CSTRING("compounds_modifiable"),
	HX_CSTRING("compounds_subber"),
	HX_CSTRING("compounds_adder"),
	HX_CSTRING("bodies_modifiable"),
	HX_CSTRING("bodies_subber"),
	HX_CSTRING("bodies_adder"),
	HX_CSTRING("clear"),
	HX_CSTRING("cbsets"),
	HX_CSTRING("callbackset_list"),
	HX_CSTRING("callbacks"),
	HX_CSTRING("wrap_listeners"),
	HX_CSTRING("listeners"),
	HX_CSTRING("islands"),
	HX_CSTRING("staticsleep"),
	HX_CSTRING("wrap_livecon"),
	HX_CSTRING("live_constraints"),
	HX_CSTRING("wrap_live"),
	HX_CSTRING("live"),
	HX_CSTRING("wrap_arbiters"),
	HX_CSTRING("s_arbiters"),
	HX_CSTRING("f_arbiters"),
	HX_CSTRING("c_arbiters_false"),
	HX_CSTRING("c_arbiters_true"),
	HX_CSTRING("sortcontacts"),
	HX_CSTRING("time"),
	HX_CSTRING("midstep"),
	HX_CSTRING("stamp"),
	HX_CSTRING("global_ang_drag"),
	HX_CSTRING("global_lin_drag"),
	HX_CSTRING("__static"),
	HX_CSTRING("bphase"),
	HX_CSTRING("kinematics"),
	HX_CSTRING("wrap_constraints"),
	HX_CSTRING("constraints"),
	HX_CSTRING("wrap_compounds"),
	HX_CSTRING("compounds"),
	HX_CSTRING("wrap_bodies"),
	HX_CSTRING("bodies"),
	HX_CSTRING("gravity_validate"),
	HX_CSTRING("gravity_invalidate"),
	HX_CSTRING("getgravity"),
	HX_CSTRING("wrap_gravity"),
	HX_CSTRING("gravityy"),
	HX_CSTRING("gravityx"),
	HX_CSTRING("userData"),
	HX_CSTRING("outer"),
	String(null()) };

static void sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_Space_obj::__mClass,"__mClass");
};

static void sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_Space_obj::__mClass,"__mClass");
};

Class ZPP_Space_obj::__mClass;

void ZPP_Space_obj::__register()
{
	Static(__mClass) = hx::RegisterClass(HX_CSTRING("zpp_nape.space.ZPP_Space"), hx::TCanCast< ZPP_Space_obj> ,sStaticFields,sMemberFields,
	&__CreateEmpty, &__Create,
	&super::__SGetClass(), 0, sMarkStatics, sVisitStatics);
}

void ZPP_Space_obj::__boot()
{
}

} // end namespace zpp_nape
} // end namespace space
